
Lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a38  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e68  08008be8  08008be8  00009be8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa50  0800aa50  0000c250  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa50  0800aa50  0000ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa58  0800aa58  0000c250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa58  0800aa58  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa5c  0800aa5c  0000ba5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  0800aa60  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c250  2**0
                  CONTENTS
 10 .bss          000003c8  20000250  20000250  0000c250  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  0000c250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff5f  00000000  00000000  0000c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f52  00000000  00000000  0001c1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  0001f138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c87  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026864  00000000  00000000  00020e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001484d  00000000  00000000  000476d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e060b  00000000  00000000  0005bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  0013c52b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054d4  00000000  00000000  0013c5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00141a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000250 	.word	0x20000250
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008bd0 	.word	0x08008bd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000254 	.word	0x20000254
 80001ec:	08008bd0 	.word	0x08008bd0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebe:	f001 ff5f 	bl	8002d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec2:	f000 f863 	bl	8000f8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec6:	f000 f8d3 	bl	8001070 <MX_GPIO_Init>
//  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
//  BSP_LCD_DisplayStringAtLine(2, "Cube STM32");
//  BSP_LCD_DisplayStringAtLine(3, "BSP");
//  BSP_LCD_DisplayStringAtLine(4, "LCD DEMO");

  	float data[3] = {0};
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
  	char text[10];
  	BSP_GYRO_Init();
 8000ed6:	f001 f877 	bl	8001fc8 <BSP_GYRO_Init>
  	BSP_LCD_Init();
 8000eda:	f001 f8ef 	bl	80020bc <BSP_LCD_Init>
  	BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000ede:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f001 f96c 	bl	80021c0 <BSP_LCD_LayerDefaultInit>
  	BSP_LCD_SelectLayer(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f001 f9cd 	bl	8002288 <BSP_LCD_SelectLayer>
  	BSP_LCD_DisplayOn();
 8000eee:	f001 fb7f 	bl	80025f0 <BSP_LCD_DisplayOn>
  	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000ef2:	4822      	ldr	r0, [pc, #136]	@ (8000f7c <main+0xc4>)
 8000ef4:	f001 fa3a 	bl	800236c <BSP_LCD_Clear>
  	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000ef8:	4820      	ldr	r0, [pc, #128]	@ (8000f7c <main+0xc4>)
 8000efa:	f001 f9ed 	bl	80022d8 <BSP_LCD_SetBackColor>
  	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	f001 f9d1 	bl	80022a8 <BSP_LCD_SetTextColor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_GYRO_GetXYZ(data);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f8c2 	bl	8002094 <BSP_GYRO_GetXYZ>
	  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000f10:	481a      	ldr	r0, [pc, #104]	@ (8000f7c <main+0xc4>)
 8000f12:	f001 fa2b 	bl	800236c <BSP_LCD_Clear>
	  sprintf(text, "X = %.2f", data[0]);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb25 	bl	8000568 <__aeabi_f2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4638      	mov	r0, r7
 8000f24:	4916      	ldr	r1, [pc, #88]	@ (8000f80 <main+0xc8>)
 8000f26:	f005 fd25 	bl	8006974 <siprintf>
	  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)text);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f001 fb46 	bl	80025c0 <BSP_LCD_DisplayStringAtLine>
	  sprintf(text, "Y = %.2f", data[1]);
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fb16 	bl	8000568 <__aeabi_f2d>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4638      	mov	r0, r7
 8000f42:	4910      	ldr	r1, [pc, #64]	@ (8000f84 <main+0xcc>)
 8000f44:	f005 fd16 	bl	8006974 <siprintf>
	  BSP_LCD_DisplayStringAtLine(3, (uint8_t*)text);
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f001 fb37 	bl	80025c0 <BSP_LCD_DisplayStringAtLine>
	  sprintf(text, "Z = %.2f", data[2]);
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fb07 	bl	8000568 <__aeabi_f2d>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4638      	mov	r0, r7
 8000f60:	4909      	ldr	r1, [pc, #36]	@ (8000f88 <main+0xd0>)
 8000f62:	f005 fd07 	bl	8006974 <siprintf>
	  BSP_LCD_DisplayStringAtLine(4, (uint8_t*)text);
 8000f66:	463b      	mov	r3, r7
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2004      	movs	r0, #4
 8000f6c:	f001 fb28 	bl	80025c0 <BSP_LCD_DisplayStringAtLine>
	  HAL_Delay(100);
 8000f70:	2064      	movs	r0, #100	@ 0x64
 8000f72:	f001 ff77 	bl	8002e64 <HAL_Delay>
  {
 8000f76:	bf00      	nop
 8000f78:	e7c5      	b.n	8000f06 <main+0x4e>
 8000f7a:	bf00      	nop
 8000f7c:	ff0000ff 	.word	0xff0000ff
 8000f80:	08008be8 	.word	0x08008be8
 8000f84:	08008bf4 	.word	0x08008bf4
 8000f88:	08008c00 	.word	0x08008c00

08000f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b094      	sub	sp, #80	@ 0x50
 8000f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2230      	movs	r2, #48	@ 0x30
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 fd4d 	bl	8006a3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa0:	f107 030c 	add.w	r3, r7, #12
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001068 <SystemClock_Config+0xdc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8001068 <SystemClock_Config+0xdc>)
 8000fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc0:	4b29      	ldr	r3, [pc, #164]	@ (8001068 <SystemClock_Config+0xdc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	2300      	movs	r3, #0
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <SystemClock_Config+0xe0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a25      	ldr	r2, [pc, #148]	@ (800106c <SystemClock_Config+0xe0>)
 8000fd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	4b23      	ldr	r3, [pc, #140]	@ (800106c <SystemClock_Config+0xe0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001000:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001004:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001006:	2302      	movs	r3, #2
 8001008:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800100a:	2304      	movs	r3, #4
 800100c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4618      	mov	r0, r3
 8001014:	f003 f9a0 	bl	8004358 <HAL_RCC_OscConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800101e:	f000 f84f 	bl	80010c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001022:	f003 f949 	bl	80042b8 <HAL_PWREx_EnableOverDrive>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800102c:	f000 f848 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800103c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	2105      	movs	r1, #5
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fbfa 	bl	8004848 <HAL_RCC_ClockConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800105a:	f000 f831 	bl	80010c0 <Error_Handler>
  }
}
 800105e:	bf00      	nop
 8001060:	3750      	adds	r7, #80	@ 0x50
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	4b10      	ldr	r3, [pc, #64]	@ (80010bc <MX_GPIO_Init+0x4c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <MX_GPIO_Init+0x4c>)
 8001080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b0d      	ldr	r3, [pc, #52]	@ (80010bc <MX_GPIO_Init+0x4c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_GPIO_Init+0x4c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a08      	ldr	r2, [pc, #32]	@ (80010bc <MX_GPIO_Init+0x4c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <MX_GPIO_Init+0x4c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <HAL_MspInit+0x4c>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	4a0f      	ldr	r2, [pc, #60]	@ (8001118 <HAL_MspInit+0x4c>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_MspInit+0x4c>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f6:	4a08      	ldr	r2, [pc, #32]	@ (8001118 <HAL_MspInit+0x4c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_MspInit+0x4c>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001102:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <NMI_Handler+0x4>

08001124 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <UsageFault_Handler+0x4>

08001144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f001 fe57 	bl	8002e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  return 1;
 800117e:	2301      	movs	r3, #1
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_kill>:

int _kill(int pid, int sig)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001194:	f005 fca4 	bl	8006ae0 <__errno>
 8001198:	4603      	mov	r3, r0
 800119a:	2216      	movs	r2, #22
 800119c:	601a      	str	r2, [r3, #0]
  return -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_exit>:

void _exit (int status)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011b2:	f04f 31ff 	mov.w	r1, #4294967295
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffe7 	bl	800118a <_kill>
  while (1) {}    /* Make sure we hang here */
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <_exit+0x12>

080011c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e00a      	b.n	80011e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011d2:	f3af 8000 	nop.w
 80011d6:	4601      	mov	r1, r0
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	b2ca      	uxtb	r2, r1
 80011e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	3301      	adds	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbf0      	blt.n	80011d2 <_read+0x12>
  }

  return len;
 80011f0:	687b      	ldr	r3, [r7, #4]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	60f8      	str	r0, [r7, #12]
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	e009      	b.n	8001220 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60ba      	str	r2, [r7, #8]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	429a      	cmp	r2, r3
 8001226:	dbf1      	blt.n	800120c <_write+0x12>
  }
  return len;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_close>:

int _close(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800123e:	4618      	mov	r0, r3
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125a:	605a      	str	r2, [r3, #4]
  return 0;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_isatty>:

int _isatty(int file)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a4:	4a14      	ldr	r2, [pc, #80]	@ (80012f8 <_sbrk+0x5c>)
 80012a6:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <_sbrk+0x60>)
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <_sbrk+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <_sbrk+0x64>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	@ (8001304 <_sbrk+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <_sbrk+0x64>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4413      	add	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d207      	bcs.n	80012dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012cc:	f005 fc08 	bl	8006ae0 <__errno>
 80012d0:	4603      	mov	r3, r0
 80012d2:	220c      	movs	r2, #12
 80012d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e009      	b.n	80012f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012dc:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <_sbrk+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e2:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <_sbrk+0x64>)
 80012ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20030000 	.word	0x20030000
 80012fc:	00000400 	.word	0x00000400
 8001300:	2000026c 	.word	0x2000026c
 8001304:	20000618 	.word	0x20000618

08001308 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <SystemInit+0x20>)
 800130e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001312:	4a05      	ldr	r2, [pc, #20]	@ (8001328 <SystemInit+0x20>)
 8001314:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001318:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800132c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001364 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001330:	f7ff ffea 	bl	8001308 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480c      	ldr	r0, [pc, #48]	@ (8001368 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001336:	490d      	ldr	r1, [pc, #52]	@ (800136c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800134c:	4c0a      	ldr	r4, [pc, #40]	@ (8001378 <LoopFillZerobss+0x22>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800135a:	f005 fbc7 	bl	8006aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800135e:	f7ff fdab 	bl	8000eb8 <main>
  bx  lr    
 8001362:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001364:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800136c:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8001370:	0800aa60 	.word	0x0800aa60
  ldr r2, =_sbss
 8001374:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8001378:	20000618 	.word	0x20000618

0800137c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800137c:	e7fe      	b.n	800137c <ADC_IRQHandler>

0800137e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001382:	f000 fc6f 	bl	8001c64 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001386:	20ca      	movs	r0, #202	@ 0xca
 8001388:	f000 f95d 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800138c:	20c3      	movs	r0, #195	@ 0xc3
 800138e:	f000 f967 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001392:	2008      	movs	r0, #8
 8001394:	f000 f964 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001398:	2050      	movs	r0, #80	@ 0x50
 800139a:	f000 f961 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800139e:	20cf      	movs	r0, #207	@ 0xcf
 80013a0:	f000 f951 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f95b 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80013aa:	20c1      	movs	r0, #193	@ 0xc1
 80013ac:	f000 f958 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80013b0:	2030      	movs	r0, #48	@ 0x30
 80013b2:	f000 f955 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80013b6:	20ed      	movs	r0, #237	@ 0xed
 80013b8:	f000 f945 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f000 f94f 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 f94c 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80013c8:	2012      	movs	r0, #18
 80013ca:	f000 f949 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80013ce:	2081      	movs	r0, #129	@ 0x81
 80013d0:	f000 f946 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80013d4:	20e8      	movs	r0, #232	@ 0xe8
 80013d6:	f000 f936 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80013da:	2085      	movs	r0, #133	@ 0x85
 80013dc:	f000 f940 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f93d 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80013e6:	2078      	movs	r0, #120	@ 0x78
 80013e8:	f000 f93a 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80013ec:	20cb      	movs	r0, #203	@ 0xcb
 80013ee:	f000 f92a 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80013f2:	2039      	movs	r0, #57	@ 0x39
 80013f4:	f000 f934 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80013f8:	202c      	movs	r0, #44	@ 0x2c
 80013fa:	f000 f931 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f92e 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001404:	2034      	movs	r0, #52	@ 0x34
 8001406:	f000 f92b 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800140a:	2002      	movs	r0, #2
 800140c:	f000 f928 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001410:	20f7      	movs	r0, #247	@ 0xf7
 8001412:	f000 f918 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001416:	2020      	movs	r0, #32
 8001418:	f000 f922 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800141c:	20ea      	movs	r0, #234	@ 0xea
 800141e:	f000 f912 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f91c 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001428:	2000      	movs	r0, #0
 800142a:	f000 f919 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800142e:	20b1      	movs	r0, #177	@ 0xb1
 8001430:	f000 f909 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001434:	2000      	movs	r0, #0
 8001436:	f000 f913 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800143a:	201b      	movs	r0, #27
 800143c:	f000 f910 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001440:	20b6      	movs	r0, #182	@ 0xb6
 8001442:	f000 f900 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001446:	200a      	movs	r0, #10
 8001448:	f000 f90a 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800144c:	20a2      	movs	r0, #162	@ 0xa2
 800144e:	f000 f907 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001452:	20c0      	movs	r0, #192	@ 0xc0
 8001454:	f000 f8f7 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001458:	2010      	movs	r0, #16
 800145a:	f000 f901 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800145e:	20c1      	movs	r0, #193	@ 0xc1
 8001460:	f000 f8f1 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001464:	2010      	movs	r0, #16
 8001466:	f000 f8fb 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800146a:	20c5      	movs	r0, #197	@ 0xc5
 800146c:	f000 f8eb 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001470:	2045      	movs	r0, #69	@ 0x45
 8001472:	f000 f8f5 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001476:	2015      	movs	r0, #21
 8001478:	f000 f8f2 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800147c:	20c7      	movs	r0, #199	@ 0xc7
 800147e:	f000 f8e2 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001482:	2090      	movs	r0, #144	@ 0x90
 8001484:	f000 f8ec 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001488:	2036      	movs	r0, #54	@ 0x36
 800148a:	f000 f8dc 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800148e:	20c8      	movs	r0, #200	@ 0xc8
 8001490:	f000 f8e6 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001494:	20f2      	movs	r0, #242	@ 0xf2
 8001496:	f000 f8d6 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f000 f8e0 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80014a0:	20b0      	movs	r0, #176	@ 0xb0
 80014a2:	f000 f8d0 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80014a6:	20c2      	movs	r0, #194	@ 0xc2
 80014a8:	f000 f8da 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80014ac:	20b6      	movs	r0, #182	@ 0xb6
 80014ae:	f000 f8ca 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f000 f8d4 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80014b8:	20a7      	movs	r0, #167	@ 0xa7
 80014ba:	f000 f8d1 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80014be:	2027      	movs	r0, #39	@ 0x27
 80014c0:	f000 f8ce 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80014c4:	2004      	movs	r0, #4
 80014c6:	f000 f8cb 	bl	8001660 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80014ca:	202a      	movs	r0, #42	@ 0x2a
 80014cc:	f000 f8bb 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f8c5 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f8c2 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f8bf 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80014e2:	20ef      	movs	r0, #239	@ 0xef
 80014e4:	f000 f8bc 	bl	8001660 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80014e8:	202b      	movs	r0, #43	@ 0x2b
 80014ea:	f000 f8ac 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f8b6 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f8b3 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f000 f8b0 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001500:	203f      	movs	r0, #63	@ 0x3f
 8001502:	f000 f8ad 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001506:	20f6      	movs	r0, #246	@ 0xf6
 8001508:	f000 f89d 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800150c:	2001      	movs	r0, #1
 800150e:	f000 f8a7 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f8a4 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001518:	2006      	movs	r0, #6
 800151a:	f000 f8a1 	bl	8001660 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800151e:	202c      	movs	r0, #44	@ 0x2c
 8001520:	f000 f891 	bl	8001646 <ili9341_WriteReg>
  LCD_Delay(200);
 8001524:	20c8      	movs	r0, #200	@ 0xc8
 8001526:	f000 fc8b 	bl	8001e40 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800152a:	2026      	movs	r0, #38	@ 0x26
 800152c:	f000 f88b 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001530:	2001      	movs	r0, #1
 8001532:	f000 f895 	bl	8001660 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001536:	20e0      	movs	r0, #224	@ 0xe0
 8001538:	f000 f885 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800153c:	200f      	movs	r0, #15
 800153e:	f000 f88f 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001542:	2029      	movs	r0, #41	@ 0x29
 8001544:	f000 f88c 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001548:	2024      	movs	r0, #36	@ 0x24
 800154a:	f000 f889 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800154e:	200c      	movs	r0, #12
 8001550:	f000 f886 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001554:	200e      	movs	r0, #14
 8001556:	f000 f883 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800155a:	2009      	movs	r0, #9
 800155c:	f000 f880 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001560:	204e      	movs	r0, #78	@ 0x4e
 8001562:	f000 f87d 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001566:	2078      	movs	r0, #120	@ 0x78
 8001568:	f000 f87a 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800156c:	203c      	movs	r0, #60	@ 0x3c
 800156e:	f000 f877 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001572:	2009      	movs	r0, #9
 8001574:	f000 f874 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001578:	2013      	movs	r0, #19
 800157a:	f000 f871 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800157e:	2005      	movs	r0, #5
 8001580:	f000 f86e 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001584:	2017      	movs	r0, #23
 8001586:	f000 f86b 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800158a:	2011      	movs	r0, #17
 800158c:	f000 f868 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001590:	2000      	movs	r0, #0
 8001592:	f000 f865 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001596:	20e1      	movs	r0, #225	@ 0xe1
 8001598:	f000 f855 	bl	8001646 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800159c:	2000      	movs	r0, #0
 800159e:	f000 f85f 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80015a2:	2016      	movs	r0, #22
 80015a4:	f000 f85c 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80015a8:	201b      	movs	r0, #27
 80015aa:	f000 f859 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80015ae:	2004      	movs	r0, #4
 80015b0:	f000 f856 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80015b4:	2011      	movs	r0, #17
 80015b6:	f000 f853 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80015ba:	2007      	movs	r0, #7
 80015bc:	f000 f850 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80015c0:	2031      	movs	r0, #49	@ 0x31
 80015c2:	f000 f84d 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80015c6:	2033      	movs	r0, #51	@ 0x33
 80015c8:	f000 f84a 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80015cc:	2042      	movs	r0, #66	@ 0x42
 80015ce:	f000 f847 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80015d2:	2005      	movs	r0, #5
 80015d4:	f000 f844 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80015d8:	200c      	movs	r0, #12
 80015da:	f000 f841 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80015de:	200a      	movs	r0, #10
 80015e0:	f000 f83e 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80015e4:	2028      	movs	r0, #40	@ 0x28
 80015e6:	f000 f83b 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80015ea:	202f      	movs	r0, #47	@ 0x2f
 80015ec:	f000 f838 	bl	8001660 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80015f0:	200f      	movs	r0, #15
 80015f2:	f000 f835 	bl	8001660 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80015f6:	2011      	movs	r0, #17
 80015f8:	f000 f825 	bl	8001646 <ili9341_WriteReg>
  LCD_Delay(200);
 80015fc:	20c8      	movs	r0, #200	@ 0xc8
 80015fe:	f000 fc1f 	bl	8001e40 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001602:	2029      	movs	r0, #41	@ 0x29
 8001604:	f000 f81f 	bl	8001646 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001608:	202c      	movs	r0, #44	@ 0x2c
 800160a:	f000 f81c 	bl	8001646 <ili9341_WriteReg>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001616:	f000 fb25 	bl	8001c64 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800161a:	2103      	movs	r1, #3
 800161c:	20d3      	movs	r0, #211	@ 0xd3
 800161e:	f000 f82c 	bl	800167a <ili9341_ReadData>
 8001622:	4603      	mov	r3, r0
 8001624:	b29b      	uxth	r3, r3
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}

0800162a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800162e:	2029      	movs	r0, #41	@ 0x29
 8001630:	f000 f809 	bl	8001646 <ili9341_WriteReg>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800163c:	2028      	movs	r0, #40	@ 0x28
 800163e:	f000 f802 	bl	8001646 <ili9341_WriteReg>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}

08001646 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	4603      	mov	r3, r0
 800164e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 fba0 	bl	8001d98 <LCD_IO_WriteReg>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fb71 	bl	8001d54 <LCD_IO_WriteData>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	460a      	mov	r2, r1
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	4613      	mov	r3, r2
 8001688:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800168a:	797a      	ldrb	r2, [r7, #5]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fba3 	bl	8001ddc <LCD_IO_ReadData>
 8001696:	4603      	mov	r3, r0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80016a4:	23f0      	movs	r3, #240	@ 0xf0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80016b4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80016d0:	f000 fbc2 	bl	8001e58 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80016da:	f107 030f 	add.w	r3, r7, #15
 80016de:	2201      	movs	r2, #1
 80016e0:	2120      	movs	r1, #32
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fc04 	bl	8001ef0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	0a1b      	lsrs	r3, r3, #8
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80016f2:	f107 030f 	add.w	r3, r7, #15
 80016f6:	2201      	movs	r2, #1
 80016f8:	2123      	movs	r1, #35	@ 0x23
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fbf8 	bl	8001ef0 <GYRO_IO_Write>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800171c:	f000 fb9c 	bl	8001e58 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	2201      	movs	r2, #1
 8001724:	210f      	movs	r1, #15
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fc14 	bl	8001f54 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	2201      	movs	r2, #1
 8001740:	2124      	movs	r1, #36	@ 0x24
 8001742:	4618      	mov	r0, r3
 8001744:	f000 fc06 	bl	8001f54 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800174e:	b2db      	uxtb	r3, r3
 8001750:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	2201      	movs	r2, #1
 8001756:	2124      	movs	r1, #36	@ 0x24
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fbc9 	bl	8001ef0 <GYRO_IO_Write>
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800177a:	f107 030f 	add.w	r3, r7, #15
 800177e:	2201      	movs	r2, #1
 8001780:	2120      	movs	r1, #32
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fbb4 	bl	8001ef0 <GYRO_IO_Write>
}
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	2300      	movs	r3, #0
 80017a0:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80017a2:	f107 030f 	add.w	r3, r7, #15
 80017a6:	2201      	movs	r2, #1
 80017a8:	2130      	movs	r1, #48	@ 0x30
 80017aa:	4618      	mov	r0, r3
 80017ac:	f000 fbd2 	bl	8001f54 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80017b0:	f107 030e 	add.w	r3, r7, #14
 80017b4:	2201      	movs	r2, #1
 80017b6:	2122      	movs	r1, #34	@ 0x22
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fbcb 	bl	8001f54 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	121b      	asrs	r3, r3, #8
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
 80017de:	f023 0320 	bic.w	r3, r3, #32
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	7bbb      	ldrb	r3, [r7, #14]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80017f2:	f107 030f 	add.w	r3, r7, #15
 80017f6:	2201      	movs	r2, #1
 80017f8:	2130      	movs	r1, #48	@ 0x30
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fb78 	bl	8001ef0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001800:	f107 030e 	add.w	r3, r7, #14
 8001804:	2201      	movs	r2, #1
 8001806:	2122      	movs	r1, #34	@ 0x22
 8001808:	4618      	mov	r0, r3
 800180a:	f000 fb71 	bl	8001ef0 <GYRO_IO_Write>
}
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001820:	f107 030f 	add.w	r3, r7, #15
 8001824:	2201      	movs	r2, #1
 8001826:	2122      	movs	r1, #34	@ 0x22
 8001828:	4618      	mov	r0, r3
 800182a:	f000 fb93 	bl	8001f54 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10a      	bne.n	800184a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800183a:	b2db      	uxtb	r3, r3
 800183c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	73fb      	strb	r3, [r7, #15]
 8001848:	e00c      	b.n	8001864 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d109      	bne.n	8001864 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	f023 0308 	bic.w	r3, r3, #8
 8001856:	b2db      	uxtb	r3, r3
 8001858:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	b2db      	uxtb	r3, r3
 8001862:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001864:	f107 030f 	add.w	r3, r7, #15
 8001868:	2201      	movs	r2, #1
 800186a:	2122      	movs	r1, #34	@ 0x22
 800186c:	4618      	mov	r0, r3
 800186e:	f000 fb3f 	bl	8001ef0 <GYRO_IO_Write>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800187a:	b580      	push	{r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001884:	f107 030f 	add.w	r3, r7, #15
 8001888:	2201      	movs	r2, #1
 800188a:	2122      	movs	r1, #34	@ 0x22
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fb61 	bl	8001f54 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e009      	b.n	80018bc <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	f023 0308 	bic.w	r3, r3, #8
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80018bc:	f107 030f 	add.w	r3, r7, #15
 80018c0:	2201      	movs	r2, #1
 80018c2:	2122      	movs	r1, #34	@ 0x22
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 fb13 	bl	8001ef0 <GYRO_IO_Write>
}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b084      	sub	sp, #16
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018dc:	f107 030f 	add.w	r3, r7, #15
 80018e0:	2201      	movs	r2, #1
 80018e2:	2121      	movs	r1, #33	@ 0x21
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fb35 	bl	8001f54 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018fe:	f107 030f 	add.w	r3, r7, #15
 8001902:	2201      	movs	r2, #1
 8001904:	2121      	movs	r1, #33	@ 0x21
 8001906:	4618      	mov	r0, r3
 8001908:	f000 faf2 	bl	8001ef0 <GYRO_IO_Write>
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800191e:	f107 030f 	add.w	r3, r7, #15
 8001922:	2201      	movs	r2, #1
 8001924:	2124      	movs	r1, #36	@ 0x24
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fb14 	bl	8001f54 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	f023 0310 	bic.w	r3, r3, #16
 8001932:	b2db      	uxtb	r3, r3
 8001934:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4313      	orrs	r3, r2
 800193c:	b2db      	uxtb	r3, r3
 800193e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001940:	f107 030f 	add.w	r3, r7, #15
 8001944:	2201      	movs	r2, #1
 8001946:	2124      	movs	r1, #36	@ 0x24
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fad1 	bl	8001ef0 <GYRO_IO_Write>
}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08a      	sub	sp, #40	@ 0x28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	2300      	movs	r3, #0
 8001966:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001976:	f04f 0300 	mov.w	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001980:	f107 030f 	add.w	r3, r7, #15
 8001984:	2201      	movs	r2, #1
 8001986:	2123      	movs	r1, #35	@ 0x23
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fae3 	bl	8001f54 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	2206      	movs	r2, #6
 8001994:	2128      	movs	r1, #40	@ 0x28
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fadc 	bl	8001f54 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d121      	bne.n	80019ea <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
 80019aa:	e01a      	b.n	80019e2 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	3301      	adds	r3, #1
 80019b2:	3328      	adds	r3, #40	@ 0x28
 80019b4:	443b      	add	r3, r7
 80019b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	b29b      	uxth	r3, r3
 80019be:	6a3a      	ldr	r2, [r7, #32]
 80019c0:	0052      	lsls	r2, r2, #1
 80019c2:	3228      	adds	r2, #40	@ 0x28
 80019c4:	443a      	add	r2, r7
 80019c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80019ca:	4413      	add	r3, r2
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	3328      	adds	r3, #40	@ 0x28
 80019d6:	443b      	add	r3, r7
 80019d8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	3301      	adds	r3, #1
 80019e0:	623b      	str	r3, [r7, #32]
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	dde1      	ble.n	80019ac <L3GD20_ReadXYZAngRate+0x54>
 80019e8:	e020      	b.n	8001a2c <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	e01a      	b.n	8001a26 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	3328      	adds	r3, #40	@ 0x28
 80019f6:	443b      	add	r3, r7
 80019f8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	6a3a      	ldr	r2, [r7, #32]
 8001a02:	0052      	lsls	r2, r2, #1
 8001a04:	3201      	adds	r2, #1
 8001a06:	3228      	adds	r2, #40	@ 0x28
 8001a08:	443a      	add	r2, r7
 8001a0a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21a      	sxth	r2, r3
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	3328      	adds	r3, #40	@ 0x28
 8001a1a:	443b      	add	r3, r7
 8001a1c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	3301      	adds	r3, #1
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	dde1      	ble.n	80019f0 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d00c      	beq.n	8001a50 <L3GD20_ReadXYZAngRate+0xf8>
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	dc0d      	bgt.n	8001a56 <L3GD20_ReadXYZAngRate+0xfe>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <L3GD20_ReadXYZAngRate+0xec>
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d003      	beq.n	8001a4a <L3GD20_ReadXYZAngRate+0xf2>
 8001a42:	e008      	b.n	8001a56 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001a44:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <L3GD20_ReadXYZAngRate+0x144>)
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001a48:	e005      	b.n	8001a56 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <L3GD20_ReadXYZAngRate+0x148>)
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001a4e:	e002      	b.n	8001a56 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <L3GD20_ReadXYZAngRate+0x14c>)
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001a54:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	e016      	b.n	8001a8a <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	3328      	adds	r3, #40	@ 0x28
 8001a62:	443b      	add	r3, r7
 8001a64:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4413      	add	r3, r2
 8001a78:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	3301      	adds	r3, #1
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	dde5      	ble.n	8001a5c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	410c0000 	.word	0x410c0000
 8001aa0:	418c0000 	.word	0x418c0000
 8001aa4:	428c0000 	.word	0x428c0000

08001aa8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001aac:	4819      	ldr	r0, [pc, #100]	@ (8001b14 <SPIx_Init+0x6c>)
 8001aae:	f003 ffdd 	bl	8005a6c <HAL_SPI_GetState>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d12b      	bne.n	8001b10 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <SPIx_Init+0x6c>)
 8001aba:	4a17      	ldr	r2, [pc, #92]	@ (8001b18 <SPIx_Init+0x70>)
 8001abc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <SPIx_Init+0x6c>)
 8001ac0:	2218      	movs	r2, #24
 8001ac2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <SPIx_Init+0x6c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001aca:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <SPIx_Init+0x6c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <SPIx_Init+0x6c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <SPIx_Init+0x6c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <SPIx_Init+0x6c>)
 8001ade:	2207      	movs	r2, #7
 8001ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <SPIx_Init+0x6c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <SPIx_Init+0x6c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <SPIx_Init+0x6c>)
 8001af0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001af4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001af6:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <SPIx_Init+0x6c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <SPIx_Init+0x6c>)
 8001afe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b02:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <SPIx_Init+0x6c>)
 8001b06:	f000 f873 	bl	8001bf0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b0a:	4802      	ldr	r0, [pc, #8]	@ (8001b14 <SPIx_Init+0x6c>)
 8001b0c:	f003 fae3 	bl	80050d6 <HAL_SPI_Init>
  }
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000270 	.word	0x20000270
 8001b18:	40015000 	.word	0x40015000

08001b1c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <SPIx_Read+0x38>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f107 0108 	add.w	r1, r7, #8
 8001b36:	4808      	ldr	r0, [pc, #32]	@ (8001b58 <SPIx_Read+0x3c>)
 8001b38:	f003 fcd6 	bl	80054e8 <HAL_SPI_Receive>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b46:	f000 f847 	bl	8001bd8 <SPIx_Error>
  }

  return readvalue;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000070 	.word	0x20000070
 8001b58:	20000270 	.word	0x20000270

08001b5c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <SPIx_Write+0x34>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	1db9      	adds	r1, r7, #6
 8001b70:	2201      	movs	r2, #1
 8001b72:	4808      	ldr	r0, [pc, #32]	@ (8001b94 <SPIx_Write+0x38>)
 8001b74:	f003 fb74 	bl	8005260 <HAL_SPI_Transmit>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b82:	f000 f829 	bl	8001bd8 <SPIx_Error>
  }
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000070 	.word	0x20000070
 8001b94:	20000270 	.word	0x20000270

08001b98 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd0 <SPIx_WriteRead+0x38>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f107 020f 	add.w	r2, r7, #15
 8001bae:	1df9      	adds	r1, r7, #7
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <SPIx_WriteRead+0x3c>)
 8001bb6:	f003 fdb0 	bl	800571a <HAL_SPI_TransmitReceive>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001bc0:	f000 f80a 	bl	8001bd8 <SPIx_Error>
  }

  return receivedbyte;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000070 	.word	0x20000070
 8001bd4:	20000270 	.word	0x20000270

08001bd8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001bdc:	4803      	ldr	r0, [pc, #12]	@ (8001bec <SPIx_Error+0x14>)
 8001bde:	f003 fb03 	bl	80051e8 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001be2:	f7ff ff61 	bl	8001aa8 <SPIx_Init>
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000270 	.word	0x20000270

08001bf0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	@ 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <SPIx_MspInit+0x6c>)
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c00:	4a16      	ldr	r2, [pc, #88]	@ (8001c5c <SPIx_MspInit+0x6c>)
 8001c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001c06:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <SPIx_MspInit+0x6c>)
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <SPIx_MspInit+0x6c>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <SPIx_MspInit+0x6c>)
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <SPIx_MspInit+0x6c>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001c30:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c42:	2305      	movs	r3, #5
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4804      	ldr	r0, [pc, #16]	@ (8001c60 <SPIx_MspInit+0x70>)
 8001c4e:	f001 fe93 	bl	8003978 <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	@ 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40021400 	.word	0x40021400

08001c64 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001c6a:	4b36      	ldr	r3, [pc, #216]	@ (8001d44 <LCD_IO_Init+0xe0>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d164      	bne.n	8001d3c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c72:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <LCD_IO_Init+0xe0>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	4b32      	ldr	r3, [pc, #200]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	4a31      	ldr	r2, [pc, #196]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c88:	4b2f      	ldr	r3, [pc, #188]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	4619      	mov	r1, r3
 8001cac:	4827      	ldr	r0, [pc, #156]	@ (8001d4c <LCD_IO_Init+0xe8>)
 8001cae:	f001 fe63 	bl	8003978 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a23      	ldr	r2, [pc, #140]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001cbc:	f043 0308 	orr.w	r3, r3, #8
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b21      	ldr	r3, [pc, #132]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001cce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4819      	ldr	r0, [pc, #100]	@ (8001d4c <LCD_IO_Init+0xe8>)
 8001ce8:	f001 fe46 	bl	8003978 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	4a14      	ldr	r2, [pc, #80]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001cf6:	f043 0304 	orr.w	r3, r3, #4
 8001cfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfc:	4b12      	ldr	r3, [pc, #72]	@ (8001d48 <LCD_IO_Init+0xe4>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001d14:	2302      	movs	r3, #2
 8001d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <LCD_IO_Init+0xec>)
 8001d20:	f001 fe2a 	bl	8003978 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001d24:	2200      	movs	r2, #0
 8001d26:	2104      	movs	r1, #4
 8001d28:	4809      	ldr	r0, [pc, #36]	@ (8001d50 <LCD_IO_Init+0xec>)
 8001d2a:	f001 ffd1 	bl	8003cd0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2104      	movs	r1, #4
 8001d32:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <LCD_IO_Init+0xec>)
 8001d34:	f001 ffcc 	bl	8003cd0 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001d38:	f7ff feb6 	bl	8001aa8 <SPIx_Init>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	3720      	adds	r7, #32
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200002c8 	.word	0x200002c8
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40020800 	.word	0x40020800

08001d54 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d64:	480a      	ldr	r0, [pc, #40]	@ (8001d90 <LCD_IO_WriteData+0x3c>)
 8001d66:	f001 ffb3 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4809      	ldr	r0, [pc, #36]	@ (8001d94 <LCD_IO_WriteData+0x40>)
 8001d70:	f001 ffae 	bl	8003cd0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fef0 	bl	8001b5c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	2104      	movs	r1, #4
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <LCD_IO_WriteData+0x40>)
 8001d82:	f001 ffa5 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40020800 	.word	0x40020800

08001d98 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001da2:	2200      	movs	r2, #0
 8001da4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001da8:	480a      	ldr	r0, [pc, #40]	@ (8001dd4 <LCD_IO_WriteReg+0x3c>)
 8001daa:	f001 ff91 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001dae:	2200      	movs	r2, #0
 8001db0:	2104      	movs	r1, #4
 8001db2:	4809      	ldr	r0, [pc, #36]	@ (8001dd8 <LCD_IO_WriteReg+0x40>)
 8001db4:	f001 ff8c 	bl	8003cd0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fecd 	bl	8001b5c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4804      	ldr	r0, [pc, #16]	@ (8001dd8 <LCD_IO_WriteReg+0x40>)
 8001dc8:	f001 ff82 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40020800 	.word	0x40020800

08001ddc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	80fb      	strh	r3, [r7, #6]
 8001de8:	4613      	mov	r3, r2
 8001dea:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001df0:	2200      	movs	r2, #0
 8001df2:	2104      	movs	r1, #4
 8001df4:	4810      	ldr	r0, [pc, #64]	@ (8001e38 <LCD_IO_ReadData+0x5c>)
 8001df6:	f001 ff6b 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e00:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <LCD_IO_ReadData+0x60>)
 8001e02:	f001 ff65 	bl	8003cd0 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001e06:	88fb      	ldrh	r3, [r7, #6]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fea7 	bl	8001b5c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001e0e:	797b      	ldrb	r3, [r7, #5]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe83 	bl	8001b1c <SPIx_Read>
 8001e16:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e1e:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <LCD_IO_ReadData+0x60>)
 8001e20:	f001 ff56 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001e24:	2201      	movs	r2, #1
 8001e26:	2104      	movs	r1, #4
 8001e28:	4803      	ldr	r0, [pc, #12]	@ (8001e38 <LCD_IO_ReadData+0x5c>)
 8001e2a:	f001 ff51 	bl	8003cd0 <HAL_GPIO_WritePin>

  return readvalue;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40020800 	.word	0x40020800
 8001e3c:	40020c00 	.word	0x40020c00

08001e40 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f001 f80b 	bl	8002e64 <HAL_Delay>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	4b20      	ldr	r3, [pc, #128]	@ (8001ee4 <GYRO_IO_Init+0x8c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <GYRO_IO_Init+0x8c>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <GYRO_IO_Init+0x8c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4815      	ldr	r0, [pc, #84]	@ (8001ee8 <GYRO_IO_Init+0x90>)
 8001e92:	f001 fd71 	bl	8003978 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001e96:	2201      	movs	r2, #1
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4813      	ldr	r0, [pc, #76]	@ (8001ee8 <GYRO_IO_Init+0x90>)
 8001e9c:	f001 ff18 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <GYRO_IO_Init+0x8c>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee4 <GYRO_IO_Init+0x8c>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <GYRO_IO_Init+0x8c>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001ebc:	2306      	movs	r3, #6
 8001ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <GYRO_IO_Init+0x94>)
 8001ed4:	f001 fd50 	bl	8003978 <HAL_GPIO_Init>

  SPIx_Init();
 8001ed8:	f7ff fde6 	bl	8001aa8 <SPIx_Init>
}
 8001edc:	bf00      	nop
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020000 	.word	0x40020000

08001ef0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
 8001efc:	4613      	mov	r3, r2
 8001efe:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001f00:	883b      	ldrh	r3, [r7, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d903      	bls.n	8001f0e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f0c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	480f      	ldr	r0, [pc, #60]	@ (8001f50 <GYRO_IO_Write+0x60>)
 8001f14:	f001 fedc 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fe3c 	bl	8001b98 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001f20:	e00a      	b.n	8001f38 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe36 	bl	8001b98 <SPIx_WriteRead>
    NumByteToWrite--;
 8001f2c:	883b      	ldrh	r3, [r7, #0]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3301      	adds	r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001f38:	883b      	ldrh	r3, [r7, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f1      	bne.n	8001f22 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2102      	movs	r1, #2
 8001f42:	4803      	ldr	r0, [pc, #12]	@ (8001f50 <GYRO_IO_Write+0x60>)
 8001f44:	f001 fec4 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40020800 	.word	0x40020800

08001f54 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
 8001f60:	4613      	mov	r3, r2
 8001f62:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001f64:	883b      	ldrh	r3, [r7, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d904      	bls.n	8001f74 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001f70:	70fb      	strb	r3, [r7, #3]
 8001f72:	e003      	b.n	8001f7c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f7a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4810      	ldr	r0, [pc, #64]	@ (8001fc4 <GYRO_IO_Read+0x70>)
 8001f82:	f001 fea5 	bl	8003cd0 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fe05 	bl	8001b98 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8001f8e:	e00c      	b.n	8001faa <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff fe01 	bl	8001b98 <SPIx_WriteRead>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001f9e:	883b      	ldrh	r3, [r7, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001faa:	883b      	ldrh	r3, [r7, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ef      	bne.n	8001f90 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4803      	ldr	r0, [pc, #12]	@ (8001fc4 <GYRO_IO_Read+0x70>)
 8001fb6:	f001 fe8b 	bl	8003cd0 <HAL_GPIO_WritePin>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40020800 	.word	0x40020800

08001fc8 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	703b      	strb	r3, [r7, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001fde:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <BSP_GYRO_Init+0xc4>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2bd4      	cmp	r3, #212	@ 0xd4
 8001fe8:	d005      	beq.n	8001ff6 <BSP_GYRO_Init+0x2e>
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <BSP_GYRO_Init+0xc4>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	4798      	blx	r3
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2bd5      	cmp	r3, #213	@ 0xd5
 8001ff4:	d144      	bne.n	8002080 <BSP_GYRO_Init+0xb8>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001ff6:	4b26      	ldr	r3, [pc, #152]	@ (8002090 <BSP_GYRO_Init+0xc8>)
 8001ff8:	4a24      	ldr	r2, [pc, #144]	@ (800208c <BSP_GYRO_Init+0xc4>)
 8001ffa:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002000:	2300      	movs	r3, #0
 8002002:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002004:	2307      	movs	r3, #7
 8002006:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002008:	2330      	movs	r3, #48	@ 0x30
 800200a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800200c:	2300      	movs	r3, #0
 800200e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002010:	2300      	movs	r3, #0
 8002012:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002014:	2310      	movs	r3, #16
 8002016:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002018:	793a      	ldrb	r2, [r7, #4]
 800201a:	797b      	ldrb	r3, [r7, #5]
 800201c:	4313      	orrs	r3, r2
 800201e:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002020:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002022:	4313      	orrs	r3, r2
 8002024:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002026:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002028:	4313      	orrs	r3, r2
 800202a:	b2db      	uxtb	r3, r3
 800202c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800202e:	7a3a      	ldrb	r2, [r7, #8]
 8002030:	7a7b      	ldrb	r3, [r7, #9]
 8002032:	4313      	orrs	r3, r2
 8002034:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002036:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002038:	4313      	orrs	r3, r2
 800203a:	b2db      	uxtb	r3, r3
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	b29a      	uxth	r2, r3
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <BSP_GYRO_Init+0xc8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	89ba      	ldrh	r2, [r7, #12]
 800204e:	4610      	mov	r0, r2
 8002050:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002052:	2300      	movs	r3, #0
 8002054:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002056:	2300      	movs	r3, #0
 8002058:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800205a:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800205c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800205e:	4313      	orrs	r3, r2
 8002060:	b2db      	uxtb	r3, r3
 8002062:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002064:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <BSP_GYRO_Init+0xc8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	89ba      	ldrh	r2, [r7, #12]
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	4610      	mov	r0, r2
 8002070:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <BSP_GYRO_Init+0xc8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	2010      	movs	r0, #16
 800207a:	4798      	blx	r3

    ret = GYRO_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000003c 	.word	0x2000003c
 8002090:	200002cc 	.word	0x200002cc

08002094 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <BSP_GYRO_GetXYZ+0x24>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d004      	beq.n	80020b0 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80020a6:	4b04      	ldr	r3, [pc, #16]	@ (80020b8 <BSP_GYRO_GetXYZ+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	4798      	blx	r3
  }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	200002cc 	.word	0x200002cc

080020bc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020c2:	4a2e      	ldr	r2, [pc, #184]	@ (800217c <BSP_LCD_Init+0xc0>)
 80020c4:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80020c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020c8:	2209      	movs	r2, #9
 80020ca:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80020cc:	4b2a      	ldr	r3, [pc, #168]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80020d2:	4b29      	ldr	r3, [pc, #164]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020d4:	221d      	movs	r2, #29
 80020d6:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020da:	2203      	movs	r2, #3
 80020dc:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80020de:	4b26      	ldr	r3, [pc, #152]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020e0:	f240 120d 	movw	r2, #269	@ 0x10d
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80020e6:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020e8:	f240 1243 	movw	r2, #323	@ 0x143
 80020ec:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020f0:	f240 1217 	movw	r2, #279	@ 0x117
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <BSP_LCD_Init+0xbc>)
 80020f8:	f240 1247 	movw	r2, #327	@ 0x147
 80020fc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <BSP_LCD_Init+0xbc>)
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <BSP_LCD_Init+0xbc>)
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <BSP_LCD_Init+0xbc>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <BSP_LCD_Init+0xc4>)
 8002118:	2208      	movs	r2, #8
 800211a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800211c:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <BSP_LCD_Init+0xc4>)
 800211e:	22c0      	movs	r2, #192	@ 0xc0
 8002120:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002122:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <BSP_LCD_Init+0xc4>)
 8002124:	2204      	movs	r2, #4
 8002126:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002128:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <BSP_LCD_Init+0xc4>)
 800212a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800212e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002130:	4813      	ldr	r0, [pc, #76]	@ (8002180 <BSP_LCD_Init+0xc4>)
 8002132:	f002 fd75 	bl	8004c20 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <BSP_LCD_Init+0xbc>)
 8002138:	2200      	movs	r2, #0
 800213a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <BSP_LCD_Init+0xbc>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <BSP_LCD_Init+0xbc>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <BSP_LCD_Init+0xbc>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800214e:	f000 fa5f 	bl	8002610 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8002152:	4809      	ldr	r0, [pc, #36]	@ (8002178 <BSP_LCD_Init+0xbc>)
 8002154:	f001 fdd6 	bl	8003d04 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <BSP_LCD_Init+0xc8>)
 800215a:	4a0b      	ldr	r2, [pc, #44]	@ (8002188 <BSP_LCD_Init+0xcc>)
 800215c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <BSP_LCD_Init+0xc8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002166:	f000 fc41 	bl	80029ec <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800216a:	4808      	ldr	r0, [pc, #32]	@ (800218c <BSP_LCD_Init+0xd0>)
 800216c:	f000 f8ce 	bl	800230c <BSP_LCD_SetFont>

  return LCD_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200002d0 	.word	0x200002d0
 800217c:	40016800 	.word	0x40016800
 8002180:	200003b8 	.word	0x200003b8
 8002184:	20000404 	.word	0x20000404
 8002188:	20000004 	.word	0x20000004
 800218c:	20000074 	.word	0x20000074

08002190 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <BSP_LCD_GetXSize+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	4798      	blx	r3
 800219c:	4603      	mov	r3, r0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000404 	.word	0x20000404

080021a8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <BSP_LCD_GetYSize+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b2:	4798      	blx	r3
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000404 	.word	0x20000404

080021c0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b090      	sub	sp, #64	@ 0x40
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80021d0:	f7ff ffde 	bl	8002190 <BSP_LCD_GetXSize>
 80021d4:	4603      	mov	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80021dc:	f7ff ffe4 	bl	80021a8 <BSP_LCD_GetYSize>
 80021e0:	4603      	mov	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80021ec:	23ff      	movs	r3, #255	@ 0xff
 80021ee:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002206:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800220a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800220c:	2307      	movs	r3, #7
 800220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002210:	f7ff ffbe 	bl	8002190 <BSP_LCD_GetXSize>
 8002214:	4603      	mov	r3, r0
 8002216:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002218:	f7ff ffc6 	bl	80021a8 <BSP_LCD_GetYSize>
 800221c:	4603      	mov	r3, r0
 800221e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8002220:	88fa      	ldrh	r2, [r7, #6]
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4619      	mov	r1, r3
 8002228:	4814      	ldr	r0, [pc, #80]	@ (800227c <BSP_LCD_LayerDefaultInit+0xbc>)
 800222a:	f001 fe45 	bl	8003eb8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	4913      	ldr	r1, [pc, #76]	@ (8002280 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	3304      	adds	r3, #4
 800223e:	f04f 32ff 	mov.w	r2, #4294967295
 8002242:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	490e      	ldr	r1, [pc, #56]	@ (8002280 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	3308      	adds	r3, #8
 8002254:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002256:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	4909      	ldr	r1, [pc, #36]	@ (8002280 <BSP_LCD_LayerDefaultInit+0xc0>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800226a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800226c:	4803      	ldr	r0, [pc, #12]	@ (800227c <BSP_LCD_LayerDefaultInit+0xbc>)
 800226e:	f001 fe61 	bl	8003f34 <HAL_LTDC_EnableDither>
}
 8002272:	bf00      	nop
 8002274:	3740      	adds	r7, #64	@ 0x40
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200002d0 	.word	0x200002d0
 8002280:	200003ec 	.word	0x200003ec
 8002284:	20000074 	.word	0x20000074

08002288 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002290:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <BSP_LCD_SelectLayer+0x1c>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6013      	str	r3, [r2, #0]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	200003e8 	.word	0x200003e8

080022a8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <BSP_LCD_SetTextColor+0x28>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4907      	ldr	r1, [pc, #28]	@ (80022d4 <BSP_LCD_SetTextColor+0x2c>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	200003e8 	.word	0x200003e8
 80022d4:	200003ec 	.word	0x200003ec

080022d8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <BSP_LCD_SetBackColor+0x2c>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4908      	ldr	r1, [pc, #32]	@ (8002308 <BSP_LCD_SetBackColor+0x30>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	3304      	adds	r3, #4
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	200003e8 	.word	0x200003e8
 8002308:	200003ec 	.word	0x200003ec

0800230c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <BSP_LCD_SetFont+0x2c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4908      	ldr	r1, [pc, #32]	@ (800233c <BSP_LCD_SetFont+0x30>)
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	3308      	adds	r3, #8
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	200003e8 	.word	0x200003e8
 800233c:	200003ec 	.word	0x200003ec

08002340 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <BSP_LCD_GetFont+0x24>)
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	4907      	ldr	r1, [pc, #28]	@ (8002368 <BSP_LCD_GetFont+0x28>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3308      	adds	r3, #8
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	200003e8 	.word	0x200003e8
 8002368:	200003ec 	.word	0x200003ec

0800236c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	b085      	sub	sp, #20
 8002370:	af02      	add	r7, sp, #8
 8002372:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <BSP_LCD_Clear+0x48>)
 8002376:	681c      	ldr	r4, [r3, #0]
 8002378:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <BSP_LCD_Clear+0x48>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <BSP_LCD_Clear+0x4c>)
 800237e:	2134      	movs	r1, #52	@ 0x34
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	4413      	add	r3, r2
 8002386:	335c      	adds	r3, #92	@ 0x5c
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	461e      	mov	r6, r3
 800238c:	f7ff ff00 	bl	8002190 <BSP_LCD_GetXSize>
 8002390:	4605      	mov	r5, r0
 8002392:	f7ff ff09 	bl	80021a8 <BSP_LCD_GetYSize>
 8002396:	4602      	mov	r2, r0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	462a      	mov	r2, r5
 80023a4:	4631      	mov	r1, r6
 80023a6:	4620      	mov	r0, r4
 80023a8:	f000 fae8 	bl	800297c <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023b4:	200003e8 	.word	0x200003e8
 80023b8:	200002d0 	.word	0x200002d0

080023bc <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	80fb      	strh	r3, [r7, #6]
 80023c6:	460b      	mov	r3, r1
 80023c8:	80bb      	strh	r3, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 80023ce:	4b1b      	ldr	r3, [pc, #108]	@ (800243c <BSP_LCD_DisplayChar+0x80>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	491b      	ldr	r1, [pc, #108]	@ (8002440 <BSP_LCD_DisplayChar+0x84>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3308      	adds	r3, #8
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80023ea:	4b14      	ldr	r3, [pc, #80]	@ (800243c <BSP_LCD_DisplayChar+0x80>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	4c14      	ldr	r4, [pc, #80]	@ (8002440 <BSP_LCD_DisplayChar+0x84>)
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4423      	add	r3, r4
 80023fa:	3308      	adds	r3, #8
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002400:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002404:	4b0d      	ldr	r3, [pc, #52]	@ (800243c <BSP_LCD_DisplayChar+0x80>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4c0d      	ldr	r4, [pc, #52]	@ (8002440 <BSP_LCD_DisplayChar+0x84>)
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4423      	add	r3, r4
 8002414:	3308      	adds	r3, #8
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	889b      	ldrh	r3, [r3, #4]
 800241a:	3307      	adds	r3, #7
 800241c:	2b00      	cmp	r3, #0
 800241e:	da00      	bge.n	8002422 <BSP_LCD_DisplayChar+0x66>
 8002420:	3307      	adds	r3, #7
 8002422:	10db      	asrs	r3, r3, #3
 8002424:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002428:	18ca      	adds	r2, r1, r3
 800242a:	88b9      	ldrh	r1, [r7, #4]
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f9ea 	bl	8002808 <DrawChar>
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	200003e8 	.word	0x200003e8
 8002440:	200003ec 	.word	0x200003ec

08002444 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002444:	b5b0      	push	{r4, r5, r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	60ba      	str	r2, [r7, #8]
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	81fb      	strh	r3, [r7, #14]
 8002452:	460b      	mov	r3, r1
 8002454:	81bb      	strh	r3, [r7, #12]
 8002456:	4613      	mov	r3, r2
 8002458:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800245a:	2301      	movs	r3, #1
 800245c:	83fb      	strh	r3, [r7, #30]
 800245e:	2300      	movs	r3, #0
 8002460:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 800246e:	e002      	b.n	8002476 <BSP_LCD_DisplayStringAt+0x32>
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3301      	adds	r3, #1
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	617a      	str	r2, [r7, #20]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f6      	bne.n	8002470 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002482:	f7ff fe85 	bl	8002190 <BSP_LCD_GetXSize>
 8002486:	4601      	mov	r1, r0
 8002488:	4b4b      	ldr	r3, [pc, #300]	@ (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	484b      	ldr	r0, [pc, #300]	@ (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4403      	add	r3, r0
 8002498:	3308      	adds	r3, #8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	889b      	ldrh	r3, [r3, #4]
 800249e:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a2:	613b      	str	r3, [r7, #16]

  switch (mode)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d01c      	beq.n	80024e4 <BSP_LCD_DisplayStringAt+0xa0>
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	dc33      	bgt.n	8002516 <BSP_LCD_DisplayStringAt+0xd2>
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d002      	beq.n	80024b8 <BSP_LCD_DisplayStringAt+0x74>
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d019      	beq.n	80024ea <BSP_LCD_DisplayStringAt+0xa6>
 80024b6:	e02e      	b.n	8002516 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad1      	subs	r1, r2, r3
 80024be:	4b3e      	ldr	r3, [pc, #248]	@ (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	483e      	ldr	r0, [pc, #248]	@ (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4403      	add	r3, r0
 80024ce:	3308      	adds	r3, #8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	889b      	ldrh	r3, [r3, #4]
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	085b      	lsrs	r3, r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	4413      	add	r3, r2
 80024e0:	83fb      	strh	r3, [r7, #30]
      break;
 80024e2:	e01b      	b.n	800251c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 80024e4:	89fb      	ldrh	r3, [r7, #14]
 80024e6:	83fb      	strh	r3, [r7, #30]
      break;
 80024e8:	e018      	b.n	800251c <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	b299      	uxth	r1, r3
 80024f2:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4831      	ldr	r0, [pc, #196]	@ (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4403      	add	r3, r0
 8002502:	3308      	adds	r3, #8
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	889b      	ldrh	r3, [r3, #4]
 8002508:	fb11 f303 	smulbb	r3, r1, r3
 800250c:	b29a      	uxth	r2, r3
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	4413      	add	r3, r2
 8002512:	83fb      	strh	r3, [r7, #30]
      break;
 8002514:	e002      	b.n	800251c <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	83fb      	strh	r3, [r7, #30]
      break;
 800251a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800251c:	e01a      	b.n	8002554 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	89b9      	ldrh	r1, [r7, #12]
 8002524:	8bfb      	ldrh	r3, [r7, #30]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff48 	bl	80023bc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800252c:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4922      	ldr	r1, [pc, #136]	@ (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3308      	adds	r3, #8
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	889a      	ldrh	r2, [r3, #4]
 8002542:	8bfb      	ldrh	r3, [r7, #30]
 8002544:	4413      	add	r3, r2
 8002546:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	3301      	adds	r3, #1
 800254c:	60bb      	str	r3, [r7, #8]
    i++;
 800254e:	8bbb      	ldrh	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2dc      	uxtb	r4, r3
 8002562:	f7ff fe15 	bl	8002190 <BSP_LCD_GetXSize>
 8002566:	8bb9      	ldrh	r1, [r7, #28]
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4d13      	ldr	r5, [pc, #76]	@ (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	442b      	add	r3, r5
 8002578:	3308      	adds	r3, #8
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	889b      	ldrh	r3, [r3, #4]
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	1ac3      	subs	r3, r0, r3
 8002584:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002586:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <BSP_LCD_DisplayStringAt+0x174>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	480c      	ldr	r0, [pc, #48]	@ (80025bc <BSP_LCD_DisplayStringAt+0x178>)
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4403      	add	r3, r0
 8002596:	3308      	adds	r3, #8
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 800259c:	4299      	cmp	r1, r3
 800259e:	bf2c      	ite	cs
 80025a0:	2301      	movcs	r3, #1
 80025a2:	2300      	movcc	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4023      	ands	r3, r4
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1b7      	bne.n	800251e <BSP_LCD_DisplayStringAt+0xda>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3720      	adds	r7, #32
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}
 80025b8:	200003e8 	.word	0x200003e8
 80025bc:	200003ec 	.word	0x200003ec

080025c0 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80025cc:	f7ff feb8 	bl	8002340 <BSP_LCD_GetFont>
 80025d0:	4603      	mov	r3, r0
 80025d2:	88db      	ldrh	r3, [r3, #6]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	fb12 f303 	smulbb	r3, r2, r3
 80025da:	b299      	uxth	r1, r3
 80025dc:	2303      	movs	r3, #3
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff ff2f 	bl	8002444 <BSP_LCD_DisplayStringAt>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <BSP_LCD_DisplayOn+0x1c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80025fe:	4b03      	ldr	r3, [pc, #12]	@ (800260c <BSP_LCD_DisplayOn+0x1c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4798      	blx	r3
  }
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000404 	.word	0x20000404

08002610 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	@ 0x38
 8002614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	4b61      	ldr	r3, [pc, #388]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a60      	ldr	r2, [pc, #384]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002620:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b5e      	ldr	r3, [pc, #376]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	4b5a      	ldr	r3, [pc, #360]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a59      	ldr	r2, [pc, #356]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 800263c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b57      	ldr	r3, [pc, #348]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	4b53      	ldr	r3, [pc, #332]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	4a52      	ldr	r2, [pc, #328]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6313      	str	r3, [r2, #48]	@ 0x30
 800265e:	4b50      	ldr	r3, [pc, #320]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	4b4c      	ldr	r3, [pc, #304]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a4b      	ldr	r2, [pc, #300]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002674:	f043 0302 	orr.w	r3, r3, #2
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b49      	ldr	r3, [pc, #292]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a44      	ldr	r2, [pc, #272]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002690:	f043 0304 	orr.w	r3, r3, #4
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b42      	ldr	r3, [pc, #264]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b3e      	ldr	r3, [pc, #248]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	4a3d      	ldr	r2, [pc, #244]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026ac:	f043 0308 	orr.w	r3, r3, #8
 80026b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b2:	4b3b      	ldr	r3, [pc, #236]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b37      	ldr	r3, [pc, #220]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	4a36      	ldr	r2, [pc, #216]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026c8:	f043 0320 	orr.w	r3, r3, #32
 80026cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ce:	4b34      	ldr	r3, [pc, #208]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	4b30      	ldr	r3, [pc, #192]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	4a2f      	ldr	r2, [pc, #188]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ea:	4b2d      	ldr	r3, [pc, #180]	@ (80027a0 <BSP_LCD_MspInit+0x190>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f2:	607b      	str	r3, [r7, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80026f6:	f641 0358 	movw	r3, #6232	@ 0x1858
 80026fa:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002704:	2302      	movs	r3, #2
 8002706:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002708:	230e      	movs	r3, #14
 800270a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800270c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002710:	4619      	mov	r1, r3
 8002712:	4824      	ldr	r0, [pc, #144]	@ (80027a4 <BSP_LCD_MspInit+0x194>)
 8002714:	f001 f930 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002718:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800271e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002722:	4619      	mov	r1, r3
 8002724:	4820      	ldr	r0, [pc, #128]	@ (80027a8 <BSP_LCD_MspInit+0x198>)
 8002726:	f001 f927 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800272a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800272e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002734:	4619      	mov	r1, r3
 8002736:	481d      	ldr	r0, [pc, #116]	@ (80027ac <BSP_LCD_MspInit+0x19c>)
 8002738:	f001 f91e 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800273c:	2348      	movs	r3, #72	@ 0x48
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002744:	4619      	mov	r1, r3
 8002746:	481a      	ldr	r0, [pc, #104]	@ (80027b0 <BSP_LCD_MspInit+0x1a0>)
 8002748:	f001 f916 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800274c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002756:	4619      	mov	r1, r3
 8002758:	4816      	ldr	r0, [pc, #88]	@ (80027b4 <BSP_LCD_MspInit+0x1a4>)
 800275a:	f001 f90d 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800275e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002768:	4619      	mov	r1, r3
 800276a:	4813      	ldr	r0, [pc, #76]	@ (80027b8 <BSP_LCD_MspInit+0x1a8>)
 800276c:	f001 f904 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002770:	2303      	movs	r3, #3
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8002774:	2309      	movs	r3, #9
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800277c:	4619      	mov	r1, r3
 800277e:	480a      	ldr	r0, [pc, #40]	@ (80027a8 <BSP_LCD_MspInit+0x198>)
 8002780:	f001 f8fa 	bl	8003978 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002784:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800278a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278e:	4619      	mov	r1, r3
 8002790:	4809      	ldr	r0, [pc, #36]	@ (80027b8 <BSP_LCD_MspInit+0x1a8>)
 8002792:	f001 f8f1 	bl	8003978 <HAL_GPIO_Init>
}
 8002796:	bf00      	nop
 8002798:	3738      	adds	r7, #56	@ 0x38
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800

080027bc <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	603a      	str	r2, [r7, #0]
 80027c6:	80fb      	strh	r3, [r7, #6]
 80027c8:	460b      	mov	r3, r1
 80027ca:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <BSP_LCD_DrawPixel+0x44>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002804 <BSP_LCD_DrawPixel+0x48>)
 80027d2:	2134      	movs	r1, #52	@ 0x34
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	335c      	adds	r3, #92	@ 0x5c
 80027dc:	681c      	ldr	r4, [r3, #0]
 80027de:	88bd      	ldrh	r5, [r7, #4]
 80027e0:	f7ff fcd6 	bl	8002190 <BSP_LCD_GetXSize>
 80027e4:	4603      	mov	r3, r0
 80027e6:	fb03 f205 	mul.w	r2, r3, r5
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4423      	add	r3, r4
 80027f2:	461a      	mov	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	200003e8 	.word	0x200003e8
 8002804:	200002d0 	.word	0x200002d0

08002808 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	603a      	str	r2, [r7, #0]
 8002812:	80fb      	strh	r3, [r7, #6]
 8002814:	460b      	mov	r3, r1
 8002816:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002824:	4b53      	ldr	r3, [pc, #332]	@ (8002974 <DrawChar+0x16c>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4953      	ldr	r1, [pc, #332]	@ (8002978 <DrawChar+0x170>)
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3308      	adds	r3, #8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	88db      	ldrh	r3, [r3, #6]
 800283a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800283c:	4b4d      	ldr	r3, [pc, #308]	@ (8002974 <DrawChar+0x16c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	494d      	ldr	r1, [pc, #308]	@ (8002978 <DrawChar+0x170>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	440b      	add	r3, r1
 800284c:	3308      	adds	r3, #8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	889b      	ldrh	r3, [r3, #4]
 8002852:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8002854:	8a3b      	ldrh	r3, [r7, #16]
 8002856:	3307      	adds	r3, #7
 8002858:	2b00      	cmp	r3, #0
 800285a:	da00      	bge.n	800285e <DrawChar+0x56>
 800285c:	3307      	adds	r3, #7
 800285e:	10db      	asrs	r3, r3, #3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	b2da      	uxtb	r2, r3
 8002866:	8a3b      	ldrh	r3, [r7, #16]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e076      	b.n	8002962 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	3307      	adds	r3, #7
 8002878:	2b00      	cmp	r3, #0
 800287a:	da00      	bge.n	800287e <DrawChar+0x76>
 800287c:	3307      	adds	r3, #7
 800287e:	10db      	asrs	r3, r3, #3
 8002880:	461a      	mov	r2, r3
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800288e:	8a3b      	ldrh	r3, [r7, #16]
 8002890:	3307      	adds	r3, #7
 8002892:	2b00      	cmp	r3, #0
 8002894:	da00      	bge.n	8002898 <DrawChar+0x90>
 8002896:	3307      	adds	r3, #7
 8002898:	10db      	asrs	r3, r3, #3
 800289a:	2b01      	cmp	r3, #1
 800289c:	d002      	beq.n	80028a4 <DrawChar+0x9c>
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d004      	beq.n	80028ac <DrawChar+0xa4>
 80028a2:	e00c      	b.n	80028be <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]
        break;
 80028aa:	e016      	b.n	80028da <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	3201      	adds	r2, #1
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
        break;
 80028bc:	e00d      	b.n	80028da <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	041a      	lsls	r2, r3, #16
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	3301      	adds	r3, #1
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	4313      	orrs	r3, r2
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	3202      	adds	r2, #2
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
        break;
 80028d8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e036      	b.n	800294e <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 80028e0:	8a3a      	ldrh	r2, [r7, #16]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	4413      	add	r3, r2
 80028ea:	3b01      	subs	r3, #1
 80028ec:	2201      	movs	r2, #1
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	4413      	add	r3, r2
 8002904:	b298      	uxth	r0, r3
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <DrawChar+0x16c>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	491b      	ldr	r1, [pc, #108]	@ (8002978 <DrawChar+0x170>)
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	88bb      	ldrh	r3, [r7, #4]
 800291a:	4619      	mov	r1, r3
 800291c:	f7ff ff4e 	bl	80027bc <BSP_LCD_DrawPixel>
 8002920:	e012      	b.n	8002948 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	b29a      	uxth	r2, r3
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	4413      	add	r3, r2
 800292a:	b298      	uxth	r0, r3
 800292c:	4b11      	ldr	r3, [pc, #68]	@ (8002974 <DrawChar+0x16c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4911      	ldr	r1, [pc, #68]	@ (8002978 <DrawChar+0x170>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3304      	adds	r3, #4
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	88bb      	ldrh	r3, [r7, #4]
 8002942:	4619      	mov	r1, r3
 8002944:	f7ff ff3a 	bl	80027bc <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	3301      	adds	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	8a3b      	ldrh	r3, [r7, #16]
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	429a      	cmp	r2, r3
 8002954:	d3c4      	bcc.n	80028e0 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8002956:	88bb      	ldrh	r3, [r7, #4]
 8002958:	3301      	adds	r3, #1
 800295a:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	3301      	adds	r3, #1
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	8a7b      	ldrh	r3, [r7, #18]
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	429a      	cmp	r2, r3
 8002968:	d384      	bcc.n	8002874 <DrawChar+0x6c>
  }
}
 800296a:	bf00      	nop
 800296c:	bf00      	nop
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	200003e8 	.word	0x200003e8
 8002978:	200003ec 	.word	0x200003ec

0800297c <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800298a:	4b16      	ldr	r3, [pc, #88]	@ (80029e4 <FillBuffer+0x68>)
 800298c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002990:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002992:	4b14      	ldr	r3, [pc, #80]	@ (80029e4 <FillBuffer+0x68>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8002998:	4a12      	ldr	r2, [pc, #72]	@ (80029e4 <FillBuffer+0x68>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 800299e:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <FillBuffer+0x68>)
 80029a0:	4a11      	ldr	r2, [pc, #68]	@ (80029e8 <FillBuffer+0x6c>)
 80029a2:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80029a4:	480f      	ldr	r0, [pc, #60]	@ (80029e4 <FillBuffer+0x68>)
 80029a6:	f000 fd51 	bl	800344c <HAL_DMA2D_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d115      	bne.n	80029dc <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	480c      	ldr	r0, [pc, #48]	@ (80029e4 <FillBuffer+0x68>)
 80029b4:	f000 feb2 	bl	800371c <HAL_DMA2D_ConfigLayer>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69f9      	ldr	r1, [r7, #28]
 80029c8:	4806      	ldr	r0, [pc, #24]	@ (80029e4 <FillBuffer+0x68>)
 80029ca:	f000 fd92 	bl	80034f2 <HAL_DMA2D_Start>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80029d4:	210a      	movs	r1, #10
 80029d6:	4803      	ldr	r0, [pc, #12]	@ (80029e4 <FillBuffer+0x68>)
 80029d8:	f000 fdb6 	bl	8003548 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000378 	.word	0x20000378
 80029e8:	4002b000 	.word	0x4002b000

080029ec <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80029f0:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 80029f2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a9c <BSP_SDRAM_Init+0xb0>)
 80029f4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80029f6:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 80029f8:	2202      	movs	r2, #2
 80029fa:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80029fc:	4b28      	ldr	r3, [pc, #160]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 80029fe:	2207      	movs	r2, #7
 8002a00:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002a02:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 8002a04:	2204      	movs	r2, #4
 8002a06:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002a08:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002a0e:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 8002a10:	2202      	movs	r2, #2
 8002a12:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002a14:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 8002a16:	2202      	movs	r2, #2
 8002a18:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002a1a:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a2e:	2204      	movs	r2, #4
 8002a30:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002a32:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a34:	2210      	movs	r2, #16
 8002a36:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002a38:	4b17      	ldr	r3, [pc, #92]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a3a:	2240      	movs	r2, #64	@ 0x40
 8002a3c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a40:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a44:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002a46:	4b14      	ldr	r3, [pc, #80]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002a4c:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a52:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002a54:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a60:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002a62:	2100      	movs	r1, #0
 8002a64:	480c      	ldr	r0, [pc, #48]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a66:	f000 f87f 	bl	8002b68 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002a6a:	490d      	ldr	r1, [pc, #52]	@ (8002aa0 <BSP_SDRAM_Init+0xb4>)
 8002a6c:	480a      	ldr	r0, [pc, #40]	@ (8002a98 <BSP_SDRAM_Init+0xac>)
 8002a6e:	f002 fa97 	bl	8004fa0 <HAL_SDRAM_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa4 <BSP_SDRAM_Init+0xb8>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e002      	b.n	8002a86 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <BSP_SDRAM_Init+0xb8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002a86:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002a8a:	f000 f80d 	bl	8002aa8 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8002a8e:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <BSP_SDRAM_Init+0xb8>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000408 	.word	0x20000408
 8002a9c:	a0000140 	.word	0xa0000140
 8002aa0:	2000043c 	.word	0x2000043c
 8002aa4:	2000007c 	.word	0x2000007c

08002aa8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002aba:	4b29      	ldr	r3, [pc, #164]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002abc:	2208      	movs	r2, #8
 8002abe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002ac0:	4b27      	ldr	r3, [pc, #156]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002ac6:	4b26      	ldr	r3, [pc, #152]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002acc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ad0:	4923      	ldr	r1, [pc, #140]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ad2:	4824      	ldr	r0, [pc, #144]	@ (8002b64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ad4:	f002 faa2 	bl	800501c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f000 f9c3 	bl	8002e64 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002ade:	4b20      	ldr	r3, [pc, #128]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002aea:	4b1d      	ldr	r3, [pc, #116]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002af6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002afa:	4919      	ldr	r1, [pc, #100]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002afc:	4819      	ldr	r0, [pc, #100]	@ (8002b64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002afe:	f002 fa8d 	bl	800501c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002b02:	4b17      	ldr	r3, [pc, #92]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b04:	2203      	movs	r2, #3
 8002b06:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b08:	4b15      	ldr	r3, [pc, #84]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b0a:	2208      	movs	r2, #8
 8002b0c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b10:	2204      	movs	r2, #4
 8002b12:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b1e:	4910      	ldr	r1, [pc, #64]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b20:	4810      	ldr	r0, [pc, #64]	@ (8002b64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b22:	f002 fa7b 	bl	800501c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002b26:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002b2a:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b2e:	2204      	movs	r2, #4
 8002b30:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b34:	2208      	movs	r2, #8
 8002b36:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002b38:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a07      	ldr	r2, [pc, #28]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b42:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002b44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b48:	4905      	ldr	r1, [pc, #20]	@ (8002b60 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002b4a:	4806      	ldr	r0, [pc, #24]	@ (8002b64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b4c:	f002 fa66 	bl	800501c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002b54:	f002 fa97 	bl	8005086 <HAL_SDRAM_ProgramRefreshRate>
}
 8002b58:	bf00      	nop
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000458 	.word	0x20000458
 8002b64:	20000408 	.word	0x20000408

08002b68 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b090      	sub	sp, #64	@ 0x40
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80ec 	beq.w	8002d52 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b7e:	4b77      	ldr	r3, [pc, #476]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	4a76      	ldr	r2, [pc, #472]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b8a:	4b74      	ldr	r3, [pc, #464]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9a:	4b70      	ldr	r3, [pc, #448]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002ba0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	4b69      	ldr	r3, [pc, #420]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	4a68      	ldr	r2, [pc, #416]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc2:	4b66      	ldr	r3, [pc, #408]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	4b62      	ldr	r3, [pc, #392]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	4a61      	ldr	r2, [pc, #388]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bde:	4b5f      	ldr	r3, [pc, #380]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	4b5b      	ldr	r3, [pc, #364]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bfa:	4b58      	ldr	r3, [pc, #352]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	4b54      	ldr	r3, [pc, #336]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a53      	ldr	r2, [pc, #332]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c10:	f043 0310 	orr.w	r3, r3, #16
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b51      	ldr	r3, [pc, #324]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	4b4d      	ldr	r3, [pc, #308]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c2c:	f043 0320 	orr.w	r3, r3, #32
 8002c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c32:	4b4a      	ldr	r3, [pc, #296]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	4b46      	ldr	r3, [pc, #280]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	4a45      	ldr	r2, [pc, #276]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4e:	4b43      	ldr	r3, [pc, #268]	@ (8002d5c <BSP_SDRAM_MspInit+0x1f4>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002c66:	230c      	movs	r3, #12
 8002c68:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002c6a:	2360      	movs	r3, #96	@ 0x60
 8002c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c6e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c72:	4619      	mov	r1, r3
 8002c74:	483a      	ldr	r0, [pc, #232]	@ (8002d60 <BSP_SDRAM_MspInit+0x1f8>)
 8002c76:	f000 fe7f 	bl	8003978 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002c7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c82:	4619      	mov	r1, r3
 8002c84:	4837      	ldr	r0, [pc, #220]	@ (8002d64 <BSP_SDRAM_MspInit+0x1fc>)
 8002c86:	f000 fe77 	bl	8003978 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002c8a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002c94:	4619      	mov	r1, r3
 8002c96:	4834      	ldr	r0, [pc, #208]	@ (8002d68 <BSP_SDRAM_MspInit+0x200>)
 8002c98:	f000 fe6e 	bl	8003978 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002c9c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002ca2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4830      	ldr	r0, [pc, #192]	@ (8002d6c <BSP_SDRAM_MspInit+0x204>)
 8002caa:	f000 fe65 	bl	8003978 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002cae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002cb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cb8:	4619      	mov	r1, r3
 8002cba:	482d      	ldr	r0, [pc, #180]	@ (8002d70 <BSP_SDRAM_MspInit+0x208>)
 8002cbc:	f000 fe5c 	bl	8003978 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002cc0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4829      	ldr	r0, [pc, #164]	@ (8002d74 <BSP_SDRAM_MspInit+0x20c>)
 8002cce:	f000 fe53 	bl	8003978 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002cd2:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cd8:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002cda:	2280      	movs	r2, #128	@ 0x80
 8002cdc:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002cde:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002ce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ce4:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002ce6:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002ce8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cec:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002cf0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cf4:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002cf8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cfc:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d04:	4b1c      	ldr	r3, [pc, #112]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d06:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d0a:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d12:	4b19      	ldr	r3, [pc, #100]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d14:	2203      	movs	r2, #3
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d18:	4b17      	ldr	r3, [pc, #92]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002d1e:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002d24:	4b14      	ldr	r3, [pc, #80]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d26:	4a15      	ldr	r2, [pc, #84]	@ (8002d7c <BSP_SDRAM_MspInit+0x214>)
 8002d28:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a12      	ldr	r2, [pc, #72]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d30:	4a11      	ldr	r2, [pc, #68]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002d36:	4810      	ldr	r0, [pc, #64]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d38:	f000 fa78 	bl	800322c <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002d3c:	480e      	ldr	r0, [pc, #56]	@ (8002d78 <BSP_SDRAM_MspInit+0x210>)
 8002d3e:	f000 f9c7 	bl	80030d0 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d42:	2200      	movs	r2, #0
 8002d44:	210f      	movs	r1, #15
 8002d46:	2038      	movs	r0, #56	@ 0x38
 8002d48:	f000 f98b 	bl	8003062 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002d4c:	2038      	movs	r0, #56	@ 0x38
 8002d4e:	f000 f9a4 	bl	800309a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002d52:	bf00      	nop
 8002d54:	3740      	adds	r7, #64	@ 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40020800 	.word	0x40020800
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40021400 	.word	0x40021400
 8002d74:	40021800 	.word	0x40021800
 8002d78:	20000468 	.word	0x20000468
 8002d7c:	40026410 	.word	0x40026410

08002d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <HAL_Init+0x40>)
 8002d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <HAL_Init+0x40>)
 8002d96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9c:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <HAL_Init+0x40>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f000 f94f 	bl	800304c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dae:	200f      	movs	r0, #15
 8002db0:	f000 f808 	bl	8002dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db4:	f7fe f98a 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_InitTick+0x54>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_InitTick+0x58>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f967 	bl	80030b6 <HAL_SYSTICK_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00e      	b.n	8002e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d80a      	bhi.n	8002e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f000 f92f 	bl	8003062 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e04:	4a06      	ldr	r2, [pc, #24]	@ (8002e20 <HAL_InitTick+0x5c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000084 	.word	0x20000084
 8002e20:	20000080 	.word	0x20000080

08002e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x20>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000084 	.word	0x20000084
 8002e48:	200004c8 	.word	0x200004c8

08002e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e50:	4b03      	ldr	r3, [pc, #12]	@ (8002e60 <HAL_GetTick+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200004c8 	.word	0x200004c8

08002e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff ffee 	bl	8002e4c <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d005      	beq.n	8002e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_Delay+0x44>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e8a:	bf00      	nop
 8002e8c:	f7ff ffde 	bl	8002e4c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d8f7      	bhi.n	8002e8c <HAL_Delay+0x28>
  {
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000084 	.word	0x20000084

08002eac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002edc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ede:	4a04      	ldr	r2, [pc, #16]	@ (8002ef0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	60d3      	str	r3, [r2, #12]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	e000ed00 	.word	0xe000ed00

08002ef4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef8:	4b04      	ldr	r3, [pc, #16]	@ (8002f0c <__NVIC_GetPriorityGrouping+0x18>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	f003 0307 	and.w	r3, r3, #7
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	e000ed00 	.word	0xe000ed00

08002f10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0b      	blt.n	8002f3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <__NVIC_EnableIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	@ (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	@ (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	@ 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3b01      	subs	r3, #1
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003018:	d301      	bcc.n	800301e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800301a:	2301      	movs	r3, #1
 800301c:	e00f      	b.n	800303e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301e:	4a0a      	ldr	r2, [pc, #40]	@ (8003048 <SysTick_Config+0x40>)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003026:	210f      	movs	r1, #15
 8003028:	f04f 30ff 	mov.w	r0, #4294967295
 800302c:	f7ff ff8e 	bl	8002f4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <SysTick_Config+0x40>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <SysTick_Config+0x40>)
 8003038:	2207      	movs	r2, #7
 800303a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	e000e010 	.word	0xe000e010

0800304c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff ff29 	bl	8002eac <__NVIC_SetPriorityGrouping>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	4603      	mov	r3, r0
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003074:	f7ff ff3e 	bl	8002ef4 <__NVIC_GetPriorityGrouping>
 8003078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7ff ff8e 	bl	8002fa0 <NVIC_EncodePriority>
 8003084:	4602      	mov	r2, r0
 8003086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff ff5d 	bl	8002f4c <__NVIC_SetPriority>
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff31 	bl	8002f10 <__NVIC_EnableIRQ>
}
 80030ae:	bf00      	nop
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b082      	sub	sp, #8
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ffa2 	bl	8003008 <SysTick_Config>
 80030c4:	4603      	mov	r3, r0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff feb6 	bl	8002e4c <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e099      	b.n	8003220 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800310c:	e00f      	b.n	800312e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800310e:	f7ff fe9d 	bl	8002e4c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b05      	cmp	r3, #5
 800311a:	d908      	bls.n	800312e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2203      	movs	r2, #3
 8003126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e078      	b.n	8003220 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e8      	bne.n	800310e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4b38      	ldr	r3, [pc, #224]	@ (8003228 <HAL_DMA_Init+0x158>)
 8003148:	4013      	ands	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003166:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003172:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	2b04      	cmp	r3, #4
 8003186:	d107      	bne.n	8003198 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	4313      	orrs	r3, r2
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d117      	bne.n	80031f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00e      	beq.n	80031f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f8bd 	bl	8003354 <DMA_CheckFifoParam>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2240      	movs	r2, #64	@ 0x40
 80031e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80031ee:	2301      	movs	r3, #1
 80031f0:	e016      	b.n	8003220 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f874 	bl	80032e8 <DMA_CalcBaseAndBitshift>
 8003200:	4603      	mov	r3, r0
 8003202:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003208:	223f      	movs	r2, #63	@ 0x3f
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	f010803f 	.word	0xf010803f

0800322c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e050      	b.n	80032e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d101      	bne.n	800324e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800324a:	2302      	movs	r3, #2
 800324c:	e048      	b.n	80032e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2221      	movs	r2, #33	@ 0x21
 800328c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f82a 	bl	80032e8 <DMA_CalcBaseAndBitshift>
 8003294:	4603      	mov	r3, r0
 8003296:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c0:	223f      	movs	r2, #63	@ 0x3f
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	3b10      	subs	r3, #16
 80032f8:	4a14      	ldr	r2, [pc, #80]	@ (800334c <DMA_CalcBaseAndBitshift+0x64>)
 80032fa:	fba2 2303 	umull	r2, r3, r2, r3
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003302:	4a13      	ldr	r2, [pc, #76]	@ (8003350 <DMA_CalcBaseAndBitshift+0x68>)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d909      	bls.n	800332a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800331e:	f023 0303 	bic.w	r3, r3, #3
 8003322:	1d1a      	adds	r2, r3, #4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	@ 0x58
 8003328:	e007      	b.n	800333a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	aaaaaaab 	.word	0xaaaaaaab
 8003350:	0800a6d4 	.word	0x0800a6d4

08003354 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003364:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d11f      	bne.n	80033ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d856      	bhi.n	8003422 <DMA_CheckFifoParam+0xce>
 8003374:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <DMA_CheckFifoParam+0x28>)
 8003376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337a:	bf00      	nop
 800337c:	0800338d 	.word	0x0800338d
 8003380:	0800339f 	.word	0x0800339f
 8003384:	0800338d 	.word	0x0800338d
 8003388:	08003423 	.word	0x08003423
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003390:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d046      	beq.n	8003426 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800339c:	e043      	b.n	8003426 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033a6:	d140      	bne.n	800342a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ac:	e03d      	b.n	800342a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b6:	d121      	bne.n	80033fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d837      	bhi.n	800342e <DMA_CheckFifoParam+0xda>
 80033be:	a201      	add	r2, pc, #4	@ (adr r2, 80033c4 <DMA_CheckFifoParam+0x70>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033db 	.word	0x080033db
 80033cc:	080033d5 	.word	0x080033d5
 80033d0:	080033ed 	.word	0x080033ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e030      	b.n	800343c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d025      	beq.n	8003432 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ea:	e022      	b.n	8003432 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033f4:	d11f      	bne.n	8003436 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033fa:	e01c      	b.n	8003436 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d903      	bls.n	800340a <DMA_CheckFifoParam+0xb6>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d003      	beq.n	8003410 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003408:	e018      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      break;
 800340e:	e015      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00e      	beq.n	800343a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e00b      	b.n	800343a <DMA_CheckFifoParam+0xe6>
      break;
 8003422:	bf00      	nop
 8003424:	e00a      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      break;
 8003426:	bf00      	nop
 8003428:	e008      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      break;
 800342a:	bf00      	nop
 800342c:	e006      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
 8003430:	e004      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      break;
 8003432:	bf00      	nop
 8003434:	e002      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      break;   
 8003436:	bf00      	nop
 8003438:	e000      	b.n	800343c <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
    }
  } 
  
  return status; 
 800343c:	7bfb      	ldrb	r3, [r7, #15]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop

0800344c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e03b      	b.n	80034d6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f833 	bl	80034de <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349c:	f023 0107 	bic.w	r1, r3, #7
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d1      	ldr	r1, [r2, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}

080034de <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af02      	add	r7, sp, #8
 80034f8:	60f8      	str	r0, [r7, #12]
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_DMA2D_Start+0x1c>
 800350a:	2302      	movs	r3, #2
 800350c:	e018      	b.n	8003540 <HAL_DMA2D_Start+0x4e>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f989 	bl	8003840 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d056      	beq.n	8003612 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003564:	f7ff fc72 	bl	8002e4c <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800356a:	e04b      	b.n	8003604 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800357a:	2b00      	cmp	r3, #0
 800357c:	d023      	beq.n	80035c6 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	f043 0202 	orr.w	r2, r3, #2
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2221      	movs	r2, #33	@ 0x21
 80035b0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0a5      	b.n	8003712 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035cc:	d01a      	beq.n	8003604 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7ff fc3d 	bl	8002e4c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <HAL_DMA2D_PollForTransfer+0x9c>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2203      	movs	r2, #3
 80035f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e086      	b.n	8003712 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ac      	beq.n	800356c <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f003 0320 	and.w	r3, r3, #32
 800361c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003624:	f003 0320 	and.w	r3, r3, #32
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d061      	beq.n	80036f8 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003634:	f7ff fc0a 	bl	8002e4c <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800363a:	e056      	b.n	80036ea <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800364a:	2b00      	cmp	r3, #0
 800364c:	d02e      	beq.n	80036ac <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003672:	f043 0202 	orr.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2229      	movs	r2, #41	@ 0x29
 8003696:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2204      	movs	r2, #4
 800369c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e032      	b.n	8003712 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d01a      	beq.n	80036ea <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7ff fbca 	bl	8002e4c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <HAL_DMA2D_PollForTransfer+0x182>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ce:	f043 0220 	orr.w	r2, r3, #32
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2203      	movs	r2, #3
 80036da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e013      	b.n	8003712 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0a1      	beq.n	800363c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2212      	movs	r2, #18
 80036fe:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_DMA2D_ConfigLayer+0x20>
 8003738:	2302      	movs	r3, #2
 800373a:	e079      	b.n	8003830 <HAL_DMA2D_ConfigLayer+0x114>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	3318      	adds	r3, #24
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	4413      	add	r3, r2
 8003756:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	041b      	lsls	r3, r3, #16
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003766:	4b35      	ldr	r3, [pc, #212]	@ (800383c <HAL_DMA2D_ConfigLayer+0x120>)
 8003768:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b0a      	cmp	r3, #10
 8003770:	d003      	beq.n	800377a <HAL_DMA2D_ConfigLayer+0x5e>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b09      	cmp	r3, #9
 8003778:	d107      	bne.n	800378a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	e005      	b.n	8003796 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d120      	bne.n	80037de <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	ea02 0103 	and.w	r1, r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b0a      	cmp	r3, #10
 80037c4:	d003      	beq.n	80037ce <HAL_DMA2D_ConfigLayer+0xb2>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b09      	cmp	r3, #9
 80037cc:	d127      	bne.n	800381e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80037da:	629a      	str	r2, [r3, #40]	@ 0x28
 80037dc:	e01f      	b.n	800381e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	ea02 0103 	and.w	r1, r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b0a      	cmp	r3, #10
 8003806:	d003      	beq.n	8003810 <HAL_DMA2D_ConfigLayer+0xf4>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	2b09      	cmp	r3, #9
 800380e:	d106      	bne.n	800381e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800381c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	ff03000f 	.word	0xff03000f

08003840 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003840:	b480      	push	{r7}
 8003842:	b08b      	sub	sp, #44	@ 0x2c
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003854:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	041a      	lsls	r2, r3, #16
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	431a      	orrs	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003878:	d174      	bne.n	8003964 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003880:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003888:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003890:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	431a      	orrs	r2, r3
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b0:	e053      	b.n	800395a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d106      	bne.n	80038c8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4313      	orrs	r3, r2
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c6:	e048      	b.n	800395a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d111      	bne.n	80038f4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	0cdb      	lsrs	r3, r3, #19
 80038d4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	0a9b      	lsrs	r3, r3, #10
 80038da:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	08db      	lsrs	r3, r3, #3
 80038e0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	02db      	lsls	r3, r3, #11
 80038ea:	4313      	orrs	r3, r2
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f2:	e032      	b.n	800395a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d117      	bne.n	800392c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	0fdb      	lsrs	r3, r3, #31
 8003900:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	0cdb      	lsrs	r3, r3, #19
 8003906:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	0adb      	lsrs	r3, r3, #11
 800390c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	029b      	lsls	r3, r3, #10
 800391c:	431a      	orrs	r2, r3
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	03db      	lsls	r3, r3, #15
 8003922:	4313      	orrs	r3, r2
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	4313      	orrs	r3, r2
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
 800392a:	e016      	b.n	800395a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	0f1b      	lsrs	r3, r3, #28
 8003930:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	0d1b      	lsrs	r3, r3, #20
 8003936:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	0b1b      	lsrs	r3, r3, #12
 800393c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	011a      	lsls	r2, r3, #4
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	431a      	orrs	r2, r3
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	4313      	orrs	r3, r2
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003962:	e003      	b.n	800396c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	60da      	str	r2, [r3, #12]
}
 800396c:	bf00      	nop
 800396e:	372c      	adds	r7, #44	@ 0x2c
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003978:	b480      	push	{r7}
 800397a:	b089      	sub	sp, #36	@ 0x24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	e177      	b.n	8003c84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003994:	2201      	movs	r2, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	f040 8166 	bne.w	8003c7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d005      	beq.n	80039ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d130      	bne.n	8003a2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	2203      	movs	r2, #3
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a00:	2201      	movs	r2, #1
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 0201 	and.w	r2, r3, #1
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d017      	beq.n	8003a68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	2203      	movs	r2, #3
 8003a44:	fa02 f303 	lsl.w	r3, r2, r3
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f003 0303 	and.w	r3, r3, #3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d123      	bne.n	8003abc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	08da      	lsrs	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3208      	adds	r2, #8
 8003a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	220f      	movs	r2, #15
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	08da      	lsrs	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3208      	adds	r2, #8
 8003ab6:	69b9      	ldr	r1, [r7, #24]
 8003ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0203 	and.w	r2, r3, #3
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80c0 	beq.w	8003c7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	4b66      	ldr	r3, [pc, #408]	@ (8003c9c <HAL_GPIO_Init+0x324>)
 8003b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b06:	4a65      	ldr	r2, [pc, #404]	@ (8003c9c <HAL_GPIO_Init+0x324>)
 8003b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b0e:	4b63      	ldr	r3, [pc, #396]	@ (8003c9c <HAL_GPIO_Init+0x324>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b1a:	4a61      	ldr	r2, [pc, #388]	@ (8003ca0 <HAL_GPIO_Init+0x328>)
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	089b      	lsrs	r3, r3, #2
 8003b20:	3302      	adds	r3, #2
 8003b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	220f      	movs	r2, #15
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a58      	ldr	r2, [pc, #352]	@ (8003ca4 <HAL_GPIO_Init+0x32c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d037      	beq.n	8003bb6 <HAL_GPIO_Init+0x23e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a57      	ldr	r2, [pc, #348]	@ (8003ca8 <HAL_GPIO_Init+0x330>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d031      	beq.n	8003bb2 <HAL_GPIO_Init+0x23a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a56      	ldr	r2, [pc, #344]	@ (8003cac <HAL_GPIO_Init+0x334>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <HAL_GPIO_Init+0x236>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a55      	ldr	r2, [pc, #340]	@ (8003cb0 <HAL_GPIO_Init+0x338>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d025      	beq.n	8003baa <HAL_GPIO_Init+0x232>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a54      	ldr	r2, [pc, #336]	@ (8003cb4 <HAL_GPIO_Init+0x33c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <HAL_GPIO_Init+0x22e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a53      	ldr	r2, [pc, #332]	@ (8003cb8 <HAL_GPIO_Init+0x340>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d019      	beq.n	8003ba2 <HAL_GPIO_Init+0x22a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a52      	ldr	r2, [pc, #328]	@ (8003cbc <HAL_GPIO_Init+0x344>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_GPIO_Init+0x226>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a51      	ldr	r2, [pc, #324]	@ (8003cc0 <HAL_GPIO_Init+0x348>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00d      	beq.n	8003b9a <HAL_GPIO_Init+0x222>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a50      	ldr	r2, [pc, #320]	@ (8003cc4 <HAL_GPIO_Init+0x34c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <HAL_GPIO_Init+0x21e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a4f      	ldr	r2, [pc, #316]	@ (8003cc8 <HAL_GPIO_Init+0x350>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <HAL_GPIO_Init+0x21a>
 8003b8e:	2309      	movs	r3, #9
 8003b90:	e012      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b92:	230a      	movs	r3, #10
 8003b94:	e010      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b96:	2308      	movs	r3, #8
 8003b98:	e00e      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b9a:	2307      	movs	r3, #7
 8003b9c:	e00c      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003b9e:	2306      	movs	r3, #6
 8003ba0:	e00a      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003ba2:	2305      	movs	r3, #5
 8003ba4:	e008      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003ba6:	2304      	movs	r3, #4
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003baa:	2303      	movs	r3, #3
 8003bac:	e004      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e002      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_GPIO_Init+0x240>
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	f002 0203 	and.w	r2, r2, #3
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4093      	lsls	r3, r2
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bc8:	4935      	ldr	r1, [pc, #212]	@ (8003ca0 <HAL_GPIO_Init+0x328>)
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	089b      	lsrs	r3, r3, #2
 8003bce:	3302      	adds	r3, #2
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c00:	4b32      	ldr	r3, [pc, #200]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c24:	4a29      	ldr	r2, [pc, #164]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c2a:	4b28      	ldr	r3, [pc, #160]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	43db      	mvns	r3, r3
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	4013      	ands	r3, r2
 8003c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c54:	4b1d      	ldr	r3, [pc, #116]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c78:	4a14      	ldr	r2, [pc, #80]	@ (8003ccc <HAL_GPIO_Init+0x354>)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	f67f ae84 	bls.w	8003994 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	3724      	adds	r7, #36	@ 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40013800 	.word	0x40013800
 8003ca4:	40020000 	.word	0x40020000
 8003ca8:	40020400 	.word	0x40020400
 8003cac:	40020800 	.word	0x40020800
 8003cb0:	40020c00 	.word	0x40020c00
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	40021400 	.word	0x40021400
 8003cbc:	40021800 	.word	0x40021800
 8003cc0:	40021c00 	.word	0x40021c00
 8003cc4:	40022000 	.word	0x40022000
 8003cc8:	40022400 	.word	0x40022400
 8003ccc:	40013c00 	.word	0x40013c00

08003cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce0:	787b      	ldrb	r3, [r7, #1]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ce6:	887a      	ldrh	r2, [r7, #2]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cec:	e003      	b.n	8003cf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cee:	887b      	ldrh	r3, [r7, #2]
 8003cf0:	041a      	lsls	r2, r3, #16
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	619a      	str	r2, [r3, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e0bf      	b.n	8003e96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f8ba 	bl	8003ea4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003d46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6899      	ldr	r1, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ea0 <HAL_LTDC_Init+0x19c>)
 8003d78:	400b      	ands	r3, r1
 8003d7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6899      	ldr	r1, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68d9      	ldr	r1, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea0 <HAL_LTDC_Init+0x19c>)
 8003da6:	400b      	ands	r3, r1
 8003da8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68d9      	ldr	r1, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1a      	ldr	r2, [r3, #32]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6919      	ldr	r1, [r3, #16]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b33      	ldr	r3, [pc, #204]	@ (8003ea0 <HAL_LTDC_Init+0x19c>)
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6919      	ldr	r1, [r3, #16]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6959      	ldr	r1, [r3, #20]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_LTDC_Init+0x19c>)
 8003e02:	400b      	ands	r3, r1
 8003e04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	041b      	lsls	r3, r3, #16
 8003e0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6959      	ldr	r1, [r3, #20]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003e34:	041b      	lsls	r3, r3, #16
 8003e36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003e46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0206 	orr.w	r2, r2, #6
 8003e72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699a      	ldr	r2, [r3, #24]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	f000f800 	.word	0xf000f800

08003ea4 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_LTDC_ConfigLayer+0x1a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e02c      	b.n	8003f2c <HAL_LTDC_ConfigLayer+0x74>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2134      	movs	r1, #52	@ 0x34
 8003ee8:	fb01 f303 	mul.w	r3, r1, r3
 8003eec:	4413      	add	r3, r2
 8003eee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f83b 	bl	8003f88 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bdb0      	pop	{r4, r5, r7, pc}

08003f34 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_LTDC_EnableDither+0x16>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e016      	b.n	8003f78 <HAL_LTDC_EnableDither+0x44>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2202      	movs	r2, #2
 8003f56:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <HAL_LTDC_EnableDither+0x50>)
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	4a09      	ldr	r2, [pc, #36]	@ (8003f84 <HAL_LTDC_EnableDither+0x50>)
 8003f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f64:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40016800 	.word	0x40016800

08003f88 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	@ 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	0c1b      	lsrs	r3, r3, #16
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	4413      	add	r3, r2
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	01db      	lsls	r3, r3, #7
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3384      	adds	r3, #132	@ 0x84
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	01d2      	lsls	r2, r2, #7
 8003fc4:	440a      	add	r2, r1
 8003fc6:	3284      	adds	r2, #132	@ 0x84
 8003fc8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003fcc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fde:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003fe0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	01db      	lsls	r3, r3, #7
 8003fec:	440b      	add	r3, r1
 8003fee:	3384      	adds	r3, #132	@ 0x84
 8003ff0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ff6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	68da      	ldr	r2, [r3, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004006:	4413      	add	r3, r2
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	01db      	lsls	r3, r3, #7
 8004016:	4413      	add	r3, r2
 8004018:	3384      	adds	r3, #132	@ 0x84
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	6812      	ldr	r2, [r2, #0]
 8004020:	4611      	mov	r1, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	01d2      	lsls	r2, r2, #7
 8004026:	440a      	add	r2, r1
 8004028:	3284      	adds	r2, #132	@ 0x84
 800402a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800402e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403e:	4413      	add	r3, r2
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4619      	mov	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	01db      	lsls	r3, r3, #7
 800404c:	440b      	add	r3, r1
 800404e:	3384      	adds	r3, #132	@ 0x84
 8004050:	4619      	mov	r1, r3
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	01db      	lsls	r3, r3, #7
 8004062:	4413      	add	r3, r2
 8004064:	3384      	adds	r3, #132	@ 0x84
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	4611      	mov	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	01d2      	lsls	r2, r2, #7
 8004072:	440a      	add	r2, r1
 8004074:	3284      	adds	r2, #132	@ 0x84
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	01db      	lsls	r3, r3, #7
 8004086:	4413      	add	r3, r2
 8004088:	3384      	adds	r3, #132	@ 0x84
 800408a:	461a      	mov	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	061b      	lsls	r3, r3, #24
 80040ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	01db      	lsls	r3, r3, #7
 80040b8:	4413      	add	r3, r2
 80040ba:	3384      	adds	r3, #132	@ 0x84
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	01db      	lsls	r3, r3, #7
 80040c8:	4413      	add	r3, r2
 80040ca:	3384      	adds	r3, #132	@ 0x84
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040d8:	461a      	mov	r2, r3
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	431a      	orrs	r2, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	431a      	orrs	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4619      	mov	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	01db      	lsls	r3, r3, #7
 80040ec:	440b      	add	r3, r1
 80040ee:	3384      	adds	r3, #132	@ 0x84
 80040f0:	4619      	mov	r1, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	01db      	lsls	r3, r3, #7
 8004102:	4413      	add	r3, r2
 8004104:	3384      	adds	r3, #132	@ 0x84
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	4611      	mov	r1, r2
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	01d2      	lsls	r2, r2, #7
 8004112:	440a      	add	r2, r1
 8004114:	3284      	adds	r2, #132	@ 0x84
 8004116:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800411a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	01db      	lsls	r3, r3, #7
 8004126:	4413      	add	r3, r2
 8004128:	3384      	adds	r3, #132	@ 0x84
 800412a:	461a      	mov	r2, r3
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	01db      	lsls	r3, r3, #7
 800413c:	4413      	add	r3, r2
 800413e:	3384      	adds	r3, #132	@ 0x84
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	6812      	ldr	r2, [r2, #0]
 8004146:	4611      	mov	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	01d2      	lsls	r2, r2, #7
 800414c:	440a      	add	r2, r1
 800414e:	3284      	adds	r2, #132	@ 0x84
 8004150:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004154:	f023 0307 	bic.w	r3, r3, #7
 8004158:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	6809      	ldr	r1, [r1, #0]
 8004166:	4608      	mov	r0, r1
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	01c9      	lsls	r1, r1, #7
 800416c:	4401      	add	r1, r0
 800416e:	3184      	adds	r1, #132	@ 0x84
 8004170:	4313      	orrs	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	01db      	lsls	r3, r3, #7
 800417e:	4413      	add	r3, r2
 8004180:	3384      	adds	r3, #132	@ 0x84
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	01db      	lsls	r3, r3, #7
 800418e:	4413      	add	r3, r2
 8004190:	3384      	adds	r3, #132	@ 0x84
 8004192:	461a      	mov	r2, r3
 8004194:	2300      	movs	r3, #0
 8004196:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	01db      	lsls	r3, r3, #7
 80041a2:	4413      	add	r3, r2
 80041a4:	3384      	adds	r3, #132	@ 0x84
 80041a6:	461a      	mov	r2, r3
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d102      	bne.n	80041bc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80041b6:	2304      	movs	r3, #4
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e01b      	b.n	80041f4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d102      	bne.n	80041ca <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80041c4:	2303      	movs	r3, #3
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	e014      	b.n	80041f4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d00b      	beq.n	80041ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d007      	beq.n	80041ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d003      	beq.n	80041ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80041e6:	2b07      	cmp	r3, #7
 80041e8:	d102      	bne.n	80041f0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80041ea:	2302      	movs	r3, #2
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e001      	b.n	80041f4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80041f0:	2301      	movs	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4413      	add	r3, r2
 8004200:	3384      	adds	r3, #132	@ 0x84
 8004202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4611      	mov	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	01d2      	lsls	r2, r2, #7
 800420e:	440a      	add	r2, r1
 8004210:	3284      	adds	r2, #132	@ 0x84
 8004212:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004216:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	1acb      	subs	r3, r1, r3
 800422e:	69f9      	ldr	r1, [r7, #28]
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004236:	68f9      	ldr	r1, [r7, #12]
 8004238:	6809      	ldr	r1, [r1, #0]
 800423a:	4608      	mov	r0, r1
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	01c9      	lsls	r1, r1, #7
 8004240:	4401      	add	r1, r0
 8004242:	3184      	adds	r1, #132	@ 0x84
 8004244:	4313      	orrs	r3, r2
 8004246:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	01db      	lsls	r3, r3, #7
 8004252:	4413      	add	r3, r2
 8004254:	3384      	adds	r3, #132	@ 0x84
 8004256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	4611      	mov	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	01d2      	lsls	r2, r2, #7
 8004262:	440a      	add	r2, r1
 8004264:	3284      	adds	r2, #132	@ 0x84
 8004266:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800426a:	f023 0307 	bic.w	r3, r3, #7
 800426e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	01db      	lsls	r3, r3, #7
 800427a:	4413      	add	r3, r2
 800427c:	3384      	adds	r3, #132	@ 0x84
 800427e:	461a      	mov	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	01db      	lsls	r3, r3, #7
 8004290:	4413      	add	r3, r2
 8004292:	3384      	adds	r3, #132	@ 0x84
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	4611      	mov	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	01d2      	lsls	r2, r2, #7
 80042a0:	440a      	add	r2, r1
 80042a2:	3284      	adds	r2, #132	@ 0x84
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6013      	str	r3, [r2, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3724      	adds	r7, #36	@ 0x24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
	...

080042b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042c2:	2300      	movs	r3, #0
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4b20      	ldr	r3, [pc, #128]	@ (8004348 <HAL_PWREx_EnableOverDrive+0x90>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004348 <HAL_PWREx_EnableOverDrive+0x90>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <HAL_PWREx_EnableOverDrive+0x90>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042de:	4b1b      	ldr	r3, [pc, #108]	@ (800434c <HAL_PWREx_EnableOverDrive+0x94>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e4:	f7fe fdb2 	bl	8002e4c <HAL_GetTick>
 80042e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ea:	e009      	b.n	8004300 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ec:	f7fe fdae 	bl	8002e4c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042fa:	d901      	bls.n	8004300 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80042fc:	2303      	movs	r3, #3
 80042fe:	e01f      	b.n	8004340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x98>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430c:	d1ee      	bne.n	80042ec <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800430e:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004310:	2201      	movs	r2, #1
 8004312:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004314:	f7fe fd9a 	bl	8002e4c <HAL_GetTick>
 8004318:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800431a:	e009      	b.n	8004330 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800431c:	f7fe fd96 	bl	8002e4c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800432a:	d901      	bls.n	8004330 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e007      	b.n	8004340 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x98>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004338:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433c:	d1ee      	bne.n	800431c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	420e0040 	.word	0x420e0040
 8004350:	40007000 	.word	0x40007000
 8004354:	420e0044 	.word	0x420e0044

08004358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e267      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d075      	beq.n	8004462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004376:	4b88      	ldr	r3, [pc, #544]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b04      	cmp	r3, #4
 8004380:	d00c      	beq.n	800439c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004382:	4b85      	ldr	r3, [pc, #532]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800438a:	2b08      	cmp	r3, #8
 800438c:	d112      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b82      	ldr	r3, [pc, #520]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800439a:	d10b      	bne.n	80043b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	4b7e      	ldr	r3, [pc, #504]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05b      	beq.n	8004460 <HAL_RCC_OscConfig+0x108>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d157      	bne.n	8004460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e242      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x74>
 80043be:	4b76      	ldr	r3, [pc, #472]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e01d      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x98>
 80043d6:	4b70      	ldr	r3, [pc, #448]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6f      	ldr	r2, [pc, #444]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b6d      	ldr	r3, [pc, #436]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e00b      	b.n	8004408 <HAL_RCC_OscConfig+0xb0>
 80043f0:	4b69      	ldr	r3, [pc, #420]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a68      	ldr	r2, [pc, #416]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b66      	ldr	r3, [pc, #408]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a65      	ldr	r2, [pc, #404]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fe fd1c 	bl	8002e4c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fe fd18 	bl	8002e4c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	@ 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e207      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442a:	4b5b      	ldr	r3, [pc, #364]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0xc0>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe fd08 	bl	8002e4c <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fe fd04 	bl	8002e4c <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e1f3      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004452:	4b51      	ldr	r3, [pc, #324]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0xe8>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d063      	beq.n	8004536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800446e:	4b4a      	ldr	r3, [pc, #296]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800447a:	4b47      	ldr	r3, [pc, #284]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004482:	2b08      	cmp	r3, #8
 8004484:	d11c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b44      	ldr	r3, [pc, #272]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d116      	bne.n	80044c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004492:	4b41      	ldr	r3, [pc, #260]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d001      	beq.n	80044aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e1c7      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4937      	ldr	r1, [pc, #220]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	e03a      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d020      	beq.n	800450a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044c8:	4b34      	ldr	r3, [pc, #208]	@ (800459c <HAL_RCC_OscConfig+0x244>)
 80044ca:	2201      	movs	r2, #1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ce:	f7fe fcbd 	bl	8002e4c <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044d6:	f7fe fcb9 	bl	8002e4c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1a8      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f0      	beq.n	80044d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b28      	ldr	r3, [pc, #160]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4925      	ldr	r1, [pc, #148]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 8004504:	4313      	orrs	r3, r2
 8004506:	600b      	str	r3, [r1, #0]
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800450a:	4b24      	ldr	r3, [pc, #144]	@ (800459c <HAL_RCC_OscConfig+0x244>)
 800450c:	2200      	movs	r2, #0
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004510:	f7fe fc9c 	bl	8002e4c <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004518:	f7fe fc98 	bl	8002e4c <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e187      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452a:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d036      	beq.n	80045b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d016      	beq.n	8004578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <HAL_RCC_OscConfig+0x248>)
 800454c:	2201      	movs	r2, #1
 800454e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004550:	f7fe fc7c 	bl	8002e4c <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004558:	f7fe fc78 	bl	8002e4c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e167      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456a:	4b0b      	ldr	r3, [pc, #44]	@ (8004598 <HAL_RCC_OscConfig+0x240>)
 800456c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x200>
 8004576:	e01b      	b.n	80045b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004578:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <HAL_RCC_OscConfig+0x248>)
 800457a:	2200      	movs	r2, #0
 800457c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457e:	f7fe fc65 	bl	8002e4c <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	e00e      	b.n	80045a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004586:	f7fe fc61 	bl	8002e4c <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d907      	bls.n	80045a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e150      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 8004598:	40023800 	.word	0x40023800
 800459c:	42470000 	.word	0x42470000
 80045a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	4b88      	ldr	r3, [pc, #544]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1ea      	bne.n	8004586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8097 	beq.w	80046ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045c2:	4b81      	ldr	r3, [pc, #516]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10f      	bne.n	80045ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ce:	2300      	movs	r3, #0
 80045d0:	60bb      	str	r3, [r7, #8]
 80045d2:	4b7d      	ldr	r3, [pc, #500]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	4a7c      	ldr	r2, [pc, #496]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80045de:	4b7a      	ldr	r3, [pc, #488]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	60bb      	str	r3, [r7, #8]
 80045e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ee:	4b77      	ldr	r3, [pc, #476]	@ (80047cc <HAL_RCC_OscConfig+0x474>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d118      	bne.n	800462c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fa:	4b74      	ldr	r3, [pc, #464]	@ (80047cc <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a73      	ldr	r2, [pc, #460]	@ (80047cc <HAL_RCC_OscConfig+0x474>)
 8004600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004606:	f7fe fc21 	bl	8002e4c <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800460e:	f7fe fc1d 	bl	8002e4c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e10c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	4b6a      	ldr	r3, [pc, #424]	@ (80047cc <HAL_RCC_OscConfig+0x474>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d106      	bne.n	8004642 <HAL_RCC_OscConfig+0x2ea>
 8004634:	4b64      	ldr	r3, [pc, #400]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004638:	4a63      	ldr	r2, [pc, #396]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004640:	e01c      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d10c      	bne.n	8004664 <HAL_RCC_OscConfig+0x30c>
 800464a:	4b5f      	ldr	r3, [pc, #380]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	4a5e      	ldr	r2, [pc, #376]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	6713      	str	r3, [r2, #112]	@ 0x70
 8004656:	4b5c      	ldr	r3, [pc, #368]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	4a5b      	ldr	r2, [pc, #364]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	6713      	str	r3, [r2, #112]	@ 0x70
 8004662:	e00b      	b.n	800467c <HAL_RCC_OscConfig+0x324>
 8004664:	4b58      	ldr	r3, [pc, #352]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004668:	4a57      	ldr	r2, [pc, #348]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004670:	4b55      	ldr	r3, [pc, #340]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4a54      	ldr	r2, [pc, #336]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0304 	bic.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004684:	f7fe fbe2 	bl	8002e4c <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800468c:	f7fe fbde 	bl	8002e4c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e0cb      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	4b49      	ldr	r3, [pc, #292]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0ee      	beq.n	800468c <HAL_RCC_OscConfig+0x334>
 80046ae:	e014      	b.n	80046da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b0:	f7fe fbcc 	bl	8002e4c <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	e00a      	b.n	80046ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046b8:	f7fe fbc8 	bl	8002e4c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e0b5      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ce:	4b3e      	ldr	r3, [pc, #248]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ee      	bne.n	80046b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046da:	7dfb      	ldrb	r3, [r7, #23]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d105      	bne.n	80046ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046e0:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e4:	4a38      	ldr	r2, [pc, #224]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a1 	beq.w	8004838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046f6:	4b34      	ldr	r3, [pc, #208]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d05c      	beq.n	80047bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	2b02      	cmp	r3, #2
 8004708:	d141      	bne.n	800478e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470a:	4b31      	ldr	r3, [pc, #196]	@ (80047d0 <HAL_RCC_OscConfig+0x478>)
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004710:	f7fe fb9c 	bl	8002e4c <HAL_GetTick>
 8004714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004718:	f7fe fb98 	bl	8002e4c <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e087      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472a:	4b27      	ldr	r3, [pc, #156]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474c:	085b      	lsrs	r3, r3, #1
 800474e:	3b01      	subs	r3, #1
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	061b      	lsls	r3, r3, #24
 800475a:	491b      	ldr	r1, [pc, #108]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fe fb71 	bl	8002e4c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476e:	f7fe fb6d 	bl	8002e4c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e05c      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x416>
 800478c:	e054      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <HAL_RCC_OscConfig+0x478>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fe fb5a 	bl	8002e4c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fe fb56 	bl	8002e4c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e045      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	@ (80047c8 <HAL_RCC_OscConfig+0x470>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x444>
 80047ba:	e03d      	b.n	8004838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e038      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004844 <HAL_RCC_OscConfig+0x4ec>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d028      	beq.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d121      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11a      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004804:	4013      	ands	r3, r2
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800480a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800480c:	4293      	cmp	r3, r2
 800480e:	d111      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	3b01      	subs	r3, #1
 800481e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0cc      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800485c:	4b68      	ldr	r3, [pc, #416]	@ (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 030f 	and.w	r3, r3, #15
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d90c      	bls.n	8004884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486a:	4b65      	ldr	r3, [pc, #404]	@ (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004872:	4b63      	ldr	r3, [pc, #396]	@ (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 030f 	and.w	r3, r3, #15
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	429a      	cmp	r2, r3
 800487e:	d001      	beq.n	8004884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e0b8      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d020      	beq.n	80048d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a58      	ldr	r2, [pc, #352]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048b4:	4b53      	ldr	r3, [pc, #332]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4a52      	ldr	r2, [pc, #328]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c0:	4b50      	ldr	r3, [pc, #320]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	494d      	ldr	r1, [pc, #308]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d044      	beq.n	8004968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d107      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e6:	4b47      	ldr	r3, [pc, #284]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d119      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	2b03      	cmp	r3, #3
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b3f      	ldr	r3, [pc, #252]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e06f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004916:	4b3b      	ldr	r3, [pc, #236]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e067      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f023 0203 	bic.w	r2, r3, #3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4934      	ldr	r1, [pc, #208]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004938:	f7fe fa88 	bl	8002e4c <HAL_GetTick>
 800493c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800493e:	e00a      	b.n	8004956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004940:	f7fe fa84 	bl	8002e4c <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e04f      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004956:	4b2b      	ldr	r3, [pc, #172]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 020c 	and.w	r2, r3, #12
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	429a      	cmp	r2, r3
 8004966:	d1eb      	bne.n	8004940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004968:	4b25      	ldr	r3, [pc, #148]	@ (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d20c      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b22      	ldr	r3, [pc, #136]	@ (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b20      	ldr	r3, [pc, #128]	@ (8004a00 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e032      	b.n	80049f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b19      	ldr	r3, [pc, #100]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4916      	ldr	r1, [pc, #88]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b12      	ldr	r3, [pc, #72]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	490e      	ldr	r1, [pc, #56]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049ce:	f000 f821 	bl	8004a14 <HAL_RCC_GetSysClockFreq>
 80049d2:	4602      	mov	r2, r0
 80049d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a04 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	091b      	lsrs	r3, r3, #4
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	490a      	ldr	r1, [pc, #40]	@ (8004a08 <HAL_RCC_ClockConfig+0x1c0>)
 80049e0:	5ccb      	ldrb	r3, [r1, r3]
 80049e2:	fa22 f303 	lsr.w	r3, r2, r3
 80049e6:	4a09      	ldr	r2, [pc, #36]	@ (8004a0c <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049ea:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe f9e8 	bl	8002dc4 <HAL_InitTick>

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023c00 	.word	0x40023c00
 8004a04:	40023800 	.word	0x40023800
 8004a08:	08008c0c 	.word	0x08008c0c
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	20000080 	.word	0x20000080

08004a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b094      	sub	sp, #80	@ 0x50
 8004a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a2c:	4b79      	ldr	r3, [pc, #484]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 030c 	and.w	r3, r3, #12
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d00d      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x40>
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	f200 80e1 	bhi.w	8004c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_RCC_GetSysClockFreq+0x34>
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a46:	e0db      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a48:	4b73      	ldr	r3, [pc, #460]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a4c:	e0db      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a4e:	4b73      	ldr	r3, [pc, #460]	@ (8004c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8004a50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a52:	e0d8      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a54:	4b6f      	ldr	r3, [pc, #444]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d063      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	099b      	lsrs	r3, r3, #6
 8004a70:	2200      	movs	r2, #0
 8004a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a86:	4622      	mov	r2, r4
 8004a88:	462b      	mov	r3, r5
 8004a8a:	f04f 0000 	mov.w	r0, #0
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	0159      	lsls	r1, r3, #5
 8004a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a98:	0150      	lsls	r0, r2, #5
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	1a51      	subs	r1, r2, r1
 8004aa2:	6139      	str	r1, [r7, #16]
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab8:	4659      	mov	r1, fp
 8004aba:	018b      	lsls	r3, r1, #6
 8004abc:	4651      	mov	r1, sl
 8004abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	018a      	lsls	r2, r1, #6
 8004ac6:	4651      	mov	r1, sl
 8004ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8004acc:	4659      	mov	r1, fp
 8004ace:	eb63 0901 	sbc.w	r9, r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ae6:	4690      	mov	r8, r2
 8004ae8:	4699      	mov	r9, r3
 8004aea:	4623      	mov	r3, r4
 8004aec:	eb18 0303 	adds.w	r3, r8, r3
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	462b      	mov	r3, r5
 8004af4:	eb49 0303 	adc.w	r3, r9, r3
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b06:	4629      	mov	r1, r5
 8004b08:	024b      	lsls	r3, r1, #9
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b10:	4621      	mov	r1, r4
 8004b12:	024a      	lsls	r2, r1, #9
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b24:	f7fc f850 	bl	8000bc8 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b30:	e058      	b.n	8004be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b32:	4b38      	ldr	r3, [pc, #224]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	099b      	lsrs	r3, r3, #6
 8004b38:	2200      	movs	r2, #0
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	2300      	movs	r3, #0
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	f04f 0000 	mov.w	r0, #0
 8004b54:	f04f 0100 	mov.w	r1, #0
 8004b58:	0159      	lsls	r1, r3, #5
 8004b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b5e:	0150      	lsls	r0, r2, #5
 8004b60:	4602      	mov	r2, r0
 8004b62:	460b      	mov	r3, r1
 8004b64:	4641      	mov	r1, r8
 8004b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b84:	ebb2 040a 	subs.w	r4, r2, sl
 8004b88:	eb63 050b 	sbc.w	r5, r3, fp
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	00eb      	lsls	r3, r5, #3
 8004b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b9a:	00e2      	lsls	r2, r4, #3
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	4643      	mov	r3, r8
 8004ba2:	18e3      	adds	r3, r4, r3
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	eb45 0303 	adc.w	r3, r5, r3
 8004bac:	607b      	str	r3, [r7, #4]
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	f04f 0300 	mov.w	r3, #0
 8004bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bba:	4629      	mov	r1, r5
 8004bbc:	028b      	lsls	r3, r1, #10
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	028a      	lsls	r2, r1, #10
 8004bc8:	4610      	mov	r0, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bce:	2200      	movs	r2, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
 8004bd2:	61fa      	str	r2, [r7, #28]
 8004bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bd8:	f7fb fff6 	bl	8000bc8 <__aeabi_uldivmod>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	4613      	mov	r3, r2
 8004be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004be4:	4b0b      	ldr	r3, [pc, #44]	@ (8004c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	0c1b      	lsrs	r3, r3, #16
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004bf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bfe:	e002      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3750      	adds	r7, #80	@ 0x50
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800
 8004c18:	00f42400 	.word	0x00f42400
 8004c1c:	007a1200 	.word	0x007a1200

08004c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d075      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c54:	4b91      	ldr	r3, [pc, #580]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5a:	f7fe f8f7 	bl	8002e4c <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c60:	e008      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c62:	f7fe f8f3 	bl	8002e4c <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e189      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c74:	4b8a      	ldr	r3, [pc, #552]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1f0      	bne.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	019a      	lsls	r2, r3, #6
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	071b      	lsls	r3, r3, #28
 8004c98:	4981      	ldr	r1, [pc, #516]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01f      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cac:	4b7c      	ldr	r3, [pc, #496]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cb2:	0f1b      	lsrs	r3, r3, #28
 8004cb4:	f003 0307 	and.w	r3, r3, #7
 8004cb8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	019a      	lsls	r2, r3, #6
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	061b      	lsls	r3, r3, #24
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	071b      	lsls	r3, r3, #28
 8004ccc:	4974      	ldr	r1, [pc, #464]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cd4:	4b72      	ldr	r3, [pc, #456]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cda:	f023 021f 	bic.w	r2, r3, #31
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	496e      	ldr	r1, [pc, #440]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00d      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	019a      	lsls	r2, r3, #6
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	071b      	lsls	r3, r3, #28
 8004d0c:	4964      	ldr	r1, [pc, #400]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d14:	4b61      	ldr	r3, [pc, #388]	@ (8004e9c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fe f897 	bl	8002e4c <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d22:	f7fe f893 	bl	8002e4c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e129      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d34:	4b5a      	ldr	r3, [pc, #360]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d079      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d58:	4b52      	ldr	r3, [pc, #328]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d5e:	f7fe f875 	bl	8002e4c <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d66:	f7fe f871 	bl	8002e4c <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e107      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d78:	4b49      	ldr	r3, [pc, #292]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d84:	d0ef      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d020      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d92:	4b43      	ldr	r3, [pc, #268]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	0f1b      	lsrs	r3, r3, #28
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	019a      	lsls	r2, r3, #6
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	061b      	lsls	r3, r3, #24
 8004dac:	431a      	orrs	r2, r3
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	071b      	lsls	r3, r3, #28
 8004db2:	493b      	ldr	r1, [pc, #236]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004dba:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	4934      	ldr	r1, [pc, #208]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01e      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004de0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de6:	0e1b      	lsrs	r3, r3, #24
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	019a      	lsls	r2, r3, #6
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	061b      	lsls	r3, r3, #24
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	071b      	lsls	r3, r3, #28
 8004e00:	4927      	ldr	r1, [pc, #156]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e08:	4b25      	ldr	r3, [pc, #148]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	4922      	ldr	r1, [pc, #136]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fe f812 	bl	8002e4c <HAL_GetTick>
 8004e28:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e2c:	f7fe f80e 	bl	8002e4c <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e0a4      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e4a:	d1ef      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 808b 	beq.w	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	4a0f      	ldr	r2, [pc, #60]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e82:	f7fd ffe3 	bl	8002e4c <HAL_GetTick>
 8004e86:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e88:	e010      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8a:	f7fd ffdf 	bl	8002e4c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d909      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e075      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e9c:	42470068 	.word	0x42470068
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	42470070 	.word	0x42470070
 8004ea8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004eac:	4b38      	ldr	r3, [pc, #224]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0e8      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eb8:	4b36      	ldr	r3, [pc, #216]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ec0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d02f      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d028      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ede:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004eec:	4a29      	ldr	r2, [pc, #164]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ef2:	4b28      	ldr	r3, [pc, #160]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d114      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fd ffa5 	bl	8002e4c <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fd ffa1 	bl	8002e4c <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e035      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ee      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f34:	d10d      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f36:	4b17      	ldr	r3, [pc, #92]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f4a:	4912      	ldr	r1, [pc, #72]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	608b      	str	r3, [r1, #8]
 8004f50:	e005      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f52:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	4a0f      	ldr	r2, [pc, #60]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f5c:	6093      	str	r3, [r2, #8]
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6a:	490a      	ldr	r1, [pc, #40]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d004      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004f82:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f84:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3718      	adds	r7, #24
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40007000 	.word	0x40007000
 8004f94:	40023800 	.word	0x40023800
 8004f98:	42470e40 	.word	0x42470e40
 8004f9c:	424711e0 	.word	0x424711e0

08004fa0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e025      	b.n	8005000 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d106      	bne.n	8004fce <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f81d 	bl	8005008 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	f000 fe93 	bl	8005d0c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	f000 fee8 	bl	8005dc6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800502e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d101      	bne.n	800503a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8005036:	2302      	movs	r3, #2
 8005038:	e021      	b.n	800507e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d002      	beq.n	8005046 <HAL_SDRAM_SendCommand+0x2a>
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b05      	cmp	r3, #5
 8005044:	d118      	bne.n	8005078 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 ff1e 	bl	8005e98 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d104      	bne.n	800506e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2205      	movs	r2, #5
 8005068:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800506c:	e006      	b.n	800507c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005076:	e001      	b.n	800507c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d101      	bne.n	80050a0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800509c:	2302      	movs	r3, #2
 800509e:	e016      	b.n	80050ce <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10f      	bne.n	80050cc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 ff29 	bl	8005f12 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e000      	b.n	80050ce <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e07b      	b.n	80051e0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d108      	bne.n	8005102 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050f8:	d009      	beq.n	800510e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	61da      	str	r2, [r3, #28]
 8005100:	e005      	b.n	800510e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f885 	bl	8005238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005144:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005156:	431a      	orrs	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005160:	431a      	orrs	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	431a      	orrs	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005192:	ea42 0103 	orr.w	r1, r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	0c1b      	lsrs	r3, r3, #16
 80051ac:	f003 0104 	and.w	r1, r3, #4
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b4:	f003 0210 	and.w	r2, r3, #16
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e01a      	b.n	8005230 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005210:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f81a 	bl	800524c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005270:	f7fd fdec 	bl	8002e4c <HAL_GetTick>
 8005274:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	d001      	beq.n	800528a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005286:	2302      	movs	r3, #2
 8005288:	e12a      	b.n	80054e0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_SPI_Transmit+0x36>
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e122      	b.n	80054e0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_SPI_Transmit+0x48>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e11b      	b.n	80054e0 <HAL_SPI_Transmit+0x280>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2203      	movs	r2, #3
 80052b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	88fa      	ldrh	r2, [r7, #6]
 80052c8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	88fa      	ldrh	r2, [r7, #6]
 80052ce:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052f6:	d10f      	bne.n	8005318 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005306:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005316:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005322:	2b40      	cmp	r3, #64	@ 0x40
 8005324:	d007      	beq.n	8005336 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800533e:	d152      	bne.n	80053e6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_SPI_Transmit+0xee>
 8005348:	8b7b      	ldrh	r3, [r7, #26]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d145      	bne.n	80053da <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	881a      	ldrh	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535e:	1c9a      	adds	r2, r3, #2
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005368:	b29b      	uxth	r3, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	b29a      	uxth	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005372:	e032      	b.n	80053da <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b02      	cmp	r3, #2
 8005380:	d112      	bne.n	80053a8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	881a      	ldrh	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005392:	1c9a      	adds	r2, r3, #2
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053a6:	e018      	b.n	80053da <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a8:	f7fd fd50 	bl	8002e4c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d803      	bhi.n	80053c0 <HAL_SPI_Transmit+0x160>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Transmit+0x166>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d109      	bne.n	80053da <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e082      	b.n	80054e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1c7      	bne.n	8005374 <HAL_SPI_Transmit+0x114>
 80053e4:	e053      	b.n	800548e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_SPI_Transmit+0x194>
 80053ee:	8b7b      	ldrh	r3, [r7, #26]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d147      	bne.n	8005484 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	330c      	adds	r3, #12
 80053fe:	7812      	ldrb	r2, [r2, #0]
 8005400:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800541a:	e033      	b.n	8005484 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b02      	cmp	r3, #2
 8005428:	d113      	bne.n	8005452 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005450:	e018      	b.n	8005484 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005452:	f7fd fcfb 	bl	8002e4c <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_Transmit+0x20a>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Transmit+0x210>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d109      	bne.n	8005484 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e02d      	b.n	80054e0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1c6      	bne.n	800541c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fbe6 	bl	8005c64 <SPI_EndRxTxTransaction>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2220      	movs	r2, #32
 80054a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e000      	b.n	80054e0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054de:	2300      	movs	r3, #0
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3720      	adds	r7, #32
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
 8005506:	e104      	b.n	8005712 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005510:	d112      	bne.n	8005538 <HAL_SPI_Receive+0x50>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10e      	bne.n	8005538 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2204      	movs	r2, #4
 800551e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	4613      	mov	r3, r2
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f8f3 	bl	800571a <HAL_SPI_TransmitReceive>
 8005534:	4603      	mov	r3, r0
 8005536:	e0ec      	b.n	8005712 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005538:	f7fd fc88 	bl	8002e4c <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_SPI_Receive+0x62>
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e0e1      	b.n	8005712 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_SPI_Receive+0x74>
 8005558:	2302      	movs	r3, #2
 800555a:	e0da      	b.n	8005712 <HAL_SPI_Receive+0x22a>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2204      	movs	r2, #4
 8005568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	88fa      	ldrh	r2, [r7, #6]
 800557c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	88fa      	ldrh	r2, [r7, #6]
 8005582:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055aa:	d10f      	bne.n	80055cc <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d6:	2b40      	cmp	r3, #64	@ 0x40
 80055d8:	d007      	beq.n	80055ea <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d170      	bne.n	80056d4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055f2:	e035      	b.n	8005660 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d115      	bne.n	800562e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f103 020c 	add.w	r2, r3, #12
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	1c5a      	adds	r2, r3, #1
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005622:	b29b      	uxth	r3, r3
 8005624:	3b01      	subs	r3, #1
 8005626:	b29a      	uxth	r2, r3
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800562c:	e018      	b.n	8005660 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800562e:	f7fd fc0d 	bl	8002e4c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	429a      	cmp	r2, r3
 800563c:	d803      	bhi.n	8005646 <HAL_SPI_Receive+0x15e>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d102      	bne.n	800564c <HAL_SPI_Receive+0x164>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e058      	b.n	8005712 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1c4      	bne.n	80055f4 <HAL_SPI_Receive+0x10c>
 800566a:	e038      	b.n	80056de <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b01      	cmp	r3, #1
 8005678:	d113      	bne.n	80056a2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	b292      	uxth	r2, r2
 8005686:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800568c:	1c9a      	adds	r2, r3, #2
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005696:	b29b      	uxth	r3, r3
 8005698:	3b01      	subs	r3, #1
 800569a:	b29a      	uxth	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056a0:	e018      	b.n	80056d4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056a2:	f7fd fbd3 	bl	8002e4c <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d803      	bhi.n	80056ba <HAL_SPI_Receive+0x1d2>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d102      	bne.n	80056c0 <HAL_SPI_Receive+0x1d8>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d109      	bne.n	80056d4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e01e      	b.n	8005712 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1c6      	bne.n	800566c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 fa58 	bl	8005b98 <SPI_EndRxTransaction>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005710:	2300      	movs	r3, #0
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b08a      	sub	sp, #40	@ 0x28
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005728:	2301      	movs	r3, #1
 800572a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800572c:	f7fd fb8e 	bl	8002e4c <HAL_GetTick>
 8005730:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005738:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005740:	887b      	ldrh	r3, [r7, #2]
 8005742:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005744:	7ffb      	ldrb	r3, [r7, #31]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d00c      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x4a>
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005750:	d106      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <HAL_SPI_TransmitReceive+0x46>
 800575a:	7ffb      	ldrb	r3, [r7, #31]
 800575c:	2b04      	cmp	r3, #4
 800575e:	d001      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
 8005762:	e17f      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_SPI_TransmitReceive+0x5c>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_SPI_TransmitReceive+0x5c>
 8005770:	887b      	ldrh	r3, [r7, #2]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e174      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_SPI_TransmitReceive+0x6e>
 8005784:	2302      	movs	r3, #2
 8005786:	e16d      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b04      	cmp	r3, #4
 800579a:	d003      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2205      	movs	r2, #5
 80057a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	887a      	ldrh	r2, [r7, #2]
 80057b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	887a      	ldrh	r2, [r7, #2]
 80057ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	887a      	ldrh	r2, [r7, #2]
 80057c6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e4:	2b40      	cmp	r3, #64	@ 0x40
 80057e6:	d007      	beq.n	80057f8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005800:	d17e      	bne.n	8005900 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_TransmitReceive+0xf6>
 800580a:	8afb      	ldrh	r3, [r7, #22]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d16c      	bne.n	80058ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	881a      	ldrh	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005834:	e059      	b.n	80058ea <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b02      	cmp	r3, #2
 8005842:	d11b      	bne.n	800587c <HAL_SPI_TransmitReceive+0x162>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d016      	beq.n	800587c <HAL_SPI_TransmitReceive+0x162>
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	2b01      	cmp	r3, #1
 8005852:	d113      	bne.n	800587c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005858:	881a      	ldrh	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005864:	1c9a      	adds	r2, r3, #2
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b01      	cmp	r3, #1
 8005888:	d119      	bne.n	80058be <HAL_SPI_TransmitReceive+0x1a4>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d014      	beq.n	80058be <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	b292      	uxth	r2, r2
 80058a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	1c9a      	adds	r2, r3, #2
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058ba:	2301      	movs	r3, #1
 80058bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80058be:	f7fd fac5 	bl	8002e4c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d80d      	bhi.n	80058ea <HAL_SPI_TransmitReceive+0x1d0>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058d4:	d009      	beq.n	80058ea <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e0bc      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1a0      	bne.n	8005836 <HAL_SPI_TransmitReceive+0x11c>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d19b      	bne.n	8005836 <HAL_SPI_TransmitReceive+0x11c>
 80058fe:	e082      	b.n	8005a06 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_SPI_TransmitReceive+0x1f4>
 8005908:	8afb      	ldrh	r3, [r7, #22]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d171      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	7812      	ldrb	r2, [r2, #0]
 800591a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005934:	e05d      	b.n	80059f2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d11c      	bne.n	800597e <HAL_SPI_TransmitReceive+0x264>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d017      	beq.n	800597e <HAL_SPI_TransmitReceive+0x264>
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	2b01      	cmp	r3, #1
 8005952:	d114      	bne.n	800597e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	7812      	ldrb	r2, [r2, #0]
 8005960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d119      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x2a6>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80059c0:	f7fd fa44 	bl	8002e4c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d803      	bhi.n	80059d8 <HAL_SPI_TransmitReceive+0x2be>
 80059d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d102      	bne.n	80059de <HAL_SPI_TransmitReceive+0x2c4>
 80059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e038      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d19c      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x21c>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d197      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a06:	6a3a      	ldr	r2, [r7, #32]
 8005a08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f92a 	bl	8005c64 <SPI_EndRxTxTransaction>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e01d      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a30:	2300      	movs	r3, #0
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e000      	b.n	8005a64 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a62:	2300      	movs	r3, #0
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	@ 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a7a:	b2db      	uxtb	r3, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	603b      	str	r3, [r7, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a98:	f7fd f9d8 	bl	8002e4c <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005aa8:	f7fd f9d0 	bl	8002e4c <HAL_GetTick>
 8005aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aae:	4b39      	ldr	r3, [pc, #228]	@ (8005b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	015b      	lsls	r3, r3, #5
 8005ab4:	0d1b      	lsrs	r3, r3, #20
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	fb02 f303 	mul.w	r3, r2, r3
 8005abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005abe:	e054      	b.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	d050      	beq.n	8005b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ac8:	f7fd f9c0 	bl	8002e4c <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d902      	bls.n	8005ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d13d      	bne.n	8005b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005af6:	d111      	bne.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b00:	d004      	beq.n	8005b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b0a:	d107      	bne.n	8005b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b24:	d10f      	bne.n	8005b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e017      	b.n	8005b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4013      	ands	r3, r2
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	bf0c      	ite	eq
 8005b7a:	2301      	moveq	r3, #1
 8005b7c:	2300      	movne	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d19b      	bne.n	8005ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20000000 	.word	0x20000000

08005b98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bac:	d111      	bne.n	8005bd2 <SPI_EndRxTransaction+0x3a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb6:	d004      	beq.n	8005bc2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bc0:	d107      	bne.n	8005bd2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bda:	d12a      	bne.n	8005c32 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be4:	d012      	beq.n	8005c0c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2180      	movs	r1, #128	@ 0x80
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff ff49 	bl	8005a88 <SPI_WaitFlagStateUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d02d      	beq.n	8005c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	f043 0220 	orr.w	r2, r3, #32
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e026      	b.n	8005c5a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	2101      	movs	r1, #1
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff36 	bl	8005a88 <SPI_WaitFlagStateUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01a      	beq.n	8005c58 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c26:	f043 0220 	orr.w	r2, r3, #32
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e013      	b.n	8005c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7ff ff23 	bl	8005a88 <SPI_WaitFlagStateUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4c:	f043 0220 	orr.w	r2, r3, #32
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e000      	b.n	8005c5a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2201      	movs	r2, #1
 8005c78:	2102      	movs	r1, #2
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f7ff ff04 	bl	8005a88 <SPI_WaitFlagStateUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	f043 0220 	orr.w	r2, r3, #32
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e032      	b.n	8005cfc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c96:	4b1b      	ldr	r3, [pc, #108]	@ (8005d04 <SPI_EndRxTxTransaction+0xa0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005d08 <SPI_EndRxTxTransaction+0xa4>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	0d5b      	lsrs	r3, r3, #21
 8005ca2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ca6:	fb02 f303 	mul.w	r3, r2, r3
 8005caa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cb4:	d112      	bne.n	8005cdc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2180      	movs	r1, #128	@ 0x80
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f7ff fee1 	bl	8005a88 <SPI_WaitFlagStateUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d016      	beq.n	8005cfa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e00f      	b.n	8005cfc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf2:	2b80      	cmp	r3, #128	@ 0x80
 8005cf4:	d0f2      	beq.n	8005cdc <SPI_EndRxTxTransaction+0x78>
 8005cf6:	e000      	b.n	8005cfa <SPI_EndRxTxTransaction+0x96>
        break;
 8005cf8:	bf00      	nop
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000000 	.word	0x20000000
 8005d08:	165e9f81 	.word	0x165e9f81

08005d0c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d123      	bne.n	8005d66 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d26:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	6851      	ldr	r1, [r2, #4]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	6892      	ldr	r2, [r2, #8]
 8005d32:	4311      	orrs	r1, r2
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68d2      	ldr	r2, [r2, #12]
 8005d38:	4311      	orrs	r1, r2
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	6912      	ldr	r2, [r2, #16]
 8005d3e:	4311      	orrs	r1, r2
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	6952      	ldr	r2, [r2, #20]
 8005d44:	4311      	orrs	r1, r2
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	6992      	ldr	r2, [r2, #24]
 8005d4a:	4311      	orrs	r1, r2
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	69d2      	ldr	r2, [r2, #28]
 8005d50:	4311      	orrs	r1, r2
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	6a12      	ldr	r2, [r2, #32]
 8005d56:	4311      	orrs	r1, r2
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	601a      	str	r2, [r3, #0]
 8005d64:	e028      	b.n	8005db8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	69d9      	ldr	r1, [r3, #28]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4319      	orrs	r1, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d8c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	6851      	ldr	r1, [r2, #4]
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	6892      	ldr	r2, [r2, #8]
 8005d98:	4311      	orrs	r1, r2
 8005d9a:	683a      	ldr	r2, [r7, #0]
 8005d9c:	68d2      	ldr	r2, [r2, #12]
 8005d9e:	4311      	orrs	r1, r2
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	6912      	ldr	r2, [r2, #16]
 8005da4:	4311      	orrs	r1, r2
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	6952      	ldr	r2, [r2, #20]
 8005daa:	4311      	orrs	r1, r2
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	6992      	ldr	r2, [r2, #24]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
 8005dce:	60b9      	str	r1, [r7, #8]
 8005dd0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d128      	bne.n	8005e2a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	1e59      	subs	r1, r3, #1
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	4319      	orrs	r1, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	4319      	orrs	r1, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	031b      	lsls	r3, r3, #12
 8005e02:	4319      	orrs	r1, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	4319      	orrs	r1, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	051b      	lsls	r3, r3, #20
 8005e16:	4319      	orrs	r1, r3
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	430b      	orrs	r3, r1
 8005e22:	431a      	orrs	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	609a      	str	r2, [r3, #8]
 8005e28:	e02f      	b.n	8005e8a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	68d2      	ldr	r2, [r2, #12]
 8005e3a:	3a01      	subs	r2, #1
 8005e3c:	0311      	lsls	r1, r2, #12
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	6952      	ldr	r2, [r2, #20]
 8005e42:	3a01      	subs	r2, #1
 8005e44:	0512      	lsls	r2, r2, #20
 8005e46:	430a      	orrs	r2, r1
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	1e59      	subs	r1, r3, #1
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4319      	orrs	r1, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	4319      	orrs	r1, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	4319      	orrs	r1, r3
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	061b      	lsls	r3, r3, #24
 8005e82:	430b      	orrs	r3, r1
 8005e84:	431a      	orrs	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	0d9b      	lsrs	r3, r3, #22
 8005eae:	059b      	lsls	r3, r3, #22
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	6811      	ldr	r1, [r2, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	6852      	ldr	r2, [r2, #4]
 8005eb8:	4311      	orrs	r1, r2
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	6892      	ldr	r2, [r2, #8]
 8005ebe:	3a01      	subs	r2, #1
 8005ec0:	0152      	lsls	r2, r2, #5
 8005ec2:	4311      	orrs	r1, r2
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	68d2      	ldr	r2, [r2, #12]
 8005ec8:	0252      	lsls	r2, r2, #9
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8005ed2:	f7fc ffbb 	bl	8002e4c <HAL_GetTick>
 8005ed6:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005ed8:	e010      	b.n	8005efc <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d00c      	beq.n	8005efc <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <FMC_SDRAM_SendCommand+0x60>
 8005ee8:	f7fc ffb0 	bl	8002e4c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d201      	bcs.n	8005efc <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d0e8      	beq.n	8005eda <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b083      	sub	sp, #12
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
 8005f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f24:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	0052      	lsls	r2, r2, #1
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <__cvt>:
 8005f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	ec57 6b10 	vmov	r6, r7, d0
 8005f48:	2f00      	cmp	r7, #0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	463b      	mov	r3, r7
 8005f50:	bfbb      	ittet	lt
 8005f52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f56:	461f      	movlt	r7, r3
 8005f58:	2300      	movge	r3, #0
 8005f5a:	232d      	movlt	r3, #45	@ 0x2d
 8005f5c:	700b      	strb	r3, [r1, #0]
 8005f5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f64:	4691      	mov	r9, r2
 8005f66:	f023 0820 	bic.w	r8, r3, #32
 8005f6a:	bfbc      	itt	lt
 8005f6c:	4632      	movlt	r2, r6
 8005f6e:	4616      	movlt	r6, r2
 8005f70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f74:	d005      	beq.n	8005f82 <__cvt+0x42>
 8005f76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f7a:	d100      	bne.n	8005f7e <__cvt+0x3e>
 8005f7c:	3401      	adds	r4, #1
 8005f7e:	2102      	movs	r1, #2
 8005f80:	e000      	b.n	8005f84 <__cvt+0x44>
 8005f82:	2103      	movs	r1, #3
 8005f84:	ab03      	add	r3, sp, #12
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	ab02      	add	r3, sp, #8
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	ec47 6b10 	vmov	d0, r6, r7
 8005f90:	4653      	mov	r3, sl
 8005f92:	4622      	mov	r2, r4
 8005f94:	f000 fe5c 	bl	8006c50 <_dtoa_r>
 8005f98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f9c:	4605      	mov	r5, r0
 8005f9e:	d119      	bne.n	8005fd4 <__cvt+0x94>
 8005fa0:	f019 0f01 	tst.w	r9, #1
 8005fa4:	d00e      	beq.n	8005fc4 <__cvt+0x84>
 8005fa6:	eb00 0904 	add.w	r9, r0, r4
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	f7fa fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 8005fb6:	b108      	cbz	r0, 8005fbc <__cvt+0x7c>
 8005fb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005fbc:	2230      	movs	r2, #48	@ 0x30
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	454b      	cmp	r3, r9
 8005fc2:	d31e      	bcc.n	8006002 <__cvt+0xc2>
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005fc8:	1b5b      	subs	r3, r3, r5
 8005fca:	4628      	mov	r0, r5
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	b004      	add	sp, #16
 8005fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fd8:	eb00 0904 	add.w	r9, r0, r4
 8005fdc:	d1e5      	bne.n	8005faa <__cvt+0x6a>
 8005fde:	7803      	ldrb	r3, [r0, #0]
 8005fe0:	2b30      	cmp	r3, #48	@ 0x30
 8005fe2:	d10a      	bne.n	8005ffa <__cvt+0xba>
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	4630      	mov	r0, r6
 8005fea:	4639      	mov	r1, r7
 8005fec:	f7fa fd7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ff0:	b918      	cbnz	r0, 8005ffa <__cvt+0xba>
 8005ff2:	f1c4 0401 	rsb	r4, r4, #1
 8005ff6:	f8ca 4000 	str.w	r4, [sl]
 8005ffa:	f8da 3000 	ldr.w	r3, [sl]
 8005ffe:	4499      	add	r9, r3
 8006000:	e7d3      	b.n	8005faa <__cvt+0x6a>
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	9103      	str	r1, [sp, #12]
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e7d9      	b.n	8005fbe <__cvt+0x7e>

0800600a <__exponent>:
 800600a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800600c:	2900      	cmp	r1, #0
 800600e:	bfba      	itte	lt
 8006010:	4249      	neglt	r1, r1
 8006012:	232d      	movlt	r3, #45	@ 0x2d
 8006014:	232b      	movge	r3, #43	@ 0x2b
 8006016:	2909      	cmp	r1, #9
 8006018:	7002      	strb	r2, [r0, #0]
 800601a:	7043      	strb	r3, [r0, #1]
 800601c:	dd29      	ble.n	8006072 <__exponent+0x68>
 800601e:	f10d 0307 	add.w	r3, sp, #7
 8006022:	461d      	mov	r5, r3
 8006024:	270a      	movs	r7, #10
 8006026:	461a      	mov	r2, r3
 8006028:	fbb1 f6f7 	udiv	r6, r1, r7
 800602c:	fb07 1416 	mls	r4, r7, r6, r1
 8006030:	3430      	adds	r4, #48	@ 0x30
 8006032:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006036:	460c      	mov	r4, r1
 8006038:	2c63      	cmp	r4, #99	@ 0x63
 800603a:	f103 33ff 	add.w	r3, r3, #4294967295
 800603e:	4631      	mov	r1, r6
 8006040:	dcf1      	bgt.n	8006026 <__exponent+0x1c>
 8006042:	3130      	adds	r1, #48	@ 0x30
 8006044:	1e94      	subs	r4, r2, #2
 8006046:	f803 1c01 	strb.w	r1, [r3, #-1]
 800604a:	1c41      	adds	r1, r0, #1
 800604c:	4623      	mov	r3, r4
 800604e:	42ab      	cmp	r3, r5
 8006050:	d30a      	bcc.n	8006068 <__exponent+0x5e>
 8006052:	f10d 0309 	add.w	r3, sp, #9
 8006056:	1a9b      	subs	r3, r3, r2
 8006058:	42ac      	cmp	r4, r5
 800605a:	bf88      	it	hi
 800605c:	2300      	movhi	r3, #0
 800605e:	3302      	adds	r3, #2
 8006060:	4403      	add	r3, r0
 8006062:	1a18      	subs	r0, r3, r0
 8006064:	b003      	add	sp, #12
 8006066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006068:	f813 6b01 	ldrb.w	r6, [r3], #1
 800606c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006070:	e7ed      	b.n	800604e <__exponent+0x44>
 8006072:	2330      	movs	r3, #48	@ 0x30
 8006074:	3130      	adds	r1, #48	@ 0x30
 8006076:	7083      	strb	r3, [r0, #2]
 8006078:	70c1      	strb	r1, [r0, #3]
 800607a:	1d03      	adds	r3, r0, #4
 800607c:	e7f1      	b.n	8006062 <__exponent+0x58>
	...

08006080 <_printf_float>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	b08d      	sub	sp, #52	@ 0x34
 8006086:	460c      	mov	r4, r1
 8006088:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800608c:	4616      	mov	r6, r2
 800608e:	461f      	mov	r7, r3
 8006090:	4605      	mov	r5, r0
 8006092:	f000 fcdb 	bl	8006a4c <_localeconv_r>
 8006096:	6803      	ldr	r3, [r0, #0]
 8006098:	9304      	str	r3, [sp, #16]
 800609a:	4618      	mov	r0, r3
 800609c:	f7fa f8f8 	bl	8000290 <strlen>
 80060a0:	2300      	movs	r3, #0
 80060a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060a4:	f8d8 3000 	ldr.w	r3, [r8]
 80060a8:	9005      	str	r0, [sp, #20]
 80060aa:	3307      	adds	r3, #7
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	f103 0208 	add.w	r2, r3, #8
 80060b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060b8:	f8d4 b000 	ldr.w	fp, [r4]
 80060bc:	f8c8 2000 	str.w	r2, [r8]
 80060c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060c8:	9307      	str	r3, [sp, #28]
 80060ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80060ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006348 <_printf_float+0x2c8>)
 80060d8:	f04f 32ff 	mov.w	r2, #4294967295
 80060dc:	f7fa fd36 	bl	8000b4c <__aeabi_dcmpun>
 80060e0:	bb70      	cbnz	r0, 8006140 <_printf_float+0xc0>
 80060e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060e6:	4b98      	ldr	r3, [pc, #608]	@ (8006348 <_printf_float+0x2c8>)
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	f7fa fd10 	bl	8000b10 <__aeabi_dcmple>
 80060f0:	bb30      	cbnz	r0, 8006140 <_printf_float+0xc0>
 80060f2:	2200      	movs	r2, #0
 80060f4:	2300      	movs	r3, #0
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa fcff 	bl	8000afc <__aeabi_dcmplt>
 80060fe:	b110      	cbz	r0, 8006106 <_printf_float+0x86>
 8006100:	232d      	movs	r3, #45	@ 0x2d
 8006102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006106:	4a91      	ldr	r2, [pc, #580]	@ (800634c <_printf_float+0x2cc>)
 8006108:	4b91      	ldr	r3, [pc, #580]	@ (8006350 <_printf_float+0x2d0>)
 800610a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800610e:	bf94      	ite	ls
 8006110:	4690      	movls	r8, r2
 8006112:	4698      	movhi	r8, r3
 8006114:	2303      	movs	r3, #3
 8006116:	6123      	str	r3, [r4, #16]
 8006118:	f02b 0304 	bic.w	r3, fp, #4
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	f04f 0900 	mov.w	r9, #0
 8006122:	9700      	str	r7, [sp, #0]
 8006124:	4633      	mov	r3, r6
 8006126:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f9d2 	bl	80064d4 <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	f040 808d 	bne.w	8006250 <_printf_float+0x1d0>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	b00d      	add	sp, #52	@ 0x34
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fd00 	bl	8000b4c <__aeabi_dcmpun>
 800614c:	b140      	cbz	r0, 8006160 <_printf_float+0xe0>
 800614e:	464b      	mov	r3, r9
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfbc      	itt	lt
 8006154:	232d      	movlt	r3, #45	@ 0x2d
 8006156:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800615a:	4a7e      	ldr	r2, [pc, #504]	@ (8006354 <_printf_float+0x2d4>)
 800615c:	4b7e      	ldr	r3, [pc, #504]	@ (8006358 <_printf_float+0x2d8>)
 800615e:	e7d4      	b.n	800610a <_printf_float+0x8a>
 8006160:	6863      	ldr	r3, [r4, #4]
 8006162:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006166:	9206      	str	r2, [sp, #24]
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	d13b      	bne.n	80061e4 <_printf_float+0x164>
 800616c:	2306      	movs	r3, #6
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006174:	2300      	movs	r3, #0
 8006176:	6022      	str	r2, [r4, #0]
 8006178:	9303      	str	r3, [sp, #12]
 800617a:	ab0a      	add	r3, sp, #40	@ 0x28
 800617c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006180:	ab09      	add	r3, sp, #36	@ 0x24
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6861      	ldr	r1, [r4, #4]
 8006186:	ec49 8b10 	vmov	d0, r8, r9
 800618a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800618e:	4628      	mov	r0, r5
 8006190:	f7ff fed6 	bl	8005f40 <__cvt>
 8006194:	9b06      	ldr	r3, [sp, #24]
 8006196:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006198:	2b47      	cmp	r3, #71	@ 0x47
 800619a:	4680      	mov	r8, r0
 800619c:	d129      	bne.n	80061f2 <_printf_float+0x172>
 800619e:	1cc8      	adds	r0, r1, #3
 80061a0:	db02      	blt.n	80061a8 <_printf_float+0x128>
 80061a2:	6863      	ldr	r3, [r4, #4]
 80061a4:	4299      	cmp	r1, r3
 80061a6:	dd41      	ble.n	800622c <_printf_float+0x1ac>
 80061a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80061ac:	fa5f fa8a 	uxtb.w	sl, sl
 80061b0:	3901      	subs	r1, #1
 80061b2:	4652      	mov	r2, sl
 80061b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80061ba:	f7ff ff26 	bl	800600a <__exponent>
 80061be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061c0:	1813      	adds	r3, r2, r0
 80061c2:	2a01      	cmp	r2, #1
 80061c4:	4681      	mov	r9, r0
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	dc02      	bgt.n	80061d0 <_printf_float+0x150>
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	07d2      	lsls	r2, r2, #31
 80061ce:	d501      	bpl.n	80061d4 <_printf_float+0x154>
 80061d0:	3301      	adds	r3, #1
 80061d2:	6123      	str	r3, [r4, #16]
 80061d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0a2      	beq.n	8006122 <_printf_float+0xa2>
 80061dc:	232d      	movs	r3, #45	@ 0x2d
 80061de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e2:	e79e      	b.n	8006122 <_printf_float+0xa2>
 80061e4:	9a06      	ldr	r2, [sp, #24]
 80061e6:	2a47      	cmp	r2, #71	@ 0x47
 80061e8:	d1c2      	bne.n	8006170 <_printf_float+0xf0>
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1c0      	bne.n	8006170 <_printf_float+0xf0>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e7bd      	b.n	800616e <_printf_float+0xee>
 80061f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061f6:	d9db      	bls.n	80061b0 <_printf_float+0x130>
 80061f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061fc:	d118      	bne.n	8006230 <_printf_float+0x1b0>
 80061fe:	2900      	cmp	r1, #0
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	dd0b      	ble.n	800621c <_printf_float+0x19c>
 8006204:	6121      	str	r1, [r4, #16]
 8006206:	b913      	cbnz	r3, 800620e <_printf_float+0x18e>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	07d0      	lsls	r0, r2, #31
 800620c:	d502      	bpl.n	8006214 <_printf_float+0x194>
 800620e:	3301      	adds	r3, #1
 8006210:	440b      	add	r3, r1
 8006212:	6123      	str	r3, [r4, #16]
 8006214:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006216:	f04f 0900 	mov.w	r9, #0
 800621a:	e7db      	b.n	80061d4 <_printf_float+0x154>
 800621c:	b913      	cbnz	r3, 8006224 <_printf_float+0x1a4>
 800621e:	6822      	ldr	r2, [r4, #0]
 8006220:	07d2      	lsls	r2, r2, #31
 8006222:	d501      	bpl.n	8006228 <_printf_float+0x1a8>
 8006224:	3302      	adds	r3, #2
 8006226:	e7f4      	b.n	8006212 <_printf_float+0x192>
 8006228:	2301      	movs	r3, #1
 800622a:	e7f2      	b.n	8006212 <_printf_float+0x192>
 800622c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006232:	4299      	cmp	r1, r3
 8006234:	db05      	blt.n	8006242 <_printf_float+0x1c2>
 8006236:	6823      	ldr	r3, [r4, #0]
 8006238:	6121      	str	r1, [r4, #16]
 800623a:	07d8      	lsls	r0, r3, #31
 800623c:	d5ea      	bpl.n	8006214 <_printf_float+0x194>
 800623e:	1c4b      	adds	r3, r1, #1
 8006240:	e7e7      	b.n	8006212 <_printf_float+0x192>
 8006242:	2900      	cmp	r1, #0
 8006244:	bfd4      	ite	le
 8006246:	f1c1 0202 	rsble	r2, r1, #2
 800624a:	2201      	movgt	r2, #1
 800624c:	4413      	add	r3, r2
 800624e:	e7e0      	b.n	8006212 <_printf_float+0x192>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	055a      	lsls	r2, r3, #21
 8006254:	d407      	bmi.n	8006266 <_printf_float+0x1e6>
 8006256:	6923      	ldr	r3, [r4, #16]
 8006258:	4642      	mov	r2, r8
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	d12b      	bne.n	80062bc <_printf_float+0x23c>
 8006264:	e767      	b.n	8006136 <_printf_float+0xb6>
 8006266:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800626a:	f240 80dd 	bls.w	8006428 <_printf_float+0x3a8>
 800626e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006272:	2200      	movs	r2, #0
 8006274:	2300      	movs	r3, #0
 8006276:	f7fa fc37 	bl	8000ae8 <__aeabi_dcmpeq>
 800627a:	2800      	cmp	r0, #0
 800627c:	d033      	beq.n	80062e6 <_printf_float+0x266>
 800627e:	4a37      	ldr	r2, [pc, #220]	@ (800635c <_printf_float+0x2dc>)
 8006280:	2301      	movs	r3, #1
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	f43f af54 	beq.w	8006136 <_printf_float+0xb6>
 800628e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006292:	4543      	cmp	r3, r8
 8006294:	db02      	blt.n	800629c <_printf_float+0x21c>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	07d8      	lsls	r0, r3, #31
 800629a:	d50f      	bpl.n	80062bc <_printf_float+0x23c>
 800629c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a0:	4631      	mov	r1, r6
 80062a2:	4628      	mov	r0, r5
 80062a4:	47b8      	blx	r7
 80062a6:	3001      	adds	r0, #1
 80062a8:	f43f af45 	beq.w	8006136 <_printf_float+0xb6>
 80062ac:	f04f 0900 	mov.w	r9, #0
 80062b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80062b4:	f104 0a1a 	add.w	sl, r4, #26
 80062b8:	45c8      	cmp	r8, r9
 80062ba:	dc09      	bgt.n	80062d0 <_printf_float+0x250>
 80062bc:	6823      	ldr	r3, [r4, #0]
 80062be:	079b      	lsls	r3, r3, #30
 80062c0:	f100 8103 	bmi.w	80064ca <_printf_float+0x44a>
 80062c4:	68e0      	ldr	r0, [r4, #12]
 80062c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062c8:	4298      	cmp	r0, r3
 80062ca:	bfb8      	it	lt
 80062cc:	4618      	movlt	r0, r3
 80062ce:	e734      	b.n	800613a <_printf_float+0xba>
 80062d0:	2301      	movs	r3, #1
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af2b 	beq.w	8006136 <_printf_float+0xb6>
 80062e0:	f109 0901 	add.w	r9, r9, #1
 80062e4:	e7e8      	b.n	80062b8 <_printf_float+0x238>
 80062e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	dc39      	bgt.n	8006360 <_printf_float+0x2e0>
 80062ec:	4a1b      	ldr	r2, [pc, #108]	@ (800635c <_printf_float+0x2dc>)
 80062ee:	2301      	movs	r3, #1
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f af1d 	beq.w	8006136 <_printf_float+0xb6>
 80062fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006300:	ea59 0303 	orrs.w	r3, r9, r3
 8006304:	d102      	bne.n	800630c <_printf_float+0x28c>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	07d9      	lsls	r1, r3, #31
 800630a:	d5d7      	bpl.n	80062bc <_printf_float+0x23c>
 800630c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af0d 	beq.w	8006136 <_printf_float+0xb6>
 800631c:	f04f 0a00 	mov.w	sl, #0
 8006320:	f104 0b1a 	add.w	fp, r4, #26
 8006324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006326:	425b      	negs	r3, r3
 8006328:	4553      	cmp	r3, sl
 800632a:	dc01      	bgt.n	8006330 <_printf_float+0x2b0>
 800632c:	464b      	mov	r3, r9
 800632e:	e793      	b.n	8006258 <_printf_float+0x1d8>
 8006330:	2301      	movs	r3, #1
 8006332:	465a      	mov	r2, fp
 8006334:	4631      	mov	r1, r6
 8006336:	4628      	mov	r0, r5
 8006338:	47b8      	blx	r7
 800633a:	3001      	adds	r0, #1
 800633c:	f43f aefb 	beq.w	8006136 <_printf_float+0xb6>
 8006340:	f10a 0a01 	add.w	sl, sl, #1
 8006344:	e7ee      	b.n	8006324 <_printf_float+0x2a4>
 8006346:	bf00      	nop
 8006348:	7fefffff 	.word	0x7fefffff
 800634c:	0800a6dc 	.word	0x0800a6dc
 8006350:	0800a6e0 	.word	0x0800a6e0
 8006354:	0800a6e4 	.word	0x0800a6e4
 8006358:	0800a6e8 	.word	0x0800a6e8
 800635c:	0800a6ec 	.word	0x0800a6ec
 8006360:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006362:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006366:	4553      	cmp	r3, sl
 8006368:	bfa8      	it	ge
 800636a:	4653      	movge	r3, sl
 800636c:	2b00      	cmp	r3, #0
 800636e:	4699      	mov	r9, r3
 8006370:	dc36      	bgt.n	80063e0 <_printf_float+0x360>
 8006372:	f04f 0b00 	mov.w	fp, #0
 8006376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637a:	f104 021a 	add.w	r2, r4, #26
 800637e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006380:	9306      	str	r3, [sp, #24]
 8006382:	eba3 0309 	sub.w	r3, r3, r9
 8006386:	455b      	cmp	r3, fp
 8006388:	dc31      	bgt.n	80063ee <_printf_float+0x36e>
 800638a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638c:	459a      	cmp	sl, r3
 800638e:	dc3a      	bgt.n	8006406 <_printf_float+0x386>
 8006390:	6823      	ldr	r3, [r4, #0]
 8006392:	07da      	lsls	r2, r3, #31
 8006394:	d437      	bmi.n	8006406 <_printf_float+0x386>
 8006396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006398:	ebaa 0903 	sub.w	r9, sl, r3
 800639c:	9b06      	ldr	r3, [sp, #24]
 800639e:	ebaa 0303 	sub.w	r3, sl, r3
 80063a2:	4599      	cmp	r9, r3
 80063a4:	bfa8      	it	ge
 80063a6:	4699      	movge	r9, r3
 80063a8:	f1b9 0f00 	cmp.w	r9, #0
 80063ac:	dc33      	bgt.n	8006416 <_printf_float+0x396>
 80063ae:	f04f 0800 	mov.w	r8, #0
 80063b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b6:	f104 0b1a 	add.w	fp, r4, #26
 80063ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063bc:	ebaa 0303 	sub.w	r3, sl, r3
 80063c0:	eba3 0309 	sub.w	r3, r3, r9
 80063c4:	4543      	cmp	r3, r8
 80063c6:	f77f af79 	ble.w	80062bc <_printf_float+0x23c>
 80063ca:	2301      	movs	r3, #1
 80063cc:	465a      	mov	r2, fp
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b8      	blx	r7
 80063d4:	3001      	adds	r0, #1
 80063d6:	f43f aeae 	beq.w	8006136 <_printf_float+0xb6>
 80063da:	f108 0801 	add.w	r8, r8, #1
 80063de:	e7ec      	b.n	80063ba <_printf_float+0x33a>
 80063e0:	4642      	mov	r2, r8
 80063e2:	4631      	mov	r1, r6
 80063e4:	4628      	mov	r0, r5
 80063e6:	47b8      	blx	r7
 80063e8:	3001      	adds	r0, #1
 80063ea:	d1c2      	bne.n	8006372 <_printf_float+0x2f2>
 80063ec:	e6a3      	b.n	8006136 <_printf_float+0xb6>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4631      	mov	r1, r6
 80063f2:	4628      	mov	r0, r5
 80063f4:	9206      	str	r2, [sp, #24]
 80063f6:	47b8      	blx	r7
 80063f8:	3001      	adds	r0, #1
 80063fa:	f43f ae9c 	beq.w	8006136 <_printf_float+0xb6>
 80063fe:	9a06      	ldr	r2, [sp, #24]
 8006400:	f10b 0b01 	add.w	fp, fp, #1
 8006404:	e7bb      	b.n	800637e <_printf_float+0x2fe>
 8006406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	d1c0      	bne.n	8006396 <_printf_float+0x316>
 8006414:	e68f      	b.n	8006136 <_printf_float+0xb6>
 8006416:	9a06      	ldr	r2, [sp, #24]
 8006418:	464b      	mov	r3, r9
 800641a:	4442      	add	r2, r8
 800641c:	4631      	mov	r1, r6
 800641e:	4628      	mov	r0, r5
 8006420:	47b8      	blx	r7
 8006422:	3001      	adds	r0, #1
 8006424:	d1c3      	bne.n	80063ae <_printf_float+0x32e>
 8006426:	e686      	b.n	8006136 <_printf_float+0xb6>
 8006428:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800642c:	f1ba 0f01 	cmp.w	sl, #1
 8006430:	dc01      	bgt.n	8006436 <_printf_float+0x3b6>
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d536      	bpl.n	80064a4 <_printf_float+0x424>
 8006436:	2301      	movs	r3, #1
 8006438:	4642      	mov	r2, r8
 800643a:	4631      	mov	r1, r6
 800643c:	4628      	mov	r0, r5
 800643e:	47b8      	blx	r7
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae78 	beq.w	8006136 <_printf_float+0xb6>
 8006446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	f43f ae70 	beq.w	8006136 <_printf_float+0xb6>
 8006456:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006462:	f7fa fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8006466:	b9c0      	cbnz	r0, 800649a <_printf_float+0x41a>
 8006468:	4653      	mov	r3, sl
 800646a:	f108 0201 	add.w	r2, r8, #1
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	d10c      	bne.n	8006492 <_printf_float+0x412>
 8006478:	e65d      	b.n	8006136 <_printf_float+0xb6>
 800647a:	2301      	movs	r3, #1
 800647c:	465a      	mov	r2, fp
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	f43f ae56 	beq.w	8006136 <_printf_float+0xb6>
 800648a:	f108 0801 	add.w	r8, r8, #1
 800648e:	45d0      	cmp	r8, sl
 8006490:	dbf3      	blt.n	800647a <_printf_float+0x3fa>
 8006492:	464b      	mov	r3, r9
 8006494:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006498:	e6df      	b.n	800625a <_printf_float+0x1da>
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	f104 0b1a 	add.w	fp, r4, #26
 80064a2:	e7f4      	b.n	800648e <_printf_float+0x40e>
 80064a4:	2301      	movs	r3, #1
 80064a6:	4642      	mov	r2, r8
 80064a8:	e7e1      	b.n	800646e <_printf_float+0x3ee>
 80064aa:	2301      	movs	r3, #1
 80064ac:	464a      	mov	r2, r9
 80064ae:	4631      	mov	r1, r6
 80064b0:	4628      	mov	r0, r5
 80064b2:	47b8      	blx	r7
 80064b4:	3001      	adds	r0, #1
 80064b6:	f43f ae3e 	beq.w	8006136 <_printf_float+0xb6>
 80064ba:	f108 0801 	add.w	r8, r8, #1
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064c2:	1a5b      	subs	r3, r3, r1
 80064c4:	4543      	cmp	r3, r8
 80064c6:	dcf0      	bgt.n	80064aa <_printf_float+0x42a>
 80064c8:	e6fc      	b.n	80062c4 <_printf_float+0x244>
 80064ca:	f04f 0800 	mov.w	r8, #0
 80064ce:	f104 0919 	add.w	r9, r4, #25
 80064d2:	e7f4      	b.n	80064be <_printf_float+0x43e>

080064d4 <_printf_common>:
 80064d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d8:	4616      	mov	r6, r2
 80064da:	4698      	mov	r8, r3
 80064dc:	688a      	ldr	r2, [r1, #8]
 80064de:	690b      	ldr	r3, [r1, #16]
 80064e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bfb8      	it	lt
 80064e8:	4613      	movlt	r3, r2
 80064ea:	6033      	str	r3, [r6, #0]
 80064ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064f0:	4607      	mov	r7, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	b10a      	cbz	r2, 80064fa <_printf_common+0x26>
 80064f6:	3301      	adds	r3, #1
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	0699      	lsls	r1, r3, #26
 80064fe:	bf42      	ittt	mi
 8006500:	6833      	ldrmi	r3, [r6, #0]
 8006502:	3302      	addmi	r3, #2
 8006504:	6033      	strmi	r3, [r6, #0]
 8006506:	6825      	ldr	r5, [r4, #0]
 8006508:	f015 0506 	ands.w	r5, r5, #6
 800650c:	d106      	bne.n	800651c <_printf_common+0x48>
 800650e:	f104 0a19 	add.w	sl, r4, #25
 8006512:	68e3      	ldr	r3, [r4, #12]
 8006514:	6832      	ldr	r2, [r6, #0]
 8006516:	1a9b      	subs	r3, r3, r2
 8006518:	42ab      	cmp	r3, r5
 800651a:	dc26      	bgt.n	800656a <_printf_common+0x96>
 800651c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006520:	6822      	ldr	r2, [r4, #0]
 8006522:	3b00      	subs	r3, #0
 8006524:	bf18      	it	ne
 8006526:	2301      	movne	r3, #1
 8006528:	0692      	lsls	r2, r2, #26
 800652a:	d42b      	bmi.n	8006584 <_printf_common+0xb0>
 800652c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006530:	4641      	mov	r1, r8
 8006532:	4638      	mov	r0, r7
 8006534:	47c8      	blx	r9
 8006536:	3001      	adds	r0, #1
 8006538:	d01e      	beq.n	8006578 <_printf_common+0xa4>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	f003 0306 	and.w	r3, r3, #6
 8006542:	2b04      	cmp	r3, #4
 8006544:	bf02      	ittt	eq
 8006546:	68e5      	ldreq	r5, [r4, #12]
 8006548:	6833      	ldreq	r3, [r6, #0]
 800654a:	1aed      	subeq	r5, r5, r3
 800654c:	68a3      	ldr	r3, [r4, #8]
 800654e:	bf0c      	ite	eq
 8006550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006554:	2500      	movne	r5, #0
 8006556:	4293      	cmp	r3, r2
 8006558:	bfc4      	itt	gt
 800655a:	1a9b      	subgt	r3, r3, r2
 800655c:	18ed      	addgt	r5, r5, r3
 800655e:	2600      	movs	r6, #0
 8006560:	341a      	adds	r4, #26
 8006562:	42b5      	cmp	r5, r6
 8006564:	d11a      	bne.n	800659c <_printf_common+0xc8>
 8006566:	2000      	movs	r0, #0
 8006568:	e008      	b.n	800657c <_printf_common+0xa8>
 800656a:	2301      	movs	r3, #1
 800656c:	4652      	mov	r2, sl
 800656e:	4641      	mov	r1, r8
 8006570:	4638      	mov	r0, r7
 8006572:	47c8      	blx	r9
 8006574:	3001      	adds	r0, #1
 8006576:	d103      	bne.n	8006580 <_printf_common+0xac>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006580:	3501      	adds	r5, #1
 8006582:	e7c6      	b.n	8006512 <_printf_common+0x3e>
 8006584:	18e1      	adds	r1, r4, r3
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	2030      	movs	r0, #48	@ 0x30
 800658a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800658e:	4422      	add	r2, r4
 8006590:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006594:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006598:	3302      	adds	r3, #2
 800659a:	e7c7      	b.n	800652c <_printf_common+0x58>
 800659c:	2301      	movs	r3, #1
 800659e:	4622      	mov	r2, r4
 80065a0:	4641      	mov	r1, r8
 80065a2:	4638      	mov	r0, r7
 80065a4:	47c8      	blx	r9
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0e6      	beq.n	8006578 <_printf_common+0xa4>
 80065aa:	3601      	adds	r6, #1
 80065ac:	e7d9      	b.n	8006562 <_printf_common+0x8e>
	...

080065b0 <_printf_i>:
 80065b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b4:	7e0f      	ldrb	r7, [r1, #24]
 80065b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065b8:	2f78      	cmp	r7, #120	@ 0x78
 80065ba:	4691      	mov	r9, r2
 80065bc:	4680      	mov	r8, r0
 80065be:	460c      	mov	r4, r1
 80065c0:	469a      	mov	sl, r3
 80065c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065c6:	d807      	bhi.n	80065d8 <_printf_i+0x28>
 80065c8:	2f62      	cmp	r7, #98	@ 0x62
 80065ca:	d80a      	bhi.n	80065e2 <_printf_i+0x32>
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	f000 80d2 	beq.w	8006776 <_printf_i+0x1c6>
 80065d2:	2f58      	cmp	r7, #88	@ 0x58
 80065d4:	f000 80b9 	beq.w	800674a <_printf_i+0x19a>
 80065d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065e0:	e03a      	b.n	8006658 <_printf_i+0xa8>
 80065e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065e6:	2b15      	cmp	r3, #21
 80065e8:	d8f6      	bhi.n	80065d8 <_printf_i+0x28>
 80065ea:	a101      	add	r1, pc, #4	@ (adr r1, 80065f0 <_printf_i+0x40>)
 80065ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065f0:	08006649 	.word	0x08006649
 80065f4:	0800665d 	.word	0x0800665d
 80065f8:	080065d9 	.word	0x080065d9
 80065fc:	080065d9 	.word	0x080065d9
 8006600:	080065d9 	.word	0x080065d9
 8006604:	080065d9 	.word	0x080065d9
 8006608:	0800665d 	.word	0x0800665d
 800660c:	080065d9 	.word	0x080065d9
 8006610:	080065d9 	.word	0x080065d9
 8006614:	080065d9 	.word	0x080065d9
 8006618:	080065d9 	.word	0x080065d9
 800661c:	0800675d 	.word	0x0800675d
 8006620:	08006687 	.word	0x08006687
 8006624:	08006717 	.word	0x08006717
 8006628:	080065d9 	.word	0x080065d9
 800662c:	080065d9 	.word	0x080065d9
 8006630:	0800677f 	.word	0x0800677f
 8006634:	080065d9 	.word	0x080065d9
 8006638:	08006687 	.word	0x08006687
 800663c:	080065d9 	.word	0x080065d9
 8006640:	080065d9 	.word	0x080065d9
 8006644:	0800671f 	.word	0x0800671f
 8006648:	6833      	ldr	r3, [r6, #0]
 800664a:	1d1a      	adds	r2, r3, #4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6032      	str	r2, [r6, #0]
 8006650:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006654:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006658:	2301      	movs	r3, #1
 800665a:	e09d      	b.n	8006798 <_printf_i+0x1e8>
 800665c:	6833      	ldr	r3, [r6, #0]
 800665e:	6820      	ldr	r0, [r4, #0]
 8006660:	1d19      	adds	r1, r3, #4
 8006662:	6031      	str	r1, [r6, #0]
 8006664:	0606      	lsls	r6, r0, #24
 8006666:	d501      	bpl.n	800666c <_printf_i+0xbc>
 8006668:	681d      	ldr	r5, [r3, #0]
 800666a:	e003      	b.n	8006674 <_printf_i+0xc4>
 800666c:	0645      	lsls	r5, r0, #25
 800666e:	d5fb      	bpl.n	8006668 <_printf_i+0xb8>
 8006670:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006674:	2d00      	cmp	r5, #0
 8006676:	da03      	bge.n	8006680 <_printf_i+0xd0>
 8006678:	232d      	movs	r3, #45	@ 0x2d
 800667a:	426d      	negs	r5, r5
 800667c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006680:	4859      	ldr	r0, [pc, #356]	@ (80067e8 <_printf_i+0x238>)
 8006682:	230a      	movs	r3, #10
 8006684:	e011      	b.n	80066aa <_printf_i+0xfa>
 8006686:	6821      	ldr	r1, [r4, #0]
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	0608      	lsls	r0, r1, #24
 800668c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006690:	d402      	bmi.n	8006698 <_printf_i+0xe8>
 8006692:	0649      	lsls	r1, r1, #25
 8006694:	bf48      	it	mi
 8006696:	b2ad      	uxthmi	r5, r5
 8006698:	2f6f      	cmp	r7, #111	@ 0x6f
 800669a:	4853      	ldr	r0, [pc, #332]	@ (80067e8 <_printf_i+0x238>)
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	bf14      	ite	ne
 80066a0:	230a      	movne	r3, #10
 80066a2:	2308      	moveq	r3, #8
 80066a4:	2100      	movs	r1, #0
 80066a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066aa:	6866      	ldr	r6, [r4, #4]
 80066ac:	60a6      	str	r6, [r4, #8]
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	bfa2      	ittt	ge
 80066b2:	6821      	ldrge	r1, [r4, #0]
 80066b4:	f021 0104 	bicge.w	r1, r1, #4
 80066b8:	6021      	strge	r1, [r4, #0]
 80066ba:	b90d      	cbnz	r5, 80066c0 <_printf_i+0x110>
 80066bc:	2e00      	cmp	r6, #0
 80066be:	d04b      	beq.n	8006758 <_printf_i+0x1a8>
 80066c0:	4616      	mov	r6, r2
 80066c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80066c6:	fb03 5711 	mls	r7, r3, r1, r5
 80066ca:	5dc7      	ldrb	r7, [r0, r7]
 80066cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066d0:	462f      	mov	r7, r5
 80066d2:	42bb      	cmp	r3, r7
 80066d4:	460d      	mov	r5, r1
 80066d6:	d9f4      	bls.n	80066c2 <_printf_i+0x112>
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d10b      	bne.n	80066f4 <_printf_i+0x144>
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	07df      	lsls	r7, r3, #31
 80066e0:	d508      	bpl.n	80066f4 <_printf_i+0x144>
 80066e2:	6923      	ldr	r3, [r4, #16]
 80066e4:	6861      	ldr	r1, [r4, #4]
 80066e6:	4299      	cmp	r1, r3
 80066e8:	bfde      	ittt	le
 80066ea:	2330      	movle	r3, #48	@ 0x30
 80066ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066f4:	1b92      	subs	r2, r2, r6
 80066f6:	6122      	str	r2, [r4, #16]
 80066f8:	f8cd a000 	str.w	sl, [sp]
 80066fc:	464b      	mov	r3, r9
 80066fe:	aa03      	add	r2, sp, #12
 8006700:	4621      	mov	r1, r4
 8006702:	4640      	mov	r0, r8
 8006704:	f7ff fee6 	bl	80064d4 <_printf_common>
 8006708:	3001      	adds	r0, #1
 800670a:	d14a      	bne.n	80067a2 <_printf_i+0x1f2>
 800670c:	f04f 30ff 	mov.w	r0, #4294967295
 8006710:	b004      	add	sp, #16
 8006712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	f043 0320 	orr.w	r3, r3, #32
 800671c:	6023      	str	r3, [r4, #0]
 800671e:	4833      	ldr	r0, [pc, #204]	@ (80067ec <_printf_i+0x23c>)
 8006720:	2778      	movs	r7, #120	@ 0x78
 8006722:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	6831      	ldr	r1, [r6, #0]
 800672a:	061f      	lsls	r7, r3, #24
 800672c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006730:	d402      	bmi.n	8006738 <_printf_i+0x188>
 8006732:	065f      	lsls	r7, r3, #25
 8006734:	bf48      	it	mi
 8006736:	b2ad      	uxthmi	r5, r5
 8006738:	6031      	str	r1, [r6, #0]
 800673a:	07d9      	lsls	r1, r3, #31
 800673c:	bf44      	itt	mi
 800673e:	f043 0320 	orrmi.w	r3, r3, #32
 8006742:	6023      	strmi	r3, [r4, #0]
 8006744:	b11d      	cbz	r5, 800674e <_printf_i+0x19e>
 8006746:	2310      	movs	r3, #16
 8006748:	e7ac      	b.n	80066a4 <_printf_i+0xf4>
 800674a:	4827      	ldr	r0, [pc, #156]	@ (80067e8 <_printf_i+0x238>)
 800674c:	e7e9      	b.n	8006722 <_printf_i+0x172>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	f023 0320 	bic.w	r3, r3, #32
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	e7f6      	b.n	8006746 <_printf_i+0x196>
 8006758:	4616      	mov	r6, r2
 800675a:	e7bd      	b.n	80066d8 <_printf_i+0x128>
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	6825      	ldr	r5, [r4, #0]
 8006760:	6961      	ldr	r1, [r4, #20]
 8006762:	1d18      	adds	r0, r3, #4
 8006764:	6030      	str	r0, [r6, #0]
 8006766:	062e      	lsls	r6, r5, #24
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	d501      	bpl.n	8006770 <_printf_i+0x1c0>
 800676c:	6019      	str	r1, [r3, #0]
 800676e:	e002      	b.n	8006776 <_printf_i+0x1c6>
 8006770:	0668      	lsls	r0, r5, #25
 8006772:	d5fb      	bpl.n	800676c <_printf_i+0x1bc>
 8006774:	8019      	strh	r1, [r3, #0]
 8006776:	2300      	movs	r3, #0
 8006778:	6123      	str	r3, [r4, #16]
 800677a:	4616      	mov	r6, r2
 800677c:	e7bc      	b.n	80066f8 <_printf_i+0x148>
 800677e:	6833      	ldr	r3, [r6, #0]
 8006780:	1d1a      	adds	r2, r3, #4
 8006782:	6032      	str	r2, [r6, #0]
 8006784:	681e      	ldr	r6, [r3, #0]
 8006786:	6862      	ldr	r2, [r4, #4]
 8006788:	2100      	movs	r1, #0
 800678a:	4630      	mov	r0, r6
 800678c:	f7f9 fd30 	bl	80001f0 <memchr>
 8006790:	b108      	cbz	r0, 8006796 <_printf_i+0x1e6>
 8006792:	1b80      	subs	r0, r0, r6
 8006794:	6060      	str	r0, [r4, #4]
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	6123      	str	r3, [r4, #16]
 800679a:	2300      	movs	r3, #0
 800679c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a0:	e7aa      	b.n	80066f8 <_printf_i+0x148>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	4632      	mov	r2, r6
 80067a6:	4649      	mov	r1, r9
 80067a8:	4640      	mov	r0, r8
 80067aa:	47d0      	blx	sl
 80067ac:	3001      	adds	r0, #1
 80067ae:	d0ad      	beq.n	800670c <_printf_i+0x15c>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	079b      	lsls	r3, r3, #30
 80067b4:	d413      	bmi.n	80067de <_printf_i+0x22e>
 80067b6:	68e0      	ldr	r0, [r4, #12]
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	4298      	cmp	r0, r3
 80067bc:	bfb8      	it	lt
 80067be:	4618      	movlt	r0, r3
 80067c0:	e7a6      	b.n	8006710 <_printf_i+0x160>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4632      	mov	r2, r6
 80067c6:	4649      	mov	r1, r9
 80067c8:	4640      	mov	r0, r8
 80067ca:	47d0      	blx	sl
 80067cc:	3001      	adds	r0, #1
 80067ce:	d09d      	beq.n	800670c <_printf_i+0x15c>
 80067d0:	3501      	adds	r5, #1
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	9903      	ldr	r1, [sp, #12]
 80067d6:	1a5b      	subs	r3, r3, r1
 80067d8:	42ab      	cmp	r3, r5
 80067da:	dcf2      	bgt.n	80067c2 <_printf_i+0x212>
 80067dc:	e7eb      	b.n	80067b6 <_printf_i+0x206>
 80067de:	2500      	movs	r5, #0
 80067e0:	f104 0619 	add.w	r6, r4, #25
 80067e4:	e7f5      	b.n	80067d2 <_printf_i+0x222>
 80067e6:	bf00      	nop
 80067e8:	0800a6ee 	.word	0x0800a6ee
 80067ec:	0800a6ff 	.word	0x0800a6ff

080067f0 <std>:
 80067f0:	2300      	movs	r3, #0
 80067f2:	b510      	push	{r4, lr}
 80067f4:	4604      	mov	r4, r0
 80067f6:	e9c0 3300 	strd	r3, r3, [r0]
 80067fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067fe:	6083      	str	r3, [r0, #8]
 8006800:	8181      	strh	r1, [r0, #12]
 8006802:	6643      	str	r3, [r0, #100]	@ 0x64
 8006804:	81c2      	strh	r2, [r0, #14]
 8006806:	6183      	str	r3, [r0, #24]
 8006808:	4619      	mov	r1, r3
 800680a:	2208      	movs	r2, #8
 800680c:	305c      	adds	r0, #92	@ 0x5c
 800680e:	f000 f914 	bl	8006a3a <memset>
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <std+0x58>)
 8006814:	6263      	str	r3, [r4, #36]	@ 0x24
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <std+0x5c>)
 8006818:	62a3      	str	r3, [r4, #40]	@ 0x28
 800681a:	4b0d      	ldr	r3, [pc, #52]	@ (8006850 <std+0x60>)
 800681c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <std+0x64>)
 8006820:	6323      	str	r3, [r4, #48]	@ 0x30
 8006822:	4b0d      	ldr	r3, [pc, #52]	@ (8006858 <std+0x68>)
 8006824:	6224      	str	r4, [r4, #32]
 8006826:	429c      	cmp	r4, r3
 8006828:	d006      	beq.n	8006838 <std+0x48>
 800682a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800682e:	4294      	cmp	r4, r2
 8006830:	d002      	beq.n	8006838 <std+0x48>
 8006832:	33d0      	adds	r3, #208	@ 0xd0
 8006834:	429c      	cmp	r4, r3
 8006836:	d105      	bne.n	8006844 <std+0x54>
 8006838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800683c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006840:	f000 b978 	b.w	8006b34 <__retarget_lock_init_recursive>
 8006844:	bd10      	pop	{r4, pc}
 8006846:	bf00      	nop
 8006848:	080069b5 	.word	0x080069b5
 800684c:	080069d7 	.word	0x080069d7
 8006850:	08006a0f 	.word	0x08006a0f
 8006854:	08006a33 	.word	0x08006a33
 8006858:	200004cc 	.word	0x200004cc

0800685c <stdio_exit_handler>:
 800685c:	4a02      	ldr	r2, [pc, #8]	@ (8006868 <stdio_exit_handler+0xc>)
 800685e:	4903      	ldr	r1, [pc, #12]	@ (800686c <stdio_exit_handler+0x10>)
 8006860:	4803      	ldr	r0, [pc, #12]	@ (8006870 <stdio_exit_handler+0x14>)
 8006862:	f000 b869 	b.w	8006938 <_fwalk_sglue>
 8006866:	bf00      	nop
 8006868:	20000088 	.word	0x20000088
 800686c:	08008495 	.word	0x08008495
 8006870:	20000098 	.word	0x20000098

08006874 <cleanup_stdio>:
 8006874:	6841      	ldr	r1, [r0, #4]
 8006876:	4b0c      	ldr	r3, [pc, #48]	@ (80068a8 <cleanup_stdio+0x34>)
 8006878:	4299      	cmp	r1, r3
 800687a:	b510      	push	{r4, lr}
 800687c:	4604      	mov	r4, r0
 800687e:	d001      	beq.n	8006884 <cleanup_stdio+0x10>
 8006880:	f001 fe08 	bl	8008494 <_fflush_r>
 8006884:	68a1      	ldr	r1, [r4, #8]
 8006886:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <cleanup_stdio+0x38>)
 8006888:	4299      	cmp	r1, r3
 800688a:	d002      	beq.n	8006892 <cleanup_stdio+0x1e>
 800688c:	4620      	mov	r0, r4
 800688e:	f001 fe01 	bl	8008494 <_fflush_r>
 8006892:	68e1      	ldr	r1, [r4, #12]
 8006894:	4b06      	ldr	r3, [pc, #24]	@ (80068b0 <cleanup_stdio+0x3c>)
 8006896:	4299      	cmp	r1, r3
 8006898:	d004      	beq.n	80068a4 <cleanup_stdio+0x30>
 800689a:	4620      	mov	r0, r4
 800689c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a0:	f001 bdf8 	b.w	8008494 <_fflush_r>
 80068a4:	bd10      	pop	{r4, pc}
 80068a6:	bf00      	nop
 80068a8:	200004cc 	.word	0x200004cc
 80068ac:	20000534 	.word	0x20000534
 80068b0:	2000059c 	.word	0x2000059c

080068b4 <global_stdio_init.part.0>:
 80068b4:	b510      	push	{r4, lr}
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <global_stdio_init.part.0+0x30>)
 80068b8:	4c0b      	ldr	r4, [pc, #44]	@ (80068e8 <global_stdio_init.part.0+0x34>)
 80068ba:	4a0c      	ldr	r2, [pc, #48]	@ (80068ec <global_stdio_init.part.0+0x38>)
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	4620      	mov	r0, r4
 80068c0:	2200      	movs	r2, #0
 80068c2:	2104      	movs	r1, #4
 80068c4:	f7ff ff94 	bl	80067f0 <std>
 80068c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068cc:	2201      	movs	r2, #1
 80068ce:	2109      	movs	r1, #9
 80068d0:	f7ff ff8e 	bl	80067f0 <std>
 80068d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068d8:	2202      	movs	r2, #2
 80068da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068de:	2112      	movs	r1, #18
 80068e0:	f7ff bf86 	b.w	80067f0 <std>
 80068e4:	20000604 	.word	0x20000604
 80068e8:	200004cc 	.word	0x200004cc
 80068ec:	0800685d 	.word	0x0800685d

080068f0 <__sfp_lock_acquire>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__sfp_lock_acquire+0x8>)
 80068f2:	f000 b920 	b.w	8006b36 <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	2000060d 	.word	0x2000060d

080068fc <__sfp_lock_release>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__sfp_lock_release+0x8>)
 80068fe:	f000 b91b 	b.w	8006b38 <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	2000060d 	.word	0x2000060d

08006908 <__sinit>:
 8006908:	b510      	push	{r4, lr}
 800690a:	4604      	mov	r4, r0
 800690c:	f7ff fff0 	bl	80068f0 <__sfp_lock_acquire>
 8006910:	6a23      	ldr	r3, [r4, #32]
 8006912:	b11b      	cbz	r3, 800691c <__sinit+0x14>
 8006914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006918:	f7ff bff0 	b.w	80068fc <__sfp_lock_release>
 800691c:	4b04      	ldr	r3, [pc, #16]	@ (8006930 <__sinit+0x28>)
 800691e:	6223      	str	r3, [r4, #32]
 8006920:	4b04      	ldr	r3, [pc, #16]	@ (8006934 <__sinit+0x2c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1f5      	bne.n	8006914 <__sinit+0xc>
 8006928:	f7ff ffc4 	bl	80068b4 <global_stdio_init.part.0>
 800692c:	e7f2      	b.n	8006914 <__sinit+0xc>
 800692e:	bf00      	nop
 8006930:	08006875 	.word	0x08006875
 8006934:	20000604 	.word	0x20000604

08006938 <_fwalk_sglue>:
 8006938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800693c:	4607      	mov	r7, r0
 800693e:	4688      	mov	r8, r1
 8006940:	4614      	mov	r4, r2
 8006942:	2600      	movs	r6, #0
 8006944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006948:	f1b9 0901 	subs.w	r9, r9, #1
 800694c:	d505      	bpl.n	800695a <_fwalk_sglue+0x22>
 800694e:	6824      	ldr	r4, [r4, #0]
 8006950:	2c00      	cmp	r4, #0
 8006952:	d1f7      	bne.n	8006944 <_fwalk_sglue+0xc>
 8006954:	4630      	mov	r0, r6
 8006956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800695a:	89ab      	ldrh	r3, [r5, #12]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d907      	bls.n	8006970 <_fwalk_sglue+0x38>
 8006960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006964:	3301      	adds	r3, #1
 8006966:	d003      	beq.n	8006970 <_fwalk_sglue+0x38>
 8006968:	4629      	mov	r1, r5
 800696a:	4638      	mov	r0, r7
 800696c:	47c0      	blx	r8
 800696e:	4306      	orrs	r6, r0
 8006970:	3568      	adds	r5, #104	@ 0x68
 8006972:	e7e9      	b.n	8006948 <_fwalk_sglue+0x10>

08006974 <siprintf>:
 8006974:	b40e      	push	{r1, r2, r3}
 8006976:	b500      	push	{lr}
 8006978:	b09c      	sub	sp, #112	@ 0x70
 800697a:	ab1d      	add	r3, sp, #116	@ 0x74
 800697c:	9002      	str	r0, [sp, #8]
 800697e:	9006      	str	r0, [sp, #24]
 8006980:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006984:	4809      	ldr	r0, [pc, #36]	@ (80069ac <siprintf+0x38>)
 8006986:	9107      	str	r1, [sp, #28]
 8006988:	9104      	str	r1, [sp, #16]
 800698a:	4909      	ldr	r1, [pc, #36]	@ (80069b0 <siprintf+0x3c>)
 800698c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006990:	9105      	str	r1, [sp, #20]
 8006992:	6800      	ldr	r0, [r0, #0]
 8006994:	9301      	str	r3, [sp, #4]
 8006996:	a902      	add	r1, sp, #8
 8006998:	f001 fbfc 	bl	8008194 <_svfiprintf_r>
 800699c:	9b02      	ldr	r3, [sp, #8]
 800699e:	2200      	movs	r2, #0
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	b01c      	add	sp, #112	@ 0x70
 80069a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069a8:	b003      	add	sp, #12
 80069aa:	4770      	bx	lr
 80069ac:	20000094 	.word	0x20000094
 80069b0:	ffff0208 	.word	0xffff0208

080069b4 <__sread>:
 80069b4:	b510      	push	{r4, lr}
 80069b6:	460c      	mov	r4, r1
 80069b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069bc:	f000 f86c 	bl	8006a98 <_read_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	bfab      	itete	ge
 80069c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069c6:	89a3      	ldrhlt	r3, [r4, #12]
 80069c8:	181b      	addge	r3, r3, r0
 80069ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069ce:	bfac      	ite	ge
 80069d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069d2:	81a3      	strhlt	r3, [r4, #12]
 80069d4:	bd10      	pop	{r4, pc}

080069d6 <__swrite>:
 80069d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069da:	461f      	mov	r7, r3
 80069dc:	898b      	ldrh	r3, [r1, #12]
 80069de:	05db      	lsls	r3, r3, #23
 80069e0:	4605      	mov	r5, r0
 80069e2:	460c      	mov	r4, r1
 80069e4:	4616      	mov	r6, r2
 80069e6:	d505      	bpl.n	80069f4 <__swrite+0x1e>
 80069e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ec:	2302      	movs	r3, #2
 80069ee:	2200      	movs	r2, #0
 80069f0:	f000 f840 	bl	8006a74 <_lseek_r>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	4632      	mov	r2, r6
 8006a02:	463b      	mov	r3, r7
 8006a04:	4628      	mov	r0, r5
 8006a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a0a:	f000 b857 	b.w	8006abc <_write_r>

08006a0e <__sseek>:
 8006a0e:	b510      	push	{r4, lr}
 8006a10:	460c      	mov	r4, r1
 8006a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a16:	f000 f82d 	bl	8006a74 <_lseek_r>
 8006a1a:	1c43      	adds	r3, r0, #1
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	bf15      	itete	ne
 8006a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a2a:	81a3      	strheq	r3, [r4, #12]
 8006a2c:	bf18      	it	ne
 8006a2e:	81a3      	strhne	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__sclose>:
 8006a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a36:	f000 b80d 	b.w	8006a54 <_close_r>

08006a3a <memset>:
 8006a3a:	4402      	add	r2, r0
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d100      	bne.n	8006a44 <memset+0xa>
 8006a42:	4770      	bx	lr
 8006a44:	f803 1b01 	strb.w	r1, [r3], #1
 8006a48:	e7f9      	b.n	8006a3e <memset+0x4>
	...

08006a4c <_localeconv_r>:
 8006a4c:	4800      	ldr	r0, [pc, #0]	@ (8006a50 <_localeconv_r+0x4>)
 8006a4e:	4770      	bx	lr
 8006a50:	200001d4 	.word	0x200001d4

08006a54 <_close_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	@ (8006a70 <_close_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7fa fbe7 	bl	8001232 <_close>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_close_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_close_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20000608 	.word	0x20000608

08006a74 <_lseek_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d07      	ldr	r5, [pc, #28]	@ (8006a94 <_lseek_r+0x20>)
 8006a78:	4604      	mov	r4, r0
 8006a7a:	4608      	mov	r0, r1
 8006a7c:	4611      	mov	r1, r2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	602a      	str	r2, [r5, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f7fa fbfc 	bl	8001280 <_lseek>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_lseek_r+0x1e>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_lseek_r+0x1e>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	20000608 	.word	0x20000608

08006a98 <_read_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d07      	ldr	r5, [pc, #28]	@ (8006ab8 <_read_r+0x20>)
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7fa fb8a 	bl	80011c0 <_read>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_read_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_read_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000608 	.word	0x20000608

08006abc <_write_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d07      	ldr	r5, [pc, #28]	@ (8006adc <_write_r+0x20>)
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	4608      	mov	r0, r1
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	602a      	str	r2, [r5, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	f7fa fb95 	bl	80011fa <_write>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_write_r+0x1e>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_write_r+0x1e>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20000608 	.word	0x20000608

08006ae0 <__errno>:
 8006ae0:	4b01      	ldr	r3, [pc, #4]	@ (8006ae8 <__errno+0x8>)
 8006ae2:	6818      	ldr	r0, [r3, #0]
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000094 	.word	0x20000094

08006aec <__libc_init_array>:
 8006aec:	b570      	push	{r4, r5, r6, lr}
 8006aee:	4d0d      	ldr	r5, [pc, #52]	@ (8006b24 <__libc_init_array+0x38>)
 8006af0:	4c0d      	ldr	r4, [pc, #52]	@ (8006b28 <__libc_init_array+0x3c>)
 8006af2:	1b64      	subs	r4, r4, r5
 8006af4:	10a4      	asrs	r4, r4, #2
 8006af6:	2600      	movs	r6, #0
 8006af8:	42a6      	cmp	r6, r4
 8006afa:	d109      	bne.n	8006b10 <__libc_init_array+0x24>
 8006afc:	4d0b      	ldr	r5, [pc, #44]	@ (8006b2c <__libc_init_array+0x40>)
 8006afe:	4c0c      	ldr	r4, [pc, #48]	@ (8006b30 <__libc_init_array+0x44>)
 8006b00:	f002 f866 	bl	8008bd0 <_init>
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	2600      	movs	r6, #0
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	d105      	bne.n	8006b1a <__libc_init_array+0x2e>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b14:	4798      	blx	r3
 8006b16:	3601      	adds	r6, #1
 8006b18:	e7ee      	b.n	8006af8 <__libc_init_array+0xc>
 8006b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1e:	4798      	blx	r3
 8006b20:	3601      	adds	r6, #1
 8006b22:	e7f2      	b.n	8006b0a <__libc_init_array+0x1e>
 8006b24:	0800aa58 	.word	0x0800aa58
 8006b28:	0800aa58 	.word	0x0800aa58
 8006b2c:	0800aa58 	.word	0x0800aa58
 8006b30:	0800aa5c 	.word	0x0800aa5c

08006b34 <__retarget_lock_init_recursive>:
 8006b34:	4770      	bx	lr

08006b36 <__retarget_lock_acquire_recursive>:
 8006b36:	4770      	bx	lr

08006b38 <__retarget_lock_release_recursive>:
 8006b38:	4770      	bx	lr

08006b3a <quorem>:
 8006b3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b3e:	6903      	ldr	r3, [r0, #16]
 8006b40:	690c      	ldr	r4, [r1, #16]
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	4607      	mov	r7, r0
 8006b46:	db7e      	blt.n	8006c46 <quorem+0x10c>
 8006b48:	3c01      	subs	r4, #1
 8006b4a:	f101 0814 	add.w	r8, r1, #20
 8006b4e:	00a3      	lsls	r3, r4, #2
 8006b50:	f100 0514 	add.w	r5, r0, #20
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b64:	3301      	adds	r3, #1
 8006b66:	429a      	cmp	r2, r3
 8006b68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b70:	d32e      	bcc.n	8006bd0 <quorem+0x96>
 8006b72:	f04f 0a00 	mov.w	sl, #0
 8006b76:	46c4      	mov	ip, r8
 8006b78:	46ae      	mov	lr, r5
 8006b7a:	46d3      	mov	fp, sl
 8006b7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b80:	b298      	uxth	r0, r3
 8006b82:	fb06 a000 	mla	r0, r6, r0, sl
 8006b86:	0c02      	lsrs	r2, r0, #16
 8006b88:	0c1b      	lsrs	r3, r3, #16
 8006b8a:	fb06 2303 	mla	r3, r6, r3, r2
 8006b8e:	f8de 2000 	ldr.w	r2, [lr]
 8006b92:	b280      	uxth	r0, r0
 8006b94:	b292      	uxth	r2, r2
 8006b96:	1a12      	subs	r2, r2, r0
 8006b98:	445a      	add	r2, fp
 8006b9a:	f8de 0000 	ldr.w	r0, [lr]
 8006b9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ba8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bac:	b292      	uxth	r2, r2
 8006bae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bb2:	45e1      	cmp	r9, ip
 8006bb4:	f84e 2b04 	str.w	r2, [lr], #4
 8006bb8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bbc:	d2de      	bcs.n	8006b7c <quorem+0x42>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	58eb      	ldr	r3, [r5, r3]
 8006bc2:	b92b      	cbnz	r3, 8006bd0 <quorem+0x96>
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	3b04      	subs	r3, #4
 8006bc8:	429d      	cmp	r5, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	d32f      	bcc.n	8006c2e <quorem+0xf4>
 8006bce:	613c      	str	r4, [r7, #16]
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	f001 f97b 	bl	8007ecc <__mcmp>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	db25      	blt.n	8006c26 <quorem+0xec>
 8006bda:	4629      	mov	r1, r5
 8006bdc:	2000      	movs	r0, #0
 8006bde:	f858 2b04 	ldr.w	r2, [r8], #4
 8006be2:	f8d1 c000 	ldr.w	ip, [r1]
 8006be6:	fa1f fe82 	uxth.w	lr, r2
 8006bea:	fa1f f38c 	uxth.w	r3, ip
 8006bee:	eba3 030e 	sub.w	r3, r3, lr
 8006bf2:	4403      	add	r3, r0
 8006bf4:	0c12      	lsrs	r2, r2, #16
 8006bf6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bfa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c04:	45c1      	cmp	r9, r8
 8006c06:	f841 3b04 	str.w	r3, [r1], #4
 8006c0a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c0e:	d2e6      	bcs.n	8006bde <quorem+0xa4>
 8006c10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c18:	b922      	cbnz	r2, 8006c24 <quorem+0xea>
 8006c1a:	3b04      	subs	r3, #4
 8006c1c:	429d      	cmp	r5, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	d30b      	bcc.n	8006c3a <quorem+0x100>
 8006c22:	613c      	str	r4, [r7, #16]
 8006c24:	3601      	adds	r6, #1
 8006c26:	4630      	mov	r0, r6
 8006c28:	b003      	add	sp, #12
 8006c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c2e:	6812      	ldr	r2, [r2, #0]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	2a00      	cmp	r2, #0
 8006c34:	d1cb      	bne.n	8006bce <quorem+0x94>
 8006c36:	3c01      	subs	r4, #1
 8006c38:	e7c6      	b.n	8006bc8 <quorem+0x8e>
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	3b04      	subs	r3, #4
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	d1ef      	bne.n	8006c22 <quorem+0xe8>
 8006c42:	3c01      	subs	r4, #1
 8006c44:	e7ea      	b.n	8006c1c <quorem+0xe2>
 8006c46:	2000      	movs	r0, #0
 8006c48:	e7ee      	b.n	8006c28 <quorem+0xee>
 8006c4a:	0000      	movs	r0, r0
 8006c4c:	0000      	movs	r0, r0
	...

08006c50 <_dtoa_r>:
 8006c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c54:	69c7      	ldr	r7, [r0, #28]
 8006c56:	b099      	sub	sp, #100	@ 0x64
 8006c58:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c5c:	ec55 4b10 	vmov	r4, r5, d0
 8006c60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c62:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c64:	4683      	mov	fp, r0
 8006c66:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c6a:	b97f      	cbnz	r7, 8006c8c <_dtoa_r+0x3c>
 8006c6c:	2010      	movs	r0, #16
 8006c6e:	f000 fdfd 	bl	800786c <malloc>
 8006c72:	4602      	mov	r2, r0
 8006c74:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c78:	b920      	cbnz	r0, 8006c84 <_dtoa_r+0x34>
 8006c7a:	4ba7      	ldr	r3, [pc, #668]	@ (8006f18 <_dtoa_r+0x2c8>)
 8006c7c:	21ef      	movs	r1, #239	@ 0xef
 8006c7e:	48a7      	ldr	r0, [pc, #668]	@ (8006f1c <_dtoa_r+0x2cc>)
 8006c80:	f001 fc68 	bl	8008554 <__assert_func>
 8006c84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c88:	6007      	str	r7, [r0, #0]
 8006c8a:	60c7      	str	r7, [r0, #12]
 8006c8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c90:	6819      	ldr	r1, [r3, #0]
 8006c92:	b159      	cbz	r1, 8006cac <_dtoa_r+0x5c>
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	604a      	str	r2, [r1, #4]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	4093      	lsls	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
 8006c9e:	4658      	mov	r0, fp
 8006ca0:	f000 feda 	bl	8007a58 <_Bfree>
 8006ca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	1e2b      	subs	r3, r5, #0
 8006cae:	bfb9      	ittee	lt
 8006cb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cb4:	9303      	strlt	r3, [sp, #12]
 8006cb6:	2300      	movge	r3, #0
 8006cb8:	6033      	strge	r3, [r6, #0]
 8006cba:	9f03      	ldr	r7, [sp, #12]
 8006cbc:	4b98      	ldr	r3, [pc, #608]	@ (8006f20 <_dtoa_r+0x2d0>)
 8006cbe:	bfbc      	itt	lt
 8006cc0:	2201      	movlt	r2, #1
 8006cc2:	6032      	strlt	r2, [r6, #0]
 8006cc4:	43bb      	bics	r3, r7
 8006cc6:	d112      	bne.n	8006cee <_dtoa_r+0x9e>
 8006cc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cd4:	4323      	orrs	r3, r4
 8006cd6:	f000 854d 	beq.w	8007774 <_dtoa_r+0xb24>
 8006cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f34 <_dtoa_r+0x2e4>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 854f 	beq.w	8007784 <_dtoa_r+0xb34>
 8006ce6:	f10a 0303 	add.w	r3, sl, #3
 8006cea:	f000 bd49 	b.w	8007780 <_dtoa_r+0xb30>
 8006cee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	ec51 0b17 	vmov	r0, r1, d7
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006cfe:	f7f9 fef3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d02:	4680      	mov	r8, r0
 8006d04:	b158      	cbz	r0, 8006d1e <_dtoa_r+0xce>
 8006d06:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006d08:	2301      	movs	r3, #1
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d0e:	b113      	cbz	r3, 8006d16 <_dtoa_r+0xc6>
 8006d10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d12:	4b84      	ldr	r3, [pc, #528]	@ (8006f24 <_dtoa_r+0x2d4>)
 8006d14:	6013      	str	r3, [r2, #0]
 8006d16:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f38 <_dtoa_r+0x2e8>
 8006d1a:	f000 bd33 	b.w	8007784 <_dtoa_r+0xb34>
 8006d1e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d22:	aa16      	add	r2, sp, #88	@ 0x58
 8006d24:	a917      	add	r1, sp, #92	@ 0x5c
 8006d26:	4658      	mov	r0, fp
 8006d28:	f001 f980 	bl	800802c <__d2b>
 8006d2c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d30:	4681      	mov	r9, r0
 8006d32:	2e00      	cmp	r6, #0
 8006d34:	d077      	beq.n	8006e26 <_dtoa_r+0x1d6>
 8006d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d38:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d44:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d48:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d4c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d50:	4619      	mov	r1, r3
 8006d52:	2200      	movs	r2, #0
 8006d54:	4b74      	ldr	r3, [pc, #464]	@ (8006f28 <_dtoa_r+0x2d8>)
 8006d56:	f7f9 faa7 	bl	80002a8 <__aeabi_dsub>
 8006d5a:	a369      	add	r3, pc, #420	@ (adr r3, 8006f00 <_dtoa_r+0x2b0>)
 8006d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d60:	f7f9 fc5a 	bl	8000618 <__aeabi_dmul>
 8006d64:	a368      	add	r3, pc, #416	@ (adr r3, 8006f08 <_dtoa_r+0x2b8>)
 8006d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6a:	f7f9 fa9f 	bl	80002ac <__adddf3>
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4630      	mov	r0, r6
 8006d72:	460d      	mov	r5, r1
 8006d74:	f7f9 fbe6 	bl	8000544 <__aeabi_i2d>
 8006d78:	a365      	add	r3, pc, #404	@ (adr r3, 8006f10 <_dtoa_r+0x2c0>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fc4b 	bl	8000618 <__aeabi_dmul>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4620      	mov	r0, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7f9 fa8f 	bl	80002ac <__adddf3>
 8006d8e:	4604      	mov	r4, r0
 8006d90:	460d      	mov	r5, r1
 8006d92:	f7f9 fef1 	bl	8000b78 <__aeabi_d2iz>
 8006d96:	2200      	movs	r2, #0
 8006d98:	4607      	mov	r7, r0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 feac 	bl	8000afc <__aeabi_dcmplt>
 8006da4:	b140      	cbz	r0, 8006db8 <_dtoa_r+0x168>
 8006da6:	4638      	mov	r0, r7
 8006da8:	f7f9 fbcc 	bl	8000544 <__aeabi_i2d>
 8006dac:	4622      	mov	r2, r4
 8006dae:	462b      	mov	r3, r5
 8006db0:	f7f9 fe9a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006db4:	b900      	cbnz	r0, 8006db8 <_dtoa_r+0x168>
 8006db6:	3f01      	subs	r7, #1
 8006db8:	2f16      	cmp	r7, #22
 8006dba:	d851      	bhi.n	8006e60 <_dtoa_r+0x210>
 8006dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8006f2c <_dtoa_r+0x2dc>)
 8006dbe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dca:	f7f9 fe97 	bl	8000afc <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d048      	beq.n	8006e64 <_dtoa_r+0x214>
 8006dd2:	3f01      	subs	r7, #1
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dda:	1b9b      	subs	r3, r3, r6
 8006ddc:	1e5a      	subs	r2, r3, #1
 8006dde:	bf44      	itt	mi
 8006de0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006de4:	2300      	movmi	r3, #0
 8006de6:	9208      	str	r2, [sp, #32]
 8006de8:	bf54      	ite	pl
 8006dea:	f04f 0800 	movpl.w	r8, #0
 8006dee:	9308      	strmi	r3, [sp, #32]
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	db39      	blt.n	8006e68 <_dtoa_r+0x218>
 8006df4:	9b08      	ldr	r3, [sp, #32]
 8006df6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006df8:	443b      	add	r3, r7
 8006dfa:	9308      	str	r3, [sp, #32]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e02:	2b09      	cmp	r3, #9
 8006e04:	d864      	bhi.n	8006ed0 <_dtoa_r+0x280>
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	bfc4      	itt	gt
 8006e0a:	3b04      	subgt	r3, #4
 8006e0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e10:	f1a3 0302 	sub.w	r3, r3, #2
 8006e14:	bfcc      	ite	gt
 8006e16:	2400      	movgt	r4, #0
 8006e18:	2401      	movle	r4, #1
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d863      	bhi.n	8006ee6 <_dtoa_r+0x296>
 8006e1e:	e8df f003 	tbb	[pc, r3]
 8006e22:	372a      	.short	0x372a
 8006e24:	5535      	.short	0x5535
 8006e26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e2a:	441e      	add	r6, r3
 8006e2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	bfc1      	itttt	gt
 8006e34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e38:	409f      	lslgt	r7, r3
 8006e3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e42:	bfd6      	itet	le
 8006e44:	f1c3 0320 	rsble	r3, r3, #32
 8006e48:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e4c:	fa04 f003 	lslle.w	r0, r4, r3
 8006e50:	f7f9 fb68 	bl	8000524 <__aeabi_ui2d>
 8006e54:	2201      	movs	r2, #1
 8006e56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e5a:	3e01      	subs	r6, #1
 8006e5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e5e:	e777      	b.n	8006d50 <_dtoa_r+0x100>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e7b8      	b.n	8006dd6 <_dtoa_r+0x186>
 8006e64:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e66:	e7b7      	b.n	8006dd8 <_dtoa_r+0x188>
 8006e68:	427b      	negs	r3, r7
 8006e6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	eba8 0807 	sub.w	r8, r8, r7
 8006e72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e74:	e7c4      	b.n	8006e00 <_dtoa_r+0x1b0>
 8006e76:	2300      	movs	r3, #0
 8006e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dc35      	bgt.n	8006eec <_dtoa_r+0x29c>
 8006e80:	2301      	movs	r3, #1
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	9307      	str	r3, [sp, #28]
 8006e86:	461a      	mov	r2, r3
 8006e88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e8a:	e00b      	b.n	8006ea4 <_dtoa_r+0x254>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e7f3      	b.n	8006e78 <_dtoa_r+0x228>
 8006e90:	2300      	movs	r3, #0
 8006e92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e96:	18fb      	adds	r3, r7, r3
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	bfb8      	it	lt
 8006ea2:	2301      	movlt	r3, #1
 8006ea4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	2204      	movs	r2, #4
 8006eac:	f102 0514 	add.w	r5, r2, #20
 8006eb0:	429d      	cmp	r5, r3
 8006eb2:	d91f      	bls.n	8006ef4 <_dtoa_r+0x2a4>
 8006eb4:	6041      	str	r1, [r0, #4]
 8006eb6:	4658      	mov	r0, fp
 8006eb8:	f000 fd8e 	bl	80079d8 <_Balloc>
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d13c      	bne.n	8006f3c <_dtoa_r+0x2ec>
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f30 <_dtoa_r+0x2e0>)
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006eca:	e6d8      	b.n	8006c7e <_dtoa_r+0x2e>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e7e0      	b.n	8006e92 <_dtoa_r+0x242>
 8006ed0:	2401      	movs	r4, #1
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ed6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2312      	movs	r3, #18
 8006ee4:	e7d0      	b.n	8006e88 <_dtoa_r+0x238>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eea:	e7f5      	b.n	8006ed8 <_dtoa_r+0x288>
 8006eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	e7d7      	b.n	8006ea4 <_dtoa_r+0x254>
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	0052      	lsls	r2, r2, #1
 8006ef8:	e7d8      	b.n	8006eac <_dtoa_r+0x25c>
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w
 8006f00:	636f4361 	.word	0x636f4361
 8006f04:	3fd287a7 	.word	0x3fd287a7
 8006f08:	8b60c8b3 	.word	0x8b60c8b3
 8006f0c:	3fc68a28 	.word	0x3fc68a28
 8006f10:	509f79fb 	.word	0x509f79fb
 8006f14:	3fd34413 	.word	0x3fd34413
 8006f18:	0800a71d 	.word	0x0800a71d
 8006f1c:	0800a734 	.word	0x0800a734
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	0800a6ed 	.word	0x0800a6ed
 8006f28:	3ff80000 	.word	0x3ff80000
 8006f2c:	0800a830 	.word	0x0800a830
 8006f30:	0800a78c 	.word	0x0800a78c
 8006f34:	0800a719 	.word	0x0800a719
 8006f38:	0800a6ec 	.word	0x0800a6ec
 8006f3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f40:	6018      	str	r0, [r3, #0]
 8006f42:	9b07      	ldr	r3, [sp, #28]
 8006f44:	2b0e      	cmp	r3, #14
 8006f46:	f200 80a4 	bhi.w	8007092 <_dtoa_r+0x442>
 8006f4a:	2c00      	cmp	r4, #0
 8006f4c:	f000 80a1 	beq.w	8007092 <_dtoa_r+0x442>
 8006f50:	2f00      	cmp	r7, #0
 8006f52:	dd33      	ble.n	8006fbc <_dtoa_r+0x36c>
 8006f54:	4bad      	ldr	r3, [pc, #692]	@ (800720c <_dtoa_r+0x5bc>)
 8006f56:	f007 020f 	and.w	r2, r7, #15
 8006f5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5e:	ed93 7b00 	vldr	d7, [r3]
 8006f62:	05f8      	lsls	r0, r7, #23
 8006f64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f6c:	d516      	bpl.n	8006f9c <_dtoa_r+0x34c>
 8006f6e:	4ba8      	ldr	r3, [pc, #672]	@ (8007210 <_dtoa_r+0x5c0>)
 8006f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f78:	f7f9 fc78 	bl	800086c <__aeabi_ddiv>
 8006f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f80:	f004 040f 	and.w	r4, r4, #15
 8006f84:	2603      	movs	r6, #3
 8006f86:	4da2      	ldr	r5, [pc, #648]	@ (8007210 <_dtoa_r+0x5c0>)
 8006f88:	b954      	cbnz	r4, 8006fa0 <_dtoa_r+0x350>
 8006f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f92:	f7f9 fc6b 	bl	800086c <__aeabi_ddiv>
 8006f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f9a:	e028      	b.n	8006fee <_dtoa_r+0x39e>
 8006f9c:	2602      	movs	r6, #2
 8006f9e:	e7f2      	b.n	8006f86 <_dtoa_r+0x336>
 8006fa0:	07e1      	lsls	r1, r4, #31
 8006fa2:	d508      	bpl.n	8006fb6 <_dtoa_r+0x366>
 8006fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fac:	f7f9 fb34 	bl	8000618 <__aeabi_dmul>
 8006fb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fb4:	3601      	adds	r6, #1
 8006fb6:	1064      	asrs	r4, r4, #1
 8006fb8:	3508      	adds	r5, #8
 8006fba:	e7e5      	b.n	8006f88 <_dtoa_r+0x338>
 8006fbc:	f000 80d2 	beq.w	8007164 <_dtoa_r+0x514>
 8006fc0:	427c      	negs	r4, r7
 8006fc2:	4b92      	ldr	r3, [pc, #584]	@ (800720c <_dtoa_r+0x5bc>)
 8006fc4:	4d92      	ldr	r5, [pc, #584]	@ (8007210 <_dtoa_r+0x5c0>)
 8006fc6:	f004 020f 	and.w	r2, r4, #15
 8006fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fd6:	f7f9 fb1f 	bl	8000618 <__aeabi_dmul>
 8006fda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fde:	1124      	asrs	r4, r4, #4
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2602      	movs	r6, #2
 8006fe4:	2c00      	cmp	r4, #0
 8006fe6:	f040 80b2 	bne.w	800714e <_dtoa_r+0x4fe>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1d3      	bne.n	8006f96 <_dtoa_r+0x346>
 8006fee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ff0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f000 80b7 	beq.w	8007168 <_dtoa_r+0x518>
 8006ffa:	4b86      	ldr	r3, [pc, #536]	@ (8007214 <_dtoa_r+0x5c4>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 fd7b 	bl	8000afc <__aeabi_dcmplt>
 8007006:	2800      	cmp	r0, #0
 8007008:	f000 80ae 	beq.w	8007168 <_dtoa_r+0x518>
 800700c:	9b07      	ldr	r3, [sp, #28]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80aa 	beq.w	8007168 <_dtoa_r+0x518>
 8007014:	9b00      	ldr	r3, [sp, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	dd37      	ble.n	800708a <_dtoa_r+0x43a>
 800701a:	1e7b      	subs	r3, r7, #1
 800701c:	9304      	str	r3, [sp, #16]
 800701e:	4620      	mov	r0, r4
 8007020:	4b7d      	ldr	r3, [pc, #500]	@ (8007218 <_dtoa_r+0x5c8>)
 8007022:	2200      	movs	r2, #0
 8007024:	4629      	mov	r1, r5
 8007026:	f7f9 faf7 	bl	8000618 <__aeabi_dmul>
 800702a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800702e:	9c00      	ldr	r4, [sp, #0]
 8007030:	3601      	adds	r6, #1
 8007032:	4630      	mov	r0, r6
 8007034:	f7f9 fa86 	bl	8000544 <__aeabi_i2d>
 8007038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800703c:	f7f9 faec 	bl	8000618 <__aeabi_dmul>
 8007040:	4b76      	ldr	r3, [pc, #472]	@ (800721c <_dtoa_r+0x5cc>)
 8007042:	2200      	movs	r2, #0
 8007044:	f7f9 f932 	bl	80002ac <__adddf3>
 8007048:	4605      	mov	r5, r0
 800704a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800704e:	2c00      	cmp	r4, #0
 8007050:	f040 808d 	bne.w	800716e <_dtoa_r+0x51e>
 8007054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007058:	4b71      	ldr	r3, [pc, #452]	@ (8007220 <_dtoa_r+0x5d0>)
 800705a:	2200      	movs	r2, #0
 800705c:	f7f9 f924 	bl	80002a8 <__aeabi_dsub>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
 8007064:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007068:	462a      	mov	r2, r5
 800706a:	4633      	mov	r3, r6
 800706c:	f7f9 fd64 	bl	8000b38 <__aeabi_dcmpgt>
 8007070:	2800      	cmp	r0, #0
 8007072:	f040 828b 	bne.w	800758c <_dtoa_r+0x93c>
 8007076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800707a:	462a      	mov	r2, r5
 800707c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007080:	f7f9 fd3c 	bl	8000afc <__aeabi_dcmplt>
 8007084:	2800      	cmp	r0, #0
 8007086:	f040 8128 	bne.w	80072da <_dtoa_r+0x68a>
 800708a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800708e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007094:	2b00      	cmp	r3, #0
 8007096:	f2c0 815a 	blt.w	800734e <_dtoa_r+0x6fe>
 800709a:	2f0e      	cmp	r7, #14
 800709c:	f300 8157 	bgt.w	800734e <_dtoa_r+0x6fe>
 80070a0:	4b5a      	ldr	r3, [pc, #360]	@ (800720c <_dtoa_r+0x5bc>)
 80070a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070a6:	ed93 7b00 	vldr	d7, [r3]
 80070aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	ed8d 7b00 	vstr	d7, [sp]
 80070b2:	da03      	bge.n	80070bc <_dtoa_r+0x46c>
 80070b4:	9b07      	ldr	r3, [sp, #28]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f340 8101 	ble.w	80072be <_dtoa_r+0x66e>
 80070bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070c0:	4656      	mov	r6, sl
 80070c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 fbcf 	bl	800086c <__aeabi_ddiv>
 80070ce:	f7f9 fd53 	bl	8000b78 <__aeabi_d2iz>
 80070d2:	4680      	mov	r8, r0
 80070d4:	f7f9 fa36 	bl	8000544 <__aeabi_i2d>
 80070d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070dc:	f7f9 fa9c 	bl	8000618 <__aeabi_dmul>
 80070e0:	4602      	mov	r2, r0
 80070e2:	460b      	mov	r3, r1
 80070e4:	4620      	mov	r0, r4
 80070e6:	4629      	mov	r1, r5
 80070e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070ec:	f7f9 f8dc 	bl	80002a8 <__aeabi_dsub>
 80070f0:	f806 4b01 	strb.w	r4, [r6], #1
 80070f4:	9d07      	ldr	r5, [sp, #28]
 80070f6:	eba6 040a 	sub.w	r4, r6, sl
 80070fa:	42a5      	cmp	r5, r4
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	f040 8117 	bne.w	8007332 <_dtoa_r+0x6e2>
 8007104:	f7f9 f8d2 	bl	80002ac <__adddf3>
 8007108:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710c:	4604      	mov	r4, r0
 800710e:	460d      	mov	r5, r1
 8007110:	f7f9 fd12 	bl	8000b38 <__aeabi_dcmpgt>
 8007114:	2800      	cmp	r0, #0
 8007116:	f040 80f9 	bne.w	800730c <_dtoa_r+0x6bc>
 800711a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800711e:	4620      	mov	r0, r4
 8007120:	4629      	mov	r1, r5
 8007122:	f7f9 fce1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007126:	b118      	cbz	r0, 8007130 <_dtoa_r+0x4e0>
 8007128:	f018 0f01 	tst.w	r8, #1
 800712c:	f040 80ee 	bne.w	800730c <_dtoa_r+0x6bc>
 8007130:	4649      	mov	r1, r9
 8007132:	4658      	mov	r0, fp
 8007134:	f000 fc90 	bl	8007a58 <_Bfree>
 8007138:	2300      	movs	r3, #0
 800713a:	7033      	strb	r3, [r6, #0]
 800713c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800713e:	3701      	adds	r7, #1
 8007140:	601f      	str	r7, [r3, #0]
 8007142:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007144:	2b00      	cmp	r3, #0
 8007146:	f000 831d 	beq.w	8007784 <_dtoa_r+0xb34>
 800714a:	601e      	str	r6, [r3, #0]
 800714c:	e31a      	b.n	8007784 <_dtoa_r+0xb34>
 800714e:	07e2      	lsls	r2, r4, #31
 8007150:	d505      	bpl.n	800715e <_dtoa_r+0x50e>
 8007152:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007156:	f7f9 fa5f 	bl	8000618 <__aeabi_dmul>
 800715a:	3601      	adds	r6, #1
 800715c:	2301      	movs	r3, #1
 800715e:	1064      	asrs	r4, r4, #1
 8007160:	3508      	adds	r5, #8
 8007162:	e73f      	b.n	8006fe4 <_dtoa_r+0x394>
 8007164:	2602      	movs	r6, #2
 8007166:	e742      	b.n	8006fee <_dtoa_r+0x39e>
 8007168:	9c07      	ldr	r4, [sp, #28]
 800716a:	9704      	str	r7, [sp, #16]
 800716c:	e761      	b.n	8007032 <_dtoa_r+0x3e2>
 800716e:	4b27      	ldr	r3, [pc, #156]	@ (800720c <_dtoa_r+0x5bc>)
 8007170:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007172:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007176:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800717a:	4454      	add	r4, sl
 800717c:	2900      	cmp	r1, #0
 800717e:	d053      	beq.n	8007228 <_dtoa_r+0x5d8>
 8007180:	4928      	ldr	r1, [pc, #160]	@ (8007224 <_dtoa_r+0x5d4>)
 8007182:	2000      	movs	r0, #0
 8007184:	f7f9 fb72 	bl	800086c <__aeabi_ddiv>
 8007188:	4633      	mov	r3, r6
 800718a:	462a      	mov	r2, r5
 800718c:	f7f9 f88c 	bl	80002a8 <__aeabi_dsub>
 8007190:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007194:	4656      	mov	r6, sl
 8007196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800719a:	f7f9 fced 	bl	8000b78 <__aeabi_d2iz>
 800719e:	4605      	mov	r5, r0
 80071a0:	f7f9 f9d0 	bl	8000544 <__aeabi_i2d>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ac:	f7f9 f87c 	bl	80002a8 <__aeabi_dsub>
 80071b0:	3530      	adds	r5, #48	@ 0x30
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071ba:	f806 5b01 	strb.w	r5, [r6], #1
 80071be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071c2:	f7f9 fc9b 	bl	8000afc <__aeabi_dcmplt>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	d171      	bne.n	80072ae <_dtoa_r+0x65e>
 80071ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ce:	4911      	ldr	r1, [pc, #68]	@ (8007214 <_dtoa_r+0x5c4>)
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7f9 f869 	bl	80002a8 <__aeabi_dsub>
 80071d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071da:	f7f9 fc8f 	bl	8000afc <__aeabi_dcmplt>
 80071de:	2800      	cmp	r0, #0
 80071e0:	f040 8095 	bne.w	800730e <_dtoa_r+0x6be>
 80071e4:	42a6      	cmp	r6, r4
 80071e6:	f43f af50 	beq.w	800708a <_dtoa_r+0x43a>
 80071ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007218 <_dtoa_r+0x5c8>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	f7f9 fa11 	bl	8000618 <__aeabi_dmul>
 80071f6:	4b08      	ldr	r3, [pc, #32]	@ (8007218 <_dtoa_r+0x5c8>)
 80071f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071fc:	2200      	movs	r2, #0
 80071fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007202:	f7f9 fa09 	bl	8000618 <__aeabi_dmul>
 8007206:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800720a:	e7c4      	b.n	8007196 <_dtoa_r+0x546>
 800720c:	0800a830 	.word	0x0800a830
 8007210:	0800a808 	.word	0x0800a808
 8007214:	3ff00000 	.word	0x3ff00000
 8007218:	40240000 	.word	0x40240000
 800721c:	401c0000 	.word	0x401c0000
 8007220:	40140000 	.word	0x40140000
 8007224:	3fe00000 	.word	0x3fe00000
 8007228:	4631      	mov	r1, r6
 800722a:	4628      	mov	r0, r5
 800722c:	f7f9 f9f4 	bl	8000618 <__aeabi_dmul>
 8007230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007234:	9415      	str	r4, [sp, #84]	@ 0x54
 8007236:	4656      	mov	r6, sl
 8007238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723c:	f7f9 fc9c 	bl	8000b78 <__aeabi_d2iz>
 8007240:	4605      	mov	r5, r0
 8007242:	f7f9 f97f 	bl	8000544 <__aeabi_i2d>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800724e:	f7f9 f82b 	bl	80002a8 <__aeabi_dsub>
 8007252:	3530      	adds	r5, #48	@ 0x30
 8007254:	f806 5b01 	strb.w	r5, [r6], #1
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	42a6      	cmp	r6, r4
 800725e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	d124      	bne.n	80072b2 <_dtoa_r+0x662>
 8007268:	4bac      	ldr	r3, [pc, #688]	@ (800751c <_dtoa_r+0x8cc>)
 800726a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800726e:	f7f9 f81d 	bl	80002ac <__adddf3>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800727a:	f7f9 fc5d 	bl	8000b38 <__aeabi_dcmpgt>
 800727e:	2800      	cmp	r0, #0
 8007280:	d145      	bne.n	800730e <_dtoa_r+0x6be>
 8007282:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007286:	49a5      	ldr	r1, [pc, #660]	@ (800751c <_dtoa_r+0x8cc>)
 8007288:	2000      	movs	r0, #0
 800728a:	f7f9 f80d 	bl	80002a8 <__aeabi_dsub>
 800728e:	4602      	mov	r2, r0
 8007290:	460b      	mov	r3, r1
 8007292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007296:	f7f9 fc31 	bl	8000afc <__aeabi_dcmplt>
 800729a:	2800      	cmp	r0, #0
 800729c:	f43f aef5 	beq.w	800708a <_dtoa_r+0x43a>
 80072a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80072a2:	1e73      	subs	r3, r6, #1
 80072a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80072a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072aa:	2b30      	cmp	r3, #48	@ 0x30
 80072ac:	d0f8      	beq.n	80072a0 <_dtoa_r+0x650>
 80072ae:	9f04      	ldr	r7, [sp, #16]
 80072b0:	e73e      	b.n	8007130 <_dtoa_r+0x4e0>
 80072b2:	4b9b      	ldr	r3, [pc, #620]	@ (8007520 <_dtoa_r+0x8d0>)
 80072b4:	f7f9 f9b0 	bl	8000618 <__aeabi_dmul>
 80072b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072bc:	e7bc      	b.n	8007238 <_dtoa_r+0x5e8>
 80072be:	d10c      	bne.n	80072da <_dtoa_r+0x68a>
 80072c0:	4b98      	ldr	r3, [pc, #608]	@ (8007524 <_dtoa_r+0x8d4>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072c8:	f7f9 f9a6 	bl	8000618 <__aeabi_dmul>
 80072cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072d0:	f7f9 fc28 	bl	8000b24 <__aeabi_dcmpge>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	f000 8157 	beq.w	8007588 <_dtoa_r+0x938>
 80072da:	2400      	movs	r4, #0
 80072dc:	4625      	mov	r5, r4
 80072de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072e0:	43db      	mvns	r3, r3
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	4656      	mov	r6, sl
 80072e6:	2700      	movs	r7, #0
 80072e8:	4621      	mov	r1, r4
 80072ea:	4658      	mov	r0, fp
 80072ec:	f000 fbb4 	bl	8007a58 <_Bfree>
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	d0dc      	beq.n	80072ae <_dtoa_r+0x65e>
 80072f4:	b12f      	cbz	r7, 8007302 <_dtoa_r+0x6b2>
 80072f6:	42af      	cmp	r7, r5
 80072f8:	d003      	beq.n	8007302 <_dtoa_r+0x6b2>
 80072fa:	4639      	mov	r1, r7
 80072fc:	4658      	mov	r0, fp
 80072fe:	f000 fbab 	bl	8007a58 <_Bfree>
 8007302:	4629      	mov	r1, r5
 8007304:	4658      	mov	r0, fp
 8007306:	f000 fba7 	bl	8007a58 <_Bfree>
 800730a:	e7d0      	b.n	80072ae <_dtoa_r+0x65e>
 800730c:	9704      	str	r7, [sp, #16]
 800730e:	4633      	mov	r3, r6
 8007310:	461e      	mov	r6, r3
 8007312:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007316:	2a39      	cmp	r2, #57	@ 0x39
 8007318:	d107      	bne.n	800732a <_dtoa_r+0x6da>
 800731a:	459a      	cmp	sl, r3
 800731c:	d1f8      	bne.n	8007310 <_dtoa_r+0x6c0>
 800731e:	9a04      	ldr	r2, [sp, #16]
 8007320:	3201      	adds	r2, #1
 8007322:	9204      	str	r2, [sp, #16]
 8007324:	2230      	movs	r2, #48	@ 0x30
 8007326:	f88a 2000 	strb.w	r2, [sl]
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	3201      	adds	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e7bd      	b.n	80072ae <_dtoa_r+0x65e>
 8007332:	4b7b      	ldr	r3, [pc, #492]	@ (8007520 <_dtoa_r+0x8d0>)
 8007334:	2200      	movs	r2, #0
 8007336:	f7f9 f96f 	bl	8000618 <__aeabi_dmul>
 800733a:	2200      	movs	r2, #0
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	460d      	mov	r5, r1
 8007342:	f7f9 fbd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007346:	2800      	cmp	r0, #0
 8007348:	f43f aebb 	beq.w	80070c2 <_dtoa_r+0x472>
 800734c:	e6f0      	b.n	8007130 <_dtoa_r+0x4e0>
 800734e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007350:	2a00      	cmp	r2, #0
 8007352:	f000 80db 	beq.w	800750c <_dtoa_r+0x8bc>
 8007356:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007358:	2a01      	cmp	r2, #1
 800735a:	f300 80bf 	bgt.w	80074dc <_dtoa_r+0x88c>
 800735e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007360:	2a00      	cmp	r2, #0
 8007362:	f000 80b7 	beq.w	80074d4 <_dtoa_r+0x884>
 8007366:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800736a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800736c:	4646      	mov	r6, r8
 800736e:	9a08      	ldr	r2, [sp, #32]
 8007370:	2101      	movs	r1, #1
 8007372:	441a      	add	r2, r3
 8007374:	4658      	mov	r0, fp
 8007376:	4498      	add	r8, r3
 8007378:	9208      	str	r2, [sp, #32]
 800737a:	f000 fc21 	bl	8007bc0 <__i2b>
 800737e:	4605      	mov	r5, r0
 8007380:	b15e      	cbz	r6, 800739a <_dtoa_r+0x74a>
 8007382:	9b08      	ldr	r3, [sp, #32]
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd08      	ble.n	800739a <_dtoa_r+0x74a>
 8007388:	42b3      	cmp	r3, r6
 800738a:	9a08      	ldr	r2, [sp, #32]
 800738c:	bfa8      	it	ge
 800738e:	4633      	movge	r3, r6
 8007390:	eba8 0803 	sub.w	r8, r8, r3
 8007394:	1af6      	subs	r6, r6, r3
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	9308      	str	r3, [sp, #32]
 800739a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800739c:	b1f3      	cbz	r3, 80073dc <_dtoa_r+0x78c>
 800739e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f000 80b7 	beq.w	8007514 <_dtoa_r+0x8c4>
 80073a6:	b18c      	cbz	r4, 80073cc <_dtoa_r+0x77c>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4622      	mov	r2, r4
 80073ac:	4658      	mov	r0, fp
 80073ae:	f000 fcc7 	bl	8007d40 <__pow5mult>
 80073b2:	464a      	mov	r2, r9
 80073b4:	4601      	mov	r1, r0
 80073b6:	4605      	mov	r5, r0
 80073b8:	4658      	mov	r0, fp
 80073ba:	f000 fc17 	bl	8007bec <__multiply>
 80073be:	4649      	mov	r1, r9
 80073c0:	9004      	str	r0, [sp, #16]
 80073c2:	4658      	mov	r0, fp
 80073c4:	f000 fb48 	bl	8007a58 <_Bfree>
 80073c8:	9b04      	ldr	r3, [sp, #16]
 80073ca:	4699      	mov	r9, r3
 80073cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073ce:	1b1a      	subs	r2, r3, r4
 80073d0:	d004      	beq.n	80073dc <_dtoa_r+0x78c>
 80073d2:	4649      	mov	r1, r9
 80073d4:	4658      	mov	r0, fp
 80073d6:	f000 fcb3 	bl	8007d40 <__pow5mult>
 80073da:	4681      	mov	r9, r0
 80073dc:	2101      	movs	r1, #1
 80073de:	4658      	mov	r0, fp
 80073e0:	f000 fbee 	bl	8007bc0 <__i2b>
 80073e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073e6:	4604      	mov	r4, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 81cf 	beq.w	800778c <_dtoa_r+0xb3c>
 80073ee:	461a      	mov	r2, r3
 80073f0:	4601      	mov	r1, r0
 80073f2:	4658      	mov	r0, fp
 80073f4:	f000 fca4 	bl	8007d40 <__pow5mult>
 80073f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	4604      	mov	r4, r0
 80073fe:	f300 8095 	bgt.w	800752c <_dtoa_r+0x8dc>
 8007402:	9b02      	ldr	r3, [sp, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f040 8087 	bne.w	8007518 <_dtoa_r+0x8c8>
 800740a:	9b03      	ldr	r3, [sp, #12]
 800740c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 8089 	bne.w	8007528 <_dtoa_r+0x8d8>
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800741c:	0d1b      	lsrs	r3, r3, #20
 800741e:	051b      	lsls	r3, r3, #20
 8007420:	b12b      	cbz	r3, 800742e <_dtoa_r+0x7de>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	3301      	adds	r3, #1
 8007426:	9308      	str	r3, [sp, #32]
 8007428:	f108 0801 	add.w	r8, r8, #1
 800742c:	2301      	movs	r3, #1
 800742e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 81b0 	beq.w	8007798 <_dtoa_r+0xb48>
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800743e:	6918      	ldr	r0, [r3, #16]
 8007440:	f000 fb72 	bl	8007b28 <__hi0bits>
 8007444:	f1c0 0020 	rsb	r0, r0, #32
 8007448:	9b08      	ldr	r3, [sp, #32]
 800744a:	4418      	add	r0, r3
 800744c:	f010 001f 	ands.w	r0, r0, #31
 8007450:	d077      	beq.n	8007542 <_dtoa_r+0x8f2>
 8007452:	f1c0 0320 	rsb	r3, r0, #32
 8007456:	2b04      	cmp	r3, #4
 8007458:	dd6b      	ble.n	8007532 <_dtoa_r+0x8e2>
 800745a:	9b08      	ldr	r3, [sp, #32]
 800745c:	f1c0 001c 	rsb	r0, r0, #28
 8007460:	4403      	add	r3, r0
 8007462:	4480      	add	r8, r0
 8007464:	4406      	add	r6, r0
 8007466:	9308      	str	r3, [sp, #32]
 8007468:	f1b8 0f00 	cmp.w	r8, #0
 800746c:	dd05      	ble.n	800747a <_dtoa_r+0x82a>
 800746e:	4649      	mov	r1, r9
 8007470:	4642      	mov	r2, r8
 8007472:	4658      	mov	r0, fp
 8007474:	f000 fcbe 	bl	8007df4 <__lshift>
 8007478:	4681      	mov	r9, r0
 800747a:	9b08      	ldr	r3, [sp, #32]
 800747c:	2b00      	cmp	r3, #0
 800747e:	dd05      	ble.n	800748c <_dtoa_r+0x83c>
 8007480:	4621      	mov	r1, r4
 8007482:	461a      	mov	r2, r3
 8007484:	4658      	mov	r0, fp
 8007486:	f000 fcb5 	bl	8007df4 <__lshift>
 800748a:	4604      	mov	r4, r0
 800748c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800748e:	2b00      	cmp	r3, #0
 8007490:	d059      	beq.n	8007546 <_dtoa_r+0x8f6>
 8007492:	4621      	mov	r1, r4
 8007494:	4648      	mov	r0, r9
 8007496:	f000 fd19 	bl	8007ecc <__mcmp>
 800749a:	2800      	cmp	r0, #0
 800749c:	da53      	bge.n	8007546 <_dtoa_r+0x8f6>
 800749e:	1e7b      	subs	r3, r7, #1
 80074a0:	9304      	str	r3, [sp, #16]
 80074a2:	4649      	mov	r1, r9
 80074a4:	2300      	movs	r3, #0
 80074a6:	220a      	movs	r2, #10
 80074a8:	4658      	mov	r0, fp
 80074aa:	f000 faf7 	bl	8007a9c <__multadd>
 80074ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074b0:	4681      	mov	r9, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 8172 	beq.w	800779c <_dtoa_r+0xb4c>
 80074b8:	2300      	movs	r3, #0
 80074ba:	4629      	mov	r1, r5
 80074bc:	220a      	movs	r2, #10
 80074be:	4658      	mov	r0, fp
 80074c0:	f000 faec 	bl	8007a9c <__multadd>
 80074c4:	9b00      	ldr	r3, [sp, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	4605      	mov	r5, r0
 80074ca:	dc67      	bgt.n	800759c <_dtoa_r+0x94c>
 80074cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	dc41      	bgt.n	8007556 <_dtoa_r+0x906>
 80074d2:	e063      	b.n	800759c <_dtoa_r+0x94c>
 80074d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074da:	e746      	b.n	800736a <_dtoa_r+0x71a>
 80074dc:	9b07      	ldr	r3, [sp, #28]
 80074de:	1e5c      	subs	r4, r3, #1
 80074e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074e2:	42a3      	cmp	r3, r4
 80074e4:	bfbf      	itttt	lt
 80074e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80074ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074ec:	1ae3      	sublt	r3, r4, r3
 80074ee:	bfb4      	ite	lt
 80074f0:	18d2      	addlt	r2, r2, r3
 80074f2:	1b1c      	subge	r4, r3, r4
 80074f4:	9b07      	ldr	r3, [sp, #28]
 80074f6:	bfbc      	itt	lt
 80074f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074fa:	2400      	movlt	r4, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bfb5      	itete	lt
 8007500:	eba8 0603 	sublt.w	r6, r8, r3
 8007504:	9b07      	ldrge	r3, [sp, #28]
 8007506:	2300      	movlt	r3, #0
 8007508:	4646      	movge	r6, r8
 800750a:	e730      	b.n	800736e <_dtoa_r+0x71e>
 800750c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800750e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007510:	4646      	mov	r6, r8
 8007512:	e735      	b.n	8007380 <_dtoa_r+0x730>
 8007514:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007516:	e75c      	b.n	80073d2 <_dtoa_r+0x782>
 8007518:	2300      	movs	r3, #0
 800751a:	e788      	b.n	800742e <_dtoa_r+0x7de>
 800751c:	3fe00000 	.word	0x3fe00000
 8007520:	40240000 	.word	0x40240000
 8007524:	40140000 	.word	0x40140000
 8007528:	9b02      	ldr	r3, [sp, #8]
 800752a:	e780      	b.n	800742e <_dtoa_r+0x7de>
 800752c:	2300      	movs	r3, #0
 800752e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007530:	e782      	b.n	8007438 <_dtoa_r+0x7e8>
 8007532:	d099      	beq.n	8007468 <_dtoa_r+0x818>
 8007534:	9a08      	ldr	r2, [sp, #32]
 8007536:	331c      	adds	r3, #28
 8007538:	441a      	add	r2, r3
 800753a:	4498      	add	r8, r3
 800753c:	441e      	add	r6, r3
 800753e:	9208      	str	r2, [sp, #32]
 8007540:	e792      	b.n	8007468 <_dtoa_r+0x818>
 8007542:	4603      	mov	r3, r0
 8007544:	e7f6      	b.n	8007534 <_dtoa_r+0x8e4>
 8007546:	9b07      	ldr	r3, [sp, #28]
 8007548:	9704      	str	r7, [sp, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	dc20      	bgt.n	8007590 <_dtoa_r+0x940>
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007552:	2b02      	cmp	r3, #2
 8007554:	dd1e      	ble.n	8007594 <_dtoa_r+0x944>
 8007556:	9b00      	ldr	r3, [sp, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f aec0 	bne.w	80072de <_dtoa_r+0x68e>
 800755e:	4621      	mov	r1, r4
 8007560:	2205      	movs	r2, #5
 8007562:	4658      	mov	r0, fp
 8007564:	f000 fa9a 	bl	8007a9c <__multadd>
 8007568:	4601      	mov	r1, r0
 800756a:	4604      	mov	r4, r0
 800756c:	4648      	mov	r0, r9
 800756e:	f000 fcad 	bl	8007ecc <__mcmp>
 8007572:	2800      	cmp	r0, #0
 8007574:	f77f aeb3 	ble.w	80072de <_dtoa_r+0x68e>
 8007578:	4656      	mov	r6, sl
 800757a:	2331      	movs	r3, #49	@ 0x31
 800757c:	f806 3b01 	strb.w	r3, [r6], #1
 8007580:	9b04      	ldr	r3, [sp, #16]
 8007582:	3301      	adds	r3, #1
 8007584:	9304      	str	r3, [sp, #16]
 8007586:	e6ae      	b.n	80072e6 <_dtoa_r+0x696>
 8007588:	9c07      	ldr	r4, [sp, #28]
 800758a:	9704      	str	r7, [sp, #16]
 800758c:	4625      	mov	r5, r4
 800758e:	e7f3      	b.n	8007578 <_dtoa_r+0x928>
 8007590:	9b07      	ldr	r3, [sp, #28]
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 8104 	beq.w	80077a4 <_dtoa_r+0xb54>
 800759c:	2e00      	cmp	r6, #0
 800759e:	dd05      	ble.n	80075ac <_dtoa_r+0x95c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4632      	mov	r2, r6
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fc25 	bl	8007df4 <__lshift>
 80075aa:	4605      	mov	r5, r0
 80075ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d05a      	beq.n	8007668 <_dtoa_r+0xa18>
 80075b2:	6869      	ldr	r1, [r5, #4]
 80075b4:	4658      	mov	r0, fp
 80075b6:	f000 fa0f 	bl	80079d8 <_Balloc>
 80075ba:	4606      	mov	r6, r0
 80075bc:	b928      	cbnz	r0, 80075ca <_dtoa_r+0x97a>
 80075be:	4b84      	ldr	r3, [pc, #528]	@ (80077d0 <_dtoa_r+0xb80>)
 80075c0:	4602      	mov	r2, r0
 80075c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075c6:	f7ff bb5a 	b.w	8006c7e <_dtoa_r+0x2e>
 80075ca:	692a      	ldr	r2, [r5, #16]
 80075cc:	3202      	adds	r2, #2
 80075ce:	0092      	lsls	r2, r2, #2
 80075d0:	f105 010c 	add.w	r1, r5, #12
 80075d4:	300c      	adds	r0, #12
 80075d6:	f000 ffaf 	bl	8008538 <memcpy>
 80075da:	2201      	movs	r2, #1
 80075dc:	4631      	mov	r1, r6
 80075de:	4658      	mov	r0, fp
 80075e0:	f000 fc08 	bl	8007df4 <__lshift>
 80075e4:	f10a 0301 	add.w	r3, sl, #1
 80075e8:	9307      	str	r3, [sp, #28]
 80075ea:	9b00      	ldr	r3, [sp, #0]
 80075ec:	4453      	add	r3, sl
 80075ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f0:	9b02      	ldr	r3, [sp, #8]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	462f      	mov	r7, r5
 80075f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075fa:	4605      	mov	r5, r0
 80075fc:	9b07      	ldr	r3, [sp, #28]
 80075fe:	4621      	mov	r1, r4
 8007600:	3b01      	subs	r3, #1
 8007602:	4648      	mov	r0, r9
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	f7ff fa98 	bl	8006b3a <quorem>
 800760a:	4639      	mov	r1, r7
 800760c:	9002      	str	r0, [sp, #8]
 800760e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007612:	4648      	mov	r0, r9
 8007614:	f000 fc5a 	bl	8007ecc <__mcmp>
 8007618:	462a      	mov	r2, r5
 800761a:	9008      	str	r0, [sp, #32]
 800761c:	4621      	mov	r1, r4
 800761e:	4658      	mov	r0, fp
 8007620:	f000 fc70 	bl	8007f04 <__mdiff>
 8007624:	68c2      	ldr	r2, [r0, #12]
 8007626:	4606      	mov	r6, r0
 8007628:	bb02      	cbnz	r2, 800766c <_dtoa_r+0xa1c>
 800762a:	4601      	mov	r1, r0
 800762c:	4648      	mov	r0, r9
 800762e:	f000 fc4d 	bl	8007ecc <__mcmp>
 8007632:	4602      	mov	r2, r0
 8007634:	4631      	mov	r1, r6
 8007636:	4658      	mov	r0, fp
 8007638:	920e      	str	r2, [sp, #56]	@ 0x38
 800763a:	f000 fa0d 	bl	8007a58 <_Bfree>
 800763e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007640:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007642:	9e07      	ldr	r6, [sp, #28]
 8007644:	ea43 0102 	orr.w	r1, r3, r2
 8007648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764a:	4319      	orrs	r1, r3
 800764c:	d110      	bne.n	8007670 <_dtoa_r+0xa20>
 800764e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007652:	d029      	beq.n	80076a8 <_dtoa_r+0xa58>
 8007654:	9b08      	ldr	r3, [sp, #32]
 8007656:	2b00      	cmp	r3, #0
 8007658:	dd02      	ble.n	8007660 <_dtoa_r+0xa10>
 800765a:	9b02      	ldr	r3, [sp, #8]
 800765c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007660:	9b00      	ldr	r3, [sp, #0]
 8007662:	f883 8000 	strb.w	r8, [r3]
 8007666:	e63f      	b.n	80072e8 <_dtoa_r+0x698>
 8007668:	4628      	mov	r0, r5
 800766a:	e7bb      	b.n	80075e4 <_dtoa_r+0x994>
 800766c:	2201      	movs	r2, #1
 800766e:	e7e1      	b.n	8007634 <_dtoa_r+0x9e4>
 8007670:	9b08      	ldr	r3, [sp, #32]
 8007672:	2b00      	cmp	r3, #0
 8007674:	db04      	blt.n	8007680 <_dtoa_r+0xa30>
 8007676:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007678:	430b      	orrs	r3, r1
 800767a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800767c:	430b      	orrs	r3, r1
 800767e:	d120      	bne.n	80076c2 <_dtoa_r+0xa72>
 8007680:	2a00      	cmp	r2, #0
 8007682:	dded      	ble.n	8007660 <_dtoa_r+0xa10>
 8007684:	4649      	mov	r1, r9
 8007686:	2201      	movs	r2, #1
 8007688:	4658      	mov	r0, fp
 800768a:	f000 fbb3 	bl	8007df4 <__lshift>
 800768e:	4621      	mov	r1, r4
 8007690:	4681      	mov	r9, r0
 8007692:	f000 fc1b 	bl	8007ecc <__mcmp>
 8007696:	2800      	cmp	r0, #0
 8007698:	dc03      	bgt.n	80076a2 <_dtoa_r+0xa52>
 800769a:	d1e1      	bne.n	8007660 <_dtoa_r+0xa10>
 800769c:	f018 0f01 	tst.w	r8, #1
 80076a0:	d0de      	beq.n	8007660 <_dtoa_r+0xa10>
 80076a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076a6:	d1d8      	bne.n	800765a <_dtoa_r+0xa0a>
 80076a8:	9a00      	ldr	r2, [sp, #0]
 80076aa:	2339      	movs	r3, #57	@ 0x39
 80076ac:	7013      	strb	r3, [r2, #0]
 80076ae:	4633      	mov	r3, r6
 80076b0:	461e      	mov	r6, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076b8:	2a39      	cmp	r2, #57	@ 0x39
 80076ba:	d052      	beq.n	8007762 <_dtoa_r+0xb12>
 80076bc:	3201      	adds	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	e612      	b.n	80072e8 <_dtoa_r+0x698>
 80076c2:	2a00      	cmp	r2, #0
 80076c4:	dd07      	ble.n	80076d6 <_dtoa_r+0xa86>
 80076c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ca:	d0ed      	beq.n	80076a8 <_dtoa_r+0xa58>
 80076cc:	9a00      	ldr	r2, [sp, #0]
 80076ce:	f108 0301 	add.w	r3, r8, #1
 80076d2:	7013      	strb	r3, [r2, #0]
 80076d4:	e608      	b.n	80072e8 <_dtoa_r+0x698>
 80076d6:	9b07      	ldr	r3, [sp, #28]
 80076d8:	9a07      	ldr	r2, [sp, #28]
 80076da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80076de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d028      	beq.n	8007736 <_dtoa_r+0xae6>
 80076e4:	4649      	mov	r1, r9
 80076e6:	2300      	movs	r3, #0
 80076e8:	220a      	movs	r2, #10
 80076ea:	4658      	mov	r0, fp
 80076ec:	f000 f9d6 	bl	8007a9c <__multadd>
 80076f0:	42af      	cmp	r7, r5
 80076f2:	4681      	mov	r9, r0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	f04f 020a 	mov.w	r2, #10
 80076fc:	4639      	mov	r1, r7
 80076fe:	4658      	mov	r0, fp
 8007700:	d107      	bne.n	8007712 <_dtoa_r+0xac2>
 8007702:	f000 f9cb 	bl	8007a9c <__multadd>
 8007706:	4607      	mov	r7, r0
 8007708:	4605      	mov	r5, r0
 800770a:	9b07      	ldr	r3, [sp, #28]
 800770c:	3301      	adds	r3, #1
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	e774      	b.n	80075fc <_dtoa_r+0x9ac>
 8007712:	f000 f9c3 	bl	8007a9c <__multadd>
 8007716:	4629      	mov	r1, r5
 8007718:	4607      	mov	r7, r0
 800771a:	2300      	movs	r3, #0
 800771c:	220a      	movs	r2, #10
 800771e:	4658      	mov	r0, fp
 8007720:	f000 f9bc 	bl	8007a9c <__multadd>
 8007724:	4605      	mov	r5, r0
 8007726:	e7f0      	b.n	800770a <_dtoa_r+0xaba>
 8007728:	9b00      	ldr	r3, [sp, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	bfcc      	ite	gt
 800772e:	461e      	movgt	r6, r3
 8007730:	2601      	movle	r6, #1
 8007732:	4456      	add	r6, sl
 8007734:	2700      	movs	r7, #0
 8007736:	4649      	mov	r1, r9
 8007738:	2201      	movs	r2, #1
 800773a:	4658      	mov	r0, fp
 800773c:	f000 fb5a 	bl	8007df4 <__lshift>
 8007740:	4621      	mov	r1, r4
 8007742:	4681      	mov	r9, r0
 8007744:	f000 fbc2 	bl	8007ecc <__mcmp>
 8007748:	2800      	cmp	r0, #0
 800774a:	dcb0      	bgt.n	80076ae <_dtoa_r+0xa5e>
 800774c:	d102      	bne.n	8007754 <_dtoa_r+0xb04>
 800774e:	f018 0f01 	tst.w	r8, #1
 8007752:	d1ac      	bne.n	80076ae <_dtoa_r+0xa5e>
 8007754:	4633      	mov	r3, r6
 8007756:	461e      	mov	r6, r3
 8007758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800775c:	2a30      	cmp	r2, #48	@ 0x30
 800775e:	d0fa      	beq.n	8007756 <_dtoa_r+0xb06>
 8007760:	e5c2      	b.n	80072e8 <_dtoa_r+0x698>
 8007762:	459a      	cmp	sl, r3
 8007764:	d1a4      	bne.n	80076b0 <_dtoa_r+0xa60>
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	3301      	adds	r3, #1
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	2331      	movs	r3, #49	@ 0x31
 800776e:	f88a 3000 	strb.w	r3, [sl]
 8007772:	e5b9      	b.n	80072e8 <_dtoa_r+0x698>
 8007774:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007776:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80077d4 <_dtoa_r+0xb84>
 800777a:	b11b      	cbz	r3, 8007784 <_dtoa_r+0xb34>
 800777c:	f10a 0308 	add.w	r3, sl, #8
 8007780:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	4650      	mov	r0, sl
 8007786:	b019      	add	sp, #100	@ 0x64
 8007788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778e:	2b01      	cmp	r3, #1
 8007790:	f77f ae37 	ble.w	8007402 <_dtoa_r+0x7b2>
 8007794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007796:	930a      	str	r3, [sp, #40]	@ 0x28
 8007798:	2001      	movs	r0, #1
 800779a:	e655      	b.n	8007448 <_dtoa_r+0x7f8>
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f77f aed6 	ble.w	8007550 <_dtoa_r+0x900>
 80077a4:	4656      	mov	r6, sl
 80077a6:	4621      	mov	r1, r4
 80077a8:	4648      	mov	r0, r9
 80077aa:	f7ff f9c6 	bl	8006b3a <quorem>
 80077ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077b2:	f806 8b01 	strb.w	r8, [r6], #1
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	eba6 020a 	sub.w	r2, r6, sl
 80077bc:	4293      	cmp	r3, r2
 80077be:	ddb3      	ble.n	8007728 <_dtoa_r+0xad8>
 80077c0:	4649      	mov	r1, r9
 80077c2:	2300      	movs	r3, #0
 80077c4:	220a      	movs	r2, #10
 80077c6:	4658      	mov	r0, fp
 80077c8:	f000 f968 	bl	8007a9c <__multadd>
 80077cc:	4681      	mov	r9, r0
 80077ce:	e7ea      	b.n	80077a6 <_dtoa_r+0xb56>
 80077d0:	0800a78c 	.word	0x0800a78c
 80077d4:	0800a710 	.word	0x0800a710

080077d8 <_free_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4605      	mov	r5, r0
 80077dc:	2900      	cmp	r1, #0
 80077de:	d041      	beq.n	8007864 <_free_r+0x8c>
 80077e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077e4:	1f0c      	subs	r4, r1, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfb8      	it	lt
 80077ea:	18e4      	addlt	r4, r4, r3
 80077ec:	f000 f8e8 	bl	80079c0 <__malloc_lock>
 80077f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007868 <_free_r+0x90>)
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	b933      	cbnz	r3, 8007804 <_free_r+0x2c>
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	6014      	str	r4, [r2, #0]
 80077fa:	4628      	mov	r0, r5
 80077fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007800:	f000 b8e4 	b.w	80079cc <__malloc_unlock>
 8007804:	42a3      	cmp	r3, r4
 8007806:	d908      	bls.n	800781a <_free_r+0x42>
 8007808:	6820      	ldr	r0, [r4, #0]
 800780a:	1821      	adds	r1, r4, r0
 800780c:	428b      	cmp	r3, r1
 800780e:	bf01      	itttt	eq
 8007810:	6819      	ldreq	r1, [r3, #0]
 8007812:	685b      	ldreq	r3, [r3, #4]
 8007814:	1809      	addeq	r1, r1, r0
 8007816:	6021      	streq	r1, [r4, #0]
 8007818:	e7ed      	b.n	80077f6 <_free_r+0x1e>
 800781a:	461a      	mov	r2, r3
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b10b      	cbz	r3, 8007824 <_free_r+0x4c>
 8007820:	42a3      	cmp	r3, r4
 8007822:	d9fa      	bls.n	800781a <_free_r+0x42>
 8007824:	6811      	ldr	r1, [r2, #0]
 8007826:	1850      	adds	r0, r2, r1
 8007828:	42a0      	cmp	r0, r4
 800782a:	d10b      	bne.n	8007844 <_free_r+0x6c>
 800782c:	6820      	ldr	r0, [r4, #0]
 800782e:	4401      	add	r1, r0
 8007830:	1850      	adds	r0, r2, r1
 8007832:	4283      	cmp	r3, r0
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	d1e0      	bne.n	80077fa <_free_r+0x22>
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	6053      	str	r3, [r2, #4]
 800783e:	4408      	add	r0, r1
 8007840:	6010      	str	r0, [r2, #0]
 8007842:	e7da      	b.n	80077fa <_free_r+0x22>
 8007844:	d902      	bls.n	800784c <_free_r+0x74>
 8007846:	230c      	movs	r3, #12
 8007848:	602b      	str	r3, [r5, #0]
 800784a:	e7d6      	b.n	80077fa <_free_r+0x22>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	1821      	adds	r1, r4, r0
 8007850:	428b      	cmp	r3, r1
 8007852:	bf04      	itt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	6063      	str	r3, [r4, #4]
 800785a:	bf04      	itt	eq
 800785c:	1809      	addeq	r1, r1, r0
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	6054      	str	r4, [r2, #4]
 8007862:	e7ca      	b.n	80077fa <_free_r+0x22>
 8007864:	bd38      	pop	{r3, r4, r5, pc}
 8007866:	bf00      	nop
 8007868:	20000614 	.word	0x20000614

0800786c <malloc>:
 800786c:	4b02      	ldr	r3, [pc, #8]	@ (8007878 <malloc+0xc>)
 800786e:	4601      	mov	r1, r0
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f000 b825 	b.w	80078c0 <_malloc_r>
 8007876:	bf00      	nop
 8007878:	20000094 	.word	0x20000094

0800787c <sbrk_aligned>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	4e0f      	ldr	r6, [pc, #60]	@ (80078bc <sbrk_aligned+0x40>)
 8007880:	460c      	mov	r4, r1
 8007882:	6831      	ldr	r1, [r6, #0]
 8007884:	4605      	mov	r5, r0
 8007886:	b911      	cbnz	r1, 800788e <sbrk_aligned+0x12>
 8007888:	f000 fe46 	bl	8008518 <_sbrk_r>
 800788c:	6030      	str	r0, [r6, #0]
 800788e:	4621      	mov	r1, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f000 fe41 	bl	8008518 <_sbrk_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d103      	bne.n	80078a2 <sbrk_aligned+0x26>
 800789a:	f04f 34ff 	mov.w	r4, #4294967295
 800789e:	4620      	mov	r0, r4
 80078a0:	bd70      	pop	{r4, r5, r6, pc}
 80078a2:	1cc4      	adds	r4, r0, #3
 80078a4:	f024 0403 	bic.w	r4, r4, #3
 80078a8:	42a0      	cmp	r0, r4
 80078aa:	d0f8      	beq.n	800789e <sbrk_aligned+0x22>
 80078ac:	1a21      	subs	r1, r4, r0
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 fe32 	bl	8008518 <_sbrk_r>
 80078b4:	3001      	adds	r0, #1
 80078b6:	d1f2      	bne.n	800789e <sbrk_aligned+0x22>
 80078b8:	e7ef      	b.n	800789a <sbrk_aligned+0x1e>
 80078ba:	bf00      	nop
 80078bc:	20000610 	.word	0x20000610

080078c0 <_malloc_r>:
 80078c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c4:	1ccd      	adds	r5, r1, #3
 80078c6:	f025 0503 	bic.w	r5, r5, #3
 80078ca:	3508      	adds	r5, #8
 80078cc:	2d0c      	cmp	r5, #12
 80078ce:	bf38      	it	cc
 80078d0:	250c      	movcc	r5, #12
 80078d2:	2d00      	cmp	r5, #0
 80078d4:	4606      	mov	r6, r0
 80078d6:	db01      	blt.n	80078dc <_malloc_r+0x1c>
 80078d8:	42a9      	cmp	r1, r5
 80078da:	d904      	bls.n	80078e6 <_malloc_r+0x26>
 80078dc:	230c      	movs	r3, #12
 80078de:	6033      	str	r3, [r6, #0]
 80078e0:	2000      	movs	r0, #0
 80078e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079bc <_malloc_r+0xfc>
 80078ea:	f000 f869 	bl	80079c0 <__malloc_lock>
 80078ee:	f8d8 3000 	ldr.w	r3, [r8]
 80078f2:	461c      	mov	r4, r3
 80078f4:	bb44      	cbnz	r4, 8007948 <_malloc_r+0x88>
 80078f6:	4629      	mov	r1, r5
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7ff ffbf 	bl	800787c <sbrk_aligned>
 80078fe:	1c43      	adds	r3, r0, #1
 8007900:	4604      	mov	r4, r0
 8007902:	d158      	bne.n	80079b6 <_malloc_r+0xf6>
 8007904:	f8d8 4000 	ldr.w	r4, [r8]
 8007908:	4627      	mov	r7, r4
 800790a:	2f00      	cmp	r7, #0
 800790c:	d143      	bne.n	8007996 <_malloc_r+0xd6>
 800790e:	2c00      	cmp	r4, #0
 8007910:	d04b      	beq.n	80079aa <_malloc_r+0xea>
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	4639      	mov	r1, r7
 8007916:	4630      	mov	r0, r6
 8007918:	eb04 0903 	add.w	r9, r4, r3
 800791c:	f000 fdfc 	bl	8008518 <_sbrk_r>
 8007920:	4581      	cmp	r9, r0
 8007922:	d142      	bne.n	80079aa <_malloc_r+0xea>
 8007924:	6821      	ldr	r1, [r4, #0]
 8007926:	1a6d      	subs	r5, r5, r1
 8007928:	4629      	mov	r1, r5
 800792a:	4630      	mov	r0, r6
 800792c:	f7ff ffa6 	bl	800787c <sbrk_aligned>
 8007930:	3001      	adds	r0, #1
 8007932:	d03a      	beq.n	80079aa <_malloc_r+0xea>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	442b      	add	r3, r5
 8007938:	6023      	str	r3, [r4, #0]
 800793a:	f8d8 3000 	ldr.w	r3, [r8]
 800793e:	685a      	ldr	r2, [r3, #4]
 8007940:	bb62      	cbnz	r2, 800799c <_malloc_r+0xdc>
 8007942:	f8c8 7000 	str.w	r7, [r8]
 8007946:	e00f      	b.n	8007968 <_malloc_r+0xa8>
 8007948:	6822      	ldr	r2, [r4, #0]
 800794a:	1b52      	subs	r2, r2, r5
 800794c:	d420      	bmi.n	8007990 <_malloc_r+0xd0>
 800794e:	2a0b      	cmp	r2, #11
 8007950:	d917      	bls.n	8007982 <_malloc_r+0xc2>
 8007952:	1961      	adds	r1, r4, r5
 8007954:	42a3      	cmp	r3, r4
 8007956:	6025      	str	r5, [r4, #0]
 8007958:	bf18      	it	ne
 800795a:	6059      	strne	r1, [r3, #4]
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	bf08      	it	eq
 8007960:	f8c8 1000 	streq.w	r1, [r8]
 8007964:	5162      	str	r2, [r4, r5]
 8007966:	604b      	str	r3, [r1, #4]
 8007968:	4630      	mov	r0, r6
 800796a:	f000 f82f 	bl	80079cc <__malloc_unlock>
 800796e:	f104 000b 	add.w	r0, r4, #11
 8007972:	1d23      	adds	r3, r4, #4
 8007974:	f020 0007 	bic.w	r0, r0, #7
 8007978:	1ac2      	subs	r2, r0, r3
 800797a:	bf1c      	itt	ne
 800797c:	1a1b      	subne	r3, r3, r0
 800797e:	50a3      	strne	r3, [r4, r2]
 8007980:	e7af      	b.n	80078e2 <_malloc_r+0x22>
 8007982:	6862      	ldr	r2, [r4, #4]
 8007984:	42a3      	cmp	r3, r4
 8007986:	bf0c      	ite	eq
 8007988:	f8c8 2000 	streq.w	r2, [r8]
 800798c:	605a      	strne	r2, [r3, #4]
 800798e:	e7eb      	b.n	8007968 <_malloc_r+0xa8>
 8007990:	4623      	mov	r3, r4
 8007992:	6864      	ldr	r4, [r4, #4]
 8007994:	e7ae      	b.n	80078f4 <_malloc_r+0x34>
 8007996:	463c      	mov	r4, r7
 8007998:	687f      	ldr	r7, [r7, #4]
 800799a:	e7b6      	b.n	800790a <_malloc_r+0x4a>
 800799c:	461a      	mov	r2, r3
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	42a3      	cmp	r3, r4
 80079a2:	d1fb      	bne.n	800799c <_malloc_r+0xdc>
 80079a4:	2300      	movs	r3, #0
 80079a6:	6053      	str	r3, [r2, #4]
 80079a8:	e7de      	b.n	8007968 <_malloc_r+0xa8>
 80079aa:	230c      	movs	r3, #12
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	4630      	mov	r0, r6
 80079b0:	f000 f80c 	bl	80079cc <__malloc_unlock>
 80079b4:	e794      	b.n	80078e0 <_malloc_r+0x20>
 80079b6:	6005      	str	r5, [r0, #0]
 80079b8:	e7d6      	b.n	8007968 <_malloc_r+0xa8>
 80079ba:	bf00      	nop
 80079bc:	20000614 	.word	0x20000614

080079c0 <__malloc_lock>:
 80079c0:	4801      	ldr	r0, [pc, #4]	@ (80079c8 <__malloc_lock+0x8>)
 80079c2:	f7ff b8b8 	b.w	8006b36 <__retarget_lock_acquire_recursive>
 80079c6:	bf00      	nop
 80079c8:	2000060c 	.word	0x2000060c

080079cc <__malloc_unlock>:
 80079cc:	4801      	ldr	r0, [pc, #4]	@ (80079d4 <__malloc_unlock+0x8>)
 80079ce:	f7ff b8b3 	b.w	8006b38 <__retarget_lock_release_recursive>
 80079d2:	bf00      	nop
 80079d4:	2000060c 	.word	0x2000060c

080079d8 <_Balloc>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	69c6      	ldr	r6, [r0, #28]
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	b976      	cbnz	r6, 8007a00 <_Balloc+0x28>
 80079e2:	2010      	movs	r0, #16
 80079e4:	f7ff ff42 	bl	800786c <malloc>
 80079e8:	4602      	mov	r2, r0
 80079ea:	61e0      	str	r0, [r4, #28]
 80079ec:	b920      	cbnz	r0, 80079f8 <_Balloc+0x20>
 80079ee:	4b18      	ldr	r3, [pc, #96]	@ (8007a50 <_Balloc+0x78>)
 80079f0:	4818      	ldr	r0, [pc, #96]	@ (8007a54 <_Balloc+0x7c>)
 80079f2:	216b      	movs	r1, #107	@ 0x6b
 80079f4:	f000 fdae 	bl	8008554 <__assert_func>
 80079f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079fc:	6006      	str	r6, [r0, #0]
 80079fe:	60c6      	str	r6, [r0, #12]
 8007a00:	69e6      	ldr	r6, [r4, #28]
 8007a02:	68f3      	ldr	r3, [r6, #12]
 8007a04:	b183      	cbz	r3, 8007a28 <_Balloc+0x50>
 8007a06:	69e3      	ldr	r3, [r4, #28]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a0e:	b9b8      	cbnz	r0, 8007a40 <_Balloc+0x68>
 8007a10:	2101      	movs	r1, #1
 8007a12:	fa01 f605 	lsl.w	r6, r1, r5
 8007a16:	1d72      	adds	r2, r6, #5
 8007a18:	0092      	lsls	r2, r2, #2
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f000 fdb8 	bl	8008590 <_calloc_r>
 8007a20:	b160      	cbz	r0, 8007a3c <_Balloc+0x64>
 8007a22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a26:	e00e      	b.n	8007a46 <_Balloc+0x6e>
 8007a28:	2221      	movs	r2, #33	@ 0x21
 8007a2a:	2104      	movs	r1, #4
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fdaf 	bl	8008590 <_calloc_r>
 8007a32:	69e3      	ldr	r3, [r4, #28]
 8007a34:	60f0      	str	r0, [r6, #12]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e4      	bne.n	8007a06 <_Balloc+0x2e>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	6802      	ldr	r2, [r0, #0]
 8007a42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a46:	2300      	movs	r3, #0
 8007a48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a4c:	e7f7      	b.n	8007a3e <_Balloc+0x66>
 8007a4e:	bf00      	nop
 8007a50:	0800a71d 	.word	0x0800a71d
 8007a54:	0800a79d 	.word	0x0800a79d

08007a58 <_Bfree>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	69c6      	ldr	r6, [r0, #28]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	b976      	cbnz	r6, 8007a80 <_Bfree+0x28>
 8007a62:	2010      	movs	r0, #16
 8007a64:	f7ff ff02 	bl	800786c <malloc>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	61e8      	str	r0, [r5, #28]
 8007a6c:	b920      	cbnz	r0, 8007a78 <_Bfree+0x20>
 8007a6e:	4b09      	ldr	r3, [pc, #36]	@ (8007a94 <_Bfree+0x3c>)
 8007a70:	4809      	ldr	r0, [pc, #36]	@ (8007a98 <_Bfree+0x40>)
 8007a72:	218f      	movs	r1, #143	@ 0x8f
 8007a74:	f000 fd6e 	bl	8008554 <__assert_func>
 8007a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a7c:	6006      	str	r6, [r0, #0]
 8007a7e:	60c6      	str	r6, [r0, #12]
 8007a80:	b13c      	cbz	r4, 8007a92 <_Bfree+0x3a>
 8007a82:	69eb      	ldr	r3, [r5, #28]
 8007a84:	6862      	ldr	r2, [r4, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a8c:	6021      	str	r1, [r4, #0]
 8007a8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a92:	bd70      	pop	{r4, r5, r6, pc}
 8007a94:	0800a71d 	.word	0x0800a71d
 8007a98:	0800a79d 	.word	0x0800a79d

08007a9c <__multadd>:
 8007a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aa0:	690d      	ldr	r5, [r1, #16]
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	461e      	mov	r6, r3
 8007aa8:	f101 0c14 	add.w	ip, r1, #20
 8007aac:	2000      	movs	r0, #0
 8007aae:	f8dc 3000 	ldr.w	r3, [ip]
 8007ab2:	b299      	uxth	r1, r3
 8007ab4:	fb02 6101 	mla	r1, r2, r1, r6
 8007ab8:	0c1e      	lsrs	r6, r3, #16
 8007aba:	0c0b      	lsrs	r3, r1, #16
 8007abc:	fb02 3306 	mla	r3, r2, r6, r3
 8007ac0:	b289      	uxth	r1, r1
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ac8:	4285      	cmp	r5, r0
 8007aca:	f84c 1b04 	str.w	r1, [ip], #4
 8007ace:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ad2:	dcec      	bgt.n	8007aae <__multadd+0x12>
 8007ad4:	b30e      	cbz	r6, 8007b1a <__multadd+0x7e>
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	42ab      	cmp	r3, r5
 8007ada:	dc19      	bgt.n	8007b10 <__multadd+0x74>
 8007adc:	6861      	ldr	r1, [r4, #4]
 8007ade:	4638      	mov	r0, r7
 8007ae0:	3101      	adds	r1, #1
 8007ae2:	f7ff ff79 	bl	80079d8 <_Balloc>
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	b928      	cbnz	r0, 8007af6 <__multadd+0x5a>
 8007aea:	4602      	mov	r2, r0
 8007aec:	4b0c      	ldr	r3, [pc, #48]	@ (8007b20 <__multadd+0x84>)
 8007aee:	480d      	ldr	r0, [pc, #52]	@ (8007b24 <__multadd+0x88>)
 8007af0:	21ba      	movs	r1, #186	@ 0xba
 8007af2:	f000 fd2f 	bl	8008554 <__assert_func>
 8007af6:	6922      	ldr	r2, [r4, #16]
 8007af8:	3202      	adds	r2, #2
 8007afa:	f104 010c 	add.w	r1, r4, #12
 8007afe:	0092      	lsls	r2, r2, #2
 8007b00:	300c      	adds	r0, #12
 8007b02:	f000 fd19 	bl	8008538 <memcpy>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7ff ffa5 	bl	8007a58 <_Bfree>
 8007b0e:	4644      	mov	r4, r8
 8007b10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b14:	3501      	adds	r5, #1
 8007b16:	615e      	str	r6, [r3, #20]
 8007b18:	6125      	str	r5, [r4, #16]
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b20:	0800a78c 	.word	0x0800a78c
 8007b24:	0800a79d 	.word	0x0800a79d

08007b28 <__hi0bits>:
 8007b28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	bf36      	itet	cc
 8007b30:	0403      	lslcc	r3, r0, #16
 8007b32:	2000      	movcs	r0, #0
 8007b34:	2010      	movcc	r0, #16
 8007b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b3a:	bf3c      	itt	cc
 8007b3c:	021b      	lslcc	r3, r3, #8
 8007b3e:	3008      	addcc	r0, #8
 8007b40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b44:	bf3c      	itt	cc
 8007b46:	011b      	lslcc	r3, r3, #4
 8007b48:	3004      	addcc	r0, #4
 8007b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b4e:	bf3c      	itt	cc
 8007b50:	009b      	lslcc	r3, r3, #2
 8007b52:	3002      	addcc	r0, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	db05      	blt.n	8007b64 <__hi0bits+0x3c>
 8007b58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b5c:	f100 0001 	add.w	r0, r0, #1
 8007b60:	bf08      	it	eq
 8007b62:	2020      	moveq	r0, #32
 8007b64:	4770      	bx	lr

08007b66 <__lo0bits>:
 8007b66:	6803      	ldr	r3, [r0, #0]
 8007b68:	4602      	mov	r2, r0
 8007b6a:	f013 0007 	ands.w	r0, r3, #7
 8007b6e:	d00b      	beq.n	8007b88 <__lo0bits+0x22>
 8007b70:	07d9      	lsls	r1, r3, #31
 8007b72:	d421      	bmi.n	8007bb8 <__lo0bits+0x52>
 8007b74:	0798      	lsls	r0, r3, #30
 8007b76:	bf49      	itett	mi
 8007b78:	085b      	lsrmi	r3, r3, #1
 8007b7a:	089b      	lsrpl	r3, r3, #2
 8007b7c:	2001      	movmi	r0, #1
 8007b7e:	6013      	strmi	r3, [r2, #0]
 8007b80:	bf5c      	itt	pl
 8007b82:	6013      	strpl	r3, [r2, #0]
 8007b84:	2002      	movpl	r0, #2
 8007b86:	4770      	bx	lr
 8007b88:	b299      	uxth	r1, r3
 8007b8a:	b909      	cbnz	r1, 8007b90 <__lo0bits+0x2a>
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	2010      	movs	r0, #16
 8007b90:	b2d9      	uxtb	r1, r3
 8007b92:	b909      	cbnz	r1, 8007b98 <__lo0bits+0x32>
 8007b94:	3008      	adds	r0, #8
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	0719      	lsls	r1, r3, #28
 8007b9a:	bf04      	itt	eq
 8007b9c:	091b      	lsreq	r3, r3, #4
 8007b9e:	3004      	addeq	r0, #4
 8007ba0:	0799      	lsls	r1, r3, #30
 8007ba2:	bf04      	itt	eq
 8007ba4:	089b      	lsreq	r3, r3, #2
 8007ba6:	3002      	addeq	r0, #2
 8007ba8:	07d9      	lsls	r1, r3, #31
 8007baa:	d403      	bmi.n	8007bb4 <__lo0bits+0x4e>
 8007bac:	085b      	lsrs	r3, r3, #1
 8007bae:	f100 0001 	add.w	r0, r0, #1
 8007bb2:	d003      	beq.n	8007bbc <__lo0bits+0x56>
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	4770      	bx	lr
 8007bb8:	2000      	movs	r0, #0
 8007bba:	4770      	bx	lr
 8007bbc:	2020      	movs	r0, #32
 8007bbe:	4770      	bx	lr

08007bc0 <__i2b>:
 8007bc0:	b510      	push	{r4, lr}
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	2101      	movs	r1, #1
 8007bc6:	f7ff ff07 	bl	80079d8 <_Balloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	b928      	cbnz	r0, 8007bda <__i2b+0x1a>
 8007bce:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <__i2b+0x24>)
 8007bd0:	4805      	ldr	r0, [pc, #20]	@ (8007be8 <__i2b+0x28>)
 8007bd2:	f240 1145 	movw	r1, #325	@ 0x145
 8007bd6:	f000 fcbd 	bl	8008554 <__assert_func>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	6144      	str	r4, [r0, #20]
 8007bde:	6103      	str	r3, [r0, #16]
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	0800a78c 	.word	0x0800a78c
 8007be8:	0800a79d 	.word	0x0800a79d

08007bec <__multiply>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	690a      	ldr	r2, [r1, #16]
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	bfa8      	it	ge
 8007bfa:	4623      	movge	r3, r4
 8007bfc:	460f      	mov	r7, r1
 8007bfe:	bfa4      	itt	ge
 8007c00:	460c      	movge	r4, r1
 8007c02:	461f      	movge	r7, r3
 8007c04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007c08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007c0c:	68a3      	ldr	r3, [r4, #8]
 8007c0e:	6861      	ldr	r1, [r4, #4]
 8007c10:	eb0a 0609 	add.w	r6, sl, r9
 8007c14:	42b3      	cmp	r3, r6
 8007c16:	b085      	sub	sp, #20
 8007c18:	bfb8      	it	lt
 8007c1a:	3101      	addlt	r1, #1
 8007c1c:	f7ff fedc 	bl	80079d8 <_Balloc>
 8007c20:	b930      	cbnz	r0, 8007c30 <__multiply+0x44>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b44      	ldr	r3, [pc, #272]	@ (8007d38 <__multiply+0x14c>)
 8007c26:	4845      	ldr	r0, [pc, #276]	@ (8007d3c <__multiply+0x150>)
 8007c28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c2c:	f000 fc92 	bl	8008554 <__assert_func>
 8007c30:	f100 0514 	add.w	r5, r0, #20
 8007c34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c38:	462b      	mov	r3, r5
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4543      	cmp	r3, r8
 8007c3e:	d321      	bcc.n	8007c84 <__multiply+0x98>
 8007c40:	f107 0114 	add.w	r1, r7, #20
 8007c44:	f104 0214 	add.w	r2, r4, #20
 8007c48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	1b13      	subs	r3, r2, r4
 8007c54:	3b15      	subs	r3, #21
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	f104 0715 	add.w	r7, r4, #21
 8007c60:	42ba      	cmp	r2, r7
 8007c62:	bf38      	it	cc
 8007c64:	2304      	movcc	r3, #4
 8007c66:	9301      	str	r3, [sp, #4]
 8007c68:	9b02      	ldr	r3, [sp, #8]
 8007c6a:	9103      	str	r1, [sp, #12]
 8007c6c:	428b      	cmp	r3, r1
 8007c6e:	d80c      	bhi.n	8007c8a <__multiply+0x9e>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	dd03      	ble.n	8007c7c <__multiply+0x90>
 8007c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d05b      	beq.n	8007d34 <__multiply+0x148>
 8007c7c:	6106      	str	r6, [r0, #16]
 8007c7e:	b005      	add	sp, #20
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	f843 2b04 	str.w	r2, [r3], #4
 8007c88:	e7d8      	b.n	8007c3c <__multiply+0x50>
 8007c8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c8e:	f1ba 0f00 	cmp.w	sl, #0
 8007c92:	d024      	beq.n	8007cde <__multiply+0xf2>
 8007c94:	f104 0e14 	add.w	lr, r4, #20
 8007c98:	46a9      	mov	r9, r5
 8007c9a:	f04f 0c00 	mov.w	ip, #0
 8007c9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ca2:	f8d9 3000 	ldr.w	r3, [r9]
 8007ca6:	fa1f fb87 	uxth.w	fp, r7
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	fb0a 330b 	mla	r3, sl, fp, r3
 8007cb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007cb4:	f8d9 7000 	ldr.w	r7, [r9]
 8007cb8:	4463      	add	r3, ip
 8007cba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cbe:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ccc:	4572      	cmp	r2, lr
 8007cce:	f849 3b04 	str.w	r3, [r9], #4
 8007cd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cd6:	d8e2      	bhi.n	8007c9e <__multiply+0xb2>
 8007cd8:	9b01      	ldr	r3, [sp, #4]
 8007cda:	f845 c003 	str.w	ip, [r5, r3]
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ce4:	3104      	adds	r1, #4
 8007ce6:	f1b9 0f00 	cmp.w	r9, #0
 8007cea:	d021      	beq.n	8007d30 <__multiply+0x144>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	f104 0c14 	add.w	ip, r4, #20
 8007cf2:	46ae      	mov	lr, r5
 8007cf4:	f04f 0a00 	mov.w	sl, #0
 8007cf8:	f8bc b000 	ldrh.w	fp, [ip]
 8007cfc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007d00:	fb09 770b 	mla	r7, r9, fp, r7
 8007d04:	4457      	add	r7, sl
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d0c:	f84e 3b04 	str.w	r3, [lr], #4
 8007d10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d18:	f8be 3000 	ldrh.w	r3, [lr]
 8007d1c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d20:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d24:	4562      	cmp	r2, ip
 8007d26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d2a:	d8e5      	bhi.n	8007cf8 <__multiply+0x10c>
 8007d2c:	9f01      	ldr	r7, [sp, #4]
 8007d2e:	51eb      	str	r3, [r5, r7]
 8007d30:	3504      	adds	r5, #4
 8007d32:	e799      	b.n	8007c68 <__multiply+0x7c>
 8007d34:	3e01      	subs	r6, #1
 8007d36:	e79b      	b.n	8007c70 <__multiply+0x84>
 8007d38:	0800a78c 	.word	0x0800a78c
 8007d3c:	0800a79d 	.word	0x0800a79d

08007d40 <__pow5mult>:
 8007d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d44:	4615      	mov	r5, r2
 8007d46:	f012 0203 	ands.w	r2, r2, #3
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	460e      	mov	r6, r1
 8007d4e:	d007      	beq.n	8007d60 <__pow5mult+0x20>
 8007d50:	4c25      	ldr	r4, [pc, #148]	@ (8007de8 <__pow5mult+0xa8>)
 8007d52:	3a01      	subs	r2, #1
 8007d54:	2300      	movs	r3, #0
 8007d56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d5a:	f7ff fe9f 	bl	8007a9c <__multadd>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	10ad      	asrs	r5, r5, #2
 8007d62:	d03d      	beq.n	8007de0 <__pow5mult+0xa0>
 8007d64:	69fc      	ldr	r4, [r7, #28]
 8007d66:	b97c      	cbnz	r4, 8007d88 <__pow5mult+0x48>
 8007d68:	2010      	movs	r0, #16
 8007d6a:	f7ff fd7f 	bl	800786c <malloc>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	61f8      	str	r0, [r7, #28]
 8007d72:	b928      	cbnz	r0, 8007d80 <__pow5mult+0x40>
 8007d74:	4b1d      	ldr	r3, [pc, #116]	@ (8007dec <__pow5mult+0xac>)
 8007d76:	481e      	ldr	r0, [pc, #120]	@ (8007df0 <__pow5mult+0xb0>)
 8007d78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d7c:	f000 fbea 	bl	8008554 <__assert_func>
 8007d80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d84:	6004      	str	r4, [r0, #0]
 8007d86:	60c4      	str	r4, [r0, #12]
 8007d88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d90:	b94c      	cbnz	r4, 8007da6 <__pow5mult+0x66>
 8007d92:	f240 2171 	movw	r1, #625	@ 0x271
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7ff ff12 	bl	8007bc0 <__i2b>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007da2:	4604      	mov	r4, r0
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	f04f 0900 	mov.w	r9, #0
 8007daa:	07eb      	lsls	r3, r5, #31
 8007dac:	d50a      	bpl.n	8007dc4 <__pow5mult+0x84>
 8007dae:	4631      	mov	r1, r6
 8007db0:	4622      	mov	r2, r4
 8007db2:	4638      	mov	r0, r7
 8007db4:	f7ff ff1a 	bl	8007bec <__multiply>
 8007db8:	4631      	mov	r1, r6
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4638      	mov	r0, r7
 8007dbe:	f7ff fe4b 	bl	8007a58 <_Bfree>
 8007dc2:	4646      	mov	r6, r8
 8007dc4:	106d      	asrs	r5, r5, #1
 8007dc6:	d00b      	beq.n	8007de0 <__pow5mult+0xa0>
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	b938      	cbnz	r0, 8007ddc <__pow5mult+0x9c>
 8007dcc:	4622      	mov	r2, r4
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4638      	mov	r0, r7
 8007dd2:	f7ff ff0b 	bl	8007bec <__multiply>
 8007dd6:	6020      	str	r0, [r4, #0]
 8007dd8:	f8c0 9000 	str.w	r9, [r0]
 8007ddc:	4604      	mov	r4, r0
 8007dde:	e7e4      	b.n	8007daa <__pow5mult+0x6a>
 8007de0:	4630      	mov	r0, r6
 8007de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007de6:	bf00      	nop
 8007de8:	0800a7f8 	.word	0x0800a7f8
 8007dec:	0800a71d 	.word	0x0800a71d
 8007df0:	0800a79d 	.word	0x0800a79d

08007df4 <__lshift>:
 8007df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6849      	ldr	r1, [r1, #4]
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	4607      	mov	r7, r0
 8007e06:	4691      	mov	r9, r2
 8007e08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e0c:	f108 0601 	add.w	r6, r8, #1
 8007e10:	42b3      	cmp	r3, r6
 8007e12:	db0b      	blt.n	8007e2c <__lshift+0x38>
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff fddf 	bl	80079d8 <_Balloc>
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	b948      	cbnz	r0, 8007e32 <__lshift+0x3e>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	4b28      	ldr	r3, [pc, #160]	@ (8007ec4 <__lshift+0xd0>)
 8007e22:	4829      	ldr	r0, [pc, #164]	@ (8007ec8 <__lshift+0xd4>)
 8007e24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e28:	f000 fb94 	bl	8008554 <__assert_func>
 8007e2c:	3101      	adds	r1, #1
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	e7ee      	b.n	8007e10 <__lshift+0x1c>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f100 0114 	add.w	r1, r0, #20
 8007e38:	f100 0210 	add.w	r2, r0, #16
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	4553      	cmp	r3, sl
 8007e40:	db33      	blt.n	8007eaa <__lshift+0xb6>
 8007e42:	6920      	ldr	r0, [r4, #16]
 8007e44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e48:	f104 0314 	add.w	r3, r4, #20
 8007e4c:	f019 091f 	ands.w	r9, r9, #31
 8007e50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e58:	d02b      	beq.n	8007eb2 <__lshift+0xbe>
 8007e5a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e5e:	468a      	mov	sl, r1
 8007e60:	2200      	movs	r2, #0
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	fa00 f009 	lsl.w	r0, r0, r9
 8007e68:	4310      	orrs	r0, r2
 8007e6a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e72:	459c      	cmp	ip, r3
 8007e74:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e78:	d8f3      	bhi.n	8007e62 <__lshift+0x6e>
 8007e7a:	ebac 0304 	sub.w	r3, ip, r4
 8007e7e:	3b15      	subs	r3, #21
 8007e80:	f023 0303 	bic.w	r3, r3, #3
 8007e84:	3304      	adds	r3, #4
 8007e86:	f104 0015 	add.w	r0, r4, #21
 8007e8a:	4584      	cmp	ip, r0
 8007e8c:	bf38      	it	cc
 8007e8e:	2304      	movcc	r3, #4
 8007e90:	50ca      	str	r2, [r1, r3]
 8007e92:	b10a      	cbz	r2, 8007e98 <__lshift+0xa4>
 8007e94:	f108 0602 	add.w	r6, r8, #2
 8007e98:	3e01      	subs	r6, #1
 8007e9a:	4638      	mov	r0, r7
 8007e9c:	612e      	str	r6, [r5, #16]
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	f7ff fdda 	bl	8007a58 <_Bfree>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8007eae:	3301      	adds	r3, #1
 8007eb0:	e7c5      	b.n	8007e3e <__lshift+0x4a>
 8007eb2:	3904      	subs	r1, #4
 8007eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ebc:	459c      	cmp	ip, r3
 8007ebe:	d8f9      	bhi.n	8007eb4 <__lshift+0xc0>
 8007ec0:	e7ea      	b.n	8007e98 <__lshift+0xa4>
 8007ec2:	bf00      	nop
 8007ec4:	0800a78c 	.word	0x0800a78c
 8007ec8:	0800a79d 	.word	0x0800a79d

08007ecc <__mcmp>:
 8007ecc:	690a      	ldr	r2, [r1, #16]
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6900      	ldr	r0, [r0, #16]
 8007ed2:	1a80      	subs	r0, r0, r2
 8007ed4:	b530      	push	{r4, r5, lr}
 8007ed6:	d10e      	bne.n	8007ef6 <__mcmp+0x2a>
 8007ed8:	3314      	adds	r3, #20
 8007eda:	3114      	adds	r1, #20
 8007edc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ee0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ee4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ee8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007eec:	4295      	cmp	r5, r2
 8007eee:	d003      	beq.n	8007ef8 <__mcmp+0x2c>
 8007ef0:	d205      	bcs.n	8007efe <__mcmp+0x32>
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	bd30      	pop	{r4, r5, pc}
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d3f3      	bcc.n	8007ee4 <__mcmp+0x18>
 8007efc:	e7fb      	b.n	8007ef6 <__mcmp+0x2a>
 8007efe:	2001      	movs	r0, #1
 8007f00:	e7f9      	b.n	8007ef6 <__mcmp+0x2a>
	...

08007f04 <__mdiff>:
 8007f04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f08:	4689      	mov	r9, r1
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	4648      	mov	r0, r9
 8007f10:	4614      	mov	r4, r2
 8007f12:	f7ff ffdb 	bl	8007ecc <__mcmp>
 8007f16:	1e05      	subs	r5, r0, #0
 8007f18:	d112      	bne.n	8007f40 <__mdiff+0x3c>
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f7ff fd5b 	bl	80079d8 <_Balloc>
 8007f22:	4602      	mov	r2, r0
 8007f24:	b928      	cbnz	r0, 8007f32 <__mdiff+0x2e>
 8007f26:	4b3f      	ldr	r3, [pc, #252]	@ (8008024 <__mdiff+0x120>)
 8007f28:	f240 2137 	movw	r1, #567	@ 0x237
 8007f2c:	483e      	ldr	r0, [pc, #248]	@ (8008028 <__mdiff+0x124>)
 8007f2e:	f000 fb11 	bl	8008554 <__assert_func>
 8007f32:	2301      	movs	r3, #1
 8007f34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f38:	4610      	mov	r0, r2
 8007f3a:	b003      	add	sp, #12
 8007f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f40:	bfbc      	itt	lt
 8007f42:	464b      	movlt	r3, r9
 8007f44:	46a1      	movlt	r9, r4
 8007f46:	4630      	mov	r0, r6
 8007f48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f4c:	bfba      	itte	lt
 8007f4e:	461c      	movlt	r4, r3
 8007f50:	2501      	movlt	r5, #1
 8007f52:	2500      	movge	r5, #0
 8007f54:	f7ff fd40 	bl	80079d8 <_Balloc>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	b918      	cbnz	r0, 8007f64 <__mdiff+0x60>
 8007f5c:	4b31      	ldr	r3, [pc, #196]	@ (8008024 <__mdiff+0x120>)
 8007f5e:	f240 2145 	movw	r1, #581	@ 0x245
 8007f62:	e7e3      	b.n	8007f2c <__mdiff+0x28>
 8007f64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f68:	6926      	ldr	r6, [r4, #16]
 8007f6a:	60c5      	str	r5, [r0, #12]
 8007f6c:	f109 0310 	add.w	r3, r9, #16
 8007f70:	f109 0514 	add.w	r5, r9, #20
 8007f74:	f104 0e14 	add.w	lr, r4, #20
 8007f78:	f100 0b14 	add.w	fp, r0, #20
 8007f7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	46d9      	mov	r9, fp
 8007f88:	f04f 0c00 	mov.w	ip, #0
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	fa1f f38a 	uxth.w	r3, sl
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	b283      	uxth	r3, r0
 8007fa0:	1acb      	subs	r3, r1, r3
 8007fa2:	0c00      	lsrs	r0, r0, #16
 8007fa4:	4463      	add	r3, ip
 8007fa6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007faa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fb4:	4576      	cmp	r6, lr
 8007fb6:	f849 3b04 	str.w	r3, [r9], #4
 8007fba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fbe:	d8e5      	bhi.n	8007f8c <__mdiff+0x88>
 8007fc0:	1b33      	subs	r3, r6, r4
 8007fc2:	3b15      	subs	r3, #21
 8007fc4:	f023 0303 	bic.w	r3, r3, #3
 8007fc8:	3415      	adds	r4, #21
 8007fca:	3304      	adds	r3, #4
 8007fcc:	42a6      	cmp	r6, r4
 8007fce:	bf38      	it	cc
 8007fd0:	2304      	movcc	r3, #4
 8007fd2:	441d      	add	r5, r3
 8007fd4:	445b      	add	r3, fp
 8007fd6:	461e      	mov	r6, r3
 8007fd8:	462c      	mov	r4, r5
 8007fda:	4544      	cmp	r4, r8
 8007fdc:	d30e      	bcc.n	8007ffc <__mdiff+0xf8>
 8007fde:	f108 0103 	add.w	r1, r8, #3
 8007fe2:	1b49      	subs	r1, r1, r5
 8007fe4:	f021 0103 	bic.w	r1, r1, #3
 8007fe8:	3d03      	subs	r5, #3
 8007fea:	45a8      	cmp	r8, r5
 8007fec:	bf38      	it	cc
 8007fee:	2100      	movcc	r1, #0
 8007ff0:	440b      	add	r3, r1
 8007ff2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ff6:	b191      	cbz	r1, 800801e <__mdiff+0x11a>
 8007ff8:	6117      	str	r7, [r2, #16]
 8007ffa:	e79d      	b.n	8007f38 <__mdiff+0x34>
 8007ffc:	f854 1b04 	ldr.w	r1, [r4], #4
 8008000:	46e6      	mov	lr, ip
 8008002:	0c08      	lsrs	r0, r1, #16
 8008004:	fa1c fc81 	uxtah	ip, ip, r1
 8008008:	4471      	add	r1, lr
 800800a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800800e:	b289      	uxth	r1, r1
 8008010:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008014:	f846 1b04 	str.w	r1, [r6], #4
 8008018:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800801c:	e7dd      	b.n	8007fda <__mdiff+0xd6>
 800801e:	3f01      	subs	r7, #1
 8008020:	e7e7      	b.n	8007ff2 <__mdiff+0xee>
 8008022:	bf00      	nop
 8008024:	0800a78c 	.word	0x0800a78c
 8008028:	0800a79d 	.word	0x0800a79d

0800802c <__d2b>:
 800802c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008030:	460f      	mov	r7, r1
 8008032:	2101      	movs	r1, #1
 8008034:	ec59 8b10 	vmov	r8, r9, d0
 8008038:	4616      	mov	r6, r2
 800803a:	f7ff fccd 	bl	80079d8 <_Balloc>
 800803e:	4604      	mov	r4, r0
 8008040:	b930      	cbnz	r0, 8008050 <__d2b+0x24>
 8008042:	4602      	mov	r2, r0
 8008044:	4b23      	ldr	r3, [pc, #140]	@ (80080d4 <__d2b+0xa8>)
 8008046:	4824      	ldr	r0, [pc, #144]	@ (80080d8 <__d2b+0xac>)
 8008048:	f240 310f 	movw	r1, #783	@ 0x30f
 800804c:	f000 fa82 	bl	8008554 <__assert_func>
 8008050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008058:	b10d      	cbz	r5, 800805e <__d2b+0x32>
 800805a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800805e:	9301      	str	r3, [sp, #4]
 8008060:	f1b8 0300 	subs.w	r3, r8, #0
 8008064:	d023      	beq.n	80080ae <__d2b+0x82>
 8008066:	4668      	mov	r0, sp
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	f7ff fd7c 	bl	8007b66 <__lo0bits>
 800806e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008072:	b1d0      	cbz	r0, 80080aa <__d2b+0x7e>
 8008074:	f1c0 0320 	rsb	r3, r0, #32
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	430b      	orrs	r3, r1
 800807e:	40c2      	lsrs	r2, r0
 8008080:	6163      	str	r3, [r4, #20]
 8008082:	9201      	str	r2, [sp, #4]
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	61a3      	str	r3, [r4, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	bf0c      	ite	eq
 800808c:	2201      	moveq	r2, #1
 800808e:	2202      	movne	r2, #2
 8008090:	6122      	str	r2, [r4, #16]
 8008092:	b1a5      	cbz	r5, 80080be <__d2b+0x92>
 8008094:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008098:	4405      	add	r5, r0
 800809a:	603d      	str	r5, [r7, #0]
 800809c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80080a0:	6030      	str	r0, [r6, #0]
 80080a2:	4620      	mov	r0, r4
 80080a4:	b003      	add	sp, #12
 80080a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080aa:	6161      	str	r1, [r4, #20]
 80080ac:	e7ea      	b.n	8008084 <__d2b+0x58>
 80080ae:	a801      	add	r0, sp, #4
 80080b0:	f7ff fd59 	bl	8007b66 <__lo0bits>
 80080b4:	9b01      	ldr	r3, [sp, #4]
 80080b6:	6163      	str	r3, [r4, #20]
 80080b8:	3020      	adds	r0, #32
 80080ba:	2201      	movs	r2, #1
 80080bc:	e7e8      	b.n	8008090 <__d2b+0x64>
 80080be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080c6:	6038      	str	r0, [r7, #0]
 80080c8:	6918      	ldr	r0, [r3, #16]
 80080ca:	f7ff fd2d 	bl	8007b28 <__hi0bits>
 80080ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080d2:	e7e5      	b.n	80080a0 <__d2b+0x74>
 80080d4:	0800a78c 	.word	0x0800a78c
 80080d8:	0800a79d 	.word	0x0800a79d

080080dc <__ssputs_r>:
 80080dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	688e      	ldr	r6, [r1, #8]
 80080e2:	461f      	mov	r7, r3
 80080e4:	42be      	cmp	r6, r7
 80080e6:	680b      	ldr	r3, [r1, #0]
 80080e8:	4682      	mov	sl, r0
 80080ea:	460c      	mov	r4, r1
 80080ec:	4690      	mov	r8, r2
 80080ee:	d82d      	bhi.n	800814c <__ssputs_r+0x70>
 80080f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080f8:	d026      	beq.n	8008148 <__ssputs_r+0x6c>
 80080fa:	6965      	ldr	r5, [r4, #20]
 80080fc:	6909      	ldr	r1, [r1, #16]
 80080fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008102:	eba3 0901 	sub.w	r9, r3, r1
 8008106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800810a:	1c7b      	adds	r3, r7, #1
 800810c:	444b      	add	r3, r9
 800810e:	106d      	asrs	r5, r5, #1
 8008110:	429d      	cmp	r5, r3
 8008112:	bf38      	it	cc
 8008114:	461d      	movcc	r5, r3
 8008116:	0553      	lsls	r3, r2, #21
 8008118:	d527      	bpl.n	800816a <__ssputs_r+0x8e>
 800811a:	4629      	mov	r1, r5
 800811c:	f7ff fbd0 	bl	80078c0 <_malloc_r>
 8008120:	4606      	mov	r6, r0
 8008122:	b360      	cbz	r0, 800817e <__ssputs_r+0xa2>
 8008124:	6921      	ldr	r1, [r4, #16]
 8008126:	464a      	mov	r2, r9
 8008128:	f000 fa06 	bl	8008538 <memcpy>
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	6126      	str	r6, [r4, #16]
 800813a:	6165      	str	r5, [r4, #20]
 800813c:	444e      	add	r6, r9
 800813e:	eba5 0509 	sub.w	r5, r5, r9
 8008142:	6026      	str	r6, [r4, #0]
 8008144:	60a5      	str	r5, [r4, #8]
 8008146:	463e      	mov	r6, r7
 8008148:	42be      	cmp	r6, r7
 800814a:	d900      	bls.n	800814e <__ssputs_r+0x72>
 800814c:	463e      	mov	r6, r7
 800814e:	6820      	ldr	r0, [r4, #0]
 8008150:	4632      	mov	r2, r6
 8008152:	4641      	mov	r1, r8
 8008154:	f000 f9c6 	bl	80084e4 <memmove>
 8008158:	68a3      	ldr	r3, [r4, #8]
 800815a:	1b9b      	subs	r3, r3, r6
 800815c:	60a3      	str	r3, [r4, #8]
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	4433      	add	r3, r6
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	2000      	movs	r0, #0
 8008166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816a:	462a      	mov	r2, r5
 800816c:	f000 fa36 	bl	80085dc <_realloc_r>
 8008170:	4606      	mov	r6, r0
 8008172:	2800      	cmp	r0, #0
 8008174:	d1e0      	bne.n	8008138 <__ssputs_r+0x5c>
 8008176:	6921      	ldr	r1, [r4, #16]
 8008178:	4650      	mov	r0, sl
 800817a:	f7ff fb2d 	bl	80077d8 <_free_r>
 800817e:	230c      	movs	r3, #12
 8008180:	f8ca 3000 	str.w	r3, [sl]
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800818a:	81a3      	strh	r3, [r4, #12]
 800818c:	f04f 30ff 	mov.w	r0, #4294967295
 8008190:	e7e9      	b.n	8008166 <__ssputs_r+0x8a>
	...

08008194 <_svfiprintf_r>:
 8008194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008198:	4698      	mov	r8, r3
 800819a:	898b      	ldrh	r3, [r1, #12]
 800819c:	061b      	lsls	r3, r3, #24
 800819e:	b09d      	sub	sp, #116	@ 0x74
 80081a0:	4607      	mov	r7, r0
 80081a2:	460d      	mov	r5, r1
 80081a4:	4614      	mov	r4, r2
 80081a6:	d510      	bpl.n	80081ca <_svfiprintf_r+0x36>
 80081a8:	690b      	ldr	r3, [r1, #16]
 80081aa:	b973      	cbnz	r3, 80081ca <_svfiprintf_r+0x36>
 80081ac:	2140      	movs	r1, #64	@ 0x40
 80081ae:	f7ff fb87 	bl	80078c0 <_malloc_r>
 80081b2:	6028      	str	r0, [r5, #0]
 80081b4:	6128      	str	r0, [r5, #16]
 80081b6:	b930      	cbnz	r0, 80081c6 <_svfiprintf_r+0x32>
 80081b8:	230c      	movs	r3, #12
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	b01d      	add	sp, #116	@ 0x74
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	2340      	movs	r3, #64	@ 0x40
 80081c8:	616b      	str	r3, [r5, #20]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ce:	2320      	movs	r3, #32
 80081d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d8:	2330      	movs	r3, #48	@ 0x30
 80081da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008378 <_svfiprintf_r+0x1e4>
 80081de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081e2:	f04f 0901 	mov.w	r9, #1
 80081e6:	4623      	mov	r3, r4
 80081e8:	469a      	mov	sl, r3
 80081ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ee:	b10a      	cbz	r2, 80081f4 <_svfiprintf_r+0x60>
 80081f0:	2a25      	cmp	r2, #37	@ 0x25
 80081f2:	d1f9      	bne.n	80081e8 <_svfiprintf_r+0x54>
 80081f4:	ebba 0b04 	subs.w	fp, sl, r4
 80081f8:	d00b      	beq.n	8008212 <_svfiprintf_r+0x7e>
 80081fa:	465b      	mov	r3, fp
 80081fc:	4622      	mov	r2, r4
 80081fe:	4629      	mov	r1, r5
 8008200:	4638      	mov	r0, r7
 8008202:	f7ff ff6b 	bl	80080dc <__ssputs_r>
 8008206:	3001      	adds	r0, #1
 8008208:	f000 80a7 	beq.w	800835a <_svfiprintf_r+0x1c6>
 800820c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800820e:	445a      	add	r2, fp
 8008210:	9209      	str	r2, [sp, #36]	@ 0x24
 8008212:	f89a 3000 	ldrb.w	r3, [sl]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 809f 	beq.w	800835a <_svfiprintf_r+0x1c6>
 800821c:	2300      	movs	r3, #0
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008226:	f10a 0a01 	add.w	sl, sl, #1
 800822a:	9304      	str	r3, [sp, #16]
 800822c:	9307      	str	r3, [sp, #28]
 800822e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008232:	931a      	str	r3, [sp, #104]	@ 0x68
 8008234:	4654      	mov	r4, sl
 8008236:	2205      	movs	r2, #5
 8008238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823c:	484e      	ldr	r0, [pc, #312]	@ (8008378 <_svfiprintf_r+0x1e4>)
 800823e:	f7f7 ffd7 	bl	80001f0 <memchr>
 8008242:	9a04      	ldr	r2, [sp, #16]
 8008244:	b9d8      	cbnz	r0, 800827e <_svfiprintf_r+0xea>
 8008246:	06d0      	lsls	r0, r2, #27
 8008248:	bf44      	itt	mi
 800824a:	2320      	movmi	r3, #32
 800824c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008250:	0711      	lsls	r1, r2, #28
 8008252:	bf44      	itt	mi
 8008254:	232b      	movmi	r3, #43	@ 0x2b
 8008256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800825a:	f89a 3000 	ldrb.w	r3, [sl]
 800825e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008260:	d015      	beq.n	800828e <_svfiprintf_r+0xfa>
 8008262:	9a07      	ldr	r2, [sp, #28]
 8008264:	4654      	mov	r4, sl
 8008266:	2000      	movs	r0, #0
 8008268:	f04f 0c0a 	mov.w	ip, #10
 800826c:	4621      	mov	r1, r4
 800826e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008272:	3b30      	subs	r3, #48	@ 0x30
 8008274:	2b09      	cmp	r3, #9
 8008276:	d94b      	bls.n	8008310 <_svfiprintf_r+0x17c>
 8008278:	b1b0      	cbz	r0, 80082a8 <_svfiprintf_r+0x114>
 800827a:	9207      	str	r2, [sp, #28]
 800827c:	e014      	b.n	80082a8 <_svfiprintf_r+0x114>
 800827e:	eba0 0308 	sub.w	r3, r0, r8
 8008282:	fa09 f303 	lsl.w	r3, r9, r3
 8008286:	4313      	orrs	r3, r2
 8008288:	9304      	str	r3, [sp, #16]
 800828a:	46a2      	mov	sl, r4
 800828c:	e7d2      	b.n	8008234 <_svfiprintf_r+0xa0>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	1d19      	adds	r1, r3, #4
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	9103      	str	r1, [sp, #12]
 8008296:	2b00      	cmp	r3, #0
 8008298:	bfbb      	ittet	lt
 800829a:	425b      	neglt	r3, r3
 800829c:	f042 0202 	orrlt.w	r2, r2, #2
 80082a0:	9307      	strge	r3, [sp, #28]
 80082a2:	9307      	strlt	r3, [sp, #28]
 80082a4:	bfb8      	it	lt
 80082a6:	9204      	strlt	r2, [sp, #16]
 80082a8:	7823      	ldrb	r3, [r4, #0]
 80082aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ac:	d10a      	bne.n	80082c4 <_svfiprintf_r+0x130>
 80082ae:	7863      	ldrb	r3, [r4, #1]
 80082b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b2:	d132      	bne.n	800831a <_svfiprintf_r+0x186>
 80082b4:	9b03      	ldr	r3, [sp, #12]
 80082b6:	1d1a      	adds	r2, r3, #4
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	9203      	str	r2, [sp, #12]
 80082bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082c0:	3402      	adds	r4, #2
 80082c2:	9305      	str	r3, [sp, #20]
 80082c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008388 <_svfiprintf_r+0x1f4>
 80082c8:	7821      	ldrb	r1, [r4, #0]
 80082ca:	2203      	movs	r2, #3
 80082cc:	4650      	mov	r0, sl
 80082ce:	f7f7 ff8f 	bl	80001f0 <memchr>
 80082d2:	b138      	cbz	r0, 80082e4 <_svfiprintf_r+0x150>
 80082d4:	9b04      	ldr	r3, [sp, #16]
 80082d6:	eba0 000a 	sub.w	r0, r0, sl
 80082da:	2240      	movs	r2, #64	@ 0x40
 80082dc:	4082      	lsls	r2, r0
 80082de:	4313      	orrs	r3, r2
 80082e0:	3401      	adds	r4, #1
 80082e2:	9304      	str	r3, [sp, #16]
 80082e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e8:	4824      	ldr	r0, [pc, #144]	@ (800837c <_svfiprintf_r+0x1e8>)
 80082ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082ee:	2206      	movs	r2, #6
 80082f0:	f7f7 ff7e 	bl	80001f0 <memchr>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	d036      	beq.n	8008366 <_svfiprintf_r+0x1d2>
 80082f8:	4b21      	ldr	r3, [pc, #132]	@ (8008380 <_svfiprintf_r+0x1ec>)
 80082fa:	bb1b      	cbnz	r3, 8008344 <_svfiprintf_r+0x1b0>
 80082fc:	9b03      	ldr	r3, [sp, #12]
 80082fe:	3307      	adds	r3, #7
 8008300:	f023 0307 	bic.w	r3, r3, #7
 8008304:	3308      	adds	r3, #8
 8008306:	9303      	str	r3, [sp, #12]
 8008308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830a:	4433      	add	r3, r6
 800830c:	9309      	str	r3, [sp, #36]	@ 0x24
 800830e:	e76a      	b.n	80081e6 <_svfiprintf_r+0x52>
 8008310:	fb0c 3202 	mla	r2, ip, r2, r3
 8008314:	460c      	mov	r4, r1
 8008316:	2001      	movs	r0, #1
 8008318:	e7a8      	b.n	800826c <_svfiprintf_r+0xd8>
 800831a:	2300      	movs	r3, #0
 800831c:	3401      	adds	r4, #1
 800831e:	9305      	str	r3, [sp, #20]
 8008320:	4619      	mov	r1, r3
 8008322:	f04f 0c0a 	mov.w	ip, #10
 8008326:	4620      	mov	r0, r4
 8008328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800832c:	3a30      	subs	r2, #48	@ 0x30
 800832e:	2a09      	cmp	r2, #9
 8008330:	d903      	bls.n	800833a <_svfiprintf_r+0x1a6>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c6      	beq.n	80082c4 <_svfiprintf_r+0x130>
 8008336:	9105      	str	r1, [sp, #20]
 8008338:	e7c4      	b.n	80082c4 <_svfiprintf_r+0x130>
 800833a:	fb0c 2101 	mla	r1, ip, r1, r2
 800833e:	4604      	mov	r4, r0
 8008340:	2301      	movs	r3, #1
 8008342:	e7f0      	b.n	8008326 <_svfiprintf_r+0x192>
 8008344:	ab03      	add	r3, sp, #12
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	462a      	mov	r2, r5
 800834a:	4b0e      	ldr	r3, [pc, #56]	@ (8008384 <_svfiprintf_r+0x1f0>)
 800834c:	a904      	add	r1, sp, #16
 800834e:	4638      	mov	r0, r7
 8008350:	f7fd fe96 	bl	8006080 <_printf_float>
 8008354:	1c42      	adds	r2, r0, #1
 8008356:	4606      	mov	r6, r0
 8008358:	d1d6      	bne.n	8008308 <_svfiprintf_r+0x174>
 800835a:	89ab      	ldrh	r3, [r5, #12]
 800835c:	065b      	lsls	r3, r3, #25
 800835e:	f53f af2d 	bmi.w	80081bc <_svfiprintf_r+0x28>
 8008362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008364:	e72c      	b.n	80081c0 <_svfiprintf_r+0x2c>
 8008366:	ab03      	add	r3, sp, #12
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	462a      	mov	r2, r5
 800836c:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <_svfiprintf_r+0x1f0>)
 800836e:	a904      	add	r1, sp, #16
 8008370:	4638      	mov	r0, r7
 8008372:	f7fe f91d 	bl	80065b0 <_printf_i>
 8008376:	e7ed      	b.n	8008354 <_svfiprintf_r+0x1c0>
 8008378:	0800a8f8 	.word	0x0800a8f8
 800837c:	0800a902 	.word	0x0800a902
 8008380:	08006081 	.word	0x08006081
 8008384:	080080dd 	.word	0x080080dd
 8008388:	0800a8fe 	.word	0x0800a8fe

0800838c <__sflush_r>:
 800838c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008394:	0716      	lsls	r6, r2, #28
 8008396:	4605      	mov	r5, r0
 8008398:	460c      	mov	r4, r1
 800839a:	d454      	bmi.n	8008446 <__sflush_r+0xba>
 800839c:	684b      	ldr	r3, [r1, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	dc02      	bgt.n	80083a8 <__sflush_r+0x1c>
 80083a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dd48      	ble.n	800843a <__sflush_r+0xae>
 80083a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083aa:	2e00      	cmp	r6, #0
 80083ac:	d045      	beq.n	800843a <__sflush_r+0xae>
 80083ae:	2300      	movs	r3, #0
 80083b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083b4:	682f      	ldr	r7, [r5, #0]
 80083b6:	6a21      	ldr	r1, [r4, #32]
 80083b8:	602b      	str	r3, [r5, #0]
 80083ba:	d030      	beq.n	800841e <__sflush_r+0x92>
 80083bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083be:	89a3      	ldrh	r3, [r4, #12]
 80083c0:	0759      	lsls	r1, r3, #29
 80083c2:	d505      	bpl.n	80083d0 <__sflush_r+0x44>
 80083c4:	6863      	ldr	r3, [r4, #4]
 80083c6:	1ad2      	subs	r2, r2, r3
 80083c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083ca:	b10b      	cbz	r3, 80083d0 <__sflush_r+0x44>
 80083cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	2300      	movs	r3, #0
 80083d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083d4:	6a21      	ldr	r1, [r4, #32]
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b0      	blx	r6
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	d106      	bne.n	80083ee <__sflush_r+0x62>
 80083e0:	6829      	ldr	r1, [r5, #0]
 80083e2:	291d      	cmp	r1, #29
 80083e4:	d82b      	bhi.n	800843e <__sflush_r+0xb2>
 80083e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008490 <__sflush_r+0x104>)
 80083e8:	410a      	asrs	r2, r1
 80083ea:	07d6      	lsls	r6, r2, #31
 80083ec:	d427      	bmi.n	800843e <__sflush_r+0xb2>
 80083ee:	2200      	movs	r2, #0
 80083f0:	6062      	str	r2, [r4, #4]
 80083f2:	04d9      	lsls	r1, r3, #19
 80083f4:	6922      	ldr	r2, [r4, #16]
 80083f6:	6022      	str	r2, [r4, #0]
 80083f8:	d504      	bpl.n	8008404 <__sflush_r+0x78>
 80083fa:	1c42      	adds	r2, r0, #1
 80083fc:	d101      	bne.n	8008402 <__sflush_r+0x76>
 80083fe:	682b      	ldr	r3, [r5, #0]
 8008400:	b903      	cbnz	r3, 8008404 <__sflush_r+0x78>
 8008402:	6560      	str	r0, [r4, #84]	@ 0x54
 8008404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008406:	602f      	str	r7, [r5, #0]
 8008408:	b1b9      	cbz	r1, 800843a <__sflush_r+0xae>
 800840a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800840e:	4299      	cmp	r1, r3
 8008410:	d002      	beq.n	8008418 <__sflush_r+0x8c>
 8008412:	4628      	mov	r0, r5
 8008414:	f7ff f9e0 	bl	80077d8 <_free_r>
 8008418:	2300      	movs	r3, #0
 800841a:	6363      	str	r3, [r4, #52]	@ 0x34
 800841c:	e00d      	b.n	800843a <__sflush_r+0xae>
 800841e:	2301      	movs	r3, #1
 8008420:	4628      	mov	r0, r5
 8008422:	47b0      	blx	r6
 8008424:	4602      	mov	r2, r0
 8008426:	1c50      	adds	r0, r2, #1
 8008428:	d1c9      	bne.n	80083be <__sflush_r+0x32>
 800842a:	682b      	ldr	r3, [r5, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d0c6      	beq.n	80083be <__sflush_r+0x32>
 8008430:	2b1d      	cmp	r3, #29
 8008432:	d001      	beq.n	8008438 <__sflush_r+0xac>
 8008434:	2b16      	cmp	r3, #22
 8008436:	d11e      	bne.n	8008476 <__sflush_r+0xea>
 8008438:	602f      	str	r7, [r5, #0]
 800843a:	2000      	movs	r0, #0
 800843c:	e022      	b.n	8008484 <__sflush_r+0xf8>
 800843e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008442:	b21b      	sxth	r3, r3
 8008444:	e01b      	b.n	800847e <__sflush_r+0xf2>
 8008446:	690f      	ldr	r7, [r1, #16]
 8008448:	2f00      	cmp	r7, #0
 800844a:	d0f6      	beq.n	800843a <__sflush_r+0xae>
 800844c:	0793      	lsls	r3, r2, #30
 800844e:	680e      	ldr	r6, [r1, #0]
 8008450:	bf08      	it	eq
 8008452:	694b      	ldreq	r3, [r1, #20]
 8008454:	600f      	str	r7, [r1, #0]
 8008456:	bf18      	it	ne
 8008458:	2300      	movne	r3, #0
 800845a:	eba6 0807 	sub.w	r8, r6, r7
 800845e:	608b      	str	r3, [r1, #8]
 8008460:	f1b8 0f00 	cmp.w	r8, #0
 8008464:	dde9      	ble.n	800843a <__sflush_r+0xae>
 8008466:	6a21      	ldr	r1, [r4, #32]
 8008468:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800846a:	4643      	mov	r3, r8
 800846c:	463a      	mov	r2, r7
 800846e:	4628      	mov	r0, r5
 8008470:	47b0      	blx	r6
 8008472:	2800      	cmp	r0, #0
 8008474:	dc08      	bgt.n	8008488 <__sflush_r+0xfc>
 8008476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008488:	4407      	add	r7, r0
 800848a:	eba8 0800 	sub.w	r8, r8, r0
 800848e:	e7e7      	b.n	8008460 <__sflush_r+0xd4>
 8008490:	dfbffffe 	.word	0xdfbffffe

08008494 <_fflush_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	690b      	ldr	r3, [r1, #16]
 8008498:	4605      	mov	r5, r0
 800849a:	460c      	mov	r4, r1
 800849c:	b913      	cbnz	r3, 80084a4 <_fflush_r+0x10>
 800849e:	2500      	movs	r5, #0
 80084a0:	4628      	mov	r0, r5
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	b118      	cbz	r0, 80084ae <_fflush_r+0x1a>
 80084a6:	6a03      	ldr	r3, [r0, #32]
 80084a8:	b90b      	cbnz	r3, 80084ae <_fflush_r+0x1a>
 80084aa:	f7fe fa2d 	bl	8006908 <__sinit>
 80084ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f3      	beq.n	800849e <_fflush_r+0xa>
 80084b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084b8:	07d0      	lsls	r0, r2, #31
 80084ba:	d404      	bmi.n	80084c6 <_fflush_r+0x32>
 80084bc:	0599      	lsls	r1, r3, #22
 80084be:	d402      	bmi.n	80084c6 <_fflush_r+0x32>
 80084c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084c2:	f7fe fb38 	bl	8006b36 <__retarget_lock_acquire_recursive>
 80084c6:	4628      	mov	r0, r5
 80084c8:	4621      	mov	r1, r4
 80084ca:	f7ff ff5f 	bl	800838c <__sflush_r>
 80084ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084d0:	07da      	lsls	r2, r3, #31
 80084d2:	4605      	mov	r5, r0
 80084d4:	d4e4      	bmi.n	80084a0 <_fflush_r+0xc>
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	059b      	lsls	r3, r3, #22
 80084da:	d4e1      	bmi.n	80084a0 <_fflush_r+0xc>
 80084dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084de:	f7fe fb2b 	bl	8006b38 <__retarget_lock_release_recursive>
 80084e2:	e7dd      	b.n	80084a0 <_fflush_r+0xc>

080084e4 <memmove>:
 80084e4:	4288      	cmp	r0, r1
 80084e6:	b510      	push	{r4, lr}
 80084e8:	eb01 0402 	add.w	r4, r1, r2
 80084ec:	d902      	bls.n	80084f4 <memmove+0x10>
 80084ee:	4284      	cmp	r4, r0
 80084f0:	4623      	mov	r3, r4
 80084f2:	d807      	bhi.n	8008504 <memmove+0x20>
 80084f4:	1e43      	subs	r3, r0, #1
 80084f6:	42a1      	cmp	r1, r4
 80084f8:	d008      	beq.n	800850c <memmove+0x28>
 80084fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008502:	e7f8      	b.n	80084f6 <memmove+0x12>
 8008504:	4402      	add	r2, r0
 8008506:	4601      	mov	r1, r0
 8008508:	428a      	cmp	r2, r1
 800850a:	d100      	bne.n	800850e <memmove+0x2a>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008516:	e7f7      	b.n	8008508 <memmove+0x24>

08008518 <_sbrk_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d06      	ldr	r5, [pc, #24]	@ (8008534 <_sbrk_r+0x1c>)
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	4608      	mov	r0, r1
 8008522:	602b      	str	r3, [r5, #0]
 8008524:	f7f8 feba 	bl	800129c <_sbrk>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_sbrk_r+0x1a>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_sbrk_r+0x1a>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	20000608 	.word	0x20000608

08008538 <memcpy>:
 8008538:	440a      	add	r2, r1
 800853a:	4291      	cmp	r1, r2
 800853c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008540:	d100      	bne.n	8008544 <memcpy+0xc>
 8008542:	4770      	bx	lr
 8008544:	b510      	push	{r4, lr}
 8008546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800854e:	4291      	cmp	r1, r2
 8008550:	d1f9      	bne.n	8008546 <memcpy+0xe>
 8008552:	bd10      	pop	{r4, pc}

08008554 <__assert_func>:
 8008554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008556:	4614      	mov	r4, r2
 8008558:	461a      	mov	r2, r3
 800855a:	4b09      	ldr	r3, [pc, #36]	@ (8008580 <__assert_func+0x2c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4605      	mov	r5, r0
 8008560:	68d8      	ldr	r0, [r3, #12]
 8008562:	b954      	cbnz	r4, 800857a <__assert_func+0x26>
 8008564:	4b07      	ldr	r3, [pc, #28]	@ (8008584 <__assert_func+0x30>)
 8008566:	461c      	mov	r4, r3
 8008568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800856c:	9100      	str	r1, [sp, #0]
 800856e:	462b      	mov	r3, r5
 8008570:	4905      	ldr	r1, [pc, #20]	@ (8008588 <__assert_func+0x34>)
 8008572:	f000 f86f 	bl	8008654 <fiprintf>
 8008576:	f000 f87f 	bl	8008678 <abort>
 800857a:	4b04      	ldr	r3, [pc, #16]	@ (800858c <__assert_func+0x38>)
 800857c:	e7f4      	b.n	8008568 <__assert_func+0x14>
 800857e:	bf00      	nop
 8008580:	20000094 	.word	0x20000094
 8008584:	0800a94e 	.word	0x0800a94e
 8008588:	0800a920 	.word	0x0800a920
 800858c:	0800a913 	.word	0x0800a913

08008590 <_calloc_r>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	fba1 5402 	umull	r5, r4, r1, r2
 8008596:	b93c      	cbnz	r4, 80085a8 <_calloc_r+0x18>
 8008598:	4629      	mov	r1, r5
 800859a:	f7ff f991 	bl	80078c0 <_malloc_r>
 800859e:	4606      	mov	r6, r0
 80085a0:	b928      	cbnz	r0, 80085ae <_calloc_r+0x1e>
 80085a2:	2600      	movs	r6, #0
 80085a4:	4630      	mov	r0, r6
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	220c      	movs	r2, #12
 80085aa:	6002      	str	r2, [r0, #0]
 80085ac:	e7f9      	b.n	80085a2 <_calloc_r+0x12>
 80085ae:	462a      	mov	r2, r5
 80085b0:	4621      	mov	r1, r4
 80085b2:	f7fe fa42 	bl	8006a3a <memset>
 80085b6:	e7f5      	b.n	80085a4 <_calloc_r+0x14>

080085b8 <__ascii_mbtowc>:
 80085b8:	b082      	sub	sp, #8
 80085ba:	b901      	cbnz	r1, 80085be <__ascii_mbtowc+0x6>
 80085bc:	a901      	add	r1, sp, #4
 80085be:	b142      	cbz	r2, 80085d2 <__ascii_mbtowc+0x1a>
 80085c0:	b14b      	cbz	r3, 80085d6 <__ascii_mbtowc+0x1e>
 80085c2:	7813      	ldrb	r3, [r2, #0]
 80085c4:	600b      	str	r3, [r1, #0]
 80085c6:	7812      	ldrb	r2, [r2, #0]
 80085c8:	1e10      	subs	r0, r2, #0
 80085ca:	bf18      	it	ne
 80085cc:	2001      	movne	r0, #1
 80085ce:	b002      	add	sp, #8
 80085d0:	4770      	bx	lr
 80085d2:	4610      	mov	r0, r2
 80085d4:	e7fb      	b.n	80085ce <__ascii_mbtowc+0x16>
 80085d6:	f06f 0001 	mvn.w	r0, #1
 80085da:	e7f8      	b.n	80085ce <__ascii_mbtowc+0x16>

080085dc <_realloc_r>:
 80085dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e0:	4680      	mov	r8, r0
 80085e2:	4615      	mov	r5, r2
 80085e4:	460c      	mov	r4, r1
 80085e6:	b921      	cbnz	r1, 80085f2 <_realloc_r+0x16>
 80085e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ec:	4611      	mov	r1, r2
 80085ee:	f7ff b967 	b.w	80078c0 <_malloc_r>
 80085f2:	b92a      	cbnz	r2, 8008600 <_realloc_r+0x24>
 80085f4:	f7ff f8f0 	bl	80077d8 <_free_r>
 80085f8:	2400      	movs	r4, #0
 80085fa:	4620      	mov	r0, r4
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008600:	f000 f841 	bl	8008686 <_malloc_usable_size_r>
 8008604:	4285      	cmp	r5, r0
 8008606:	4606      	mov	r6, r0
 8008608:	d802      	bhi.n	8008610 <_realloc_r+0x34>
 800860a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800860e:	d8f4      	bhi.n	80085fa <_realloc_r+0x1e>
 8008610:	4629      	mov	r1, r5
 8008612:	4640      	mov	r0, r8
 8008614:	f7ff f954 	bl	80078c0 <_malloc_r>
 8008618:	4607      	mov	r7, r0
 800861a:	2800      	cmp	r0, #0
 800861c:	d0ec      	beq.n	80085f8 <_realloc_r+0x1c>
 800861e:	42b5      	cmp	r5, r6
 8008620:	462a      	mov	r2, r5
 8008622:	4621      	mov	r1, r4
 8008624:	bf28      	it	cs
 8008626:	4632      	movcs	r2, r6
 8008628:	f7ff ff86 	bl	8008538 <memcpy>
 800862c:	4621      	mov	r1, r4
 800862e:	4640      	mov	r0, r8
 8008630:	f7ff f8d2 	bl	80077d8 <_free_r>
 8008634:	463c      	mov	r4, r7
 8008636:	e7e0      	b.n	80085fa <_realloc_r+0x1e>

08008638 <__ascii_wctomb>:
 8008638:	4603      	mov	r3, r0
 800863a:	4608      	mov	r0, r1
 800863c:	b141      	cbz	r1, 8008650 <__ascii_wctomb+0x18>
 800863e:	2aff      	cmp	r2, #255	@ 0xff
 8008640:	d904      	bls.n	800864c <__ascii_wctomb+0x14>
 8008642:	228a      	movs	r2, #138	@ 0x8a
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	4770      	bx	lr
 800864c:	700a      	strb	r2, [r1, #0]
 800864e:	2001      	movs	r0, #1
 8008650:	4770      	bx	lr
	...

08008654 <fiprintf>:
 8008654:	b40e      	push	{r1, r2, r3}
 8008656:	b503      	push	{r0, r1, lr}
 8008658:	4601      	mov	r1, r0
 800865a:	ab03      	add	r3, sp, #12
 800865c:	4805      	ldr	r0, [pc, #20]	@ (8008674 <fiprintf+0x20>)
 800865e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008662:	6800      	ldr	r0, [r0, #0]
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	f000 f83f 	bl	80086e8 <_vfiprintf_r>
 800866a:	b002      	add	sp, #8
 800866c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008670:	b003      	add	sp, #12
 8008672:	4770      	bx	lr
 8008674:	20000094 	.word	0x20000094

08008678 <abort>:
 8008678:	b508      	push	{r3, lr}
 800867a:	2006      	movs	r0, #6
 800867c:	f000 fa08 	bl	8008a90 <raise>
 8008680:	2001      	movs	r0, #1
 8008682:	f7f8 fd92 	bl	80011aa <_exit>

08008686 <_malloc_usable_size_r>:
 8008686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868a:	1f18      	subs	r0, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	bfbc      	itt	lt
 8008690:	580b      	ldrlt	r3, [r1, r0]
 8008692:	18c0      	addlt	r0, r0, r3
 8008694:	4770      	bx	lr

08008696 <__sfputc_r>:
 8008696:	6893      	ldr	r3, [r2, #8]
 8008698:	3b01      	subs	r3, #1
 800869a:	2b00      	cmp	r3, #0
 800869c:	b410      	push	{r4}
 800869e:	6093      	str	r3, [r2, #8]
 80086a0:	da08      	bge.n	80086b4 <__sfputc_r+0x1e>
 80086a2:	6994      	ldr	r4, [r2, #24]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	db01      	blt.n	80086ac <__sfputc_r+0x16>
 80086a8:	290a      	cmp	r1, #10
 80086aa:	d103      	bne.n	80086b4 <__sfputc_r+0x1e>
 80086ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086b0:	f000 b932 	b.w	8008918 <__swbuf_r>
 80086b4:	6813      	ldr	r3, [r2, #0]
 80086b6:	1c58      	adds	r0, r3, #1
 80086b8:	6010      	str	r0, [r2, #0]
 80086ba:	7019      	strb	r1, [r3, #0]
 80086bc:	4608      	mov	r0, r1
 80086be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <__sfputs_r>:
 80086c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c6:	4606      	mov	r6, r0
 80086c8:	460f      	mov	r7, r1
 80086ca:	4614      	mov	r4, r2
 80086cc:	18d5      	adds	r5, r2, r3
 80086ce:	42ac      	cmp	r4, r5
 80086d0:	d101      	bne.n	80086d6 <__sfputs_r+0x12>
 80086d2:	2000      	movs	r0, #0
 80086d4:	e007      	b.n	80086e6 <__sfputs_r+0x22>
 80086d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086da:	463a      	mov	r2, r7
 80086dc:	4630      	mov	r0, r6
 80086de:	f7ff ffda 	bl	8008696 <__sfputc_r>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d1f3      	bne.n	80086ce <__sfputs_r+0xa>
 80086e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086e8 <_vfiprintf_r>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	460d      	mov	r5, r1
 80086ee:	b09d      	sub	sp, #116	@ 0x74
 80086f0:	4614      	mov	r4, r2
 80086f2:	4698      	mov	r8, r3
 80086f4:	4606      	mov	r6, r0
 80086f6:	b118      	cbz	r0, 8008700 <_vfiprintf_r+0x18>
 80086f8:	6a03      	ldr	r3, [r0, #32]
 80086fa:	b90b      	cbnz	r3, 8008700 <_vfiprintf_r+0x18>
 80086fc:	f7fe f904 	bl	8006908 <__sinit>
 8008700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008702:	07d9      	lsls	r1, r3, #31
 8008704:	d405      	bmi.n	8008712 <_vfiprintf_r+0x2a>
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	059a      	lsls	r2, r3, #22
 800870a:	d402      	bmi.n	8008712 <_vfiprintf_r+0x2a>
 800870c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800870e:	f7fe fa12 	bl	8006b36 <__retarget_lock_acquire_recursive>
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	071b      	lsls	r3, r3, #28
 8008716:	d501      	bpl.n	800871c <_vfiprintf_r+0x34>
 8008718:	692b      	ldr	r3, [r5, #16]
 800871a:	b99b      	cbnz	r3, 8008744 <_vfiprintf_r+0x5c>
 800871c:	4629      	mov	r1, r5
 800871e:	4630      	mov	r0, r6
 8008720:	f000 f938 	bl	8008994 <__swsetup_r>
 8008724:	b170      	cbz	r0, 8008744 <_vfiprintf_r+0x5c>
 8008726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008728:	07dc      	lsls	r4, r3, #31
 800872a:	d504      	bpl.n	8008736 <_vfiprintf_r+0x4e>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b01d      	add	sp, #116	@ 0x74
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	0598      	lsls	r0, r3, #22
 800873a:	d4f7      	bmi.n	800872c <_vfiprintf_r+0x44>
 800873c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800873e:	f7fe f9fb 	bl	8006b38 <__retarget_lock_release_recursive>
 8008742:	e7f3      	b.n	800872c <_vfiprintf_r+0x44>
 8008744:	2300      	movs	r3, #0
 8008746:	9309      	str	r3, [sp, #36]	@ 0x24
 8008748:	2320      	movs	r3, #32
 800874a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800874e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008752:	2330      	movs	r3, #48	@ 0x30
 8008754:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008904 <_vfiprintf_r+0x21c>
 8008758:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800875c:	f04f 0901 	mov.w	r9, #1
 8008760:	4623      	mov	r3, r4
 8008762:	469a      	mov	sl, r3
 8008764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008768:	b10a      	cbz	r2, 800876e <_vfiprintf_r+0x86>
 800876a:	2a25      	cmp	r2, #37	@ 0x25
 800876c:	d1f9      	bne.n	8008762 <_vfiprintf_r+0x7a>
 800876e:	ebba 0b04 	subs.w	fp, sl, r4
 8008772:	d00b      	beq.n	800878c <_vfiprintf_r+0xa4>
 8008774:	465b      	mov	r3, fp
 8008776:	4622      	mov	r2, r4
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ffa2 	bl	80086c4 <__sfputs_r>
 8008780:	3001      	adds	r0, #1
 8008782:	f000 80a7 	beq.w	80088d4 <_vfiprintf_r+0x1ec>
 8008786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008788:	445a      	add	r2, fp
 800878a:	9209      	str	r2, [sp, #36]	@ 0x24
 800878c:	f89a 3000 	ldrb.w	r3, [sl]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 809f 	beq.w	80088d4 <_vfiprintf_r+0x1ec>
 8008796:	2300      	movs	r3, #0
 8008798:	f04f 32ff 	mov.w	r2, #4294967295
 800879c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087a0:	f10a 0a01 	add.w	sl, sl, #1
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	9307      	str	r3, [sp, #28]
 80087a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ae:	4654      	mov	r4, sl
 80087b0:	2205      	movs	r2, #5
 80087b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b6:	4853      	ldr	r0, [pc, #332]	@ (8008904 <_vfiprintf_r+0x21c>)
 80087b8:	f7f7 fd1a 	bl	80001f0 <memchr>
 80087bc:	9a04      	ldr	r2, [sp, #16]
 80087be:	b9d8      	cbnz	r0, 80087f8 <_vfiprintf_r+0x110>
 80087c0:	06d1      	lsls	r1, r2, #27
 80087c2:	bf44      	itt	mi
 80087c4:	2320      	movmi	r3, #32
 80087c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ca:	0713      	lsls	r3, r2, #28
 80087cc:	bf44      	itt	mi
 80087ce:	232b      	movmi	r3, #43	@ 0x2b
 80087d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d4:	f89a 3000 	ldrb.w	r3, [sl]
 80087d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80087da:	d015      	beq.n	8008808 <_vfiprintf_r+0x120>
 80087dc:	9a07      	ldr	r2, [sp, #28]
 80087de:	4654      	mov	r4, sl
 80087e0:	2000      	movs	r0, #0
 80087e2:	f04f 0c0a 	mov.w	ip, #10
 80087e6:	4621      	mov	r1, r4
 80087e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ec:	3b30      	subs	r3, #48	@ 0x30
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d94b      	bls.n	800888a <_vfiprintf_r+0x1a2>
 80087f2:	b1b0      	cbz	r0, 8008822 <_vfiprintf_r+0x13a>
 80087f4:	9207      	str	r2, [sp, #28]
 80087f6:	e014      	b.n	8008822 <_vfiprintf_r+0x13a>
 80087f8:	eba0 0308 	sub.w	r3, r0, r8
 80087fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008800:	4313      	orrs	r3, r2
 8008802:	9304      	str	r3, [sp, #16]
 8008804:	46a2      	mov	sl, r4
 8008806:	e7d2      	b.n	80087ae <_vfiprintf_r+0xc6>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	1d19      	adds	r1, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	9103      	str	r1, [sp, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	bfbb      	ittet	lt
 8008814:	425b      	neglt	r3, r3
 8008816:	f042 0202 	orrlt.w	r2, r2, #2
 800881a:	9307      	strge	r3, [sp, #28]
 800881c:	9307      	strlt	r3, [sp, #28]
 800881e:	bfb8      	it	lt
 8008820:	9204      	strlt	r2, [sp, #16]
 8008822:	7823      	ldrb	r3, [r4, #0]
 8008824:	2b2e      	cmp	r3, #46	@ 0x2e
 8008826:	d10a      	bne.n	800883e <_vfiprintf_r+0x156>
 8008828:	7863      	ldrb	r3, [r4, #1]
 800882a:	2b2a      	cmp	r3, #42	@ 0x2a
 800882c:	d132      	bne.n	8008894 <_vfiprintf_r+0x1ac>
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	1d1a      	adds	r2, r3, #4
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	9203      	str	r2, [sp, #12]
 8008836:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800883a:	3402      	adds	r4, #2
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008914 <_vfiprintf_r+0x22c>
 8008842:	7821      	ldrb	r1, [r4, #0]
 8008844:	2203      	movs	r2, #3
 8008846:	4650      	mov	r0, sl
 8008848:	f7f7 fcd2 	bl	80001f0 <memchr>
 800884c:	b138      	cbz	r0, 800885e <_vfiprintf_r+0x176>
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	eba0 000a 	sub.w	r0, r0, sl
 8008854:	2240      	movs	r2, #64	@ 0x40
 8008856:	4082      	lsls	r2, r0
 8008858:	4313      	orrs	r3, r2
 800885a:	3401      	adds	r4, #1
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008862:	4829      	ldr	r0, [pc, #164]	@ (8008908 <_vfiprintf_r+0x220>)
 8008864:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008868:	2206      	movs	r2, #6
 800886a:	f7f7 fcc1 	bl	80001f0 <memchr>
 800886e:	2800      	cmp	r0, #0
 8008870:	d03f      	beq.n	80088f2 <_vfiprintf_r+0x20a>
 8008872:	4b26      	ldr	r3, [pc, #152]	@ (800890c <_vfiprintf_r+0x224>)
 8008874:	bb1b      	cbnz	r3, 80088be <_vfiprintf_r+0x1d6>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	3307      	adds	r3, #7
 800887a:	f023 0307 	bic.w	r3, r3, #7
 800887e:	3308      	adds	r3, #8
 8008880:	9303      	str	r3, [sp, #12]
 8008882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008884:	443b      	add	r3, r7
 8008886:	9309      	str	r3, [sp, #36]	@ 0x24
 8008888:	e76a      	b.n	8008760 <_vfiprintf_r+0x78>
 800888a:	fb0c 3202 	mla	r2, ip, r2, r3
 800888e:	460c      	mov	r4, r1
 8008890:	2001      	movs	r0, #1
 8008892:	e7a8      	b.n	80087e6 <_vfiprintf_r+0xfe>
 8008894:	2300      	movs	r3, #0
 8008896:	3401      	adds	r4, #1
 8008898:	9305      	str	r3, [sp, #20]
 800889a:	4619      	mov	r1, r3
 800889c:	f04f 0c0a 	mov.w	ip, #10
 80088a0:	4620      	mov	r0, r4
 80088a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a6:	3a30      	subs	r2, #48	@ 0x30
 80088a8:	2a09      	cmp	r2, #9
 80088aa:	d903      	bls.n	80088b4 <_vfiprintf_r+0x1cc>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0c6      	beq.n	800883e <_vfiprintf_r+0x156>
 80088b0:	9105      	str	r1, [sp, #20]
 80088b2:	e7c4      	b.n	800883e <_vfiprintf_r+0x156>
 80088b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b8:	4604      	mov	r4, r0
 80088ba:	2301      	movs	r3, #1
 80088bc:	e7f0      	b.n	80088a0 <_vfiprintf_r+0x1b8>
 80088be:	ab03      	add	r3, sp, #12
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	462a      	mov	r2, r5
 80088c4:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <_vfiprintf_r+0x228>)
 80088c6:	a904      	add	r1, sp, #16
 80088c8:	4630      	mov	r0, r6
 80088ca:	f7fd fbd9 	bl	8006080 <_printf_float>
 80088ce:	4607      	mov	r7, r0
 80088d0:	1c78      	adds	r0, r7, #1
 80088d2:	d1d6      	bne.n	8008882 <_vfiprintf_r+0x19a>
 80088d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088d6:	07d9      	lsls	r1, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_vfiprintf_r+0x1fe>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	059a      	lsls	r2, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_vfiprintf_r+0x1fe>
 80088e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088e2:	f7fe f929 	bl	8006b38 <__retarget_lock_release_recursive>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	065b      	lsls	r3, r3, #25
 80088ea:	f53f af1f 	bmi.w	800872c <_vfiprintf_r+0x44>
 80088ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f0:	e71e      	b.n	8008730 <_vfiprintf_r+0x48>
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	462a      	mov	r2, r5
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <_vfiprintf_r+0x228>)
 80088fa:	a904      	add	r1, sp, #16
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7fd fe57 	bl	80065b0 <_printf_i>
 8008902:	e7e4      	b.n	80088ce <_vfiprintf_r+0x1e6>
 8008904:	0800a8f8 	.word	0x0800a8f8
 8008908:	0800a902 	.word	0x0800a902
 800890c:	08006081 	.word	0x08006081
 8008910:	080086c5 	.word	0x080086c5
 8008914:	0800a8fe 	.word	0x0800a8fe

08008918 <__swbuf_r>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	460e      	mov	r6, r1
 800891c:	4614      	mov	r4, r2
 800891e:	4605      	mov	r5, r0
 8008920:	b118      	cbz	r0, 800892a <__swbuf_r+0x12>
 8008922:	6a03      	ldr	r3, [r0, #32]
 8008924:	b90b      	cbnz	r3, 800892a <__swbuf_r+0x12>
 8008926:	f7fd ffef 	bl	8006908 <__sinit>
 800892a:	69a3      	ldr	r3, [r4, #24]
 800892c:	60a3      	str	r3, [r4, #8]
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	071a      	lsls	r2, r3, #28
 8008932:	d501      	bpl.n	8008938 <__swbuf_r+0x20>
 8008934:	6923      	ldr	r3, [r4, #16]
 8008936:	b943      	cbnz	r3, 800894a <__swbuf_r+0x32>
 8008938:	4621      	mov	r1, r4
 800893a:	4628      	mov	r0, r5
 800893c:	f000 f82a 	bl	8008994 <__swsetup_r>
 8008940:	b118      	cbz	r0, 800894a <__swbuf_r+0x32>
 8008942:	f04f 37ff 	mov.w	r7, #4294967295
 8008946:	4638      	mov	r0, r7
 8008948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800894a:	6823      	ldr	r3, [r4, #0]
 800894c:	6922      	ldr	r2, [r4, #16]
 800894e:	1a98      	subs	r0, r3, r2
 8008950:	6963      	ldr	r3, [r4, #20]
 8008952:	b2f6      	uxtb	r6, r6
 8008954:	4283      	cmp	r3, r0
 8008956:	4637      	mov	r7, r6
 8008958:	dc05      	bgt.n	8008966 <__swbuf_r+0x4e>
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f7ff fd99 	bl	8008494 <_fflush_r>
 8008962:	2800      	cmp	r0, #0
 8008964:	d1ed      	bne.n	8008942 <__swbuf_r+0x2a>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	6022      	str	r2, [r4, #0]
 8008972:	701e      	strb	r6, [r3, #0]
 8008974:	6962      	ldr	r2, [r4, #20]
 8008976:	1c43      	adds	r3, r0, #1
 8008978:	429a      	cmp	r2, r3
 800897a:	d004      	beq.n	8008986 <__swbuf_r+0x6e>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	07db      	lsls	r3, r3, #31
 8008980:	d5e1      	bpl.n	8008946 <__swbuf_r+0x2e>
 8008982:	2e0a      	cmp	r6, #10
 8008984:	d1df      	bne.n	8008946 <__swbuf_r+0x2e>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f7ff fd83 	bl	8008494 <_fflush_r>
 800898e:	2800      	cmp	r0, #0
 8008990:	d0d9      	beq.n	8008946 <__swbuf_r+0x2e>
 8008992:	e7d6      	b.n	8008942 <__swbuf_r+0x2a>

08008994 <__swsetup_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4b29      	ldr	r3, [pc, #164]	@ (8008a3c <__swsetup_r+0xa8>)
 8008998:	4605      	mov	r5, r0
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	460c      	mov	r4, r1
 800899e:	b118      	cbz	r0, 80089a8 <__swsetup_r+0x14>
 80089a0:	6a03      	ldr	r3, [r0, #32]
 80089a2:	b90b      	cbnz	r3, 80089a8 <__swsetup_r+0x14>
 80089a4:	f7fd ffb0 	bl	8006908 <__sinit>
 80089a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ac:	0719      	lsls	r1, r3, #28
 80089ae:	d422      	bmi.n	80089f6 <__swsetup_r+0x62>
 80089b0:	06da      	lsls	r2, r3, #27
 80089b2:	d407      	bmi.n	80089c4 <__swsetup_r+0x30>
 80089b4:	2209      	movs	r2, #9
 80089b6:	602a      	str	r2, [r5, #0]
 80089b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089bc:	81a3      	strh	r3, [r4, #12]
 80089be:	f04f 30ff 	mov.w	r0, #4294967295
 80089c2:	e033      	b.n	8008a2c <__swsetup_r+0x98>
 80089c4:	0758      	lsls	r0, r3, #29
 80089c6:	d512      	bpl.n	80089ee <__swsetup_r+0x5a>
 80089c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ca:	b141      	cbz	r1, 80089de <__swsetup_r+0x4a>
 80089cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089d0:	4299      	cmp	r1, r3
 80089d2:	d002      	beq.n	80089da <__swsetup_r+0x46>
 80089d4:	4628      	mov	r0, r5
 80089d6:	f7fe feff 	bl	80077d8 <_free_r>
 80089da:	2300      	movs	r3, #0
 80089dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089e4:	81a3      	strh	r3, [r4, #12]
 80089e6:	2300      	movs	r3, #0
 80089e8:	6063      	str	r3, [r4, #4]
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	6023      	str	r3, [r4, #0]
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	f043 0308 	orr.w	r3, r3, #8
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	6923      	ldr	r3, [r4, #16]
 80089f8:	b94b      	cbnz	r3, 8008a0e <__swsetup_r+0x7a>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a04:	d003      	beq.n	8008a0e <__swsetup_r+0x7a>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f883 	bl	8008b14 <__smakebuf_r>
 8008a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a12:	f013 0201 	ands.w	r2, r3, #1
 8008a16:	d00a      	beq.n	8008a2e <__swsetup_r+0x9a>
 8008a18:	2200      	movs	r2, #0
 8008a1a:	60a2      	str	r2, [r4, #8]
 8008a1c:	6962      	ldr	r2, [r4, #20]
 8008a1e:	4252      	negs	r2, r2
 8008a20:	61a2      	str	r2, [r4, #24]
 8008a22:	6922      	ldr	r2, [r4, #16]
 8008a24:	b942      	cbnz	r2, 8008a38 <__swsetup_r+0xa4>
 8008a26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a2a:	d1c5      	bne.n	80089b8 <__swsetup_r+0x24>
 8008a2c:	bd38      	pop	{r3, r4, r5, pc}
 8008a2e:	0799      	lsls	r1, r3, #30
 8008a30:	bf58      	it	pl
 8008a32:	6962      	ldrpl	r2, [r4, #20]
 8008a34:	60a2      	str	r2, [r4, #8]
 8008a36:	e7f4      	b.n	8008a22 <__swsetup_r+0x8e>
 8008a38:	2000      	movs	r0, #0
 8008a3a:	e7f7      	b.n	8008a2c <__swsetup_r+0x98>
 8008a3c:	20000094 	.word	0x20000094

08008a40 <_raise_r>:
 8008a40:	291f      	cmp	r1, #31
 8008a42:	b538      	push	{r3, r4, r5, lr}
 8008a44:	4605      	mov	r5, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	d904      	bls.n	8008a54 <_raise_r+0x14>
 8008a4a:	2316      	movs	r3, #22
 8008a4c:	6003      	str	r3, [r0, #0]
 8008a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a52:	bd38      	pop	{r3, r4, r5, pc}
 8008a54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a56:	b112      	cbz	r2, 8008a5e <_raise_r+0x1e>
 8008a58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a5c:	b94b      	cbnz	r3, 8008a72 <_raise_r+0x32>
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f000 f830 	bl	8008ac4 <_getpid_r>
 8008a64:	4622      	mov	r2, r4
 8008a66:	4601      	mov	r1, r0
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6e:	f000 b817 	b.w	8008aa0 <_kill_r>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d00a      	beq.n	8008a8c <_raise_r+0x4c>
 8008a76:	1c59      	adds	r1, r3, #1
 8008a78:	d103      	bne.n	8008a82 <_raise_r+0x42>
 8008a7a:	2316      	movs	r3, #22
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	2001      	movs	r0, #1
 8008a80:	e7e7      	b.n	8008a52 <_raise_r+0x12>
 8008a82:	2100      	movs	r1, #0
 8008a84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	4798      	blx	r3
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e7e0      	b.n	8008a52 <_raise_r+0x12>

08008a90 <raise>:
 8008a90:	4b02      	ldr	r3, [pc, #8]	@ (8008a9c <raise+0xc>)
 8008a92:	4601      	mov	r1, r0
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	f7ff bfd3 	b.w	8008a40 <_raise_r>
 8008a9a:	bf00      	nop
 8008a9c:	20000094 	.word	0x20000094

08008aa0 <_kill_r>:
 8008aa0:	b538      	push	{r3, r4, r5, lr}
 8008aa2:	4d07      	ldr	r5, [pc, #28]	@ (8008ac0 <_kill_r+0x20>)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	4604      	mov	r4, r0
 8008aa8:	4608      	mov	r0, r1
 8008aaa:	4611      	mov	r1, r2
 8008aac:	602b      	str	r3, [r5, #0]
 8008aae:	f7f8 fb6c 	bl	800118a <_kill>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	d102      	bne.n	8008abc <_kill_r+0x1c>
 8008ab6:	682b      	ldr	r3, [r5, #0]
 8008ab8:	b103      	cbz	r3, 8008abc <_kill_r+0x1c>
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	20000608 	.word	0x20000608

08008ac4 <_getpid_r>:
 8008ac4:	f7f8 bb59 	b.w	800117a <_getpid>

08008ac8 <__swhatbuf_r>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	460c      	mov	r4, r1
 8008acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	b096      	sub	sp, #88	@ 0x58
 8008ad4:	4615      	mov	r5, r2
 8008ad6:	461e      	mov	r6, r3
 8008ad8:	da0d      	bge.n	8008af6 <__swhatbuf_r+0x2e>
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ae0:	f04f 0100 	mov.w	r1, #0
 8008ae4:	bf14      	ite	ne
 8008ae6:	2340      	movne	r3, #64	@ 0x40
 8008ae8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008aec:	2000      	movs	r0, #0
 8008aee:	6031      	str	r1, [r6, #0]
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	b016      	add	sp, #88	@ 0x58
 8008af4:	bd70      	pop	{r4, r5, r6, pc}
 8008af6:	466a      	mov	r2, sp
 8008af8:	f000 f848 	bl	8008b8c <_fstat_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	dbec      	blt.n	8008ada <__swhatbuf_r+0x12>
 8008b00:	9901      	ldr	r1, [sp, #4]
 8008b02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b0a:	4259      	negs	r1, r3
 8008b0c:	4159      	adcs	r1, r3
 8008b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b12:	e7eb      	b.n	8008aec <__swhatbuf_r+0x24>

08008b14 <__smakebuf_r>:
 8008b14:	898b      	ldrh	r3, [r1, #12]
 8008b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b18:	079d      	lsls	r5, r3, #30
 8008b1a:	4606      	mov	r6, r0
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	d507      	bpl.n	8008b30 <__smakebuf_r+0x1c>
 8008b20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b24:	6023      	str	r3, [r4, #0]
 8008b26:	6123      	str	r3, [r4, #16]
 8008b28:	2301      	movs	r3, #1
 8008b2a:	6163      	str	r3, [r4, #20]
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b30:	ab01      	add	r3, sp, #4
 8008b32:	466a      	mov	r2, sp
 8008b34:	f7ff ffc8 	bl	8008ac8 <__swhatbuf_r>
 8008b38:	9f00      	ldr	r7, [sp, #0]
 8008b3a:	4605      	mov	r5, r0
 8008b3c:	4639      	mov	r1, r7
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7fe febe 	bl	80078c0 <_malloc_r>
 8008b44:	b948      	cbnz	r0, 8008b5a <__smakebuf_r+0x46>
 8008b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4a:	059a      	lsls	r2, r3, #22
 8008b4c:	d4ee      	bmi.n	8008b2c <__smakebuf_r+0x18>
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	f043 0302 	orr.w	r3, r3, #2
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	e7e2      	b.n	8008b20 <__smakebuf_r+0xc>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	6020      	str	r0, [r4, #0]
 8008b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b6a:	b15b      	cbz	r3, 8008b84 <__smakebuf_r+0x70>
 8008b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 f81d 	bl	8008bb0 <_isatty_r>
 8008b76:	b128      	cbz	r0, 8008b84 <__smakebuf_r+0x70>
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	89a3      	ldrh	r3, [r4, #12]
 8008b86:	431d      	orrs	r5, r3
 8008b88:	81a5      	strh	r5, [r4, #12]
 8008b8a:	e7cf      	b.n	8008b2c <__smakebuf_r+0x18>

08008b8c <_fstat_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4d07      	ldr	r5, [pc, #28]	@ (8008bac <_fstat_r+0x20>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	4604      	mov	r4, r0
 8008b94:	4608      	mov	r0, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	602b      	str	r3, [r5, #0]
 8008b9a:	f7f8 fb56 	bl	800124a <_fstat>
 8008b9e:	1c43      	adds	r3, r0, #1
 8008ba0:	d102      	bne.n	8008ba8 <_fstat_r+0x1c>
 8008ba2:	682b      	ldr	r3, [r5, #0]
 8008ba4:	b103      	cbz	r3, 8008ba8 <_fstat_r+0x1c>
 8008ba6:	6023      	str	r3, [r4, #0]
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	bf00      	nop
 8008bac:	20000608 	.word	0x20000608

08008bb0 <_isatty_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d06      	ldr	r5, [pc, #24]	@ (8008bcc <_isatty_r+0x1c>)
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	4608      	mov	r0, r1
 8008bba:	602b      	str	r3, [r5, #0]
 8008bbc:	f7f8 fb55 	bl	800126a <_isatty>
 8008bc0:	1c43      	adds	r3, r0, #1
 8008bc2:	d102      	bne.n	8008bca <_isatty_r+0x1a>
 8008bc4:	682b      	ldr	r3, [r5, #0]
 8008bc6:	b103      	cbz	r3, 8008bca <_isatty_r+0x1a>
 8008bc8:	6023      	str	r3, [r4, #0]
 8008bca:	bd38      	pop	{r3, r4, r5, pc}
 8008bcc:	20000608 	.word	0x20000608

08008bd0 <_init>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr

08008bdc <_fini>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr
