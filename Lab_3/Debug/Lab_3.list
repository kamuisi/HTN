
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab9c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bf4  0800ad4c  0800ad4c  0000bd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c940  0800c940  0000e194  2**0
                  CONTENTS
  4 .ARM          00000008  0800c940  0800c940  0000d940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c948  0800c948  0000e194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c948  0800c948  0000d948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c94c  0800c94c  0000d94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  0800c950  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e194  2**0
                  CONTENTS
 10 .bss          00001fb4  20000194  20000194  0000e194  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002148  20002148  0000e194  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e194  2**0
                  CONTENTS, READONLY
 13 .debug_info   000189d5  00000000  00000000  0000e1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043c3  00000000  00000000  00026b99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0002af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a9  00000000  00000000  0002c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287e1  00000000  00000000  0002d631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c81d  00000000  00000000  00055e12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1caf  00000000  00000000  0007262f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001542de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060cc  00000000  00000000  00154324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0015a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000194 	.word	0x20000194
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ad34 	.word	0x0800ad34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000198 	.word	0x20000198
 80001ec:	0800ad34 	.word	0x0800ad34

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f001 fc21 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f8bf 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 f927 	bl	8000800 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b2:	f009 f9e3 	bl	800997c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005b6:	f000 fdb7 	bl	8001128 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 80005ba:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fe34 	bl	800122c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f000 fe95 	bl	80012f4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 80005ca:	f001 f847 	bl	800165c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80005ce:	4849      	ldr	r0, [pc, #292]	@ (80006f4 <main+0x154>)
 80005d0:	f000 ff02 	bl	80013d8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 80005d4:	4847      	ldr	r0, [pc, #284]	@ (80006f4 <main+0x154>)
 80005d6:	f000 feb5 	bl	8001344 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80005da:	f04f 30ff 	mov.w	r0, #4294967295
 80005de:	f000 fe99 	bl	8001314 <BSP_LCD_SetTextColor>
  char text[15];
  sprintf(text, "Good evening, ");
 80005e2:	463b      	mov	r3, r7
 80005e4:	4944      	ldr	r1, [pc, #272]	@ (80006f8 <main+0x158>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f009 ff04 	bl	800a3f4 <siprintf>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t*)text);
 80005ec:	463b      	mov	r3, r7
 80005ee:	4619      	mov	r1, r3
 80005f0:	2001      	movs	r0, #1
 80005f2:	f001 f81b 	bl	800162c <BSP_LCD_DisplayStringAtLine>
  sprintf(text, "it's too dark");
 80005f6:	463b      	mov	r3, r7
 80005f8:	4940      	ldr	r1, [pc, #256]	@ (80006fc <main+0x15c>)
 80005fa:	4618      	mov	r0, r3
 80005fc:	f009 fefa 	bl	800a3f4 <siprintf>
  BSP_LCD_DisplayStringAtLine(2, (uint8_t*)text);
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	2002      	movs	r0, #2
 8000606:	f001 f811 	bl	800162c <BSP_LCD_DisplayStringAtLine>
  sprintf(text, "here");
 800060a:	463b      	mov	r3, r7
 800060c:	493c      	ldr	r1, [pc, #240]	@ (8000700 <main+0x160>)
 800060e:	4618      	mov	r0, r3
 8000610:	f009 fef0 	bl	800a3f4 <siprintf>
    BSP_LCD_DisplayStringAtLine(3, (uint8_t*)text);
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	2003      	movs	r0, #3
 800061a:	f001 f807 	bl	800162c <BSP_LCD_DisplayStringAtLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(strcmp(data, "Hello STM") == 0)
 800061e:	4939      	ldr	r1, [pc, #228]	@ (8000704 <main+0x164>)
 8000620:	4839      	ldr	r0, [pc, #228]	@ (8000708 <main+0x168>)
 8000622:	f7ff fde5 	bl	80001f0 <strcmp>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d1f8      	bne.n	800061e <main+0x7e>
	 {
		 BSP_LCD_Clear(LCD_COLOR_BLUE);
 800062c:	4831      	ldr	r0, [pc, #196]	@ (80006f4 <main+0x154>)
 800062e:	f000 fed3 	bl	80013d8 <BSP_LCD_Clear>
		 sprintf(text, "Do you want to");
 8000632:	463b      	mov	r3, r7
 8000634:	4935      	ldr	r1, [pc, #212]	@ (800070c <main+0x16c>)
 8000636:	4618      	mov	r0, r3
 8000638:	f009 fedc 	bl	800a3f4 <siprintf>
		 BSP_LCD_DisplayStringAtLine(1, (uint8_t*)text);
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fff3 	bl	800162c <BSP_LCD_DisplayStringAtLine>
		 sprintf(text, "turn on light");
 8000646:	463b      	mov	r3, r7
 8000648:	4931      	ldr	r1, [pc, #196]	@ (8000710 <main+0x170>)
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fed2 	bl	800a3f4 <siprintf>
		   BSP_LCD_DisplayStringAtLine(2, (uint8_t*)text);
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	2002      	movs	r0, #2
 8000656:	f000 ffe9 	bl	800162c <BSP_LCD_DisplayStringAtLine>
		 while(1)
		 {
			 if (strcmp(data, "Turn on LED 3") == 0) {
 800065a:	492e      	ldr	r1, [pc, #184]	@ (8000714 <main+0x174>)
 800065c:	482a      	ldr	r0, [pc, #168]	@ (8000708 <main+0x168>)
 800065e:	f7ff fdc7 	bl	80001f0 <strcmp>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <main+0xd6>
			     HAL_GPIO_WritePin(GPIOG, LED_3_Pin, 1);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066e:	482a      	ldr	r0, [pc, #168]	@ (8000718 <main+0x178>)
 8000670:	f002 fb64 	bl	8002d3c <HAL_GPIO_WritePin>
 8000674:	e7f1      	b.n	800065a <main+0xba>
			 } else if (strcmp(data, "Turn on LED 4") == 0) {
 8000676:	4929      	ldr	r1, [pc, #164]	@ (800071c <main+0x17c>)
 8000678:	4823      	ldr	r0, [pc, #140]	@ (8000708 <main+0x168>)
 800067a:	f7ff fdb9 	bl	80001f0 <strcmp>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d106      	bne.n	8000692 <main+0xf2>
			     HAL_GPIO_WritePin(GPIOG, LED_4_Pin, 1);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068a:	4823      	ldr	r0, [pc, #140]	@ (8000718 <main+0x178>)
 800068c:	f002 fb56 	bl	8002d3c <HAL_GPIO_WritePin>
 8000690:	e7e3      	b.n	800065a <main+0xba>
			 } else if (strcmp(data, "Turn off LED 3") == 0) {
 8000692:	4923      	ldr	r1, [pc, #140]	@ (8000720 <main+0x180>)
 8000694:	481c      	ldr	r0, [pc, #112]	@ (8000708 <main+0x168>)
 8000696:	f7ff fdab 	bl	80001f0 <strcmp>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d106      	bne.n	80006ae <main+0x10e>
			     HAL_GPIO_WritePin(GPIOG, LED_3_Pin, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006a6:	481c      	ldr	r0, [pc, #112]	@ (8000718 <main+0x178>)
 80006a8:	f002 fb48 	bl	8002d3c <HAL_GPIO_WritePin>
 80006ac:	e7d5      	b.n	800065a <main+0xba>
			 } else if (strcmp(data, "Turn off LED 4") == 0) {
 80006ae:	491d      	ldr	r1, [pc, #116]	@ (8000724 <main+0x184>)
 80006b0:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x168>)
 80006b2:	f7ff fd9d 	bl	80001f0 <strcmp>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d106      	bne.n	80006ca <main+0x12a>
			     HAL_GPIO_WritePin(GPIOG, LED_4_Pin, 0);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <main+0x178>)
 80006c4:	f002 fb3a 	bl	8002d3c <HAL_GPIO_WritePin>
 80006c8:	e7c7      	b.n	800065a <main+0xba>
			 } else if (strcmp(data, "Good night") == 0) {
 80006ca:	4917      	ldr	r1, [pc, #92]	@ (8000728 <main+0x188>)
 80006cc:	480e      	ldr	r0, [pc, #56]	@ (8000708 <main+0x168>)
 80006ce:	f7ff fd8f 	bl	80001f0 <strcmp>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1c0      	bne.n	800065a <main+0xba>
			     HAL_GPIO_WritePin(GPIOG, LED_3_Pin, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006de:	480e      	ldr	r0, [pc, #56]	@ (8000718 <main+0x178>)
 80006e0:	f002 fb2c 	bl	8002d3c <HAL_GPIO_WritePin>
			     HAL_GPIO_WritePin(GPIOG, LED_4_Pin, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006ea:	480b      	ldr	r0, [pc, #44]	@ (8000718 <main+0x178>)
 80006ec:	f002 fb26 	bl	8002d3c <HAL_GPIO_WritePin>
			 if (strcmp(data, "Turn on LED 3") == 0) {
 80006f0:	e7b3      	b.n	800065a <main+0xba>
 80006f2:	bf00      	nop
 80006f4:	ff0000ff 	.word	0xff0000ff
 80006f8:	0800ad4c 	.word	0x0800ad4c
 80006fc:	0800ad5c 	.word	0x0800ad5c
 8000700:	0800ad6c 	.word	0x0800ad6c
 8000704:	0800ad74 	.word	0x0800ad74
 8000708:	200001b0 	.word	0x200001b0
 800070c:	0800ad80 	.word	0x0800ad80
 8000710:	0800ad90 	.word	0x0800ad90
 8000714:	0800ada0 	.word	0x0800ada0
 8000718:	40021800 	.word	0x40021800
 800071c:	0800adb0 	.word	0x0800adb0
 8000720:	0800adc0 	.word	0x0800adc0
 8000724:	0800add0 	.word	0x0800add0
 8000728:	0800ade0 	.word	0x0800ade0

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2230      	movs	r2, #48	@ 0x30
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f009 fe7a 	bl	800a434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a27      	ldr	r2, [pc, #156]	@ (80007f8 <SystemClock_Config+0xcc>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xcc>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <SystemClock_Config+0xd0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a21      	ldr	r2, [pc, #132]	@ (80007fc <SystemClock_Config+0xd0>)
 8000776:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <SystemClock_Config+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000788:	2301      	movs	r3, #1
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000792:	2302      	movs	r3, #2
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000796:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800079a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800079c:	2308      	movs	r3, #8
 800079e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007aa:	2307      	movs	r3, #7
 80007ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 f808 	bl	80047c8 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007be:	f000 f87f 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2105      	movs	r1, #5
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 fa69 	bl	8004cb8 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007ec:	f000 f868 	bl	80008c0 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	@ 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a26      	ldr	r2, [pc, #152]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a1f      	ldr	r2, [pc, #124]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b1d      	ldr	r3, [pc, #116]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a18      	ldr	r2, [pc, #96]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b16      	ldr	r3, [pc, #88]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_GPIO_Init+0xb8>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800088c:	480b      	ldr	r0, [pc, #44]	@ (80008bc <MX_GPIO_Init+0xbc>)
 800088e:	f002 fa55 	bl	8002d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin;
 8000892:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000898:	2301      	movs	r3, #1
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_GPIO_Init+0xbc>)
 80008ac:	f002 f89a 	bl	80029e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	@ 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40021800 	.word	0x40021800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <Error_Handler+0x8>

080008cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	@ (8000918 <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008da:	4a0f      	ldr	r2, [pc, #60]	@ (8000918 <HAL_MspInit+0x4c>)
 80008dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f6:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_MspInit+0x4c>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <UsageFault_Handler+0x4>

08000944 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000972:	f001 fa8d 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <OTG_HS_IRQHandler+0x10>)
 8000982:	f002 fe12 	bl	80035aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200018fc 	.word	0x200018fc

08000990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000998:	4a14      	ldr	r2, [pc, #80]	@ (80009ec <_sbrk+0x5c>)
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <_sbrk+0x60>)
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a4:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <_sbrk+0x64>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	@ (80009f8 <_sbrk+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d207      	bcs.n	80009d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c0:	f009 fd40 	bl	800a444 <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	e009      	b.n	80009e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d0:	4b08      	ldr	r3, [pc, #32]	@ (80009f4 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d6:	4b07      	ldr	r3, [pc, #28]	@ (80009f4 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <_sbrk+0x64>)
 80009e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20030000 	.word	0x20030000
 80009f0:	00000400 	.word	0x00000400
 80009f4:	200001c0 	.word	0x200001c0
 80009f8:	20002148 	.word	0x20002148

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f009 fcff 	bl	800a450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fda5 	bl	80005a0 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8000a64:	0800c950 	.word	0x0800c950
  ldr r2, =_sbss
 8000a68:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8000a6c:	20002148 	.word	0x20002148

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>

08000a72 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000a76:	f000 fa5d 	bl	8000f34 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8000a7a:	20ca      	movs	r0, #202	@ 0xca
 8000a7c:	f000 f95d 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000a80:	20c3      	movs	r0, #195	@ 0xc3
 8000a82:	f000 f967 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000a86:	2008      	movs	r0, #8
 8000a88:	f000 f964 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8000a8c:	2050      	movs	r0, #80	@ 0x50
 8000a8e:	f000 f961 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000a92:	20cf      	movs	r0, #207	@ 0xcf
 8000a94:	f000 f951 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 f95b 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8000a9e:	20c1      	movs	r0, #193	@ 0xc1
 8000aa0:	f000 f958 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8000aa4:	2030      	movs	r0, #48	@ 0x30
 8000aa6:	f000 f955 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8000aaa:	20ed      	movs	r0, #237	@ 0xed
 8000aac:	f000 f945 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8000ab0:	2064      	movs	r0, #100	@ 0x64
 8000ab2:	f000 f94f 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f94c 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8000abc:	2012      	movs	r0, #18
 8000abe:	f000 f949 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8000ac2:	2081      	movs	r0, #129	@ 0x81
 8000ac4:	f000 f946 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8000ac8:	20e8      	movs	r0, #232	@ 0xe8
 8000aca:	f000 f936 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8000ace:	2085      	movs	r0, #133	@ 0x85
 8000ad0:	f000 f940 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f000 f93d 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000ada:	2078      	movs	r0, #120	@ 0x78
 8000adc:	f000 f93a 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8000ae0:	20cb      	movs	r0, #203	@ 0xcb
 8000ae2:	f000 f92a 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8000ae6:	2039      	movs	r0, #57	@ 0x39
 8000ae8:	f000 f934 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8000aec:	202c      	movs	r0, #44	@ 0x2c
 8000aee:	f000 f931 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f92e 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8000af8:	2034      	movs	r0, #52	@ 0x34
 8000afa:	f000 f92b 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8000afe:	2002      	movs	r0, #2
 8000b00:	f000 f928 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000b04:	20f7      	movs	r0, #247	@ 0xf7
 8000b06:	f000 f918 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000b0a:	2020      	movs	r0, #32
 8000b0c:	f000 f922 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000b10:	20ea      	movs	r0, #234	@ 0xea
 8000b12:	f000 f912 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f91c 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 f919 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000b22:	20b1      	movs	r0, #177	@ 0xb1
 8000b24:	f000 f909 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 f913 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000b2e:	201b      	movs	r0, #27
 8000b30:	f000 f910 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000b34:	20b6      	movs	r0, #182	@ 0xb6
 8000b36:	f000 f900 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000b3a:	200a      	movs	r0, #10
 8000b3c:	f000 f90a 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000b40:	20a2      	movs	r0, #162	@ 0xa2
 8000b42:	f000 f907 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000b46:	20c0      	movs	r0, #192	@ 0xc0
 8000b48:	f000 f8f7 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f000 f901 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000b52:	20c1      	movs	r0, #193	@ 0xc1
 8000b54:	f000 f8f1 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000b58:	2010      	movs	r0, #16
 8000b5a:	f000 f8fb 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000b5e:	20c5      	movs	r0, #197	@ 0xc5
 8000b60:	f000 f8eb 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000b64:	2045      	movs	r0, #69	@ 0x45
 8000b66:	f000 f8f5 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000b6a:	2015      	movs	r0, #21
 8000b6c:	f000 f8f2 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000b70:	20c7      	movs	r0, #199	@ 0xc7
 8000b72:	f000 f8e2 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000b76:	2090      	movs	r0, #144	@ 0x90
 8000b78:	f000 f8ec 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000b7c:	2036      	movs	r0, #54	@ 0x36
 8000b7e:	f000 f8dc 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000b82:	20c8      	movs	r0, #200	@ 0xc8
 8000b84:	f000 f8e6 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000b88:	20f2      	movs	r0, #242	@ 0xf2
 8000b8a:	f000 f8d6 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 f8e0 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000b94:	20b0      	movs	r0, #176	@ 0xb0
 8000b96:	f000 f8d0 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000b9a:	20c2      	movs	r0, #194	@ 0xc2
 8000b9c:	f000 f8da 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000ba0:	20b6      	movs	r0, #182	@ 0xb6
 8000ba2:	f000 f8ca 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f000 f8d4 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000bac:	20a7      	movs	r0, #167	@ 0xa7
 8000bae:	f000 f8d1 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000bb2:	2027      	movs	r0, #39	@ 0x27
 8000bb4:	f000 f8ce 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f000 f8cb 	bl	8000d54 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000bbe:	202a      	movs	r0, #42	@ 0x2a
 8000bc0:	f000 f8bb 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f8c5 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f8c2 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f8bf 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000bd6:	20ef      	movs	r0, #239	@ 0xef
 8000bd8:	f000 f8bc 	bl	8000d54 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000bdc:	202b      	movs	r0, #43	@ 0x2b
 8000bde:	f000 f8ac 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f000 f8b6 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f8b3 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f000 f8b0 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000bf4:	203f      	movs	r0, #63	@ 0x3f
 8000bf6:	f000 f8ad 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000bfa:	20f6      	movs	r0, #246	@ 0xf6
 8000bfc:	f000 f89d 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f000 f8a7 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 f8a4 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000c0c:	2006      	movs	r0, #6
 8000c0e:	f000 f8a1 	bl	8000d54 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000c12:	202c      	movs	r0, #44	@ 0x2c
 8000c14:	f000 f891 	bl	8000d3a <ili9341_WriteReg>
  LCD_Delay(200);
 8000c18:	20c8      	movs	r0, #200	@ 0xc8
 8000c1a:	f000 fa79 	bl	8001110 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000c1e:	2026      	movs	r0, #38	@ 0x26
 8000c20:	f000 f88b 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 f895 	bl	8000d54 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000c2a:	20e0      	movs	r0, #224	@ 0xe0
 8000c2c:	f000 f885 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000c30:	200f      	movs	r0, #15
 8000c32:	f000 f88f 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000c36:	2029      	movs	r0, #41	@ 0x29
 8000c38:	f000 f88c 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000c3c:	2024      	movs	r0, #36	@ 0x24
 8000c3e:	f000 f889 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000c42:	200c      	movs	r0, #12
 8000c44:	f000 f886 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000c48:	200e      	movs	r0, #14
 8000c4a:	f000 f883 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f000 f880 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000c54:	204e      	movs	r0, #78	@ 0x4e
 8000c56:	f000 f87d 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000c5a:	2078      	movs	r0, #120	@ 0x78
 8000c5c:	f000 f87a 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000c60:	203c      	movs	r0, #60	@ 0x3c
 8000c62:	f000 f877 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000c66:	2009      	movs	r0, #9
 8000c68:	f000 f874 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000c6c:	2013      	movs	r0, #19
 8000c6e:	f000 f871 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000c72:	2005      	movs	r0, #5
 8000c74:	f000 f86e 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000c78:	2017      	movs	r0, #23
 8000c7a:	f000 f86b 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000c7e:	2011      	movs	r0, #17
 8000c80:	f000 f868 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000c84:	2000      	movs	r0, #0
 8000c86:	f000 f865 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000c8a:	20e1      	movs	r0, #225	@ 0xe1
 8000c8c:	f000 f855 	bl	8000d3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f85f 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000c96:	2016      	movs	r0, #22
 8000c98:	f000 f85c 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000c9c:	201b      	movs	r0, #27
 8000c9e:	f000 f859 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f000 f856 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000ca8:	2011      	movs	r0, #17
 8000caa:	f000 f853 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f000 f850 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000cb4:	2031      	movs	r0, #49	@ 0x31
 8000cb6:	f000 f84d 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000cba:	2033      	movs	r0, #51	@ 0x33
 8000cbc:	f000 f84a 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000cc0:	2042      	movs	r0, #66	@ 0x42
 8000cc2:	f000 f847 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f000 f844 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000ccc:	200c      	movs	r0, #12
 8000cce:	f000 f841 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f000 f83e 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000cd8:	2028      	movs	r0, #40	@ 0x28
 8000cda:	f000 f83b 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000cde:	202f      	movs	r0, #47	@ 0x2f
 8000ce0:	f000 f838 	bl	8000d54 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000ce4:	200f      	movs	r0, #15
 8000ce6:	f000 f835 	bl	8000d54 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000cea:	2011      	movs	r0, #17
 8000cec:	f000 f825 	bl	8000d3a <ili9341_WriteReg>
  LCD_Delay(200);
 8000cf0:	20c8      	movs	r0, #200	@ 0xc8
 8000cf2:	f000 fa0d 	bl	8001110 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000cf6:	2029      	movs	r0, #41	@ 0x29
 8000cf8:	f000 f81f 	bl	8000d3a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000cfc:	202c      	movs	r0, #44	@ 0x2c
 8000cfe:	f000 f81c 	bl	8000d3a <ili9341_WriteReg>
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000d0a:	f000 f913 	bl	8000f34 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000d0e:	2103      	movs	r1, #3
 8000d10:	20d3      	movs	r0, #211	@ 0xd3
 8000d12:	f000 f82c 	bl	8000d6e <ili9341_ReadData>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29b      	uxth	r3, r3
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000d22:	2029      	movs	r0, #41	@ 0x29
 8000d24:	f000 f809 	bl	8000d3a <ili9341_WriteReg>
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000d30:	2028      	movs	r0, #40	@ 0x28
 8000d32:	f000 f802 	bl	8000d3a <ili9341_WriteReg>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f98e 	bl	8001068 <LCD_IO_WriteReg>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f95f 	bl	8001024 <LCD_IO_WriteData>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	460a      	mov	r2, r1
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000d7e:	797a      	ldrb	r2, [r7, #5]
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4611      	mov	r1, r2
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 f991 	bl	80010ac <LCD_IO_ReadData>
 8000d8a:	4603      	mov	r3, r0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000d98:	23f0      	movs	r3, #240	@ 0xf0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000da8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000dbc:	4819      	ldr	r0, [pc, #100]	@ (8000e24 <SPIx_Init+0x6c>)
 8000dbe:	f005 f899 	bl	8005ef4 <HAL_SPI_GetState>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d12b      	bne.n	8000e20 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	@ (8000e24 <SPIx_Init+0x6c>)
 8000dca:	4a17      	ldr	r2, [pc, #92]	@ (8000e28 <SPIx_Init+0x70>)
 8000dcc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <SPIx_Init+0x6c>)
 8000dd0:	2218      	movs	r2, #24
 8000dd2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <SPIx_Init+0x6c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <SPIx_Init+0x6c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000de0:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <SPIx_Init+0x6c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <SPIx_Init+0x6c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <SPIx_Init+0x6c>)
 8000dee:	2207      	movs	r2, #7
 8000df0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <SPIx_Init+0x6c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <SPIx_Init+0x6c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <SPIx_Init+0x6c>)
 8000e00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e04:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <SPIx_Init+0x6c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SPIx_Init+0x6c>)
 8000e0e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e12:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8000e14:	4803      	ldr	r0, [pc, #12]	@ (8000e24 <SPIx_Init+0x6c>)
 8000e16:	f000 f853 	bl	8000ec0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000e1a:	4802      	ldr	r0, [pc, #8]	@ (8000e24 <SPIx_Init+0x6c>)
 8000e1c:	f004 fb9f 	bl	800555e <HAL_SPI_Init>
  }
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200001c4 	.word	0x200001c4
 8000e28:	40015000 	.word	0x40015000

08000e2c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <SPIx_Read+0x38>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f107 0108 	add.w	r1, r7, #8
 8000e46:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <SPIx_Read+0x3c>)
 8000e48:	f004 fd92 	bl	8005970 <HAL_SPI_Receive>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000e56:	f000 f827 	bl	8000ea8 <SPIx_Error>
  }

  return readvalue;
 8000e5a:	68bb      	ldr	r3, [r7, #8]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000003c 	.word	0x2000003c
 8000e68:	200001c4 	.word	0x200001c4

08000e6c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <SPIx_Write+0x34>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	1db9      	adds	r1, r7, #6
 8000e80:	2201      	movs	r2, #1
 8000e82:	4808      	ldr	r0, [pc, #32]	@ (8000ea4 <SPIx_Write+0x38>)
 8000e84:	f004 fc30 	bl	80056e8 <HAL_SPI_Transmit>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000e92:	f000 f809 	bl	8000ea8 <SPIx_Error>
  }
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000003c 	.word	0x2000003c
 8000ea4:	200001c4 	.word	0x200001c4

08000ea8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000eac:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <SPIx_Error+0x14>)
 8000eae:	f004 fbdf 	bl	8005670 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000eb2:	f7ff ff81 	bl	8000db8 <SPIx_Init>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200001c4 	.word	0x200001c4

08000ec0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <SPIx_MspInit+0x6c>)
 8000ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed0:	4a16      	ldr	r2, [pc, #88]	@ (8000f2c <SPIx_MspInit+0x6c>)
 8000ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ed6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <SPIx_MspInit+0x6c>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4b10      	ldr	r3, [pc, #64]	@ (8000f2c <SPIx_MspInit+0x6c>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eec:	4a0f      	ldr	r2, [pc, #60]	@ (8000f2c <SPIx_MspInit+0x6c>)
 8000eee:	f043 0320 	orr.w	r3, r3, #32
 8000ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <SPIx_MspInit+0x6c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	f003 0320 	and.w	r3, r3, #32
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000f00:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000f12:	2305      	movs	r3, #5
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000f16:	f107 0314 	add.w	r3, r7, #20
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4804      	ldr	r0, [pc, #16]	@ (8000f30 <SPIx_MspInit+0x70>)
 8000f1e:	f001 fd61 	bl	80029e4 <HAL_GPIO_Init>
}
 8000f22:	bf00      	nop
 8000f24:	3728      	adds	r7, #40	@ 0x28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021400 	.word	0x40021400

08000f34 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8000f3a:	4b36      	ldr	r3, [pc, #216]	@ (8001014 <LCD_IO_Init+0xe0>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d164      	bne.n	800100c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000f42:	4b34      	ldr	r3, [pc, #208]	@ (8001014 <LCD_IO_Init+0xe0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f50:	4a31      	ldr	r2, [pc, #196]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000f52:	f043 0308 	orr.w	r3, r3, #8
 8000f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f58:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f72:	2302      	movs	r3, #2
 8000f74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000f76:	f107 030c 	add.w	r3, r7, #12
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4827      	ldr	r0, [pc, #156]	@ (800101c <LCD_IO_Init+0xe8>)
 8000f7e:	f001 fd31 	bl	80029e4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0308 	and.w	r3, r3, #8
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4819      	ldr	r0, [pc, #100]	@ (800101c <LCD_IO_Init+0xe8>)
 8000fb8:	f001 fd14 	bl	80029e4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <LCD_IO_Init+0xe4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	603b      	str	r3, [r7, #0]
 8000fd6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4619      	mov	r1, r3
 8000fee:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LCD_IO_Init+0xec>)
 8000ff0:	f001 fcf8 	bl	80029e4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <LCD_IO_Init+0xec>)
 8000ffa:	f001 fe9f 	bl	8002d3c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000ffe:	2201      	movs	r2, #1
 8001000:	2104      	movs	r1, #4
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <LCD_IO_Init+0xec>)
 8001004:	f001 fe9a 	bl	8002d3c <HAL_GPIO_WritePin>

    SPIx_Init();
 8001008:	f7ff fed6 	bl	8000db8 <SPIx_Init>
  }
}
 800100c:	bf00      	nop
 800100e:	3720      	adds	r7, #32
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000021c 	.word	0x2000021c
 8001018:	40023800 	.word	0x40023800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40020800 	.word	0x40020800

08001024 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001034:	480a      	ldr	r0, [pc, #40]	@ (8001060 <LCD_IO_WriteData+0x3c>)
 8001036:	f001 fe81 	bl	8002d3c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800103a:	2200      	movs	r2, #0
 800103c:	2104      	movs	r1, #4
 800103e:	4809      	ldr	r0, [pc, #36]	@ (8001064 <LCD_IO_WriteData+0x40>)
 8001040:	f001 fe7c 	bl	8002d3c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff ff10 	bl	8000e6c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800104c:	2201      	movs	r2, #1
 800104e:	2104      	movs	r1, #4
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <LCD_IO_WriteData+0x40>)
 8001052:	f001 fe73 	bl	8002d3c <HAL_GPIO_WritePin>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40020800 	.word	0x40020800

08001068 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <LCD_IO_WriteReg+0x3c>)
 800107a:	f001 fe5f 	bl	8002d3c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800107e:	2200      	movs	r2, #0
 8001080:	2104      	movs	r1, #4
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <LCD_IO_WriteReg+0x40>)
 8001084:	f001 fe5a 	bl	8002d3c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff feed 	bl	8000e6c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001092:	2201      	movs	r2, #1
 8001094:	2104      	movs	r1, #4
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <LCD_IO_WriteReg+0x40>)
 8001098:	f001 fe50 	bl	8002d3c <HAL_GPIO_WritePin>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40020800 	.word	0x40020800

080010ac <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	460a      	mov	r2, r1
 80010b6:	80fb      	strh	r3, [r7, #6]
 80010b8:	4613      	mov	r3, r2
 80010ba:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80010c0:	2200      	movs	r2, #0
 80010c2:	2104      	movs	r1, #4
 80010c4:	4810      	ldr	r0, [pc, #64]	@ (8001108 <LCD_IO_ReadData+0x5c>)
 80010c6:	f001 fe39 	bl	8002d3c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <LCD_IO_ReadData+0x60>)
 80010d2:	f001 fe33 	bl	8002d3c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fec7 	bl	8000e6c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 80010de:	797b      	ldrb	r3, [r7, #5]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fea3 	bl	8000e2c <SPIx_Read>
 80010e6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80010e8:	2201      	movs	r2, #1
 80010ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ee:	4807      	ldr	r0, [pc, #28]	@ (800110c <LCD_IO_ReadData+0x60>)
 80010f0:	f001 fe24 	bl	8002d3c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80010f4:	2201      	movs	r2, #1
 80010f6:	2104      	movs	r1, #4
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <LCD_IO_ReadData+0x5c>)
 80010fa:	f001 fe1f 	bl	8002d3c <HAL_GPIO_WritePin>

  return readvalue;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00

08001110 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 fed9 	bl	8001ed0 <HAL_Delay>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 800112c:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 800112e:	4a2e      	ldr	r2, [pc, #184]	@ (80011e8 <BSP_LCD_Init+0xc0>)
 8001130:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001132:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 8001134:	2209      	movs	r2, #9
 8001136:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001138:	4b2a      	ldr	r3, [pc, #168]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 800113a:	2201      	movs	r2, #1
 800113c:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800113e:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 8001140:	221d      	movs	r2, #29
 8001142:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 8001146:	2203      	movs	r2, #3
 8001148:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 800114a:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 800114c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001150:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001152:	4b24      	ldr	r3, [pc, #144]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 8001154:	f240 1243 	movw	r2, #323	@ 0x143
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 800115c:	f240 1217 	movw	r2, #279	@ 0x117
 8001160:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001162:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 8001164:	f240 1247 	movw	r2, #327	@ 0x147
 8001168:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 800116a:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <BSP_LCD_Init+0xc4>)
 8001184:	2208      	movs	r2, #8
 8001186:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <BSP_LCD_Init+0xc4>)
 800118a:	22c0      	movs	r2, #192	@ 0xc0
 800118c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <BSP_LCD_Init+0xc4>)
 8001190:	2204      	movs	r2, #4
 8001192:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <BSP_LCD_Init+0xc4>)
 8001196:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800119a:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800119c:	4813      	ldr	r0, [pc, #76]	@ (80011ec <BSP_LCD_Init+0xc4>)
 800119e:	f003 ff83 	bl	80050a8 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 80011ba:	f000 fa5f 	bl	800167c <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 80011be:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <BSP_LCD_Init+0xbc>)
 80011c0:	f001 fdd6 	bl	8002d70 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80011c4:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <BSP_LCD_Init+0xc8>)
 80011c6:	4a0b      	ldr	r2, [pc, #44]	@ (80011f4 <BSP_LCD_Init+0xcc>)
 80011c8:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <BSP_LCD_Init+0xc8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80011d2:	f000 fc41 	bl	8001a58 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80011d6:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <BSP_LCD_Init+0xd0>)
 80011d8:	f000 f8ce 	bl	8001378 <BSP_LCD_SetFont>

  return LCD_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000220 	.word	0x20000220
 80011e8:	40016800 	.word	0x40016800
 80011ec:	20000308 	.word	0x20000308
 80011f0:	20000354 	.word	0x20000354
 80011f4:	20000004 	.word	0x20000004
 80011f8:	20000040 	.word	0x20000040

080011fc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001200:	4b03      	ldr	r3, [pc, #12]	@ (8001210 <BSP_LCD_GetXSize+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001206:	4798      	blx	r3
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000354 	.word	0x20000354

08001214 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <BSP_LCD_GetYSize+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121e:	4798      	blx	r3
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20000354 	.word	0x20000354

0800122c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b090      	sub	sp, #64	@ 0x40
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800123c:	f7ff ffde 	bl	80011fc <BSP_LCD_GetXSize>
 8001240:	4603      	mov	r3, r0
 8001242:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001248:	f7ff ffe4 	bl	8001214 <BSP_LCD_GetYSize>
 800124c:	4603      	mov	r3, r0
 800124e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001258:	23ff      	movs	r3, #255	@ 0xff
 800125a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001272:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001278:	2307      	movs	r3, #7
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800127c:	f7ff ffbe 	bl	80011fc <BSP_LCD_GetXSize>
 8001280:	4603      	mov	r3, r0
 8001282:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001284:	f7ff ffc6 	bl	8001214 <BSP_LCD_GetYSize>
 8001288:	4603      	mov	r3, r0
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 800128c:	88fa      	ldrh	r2, [r7, #6]
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	4619      	mov	r1, r3
 8001294:	4814      	ldr	r0, [pc, #80]	@ (80012e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001296:	f001 fe45 	bl	8002f24 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800129a:	88fa      	ldrh	r2, [r7, #6]
 800129c:	4913      	ldr	r1, [pc, #76]	@ (80012ec <BSP_LCD_LayerDefaultInit+0xc0>)
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3304      	adds	r3, #4
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80012b0:	88fa      	ldrh	r2, [r7, #6]
 80012b2:	490e      	ldr	r1, [pc, #56]	@ (80012ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	4a0b      	ldr	r2, [pc, #44]	@ (80012f0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80012c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80012c4:	88fa      	ldrh	r2, [r7, #6]
 80012c6:	4909      	ldr	r1, [pc, #36]	@ (80012ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80012d6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80012da:	f001 fe61 	bl	8002fa0 <HAL_LTDC_EnableDither>
}
 80012de:	bf00      	nop
 80012e0:	3740      	adds	r7, #64	@ 0x40
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000220 	.word	0x20000220
 80012ec:	2000033c 	.word	0x2000033c
 80012f0:	20000040 	.word	0x20000040

080012f4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80012fc:	4a04      	ldr	r2, [pc, #16]	@ (8001310 <BSP_LCD_SelectLayer+0x1c>)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6013      	str	r3, [r2, #0]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000338 	.word	0x20000338

08001314 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <BSP_LCD_SetTextColor+0x28>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4907      	ldr	r1, [pc, #28]	@ (8001340 <BSP_LCD_SetTextColor+0x2c>)
 8001322:	4613      	mov	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	4413      	add	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	440b      	add	r3, r1
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000338 	.word	0x20000338
 8001340:	2000033c 	.word	0x2000033c

08001344 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <BSP_LCD_SetBackColor+0x2c>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4908      	ldr	r1, [pc, #32]	@ (8001374 <BSP_LCD_SetBackColor+0x30>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	3304      	adds	r3, #4
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000338 	.word	0x20000338
 8001374:	2000033c 	.word	0x2000033c

08001378 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <BSP_LCD_SetFont+0x2c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <BSP_LCD_SetFont+0x30>)
 8001386:	4613      	mov	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	4413      	add	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	440b      	add	r3, r1
 8001390:	3308      	adds	r3, #8
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	601a      	str	r2, [r3, #0]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000338 	.word	0x20000338
 80013a8:	2000033c 	.word	0x2000033c

080013ac <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <BSP_LCD_GetFont+0x24>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4907      	ldr	r1, [pc, #28]	@ (80013d4 <BSP_LCD_GetFont+0x28>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000338 	.word	0x20000338
 80013d4:	2000033c 	.word	0x2000033c

080013d8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af02      	add	r7, sp, #8
 80013de:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <BSP_LCD_Clear+0x48>)
 80013e2:	681c      	ldr	r4, [r3, #0]
 80013e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <BSP_LCD_Clear+0x48>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001424 <BSP_LCD_Clear+0x4c>)
 80013ea:	2134      	movs	r1, #52	@ 0x34
 80013ec:	fb01 f303 	mul.w	r3, r1, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	335c      	adds	r3, #92	@ 0x5c
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461e      	mov	r6, r3
 80013f8:	f7ff ff00 	bl	80011fc <BSP_LCD_GetXSize>
 80013fc:	4605      	mov	r5, r0
 80013fe:	f7ff ff09 	bl	8001214 <BSP_LCD_GetYSize>
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	2300      	movs	r3, #0
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	462a      	mov	r2, r5
 8001410:	4631      	mov	r1, r6
 8001412:	4620      	mov	r0, r4
 8001414:	f000 fae8 	bl	80019e8 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001420:	20000338 	.word	0x20000338
 8001424:	20000220 	.word	0x20000220

08001428 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8001428:	b590      	push	{r4, r7, lr}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
 8001432:	460b      	mov	r3, r1
 8001434:	80bb      	strh	r3, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800143a:	4b1b      	ldr	r3, [pc, #108]	@ (80014a8 <BSP_LCD_DisplayChar+0x80>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	491b      	ldr	r1, [pc, #108]	@ (80014ac <BSP_LCD_DisplayChar+0x84>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3308      	adds	r3, #8
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001456:	4b14      	ldr	r3, [pc, #80]	@ (80014a8 <BSP_LCD_DisplayChar+0x80>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4c14      	ldr	r4, [pc, #80]	@ (80014ac <BSP_LCD_DisplayChar+0x84>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4423      	add	r3, r4
 8001466:	3308      	adds	r3, #8
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800146c:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <BSP_LCD_DisplayChar+0x80>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4c0d      	ldr	r4, [pc, #52]	@ (80014ac <BSP_LCD_DisplayChar+0x84>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4423      	add	r3, r4
 8001480:	3308      	adds	r3, #8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	3307      	adds	r3, #7
 8001488:	2b00      	cmp	r3, #0
 800148a:	da00      	bge.n	800148e <BSP_LCD_DisplayChar+0x66>
 800148c:	3307      	adds	r3, #7
 800148e:	10db      	asrs	r3, r3, #3
 8001490:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001494:	18ca      	adds	r2, r1, r3
 8001496:	88b9      	ldrh	r1, [r7, #4]
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f9ea 	bl	8001874 <DrawChar>
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	20000338 	.word	0x20000338
 80014ac:	2000033c 	.word	0x2000033c

080014b0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	81fb      	strh	r3, [r7, #14]
 80014be:	460b      	mov	r3, r1
 80014c0:	81bb      	strh	r3, [r7, #12]
 80014c2:	4613      	mov	r3, r2
 80014c4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80014c6:	2301      	movs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
 80014ca:	2300      	movs	r3, #0
 80014cc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80014da:	e002      	b.n	80014e2 <BSP_LCD_DisplayStringAt+0x32>
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	3301      	adds	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	617a      	str	r2, [r7, #20]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f6      	bne.n	80014dc <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80014ee:	f7ff fe85 	bl	80011fc <BSP_LCD_GetXSize>
 80014f2:	4601      	mov	r1, r0
 80014f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001624 <BSP_LCD_DisplayStringAt+0x174>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	484b      	ldr	r0, [pc, #300]	@ (8001628 <BSP_LCD_DisplayStringAt+0x178>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4403      	add	r3, r0
 8001504:	3308      	adds	r3, #8
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	889b      	ldrh	r3, [r3, #4]
 800150a:	fbb1 f3f3 	udiv	r3, r1, r3
 800150e:	613b      	str	r3, [r7, #16]

  switch (mode)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d01c      	beq.n	8001550 <BSP_LCD_DisplayStringAt+0xa0>
 8001516:	2b03      	cmp	r3, #3
 8001518:	dc33      	bgt.n	8001582 <BSP_LCD_DisplayStringAt+0xd2>
 800151a:	2b01      	cmp	r3, #1
 800151c:	d002      	beq.n	8001524 <BSP_LCD_DisplayStringAt+0x74>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d019      	beq.n	8001556 <BSP_LCD_DisplayStringAt+0xa6>
 8001522:	e02e      	b.n	8001582 <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad1      	subs	r1, r2, r3
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <BSP_LCD_DisplayStringAt+0x174>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	483e      	ldr	r0, [pc, #248]	@ (8001628 <BSP_LCD_DisplayStringAt+0x178>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4403      	add	r3, r0
 800153a:	3308      	adds	r3, #8
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	889b      	ldrh	r3, [r3, #4]
 8001540:	fb01 f303 	mul.w	r3, r1, r3
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	b29a      	uxth	r2, r3
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	4413      	add	r3, r2
 800154c:	83fb      	strh	r3, [r7, #30]
      break;
 800154e:	e01b      	b.n	8001588 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	83fb      	strh	r3, [r7, #30]
      break;
 8001554:	e018      	b.n	8001588 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	b299      	uxth	r1, r3
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <BSP_LCD_DisplayStringAt+0x174>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4831      	ldr	r0, [pc, #196]	@ (8001628 <BSP_LCD_DisplayStringAt+0x178>)
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4403      	add	r3, r0
 800156e:	3308      	adds	r3, #8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	fb11 f303 	smulbb	r3, r1, r3
 8001578:	b29a      	uxth	r2, r3
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	4413      	add	r3, r2
 800157e:	83fb      	strh	r3, [r7, #30]
      break;
 8001580:	e002      	b.n	8001588 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8001582:	89fb      	ldrh	r3, [r7, #14]
 8001584:	83fb      	strh	r3, [r7, #30]
      break;
 8001586:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001588:	e01a      	b.n	80015c0 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	89b9      	ldrh	r1, [r7, #12]
 8001590:	8bfb      	ldrh	r3, [r7, #30]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff48 	bl	8001428 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001598:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <BSP_LCD_DisplayStringAt+0x174>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4922      	ldr	r1, [pc, #136]	@ (8001628 <BSP_LCD_DisplayStringAt+0x178>)
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	3308      	adds	r3, #8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	889a      	ldrh	r2, [r3, #4]
 80015ae:	8bfb      	ldrh	r3, [r7, #30]
 80015b0:	4413      	add	r3, r2
 80015b2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3301      	adds	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
    i++;
 80015ba:	8bbb      	ldrh	r3, [r7, #28]
 80015bc:	3301      	adds	r3, #1
 80015be:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf14      	ite	ne
 80015c8:	2301      	movne	r3, #1
 80015ca:	2300      	moveq	r3, #0
 80015cc:	b2dc      	uxtb	r4, r3
 80015ce:	f7ff fe15 	bl	80011fc <BSP_LCD_GetXSize>
 80015d2:	8bb9      	ldrh	r1, [r7, #28]
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <BSP_LCD_DisplayStringAt+0x174>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4d13      	ldr	r5, [pc, #76]	@ (8001628 <BSP_LCD_DisplayStringAt+0x178>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	442b      	add	r3, r5
 80015e4:	3308      	adds	r3, #8
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	1ac3      	subs	r3, r0, r3
 80015f0:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 80015f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <BSP_LCD_DisplayStringAt+0x174>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	480c      	ldr	r0, [pc, #48]	@ (8001628 <BSP_LCD_DisplayStringAt+0x178>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4403      	add	r3, r0
 8001602:	3308      	adds	r3, #8
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001608:	4299      	cmp	r1, r3
 800160a:	bf2c      	ite	cs
 800160c:	2301      	movcs	r3, #1
 800160e:	2300      	movcc	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4023      	ands	r3, r4
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1b7      	bne.n	800158a <BSP_LCD_DisplayStringAt+0xda>
  }
}
 800161a:	bf00      	nop
 800161c:	bf00      	nop
 800161e:	3720      	adds	r7, #32
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	20000338 	.word	0x20000338
 8001628:	2000033c 	.word	0x2000033c

0800162c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001638:	f7ff feb8 	bl	80013ac <BSP_LCD_GetFont>
 800163c:	4603      	mov	r3, r0
 800163e:	88db      	ldrh	r3, [r3, #6]
 8001640:	88fa      	ldrh	r2, [r7, #6]
 8001642:	fb12 f303 	smulbb	r3, r2, r3
 8001646:	b299      	uxth	r1, r3
 8001648:	2303      	movs	r3, #3
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff ff2f 	bl	80014b0 <BSP_LCD_DisplayStringAt>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
	...

0800165c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <BSP_LCD_DisplayOn+0x1c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800166a:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <BSP_LCD_DisplayOn+0x1c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4798      	blx	r3
  }
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000354 	.word	0x20000354

0800167c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	@ 0x38
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	4b61      	ldr	r3, [pc, #388]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a60      	ldr	r2, [pc, #384]	@ (800180c <BSP_LCD_MspInit+0x190>)
 800168c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b5e      	ldr	r3, [pc, #376]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	4b5a      	ldr	r3, [pc, #360]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a59      	ldr	r2, [pc, #356]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b57      	ldr	r3, [pc, #348]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	4b53      	ldr	r3, [pc, #332]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a52      	ldr	r2, [pc, #328]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b50      	ldr	r3, [pc, #320]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a4b      	ldr	r2, [pc, #300]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b49      	ldr	r3, [pc, #292]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 80016f6:	4b45      	ldr	r3, [pc, #276]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a44      	ldr	r2, [pc, #272]	@ (800180c <BSP_LCD_MspInit+0x190>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b42      	ldr	r3, [pc, #264]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	4b3e      	ldr	r3, [pc, #248]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a3d      	ldr	r2, [pc, #244]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
 800172e:	4b37      	ldr	r3, [pc, #220]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a36      	ldr	r2, [pc, #216]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001734:	f043 0320 	orr.w	r3, r3, #32
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b34      	ldr	r3, [pc, #208]	@ (800180c <BSP_LCD_MspInit+0x190>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0320 	and.w	r3, r3, #32
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	4b30      	ldr	r3, [pc, #192]	@ (800180c <BSP_LCD_MspInit+0x190>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a2f      	ldr	r2, [pc, #188]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001750:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <BSP_LCD_MspInit+0x190>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001762:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001766:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001770:	2302      	movs	r3, #2
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8001774:	230e      	movs	r3, #14
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4824      	ldr	r0, [pc, #144]	@ (8001810 <BSP_LCD_MspInit+0x194>)
 8001780:	f001 f930 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001784:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800178a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178e:	4619      	mov	r1, r3
 8001790:	4820      	ldr	r0, [pc, #128]	@ (8001814 <BSP_LCD_MspInit+0x198>)
 8001792:	f001 f927 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001796:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800179c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a0:	4619      	mov	r1, r3
 80017a2:	481d      	ldr	r0, [pc, #116]	@ (8001818 <BSP_LCD_MspInit+0x19c>)
 80017a4:	f001 f91e 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80017a8:	2348      	movs	r3, #72	@ 0x48
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	481a      	ldr	r0, [pc, #104]	@ (800181c <BSP_LCD_MspInit+0x1a0>)
 80017b4:	f001 f916 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80017b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80017be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	4816      	ldr	r0, [pc, #88]	@ (8001820 <BSP_LCD_MspInit+0x1a4>)
 80017c6:	f001 f90d 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80017ca:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d4:	4619      	mov	r1, r3
 80017d6:	4813      	ldr	r0, [pc, #76]	@ (8001824 <BSP_LCD_MspInit+0x1a8>)
 80017d8:	f001 f904 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80017dc:	2303      	movs	r3, #3
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80017e0:	2309      	movs	r3, #9
 80017e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	480a      	ldr	r0, [pc, #40]	@ (8001814 <BSP_LCD_MspInit+0x198>)
 80017ec:	f001 f8fa 	bl	80029e4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80017f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fa:	4619      	mov	r1, r3
 80017fc:	4809      	ldr	r0, [pc, #36]	@ (8001824 <BSP_LCD_MspInit+0x1a8>)
 80017fe:	f001 f8f1 	bl	80029e4 <HAL_GPIO_Init>
}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	@ 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021400 	.word	0x40021400
 8001824:	40021800 	.word	0x40021800

08001828 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	603a      	str	r2, [r7, #0]
 8001832:	80fb      	strh	r3, [r7, #6]
 8001834:	460b      	mov	r3, r1
 8001836:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001838:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <BSP_LCD_DrawPixel+0x44>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0c      	ldr	r2, [pc, #48]	@ (8001870 <BSP_LCD_DrawPixel+0x48>)
 800183e:	2134      	movs	r1, #52	@ 0x34
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	335c      	adds	r3, #92	@ 0x5c
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	88bd      	ldrh	r5, [r7, #4]
 800184c:	f7ff fcd6 	bl	80011fc <BSP_LCD_GetXSize>
 8001850:	4603      	mov	r3, r0
 8001852:	fb03 f205 	mul.w	r2, r3, r5
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4423      	add	r3, r4
 800185e:	461a      	mov	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bdb0      	pop	{r4, r5, r7, pc}
 800186c:	20000338 	.word	0x20000338
 8001870:	20000220 	.word	0x20000220

08001874 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	603a      	str	r2, [r7, #0]
 800187e:	80fb      	strh	r3, [r7, #6]
 8001880:	460b      	mov	r3, r1
 8001882:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	2300      	movs	r3, #0
 800188a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8001890:	4b53      	ldr	r3, [pc, #332]	@ (80019e0 <DrawChar+0x16c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4953      	ldr	r1, [pc, #332]	@ (80019e4 <DrawChar+0x170>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3308      	adds	r3, #8
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	88db      	ldrh	r3, [r3, #6]
 80018a6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80018a8:	4b4d      	ldr	r3, [pc, #308]	@ (80019e0 <DrawChar+0x16c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	494d      	ldr	r1, [pc, #308]	@ (80019e4 <DrawChar+0x170>)
 80018ae:	4613      	mov	r3, r2
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	4413      	add	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	440b      	add	r3, r1
 80018b8:	3308      	adds	r3, #8
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	889b      	ldrh	r3, [r3, #4]
 80018be:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	3307      	adds	r3, #7
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	da00      	bge.n	80018ca <DrawChar+0x56>
 80018c8:	3307      	adds	r3, #7
 80018ca:	10db      	asrs	r3, r3, #3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	8a3b      	ldrh	r3, [r7, #16]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e076      	b.n	80019ce <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80018e0:	8a3b      	ldrh	r3, [r7, #16]
 80018e2:	3307      	adds	r3, #7
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da00      	bge.n	80018ea <DrawChar+0x76>
 80018e8:	3307      	adds	r3, #7
 80018ea:	10db      	asrs	r3, r3, #3
 80018ec:	461a      	mov	r2, r3
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80018fa:	8a3b      	ldrh	r3, [r7, #16]
 80018fc:	3307      	adds	r3, #7
 80018fe:	2b00      	cmp	r3, #0
 8001900:	da00      	bge.n	8001904 <DrawChar+0x90>
 8001902:	3307      	adds	r3, #7
 8001904:	10db      	asrs	r3, r3, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d002      	beq.n	8001910 <DrawChar+0x9c>
 800190a:	2b02      	cmp	r3, #2
 800190c:	d004      	beq.n	8001918 <DrawChar+0xa4>
 800190e:	e00c      	b.n	800192a <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	617b      	str	r3, [r7, #20]
        break;
 8001916:	e016      	b.n	8001946 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	3201      	adds	r2, #1
 8001922:	7812      	ldrb	r2, [r2, #0]
 8001924:	4313      	orrs	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
        break;
 8001928:	e00d      	b.n	8001946 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	3301      	adds	r3, #1
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	4313      	orrs	r3, r2
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	3202      	adds	r2, #2
 800193e:	7812      	ldrb	r2, [r2, #0]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
        break;
 8001944:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
 800194a:	e036      	b.n	80019ba <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 800194c:	8a3a      	ldrh	r2, [r7, #16]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad2      	subs	r2, r2, r3
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	4413      	add	r3, r2
 8001956:	3b01      	subs	r3, #1
 8001958:	2201      	movs	r2, #1
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	461a      	mov	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d012      	beq.n	800198e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	b29a      	uxth	r2, r3
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	4413      	add	r3, r2
 8001970:	b298      	uxth	r0, r3
 8001972:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <DrawChar+0x16c>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	491b      	ldr	r1, [pc, #108]	@ (80019e4 <DrawChar+0x170>)
 8001978:	4613      	mov	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff ff4e 	bl	8001828 <BSP_LCD_DrawPixel>
 800198c:	e012      	b.n	80019b4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	b29a      	uxth	r2, r3
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	4413      	add	r3, r2
 8001996:	b298      	uxth	r0, r3
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <DrawChar+0x16c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4911      	ldr	r1, [pc, #68]	@ (80019e4 <DrawChar+0x170>)
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3304      	adds	r3, #4
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	4619      	mov	r1, r3
 80019b0:	f7ff ff3a 	bl	8001828 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	3301      	adds	r3, #1
 80019b8:	61bb      	str	r3, [r7, #24]
 80019ba:	8a3b      	ldrh	r3, [r7, #16]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d3c4      	bcc.n	800194c <DrawChar+0xd8>
      }
    }
    Ypos++;
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	3301      	adds	r3, #1
 80019c6:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	3301      	adds	r3, #1
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	8a7b      	ldrh	r3, [r7, #18]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d384      	bcc.n	80018e0 <DrawChar+0x6c>
  }
}
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000338 	.word	0x20000338
 80019e4:	2000033c 	.word	0x2000033c

080019e8 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80019f6:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <FillBuffer+0x68>)
 80019f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019fc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80019fe:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <FillBuffer+0x68>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8001a04:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <FillBuffer+0x68>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <FillBuffer+0x68>)
 8001a0c:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <FillBuffer+0x6c>)
 8001a0e:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8001a10:	480f      	ldr	r0, [pc, #60]	@ (8001a50 <FillBuffer+0x68>)
 8001a12:	f000 fd51 	bl	80024b8 <HAL_DMA2D_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d115      	bne.n	8001a48 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8001a1c:	68f9      	ldr	r1, [r7, #12]
 8001a1e:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <FillBuffer+0x68>)
 8001a20:	f000 feb2 	bl	8002788 <HAL_DMA2D_ConfigLayer>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10e      	bne.n	8001a48 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69f9      	ldr	r1, [r7, #28]
 8001a34:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <FillBuffer+0x68>)
 8001a36:	f000 fd92 	bl	800255e <HAL_DMA2D_Start>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d103      	bne.n	8001a48 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001a40:	210a      	movs	r1, #10
 8001a42:	4803      	ldr	r0, [pc, #12]	@ (8001a50 <FillBuffer+0x68>)
 8001a44:	f000 fdb6 	bl	80025b4 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200002c8 	.word	0x200002c8
 8001a54:	4002b000 	.word	0x4002b000

08001a58 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001b08 <BSP_SDRAM_Init+0xb0>)
 8001a60:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001a62:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001a68:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001a6e:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a70:	2204      	movs	r2, #4
 8001a72:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001a74:	4b25      	ldr	r3, [pc, #148]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a76:	2207      	movs	r2, #7
 8001a78:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001a80:	4b22      	ldr	r3, [pc, #136]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001a86:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001aa0:	2210      	movs	r2, #16
 8001aa2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001aa6:	2240      	movs	r2, #64	@ 0x40
 8001aa8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001aac:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001ab0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ab2:	4b14      	ldr	r3, [pc, #80]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001ab8:	4b12      	ldr	r3, [pc, #72]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001aba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001abe:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001acc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001ad2:	f000 f87f 	bl	8001bd4 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001ad6:	490d      	ldr	r1, [pc, #52]	@ (8001b0c <BSP_SDRAM_Init+0xb4>)
 8001ad8:	480a      	ldr	r0, [pc, #40]	@ (8001b04 <BSP_SDRAM_Init+0xac>)
 8001ada:	f003 fca5 	bl	8005428 <HAL_SDRAM_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <BSP_SDRAM_Init+0xb8>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e002      	b.n	8001af2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <BSP_SDRAM_Init+0xb8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001af2:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001af6:	f000 f80d 	bl	8001b14 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8001afa:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <BSP_SDRAM_Init+0xb8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000358 	.word	0x20000358
 8001b08:	a0000140 	.word	0xa0000140
 8001b0c:	2000038c 	.word	0x2000038c
 8001b10:	20000048 	.word	0x20000048

08001b14 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b26:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b28:	2208      	movs	r2, #8
 8001b2a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b3c:	4923      	ldr	r1, [pc, #140]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b3e:	4824      	ldr	r0, [pc, #144]	@ (8001bd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b40:	f003 fcb0 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001b44:	2001      	movs	r0, #1
 8001b46:	f000 f9c3 	bl	8001ed0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001b4a:	4b20      	ldr	r3, [pc, #128]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b52:	2208      	movs	r2, #8
 8001b54:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001b56:	4b1d      	ldr	r3, [pc, #116]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b66:	4919      	ldr	r1, [pc, #100]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b68:	4819      	ldr	r0, [pc, #100]	@ (8001bd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b6a:	f003 fc9b 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001b6e:	4b17      	ldr	r3, [pc, #92]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b70:	2203      	movs	r2, #3
 8001b72:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b74:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b76:	2208      	movs	r2, #8
 8001b78:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b8a:	4910      	ldr	r1, [pc, #64]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b8c:	4810      	ldr	r0, [pc, #64]	@ (8001bd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001b8e:	f003 fc89 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001b92:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001b96:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4a07      	ldr	r2, [pc, #28]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bae:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	4905      	ldr	r1, [pc, #20]	@ (8001bcc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bb6:	4806      	ldr	r0, [pc, #24]	@ (8001bd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bb8:	f003 fc74 	bl	80054a4 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4804      	ldr	r0, [pc, #16]	@ (8001bd0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bc0:	f003 fca5 	bl	800550e <HAL_SDRAM_ProgramRefreshRate>
}
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200003a8 	.word	0x200003a8
 8001bd0:	20000358 	.word	0x20000358

08001bd4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b090      	sub	sp, #64	@ 0x40
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80ec 	beq.w	8001dbe <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bea:	4b77      	ldr	r3, [pc, #476]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bee:	4a76      	ldr	r2, [pc, #472]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bf6:	4b74      	ldr	r3, [pc, #464]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c06:	4b70      	ldr	r3, [pc, #448]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b6d      	ldr	r3, [pc, #436]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
 8001c22:	4b69      	ldr	r3, [pc, #420]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a68      	ldr	r2, [pc, #416]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b66      	ldr	r3, [pc, #408]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	4b62      	ldr	r3, [pc, #392]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	4a61      	ldr	r2, [pc, #388]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c66:	4b58      	ldr	r3, [pc, #352]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	4b54      	ldr	r3, [pc, #336]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a53      	ldr	r2, [pc, #332]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b51      	ldr	r3, [pc, #324]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b4d      	ldr	r3, [pc, #308]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	f003 0320 	and.w	r3, r3, #32
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b46      	ldr	r3, [pc, #280]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	4a45      	ldr	r2, [pc, #276]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cba:	4b43      	ldr	r3, [pc, #268]	@ (8001dc8 <BSP_SDRAM_MspInit+0x1f4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001cd6:	2360      	movs	r3, #96	@ 0x60
 8001cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cda:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	483a      	ldr	r0, [pc, #232]	@ (8001dcc <BSP_SDRAM_MspInit+0x1f8>)
 8001ce2:	f000 fe7f 	bl	80029e4 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001cea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4837      	ldr	r0, [pc, #220]	@ (8001dd0 <BSP_SDRAM_MspInit+0x1fc>)
 8001cf2:	f000 fe77 	bl	80029e4 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001cf6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001cfc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d00:	4619      	mov	r1, r3
 8001d02:	4834      	ldr	r0, [pc, #208]	@ (8001dd4 <BSP_SDRAM_MspInit+0x200>)
 8001d04:	f000 fe6e 	bl	80029e4 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001d08:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d12:	4619      	mov	r1, r3
 8001d14:	4830      	ldr	r0, [pc, #192]	@ (8001dd8 <BSP_SDRAM_MspInit+0x204>)
 8001d16:	f000 fe65 	bl	80029e4 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8001d1a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d24:	4619      	mov	r1, r3
 8001d26:	482d      	ldr	r0, [pc, #180]	@ (8001ddc <BSP_SDRAM_MspInit+0x208>)
 8001d28:	f000 fe5c 	bl	80029e4 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d2c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	4829      	ldr	r0, [pc, #164]	@ (8001de0 <BSP_SDRAM_MspInit+0x20c>)
 8001d3a:	f000 fe53 	bl	80029e4 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d3e:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d46:	2280      	movs	r2, #128	@ 0x80
 8001d48:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d50:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d58:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d5a:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d60:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d62:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d64:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d68:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d70:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d76:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d80:	2203      	movs	r2, #3
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d84:	4b17      	ldr	r3, [pc, #92]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001d90:	4b14      	ldr	r3, [pc, #80]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d92:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <BSP_SDRAM_MspInit+0x214>)
 8001d94:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d9c:	4a11      	ldr	r2, [pc, #68]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8001da2:	4810      	ldr	r0, [pc, #64]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001da4:	f000 fa78 	bl	8002298 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8001da8:	480e      	ldr	r0, [pc, #56]	@ (8001de4 <BSP_SDRAM_MspInit+0x210>)
 8001daa:	f000 f9c7 	bl	800213c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	210f      	movs	r1, #15
 8001db2:	2038      	movs	r0, #56	@ 0x38
 8001db4:	f000 f98b 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001db8:	2038      	movs	r0, #56	@ 0x38
 8001dba:	f000 f9a4 	bl	8002106 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001dbe:	bf00      	nop
 8001dc0:	3740      	adds	r7, #64	@ 0x40
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020400 	.word	0x40020400
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	40020c00 	.word	0x40020c00
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40021400 	.word	0x40021400
 8001de0:	40021800 	.word	0x40021800
 8001de4:	200003b8 	.word	0x200003b8
 8001de8:	40026410 	.word	0x40026410

08001dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <HAL_Init+0x40>)
 8001df6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a0a      	ldr	r2, [pc, #40]	@ (8001e2c <HAL_Init+0x40>)
 8001e02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_Init+0x40>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f94f 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7fe fd54 	bl	80008cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f967 	bl	8002122 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f92f 	bl	80020ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000000 	.word	0x20000000
 8001e88:	20000050 	.word	0x20000050
 8001e8c:	2000004c 	.word	0x2000004c

08001e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a04      	ldr	r2, [pc, #16]	@ (8001eb4 <HAL_IncTick+0x24>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000050 	.word	0x20000050
 8001eb4:	20000418 	.word	0x20000418

08001eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return uwTick;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	@ (8001ecc <HAL_GetTick+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000418 	.word	0x20000418

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff ffee 	bl	8001eb8 <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000050 	.word	0x20000050

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e0:	f7ff ff3e 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	6978      	ldr	r0, [r7, #20]
 80020ec:	f7ff ff8e 	bl	800200c <NVIC_EncodePriority>
 80020f0:	4602      	mov	r2, r0
 80020f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	bf00      	nop
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff31 	bl	8001f7c <__NVIC_EnableIRQ>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa2 	bl	8002074 <SysTick_Config>
 8002130:	4603      	mov	r3, r0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
	...

0800213c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff feb6 	bl	8001eb8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e099      	b.n	800228c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2202      	movs	r2, #2
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	e00f      	b.n	800219a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800217a:	f7ff fe9d 	bl	8001eb8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b05      	cmp	r3, #5
 8002186:	d908      	bls.n	800219a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e078      	b.n	800228c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e8      	bne.n	800217a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <HAL_DMA_Init+0x158>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d107      	bne.n	8002204 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fc:	4313      	orrs	r3, r2
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f023 0307 	bic.w	r3, r3, #7
 800221a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	2b04      	cmp	r3, #4
 800222c:	d117      	bne.n	800225e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f8bd 	bl	80023c0 <DMA_CheckFifoParam>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d008      	beq.n	800225e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800225a:	2301      	movs	r3, #1
 800225c:	e016      	b.n	800228c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f874 	bl	8002354 <DMA_CalcBaseAndBitshift>
 800226c:	4603      	mov	r3, r0
 800226e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	223f      	movs	r2, #63	@ 0x3f
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	f010803f 	.word	0xf010803f

08002298 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e050      	b.n	800234c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d101      	bne.n	80022ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
 80022b8:	e048      	b.n	800234c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2200      	movs	r2, #0
 80022e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2221      	movs	r2, #33	@ 0x21
 80022f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f82a 	bl	8002354 <DMA_CalcBaseAndBitshift>
 8002300:	4603      	mov	r3, r0
 8002302:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	223f      	movs	r2, #63	@ 0x3f
 800232e:	409a      	lsls	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3b10      	subs	r3, #16
 8002364:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236e:	4a13      	ldr	r2, [pc, #76]	@ (80023bc <DMA_CalcBaseAndBitshift+0x68>)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d909      	bls.n	8002396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	@ 0x58
 8002394:	e007      	b.n	80023a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	aaaaaaab 	.word	0xaaaaaaab
 80023bc:	0800c904 	.word	0x0800c904

080023c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d856      	bhi.n	800248e <DMA_CheckFifoParam+0xce>
 80023e0:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <DMA_CheckFifoParam+0x28>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	0800240b 	.word	0x0800240b
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	0800248f 	.word	0x0800248f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d046      	beq.n	8002492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e043      	b.n	8002492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002412:	d140      	bne.n	8002496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e03d      	b.n	8002496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002422:	d121      	bne.n	8002468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d837      	bhi.n	800249a <DMA_CheckFifoParam+0xda>
 800242a:	a201      	add	r2, pc, #4	@ (adr r2, 8002430 <DMA_CheckFifoParam+0x70>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002441 	.word	0x08002441
 8002434:	08002447 	.word	0x08002447
 8002438:	08002441 	.word	0x08002441
 800243c:	08002459 	.word	0x08002459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e030      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e022      	b.n	800249e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002460:	d11f      	bne.n	80024a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002466:	e01c      	b.n	80024a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d903      	bls.n	8002476 <DMA_CheckFifoParam+0xb6>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d003      	beq.n	800247c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002474:	e018      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      break;
 800247a:	e015      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002480:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e00b      	b.n	80024a6 <DMA_CheckFifoParam+0xe6>
      break;
 800248e:	bf00      	nop
 8002490:	e00a      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e008      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e006      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e004      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
    }
  } 
  
  return status; 
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e03b      	b.n	8002542 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f833 	bl	800254a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002508:	f023 0107 	bic.w	r1, r3, #7
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002522:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68d1      	ldr	r1, [r2, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	430b      	orrs	r3, r1
 8002530:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af02      	add	r7, sp, #8
 8002564:	60f8      	str	r0, [r7, #12]
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_DMA2D_Start+0x1c>
 8002576:	2302      	movs	r3, #2
 8002578:	e018      	b.n	80025ac <HAL_DMA2D_Start+0x4e>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f989 	bl	80028ac <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 0201 	orr.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d056      	beq.n	800267e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80025d0:	f7ff fc72 	bl	8001eb8 <HAL_GetTick>
 80025d4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80025d6:	e04b      	b.n	8002670 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d023      	beq.n	8002632 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	f043 0202 	orr.w	r2, r3, #2
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260e:	f043 0201 	orr.w	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2221      	movs	r2, #33	@ 0x21
 800261c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0a5      	b.n	800277e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d01a      	beq.n	8002670 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800263a:	f7ff fc3d 	bl	8001eb8 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d302      	bcc.n	8002650 <HAL_DMA2D_PollForTransfer+0x9c>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10f      	bne.n	8002670 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2203      	movs	r2, #3
 8002660:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e086      	b.n	800277e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ac      	beq.n	80025d8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d061      	beq.n	8002764 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80026a0:	f7ff fc0a 	bl	8001eb8 <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80026a6:	e056      	b.n	8002756 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d02e      	beq.n	8002718 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c8:	f043 0204 	orr.w	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026de:	f043 0202 	orr.w	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2229      	movs	r2, #41	@ 0x29
 8002702:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2204      	movs	r2, #4
 8002708:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d01a      	beq.n	8002756 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002720:	f7ff fbca 	bl	8001eb8 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d302      	bcc.n	8002736 <HAL_DMA2D_PollForTransfer+0x182>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10f      	bne.n	8002756 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e013      	b.n	800277e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0310 	and.w	r3, r3, #16
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0a1      	beq.n	80026a8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2212      	movs	r2, #18
 800276a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_DMA2D_ConfigLayer+0x20>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e079      	b.n	800289c <HAL_DMA2D_ConfigLayer+0x114>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	3318      	adds	r3, #24
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80027d2:	4b35      	ldr	r3, [pc, #212]	@ (80028a8 <HAL_DMA2D_ConfigLayer+0x120>)
 80027d4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b0a      	cmp	r3, #10
 80027dc:	d003      	beq.n	80027e6 <HAL_DMA2D_ConfigLayer+0x5e>
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	d107      	bne.n	80027f6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e005      	b.n	8002802 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	061b      	lsls	r3, r3, #24
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d120      	bne.n	800284a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	43db      	mvns	r3, r3
 8002812:	ea02 0103 	and.w	r1, r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	430a      	orrs	r2, r1
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b0a      	cmp	r3, #10
 8002830:	d003      	beq.n	800283a <HAL_DMA2D_ConfigLayer+0xb2>
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b09      	cmp	r3, #9
 8002838:	d127      	bne.n	800288a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28
 8002848:	e01f      	b.n	800288a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	43db      	mvns	r3, r3
 8002854:	ea02 0103 	and.w	r1, r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b0a      	cmp	r3, #10
 8002872:	d003      	beq.n	800287c <HAL_DMA2D_ConfigLayer+0xf4>
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d106      	bne.n	800288a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002888:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	ff03000f 	.word	0xff03000f

080028ac <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b08b      	sub	sp, #44	@ 0x2c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028e4:	d174      	bne.n	80029d0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80028ec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80028f4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80028fc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	431a      	orrs	r2, r3
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	4313      	orrs	r3, r2
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
 800291c:	e053      	b.n	80029c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4313      	orrs	r3, r2
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
 8002932:	e048      	b.n	80029c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d111      	bne.n	8002960 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	0cdb      	lsrs	r3, r3, #19
 8002940:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	0a9b      	lsrs	r3, r3, #10
 8002946:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	02db      	lsls	r3, r3, #11
 8002956:	4313      	orrs	r3, r2
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
 800295e:	e032      	b.n	80029c6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d117      	bne.n	8002998 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	0fdb      	lsrs	r3, r3, #31
 800296c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	0cdb      	lsrs	r3, r3, #19
 8002972:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	0adb      	lsrs	r3, r3, #11
 8002978:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	029b      	lsls	r3, r3, #10
 8002988:	431a      	orrs	r2, r3
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	03db      	lsls	r3, r3, #15
 800298e:	4313      	orrs	r3, r2
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4313      	orrs	r3, r2
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
 8002996:	e016      	b.n	80029c6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	0f1b      	lsrs	r3, r3, #28
 800299c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	0d1b      	lsrs	r3, r3, #20
 80029a2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	0b1b      	lsrs	r3, r3, #12
 80029a8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	011a      	lsls	r2, r3, #4
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	431a      	orrs	r2, r3
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	4313      	orrs	r3, r2
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029cc:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80029ce:	e003      	b.n	80029d8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	60da      	str	r2, [r3, #12]
}
 80029d8:	bf00      	nop
 80029da:	372c      	adds	r7, #44	@ 0x2c
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b089      	sub	sp, #36	@ 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e177      	b.n	8002cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a00:	2201      	movs	r2, #1
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	f040 8166 	bne.w	8002cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d005      	beq.n	8002a36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d130      	bne.n	8002a98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	2203      	movs	r2, #3
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 0201 	and.w	r2, r3, #1
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d017      	beq.n	8002ad4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	2203      	movs	r2, #3
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d123      	bne.n	8002b28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	08da      	lsrs	r2, r3, #3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3208      	adds	r2, #8
 8002ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	220f      	movs	r2, #15
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	08da      	lsrs	r2, r3, #3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3208      	adds	r2, #8
 8002b22:	69b9      	ldr	r1, [r7, #24]
 8002b24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	2203      	movs	r2, #3
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43db      	mvns	r3, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0203 	and.w	r2, r3, #3
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80c0 	beq.w	8002cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <HAL_GPIO_Init+0x324>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a65      	ldr	r2, [pc, #404]	@ (8002d08 <HAL_GPIO_Init+0x324>)
 8002b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7a:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_GPIO_Init+0x324>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b86:	4a61      	ldr	r2, [pc, #388]	@ (8002d0c <HAL_GPIO_Init+0x328>)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	089b      	lsrs	r3, r3, #2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	220f      	movs	r2, #15
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a58      	ldr	r2, [pc, #352]	@ (8002d10 <HAL_GPIO_Init+0x32c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d037      	beq.n	8002c22 <HAL_GPIO_Init+0x23e>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a57      	ldr	r2, [pc, #348]	@ (8002d14 <HAL_GPIO_Init+0x330>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d031      	beq.n	8002c1e <HAL_GPIO_Init+0x23a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a56      	ldr	r2, [pc, #344]	@ (8002d18 <HAL_GPIO_Init+0x334>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <HAL_GPIO_Init+0x236>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a55      	ldr	r2, [pc, #340]	@ (8002d1c <HAL_GPIO_Init+0x338>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x232>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a54      	ldr	r2, [pc, #336]	@ (8002d20 <HAL_GPIO_Init+0x33c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x22e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a53      	ldr	r2, [pc, #332]	@ (8002d24 <HAL_GPIO_Init+0x340>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x22a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_GPIO_Init+0x344>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x226>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a51      	ldr	r2, [pc, #324]	@ (8002d2c <HAL_GPIO_Init+0x348>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x222>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a50      	ldr	r2, [pc, #320]	@ (8002d30 <HAL_GPIO_Init+0x34c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x21e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d34 <HAL_GPIO_Init+0x350>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x21a>
 8002bfa:	2309      	movs	r3, #9
 8002bfc:	e012      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002bfe:	230a      	movs	r3, #10
 8002c00:	e010      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c02:	2308      	movs	r3, #8
 8002c04:	e00e      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c06:	2307      	movs	r3, #7
 8002c08:	e00c      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c0a:	2306      	movs	r3, #6
 8002c0c:	e00a      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c0e:	2305      	movs	r3, #5
 8002c10:	e008      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e006      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c16:	2303      	movs	r3, #3
 8002c18:	e004      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e002      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_GPIO_Init+0x240>
 8002c22:	2300      	movs	r3, #0
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	f002 0203 	and.w	r2, r2, #3
 8002c2a:	0092      	lsls	r2, r2, #2
 8002c2c:	4093      	lsls	r3, r2
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c34:	4935      	ldr	r1, [pc, #212]	@ (8002d0c <HAL_GPIO_Init+0x328>)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c42:	4b3d      	ldr	r3, [pc, #244]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c66:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c96:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cba:	4a1f      	ldr	r2, [pc, #124]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce4:	4a14      	ldr	r2, [pc, #80]	@ (8002d38 <HAL_GPIO_Init+0x354>)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3301      	adds	r3, #1
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b0f      	cmp	r3, #15
 8002cf4:	f67f ae84 	bls.w	8002a00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40020400 	.word	0x40020400
 8002d18:	40020800 	.word	0x40020800
 8002d1c:	40020c00 	.word	0x40020c00
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40021400 	.word	0x40021400
 8002d28:	40021800 	.word	0x40021800
 8002d2c:	40021c00 	.word	0x40021c00
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40022400 	.word	0x40022400
 8002d38:	40013c00 	.word	0x40013c00

08002d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	807b      	strh	r3, [r7, #2]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d4c:	787b      	ldrb	r3, [r7, #1]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d58:	e003      	b.n	8002d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5a:	887b      	ldrh	r3, [r7, #2]
 8002d5c:	041a      	lsls	r2, r3, #16
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	619a      	str	r2, [r3, #24]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e0bf      	b.n	8002f02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f8ba 	bl	8002f10 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002db2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6999      	ldr	r1, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002dc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	4b4a      	ldr	r3, [pc, #296]	@ (8002f0c <HAL_LTDC_Init+0x19c>)
 8002de4:	400b      	ands	r3, r1
 8002de6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6899      	ldr	r1, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699a      	ldr	r2, [r3, #24]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68d9      	ldr	r1, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b3e      	ldr	r3, [pc, #248]	@ (8002f0c <HAL_LTDC_Init+0x19c>)
 8002e12:	400b      	ands	r3, r1
 8002e14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1a      	ldr	r2, [r3, #32]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6919      	ldr	r1, [r3, #16]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b33      	ldr	r3, [pc, #204]	@ (8002f0c <HAL_LTDC_Init+0x19c>)
 8002e40:	400b      	ands	r3, r1
 8002e42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6959      	ldr	r1, [r3, #20]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b27      	ldr	r3, [pc, #156]	@ (8002f0c <HAL_LTDC_Init+0x19c>)
 8002e6e:	400b      	ands	r3, r1
 8002e70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	041b      	lsls	r3, r3, #16
 8002e78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6959      	ldr	r1, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002ea0:	041b      	lsls	r3, r3, #16
 8002ea2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0206 	orr.w	r2, r2, #6
 8002ede:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	f000f800 	.word	0xf000f800

08002f10 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f24:	b5b0      	push	{r4, r5, r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_LTDC_ConfigLayer+0x1a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e02c      	b.n	8002f98 <HAL_LTDC_ConfigLayer+0x74>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2134      	movs	r1, #52	@ 0x34
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4614      	mov	r4, r2
 8002f62:	461d      	mov	r5, r3
 8002f64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	68b9      	ldr	r1, [r7, #8]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f83b 	bl	8002ff4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2201      	movs	r2, #1
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bdb0      	pop	{r4, r5, r7, pc}

08002fa0 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d101      	bne.n	8002fb6 <HAL_LTDC_EnableDither+0x16>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e016      	b.n	8002fe4 <HAL_LTDC_EnableDither+0x44>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_LTDC_EnableDither+0x50>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	4a09      	ldr	r2, [pc, #36]	@ (8002ff0 <HAL_LTDC_EnableDither+0x50>)
 8002fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fd0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr
 8002ff0:	40016800 	.word	0x40016800

08002ff4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	@ 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	4413      	add	r3, r2
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	01db      	lsls	r3, r3, #7
 8003020:	4413      	add	r3, r2
 8003022:	3384      	adds	r3, #132	@ 0x84
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	4611      	mov	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	01d2      	lsls	r2, r2, #7
 8003030:	440a      	add	r2, r1
 8003032:	3284      	adds	r2, #132	@ 0x84
 8003034:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003038:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0c1b      	lsrs	r3, r3, #16
 8003046:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800304a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800304c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	01db      	lsls	r3, r3, #7
 8003058:	440b      	add	r3, r1
 800305a:	3384      	adds	r3, #132	@ 0x84
 800305c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003062:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003072:	4413      	add	r3, r2
 8003074:	041b      	lsls	r3, r3, #16
 8003076:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	01db      	lsls	r3, r3, #7
 8003082:	4413      	add	r3, r2
 8003084:	3384      	adds	r3, #132	@ 0x84
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	4611      	mov	r1, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	01d2      	lsls	r2, r2, #7
 8003092:	440a      	add	r2, r1
 8003094:	3284      	adds	r2, #132	@ 0x84
 8003096:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800309a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030aa:	4413      	add	r3, r2
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	01db      	lsls	r3, r3, #7
 80030b8:	440b      	add	r3, r1
 80030ba:	3384      	adds	r3, #132	@ 0x84
 80030bc:	4619      	mov	r1, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	01db      	lsls	r3, r3, #7
 80030ce:	4413      	add	r3, r2
 80030d0:	3384      	adds	r3, #132	@ 0x84
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	4611      	mov	r1, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	01d2      	lsls	r2, r2, #7
 80030de:	440a      	add	r2, r1
 80030e0:	3284      	adds	r2, #132	@ 0x84
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	01db      	lsls	r3, r3, #7
 80030f2:	4413      	add	r3, r2
 80030f4:	3384      	adds	r3, #132	@ 0x84
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003104:	021b      	lsls	r3, r3, #8
 8003106:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800310e:	041b      	lsls	r3, r3, #16
 8003110:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	061b      	lsls	r3, r3, #24
 8003118:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	01db      	lsls	r3, r3, #7
 8003124:	4413      	add	r3, r2
 8003126:	3384      	adds	r3, #132	@ 0x84
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	4413      	add	r3, r2
 8003136:	3384      	adds	r3, #132	@ 0x84
 8003138:	461a      	mov	r2, r3
 800313a:	2300      	movs	r3, #0
 800313c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003144:	461a      	mov	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	431a      	orrs	r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4619      	mov	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	01db      	lsls	r3, r3, #7
 8003158:	440b      	add	r3, r1
 800315a:	3384      	adds	r3, #132	@ 0x84
 800315c:	4619      	mov	r1, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	01db      	lsls	r3, r3, #7
 800316e:	4413      	add	r3, r2
 8003170:	3384      	adds	r3, #132	@ 0x84
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	6812      	ldr	r2, [r2, #0]
 8003178:	4611      	mov	r1, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	01d2      	lsls	r2, r2, #7
 800317e:	440a      	add	r2, r1
 8003180:	3284      	adds	r2, #132	@ 0x84
 8003182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003186:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	01db      	lsls	r3, r3, #7
 8003192:	4413      	add	r3, r2
 8003194:	3384      	adds	r3, #132	@ 0x84
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	01db      	lsls	r3, r3, #7
 80031a8:	4413      	add	r3, r2
 80031aa:	3384      	adds	r3, #132	@ 0x84
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	4611      	mov	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	01d2      	lsls	r2, r2, #7
 80031b8:	440a      	add	r2, r1
 80031ba:	3284      	adds	r2, #132	@ 0x84
 80031bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031c0:	f023 0307 	bic.w	r3, r3, #7
 80031c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	69da      	ldr	r2, [r3, #28]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	68f9      	ldr	r1, [r7, #12]
 80031d0:	6809      	ldr	r1, [r1, #0]
 80031d2:	4608      	mov	r0, r1
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	01c9      	lsls	r1, r1, #7
 80031d8:	4401      	add	r1, r0
 80031da:	3184      	adds	r1, #132	@ 0x84
 80031dc:	4313      	orrs	r3, r2
 80031de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	3384      	adds	r3, #132	@ 0x84
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	01db      	lsls	r3, r3, #7
 80031fa:	4413      	add	r3, r2
 80031fc:	3384      	adds	r3, #132	@ 0x84
 80031fe:	461a      	mov	r2, r3
 8003200:	2300      	movs	r3, #0
 8003202:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	01db      	lsls	r3, r3, #7
 800320e:	4413      	add	r3, r2
 8003210:	3384      	adds	r3, #132	@ 0x84
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003222:	2304      	movs	r3, #4
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e01b      	b.n	8003260 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d102      	bne.n	8003236 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003230:	2303      	movs	r3, #3
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	e014      	b.n	8003260 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d00b      	beq.n	8003256 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003242:	2b02      	cmp	r3, #2
 8003244:	d007      	beq.n	8003256 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800324a:	2b03      	cmp	r3, #3
 800324c:	d003      	beq.n	8003256 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003252:	2b07      	cmp	r3, #7
 8003254:	d102      	bne.n	800325c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003256:	2302      	movs	r3, #2
 8003258:	61fb      	str	r3, [r7, #28]
 800325a:	e001      	b.n	8003260 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800325c:	2301      	movs	r3, #1
 800325e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	01db      	lsls	r3, r3, #7
 800326a:	4413      	add	r3, r2
 800326c:	3384      	adds	r3, #132	@ 0x84
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	4611      	mov	r1, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	01d2      	lsls	r2, r2, #7
 800327a:	440a      	add	r2, r1
 800327c:	3284      	adds	r2, #132	@ 0x84
 800327e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003282:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	6859      	ldr	r1, [r3, #4]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1acb      	subs	r3, r1, r3
 800329a:	69f9      	ldr	r1, [r7, #28]
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80032a2:	68f9      	ldr	r1, [r7, #12]
 80032a4:	6809      	ldr	r1, [r1, #0]
 80032a6:	4608      	mov	r0, r1
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	01c9      	lsls	r1, r1, #7
 80032ac:	4401      	add	r1, r0
 80032ae:	3184      	adds	r1, #132	@ 0x84
 80032b0:	4313      	orrs	r3, r2
 80032b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	01db      	lsls	r3, r3, #7
 80032be:	4413      	add	r3, r2
 80032c0:	3384      	adds	r3, #132	@ 0x84
 80032c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	4611      	mov	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	01d2      	lsls	r2, r2, #7
 80032ce:	440a      	add	r2, r1
 80032d0:	3284      	adds	r2, #132	@ 0x84
 80032d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80032d6:	f023 0307 	bic.w	r3, r3, #7
 80032da:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	01db      	lsls	r3, r3, #7
 80032e6:	4413      	add	r3, r2
 80032e8:	3384      	adds	r3, #132	@ 0x84
 80032ea:	461a      	mov	r2, r3
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	4413      	add	r3, r2
 80032fe:	3384      	adds	r3, #132	@ 0x84
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	4611      	mov	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	01d2      	lsls	r2, r2, #7
 800330c:	440a      	add	r2, r1
 800330e:	3284      	adds	r2, #132	@ 0x84
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6013      	str	r3, [r2, #0]
}
 8003316:	bf00      	nop
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af02      	add	r7, sp, #8
 8003328:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e101      	b.n	8003538 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f006 fd06 	bl	8009d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2203      	movs	r2, #3
 8003358:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003362:	d102      	bne.n	800336a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f003 f941 	bl	80065f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7c1a      	ldrb	r2, [r3, #16]
 800337c:	f88d 2000 	strb.w	r2, [sp]
 8003380:	3304      	adds	r3, #4
 8003382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003384:	f003 f820 	bl	80063c8 <USB_CoreInit>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d005      	beq.n	800339a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0ce      	b.n	8003538 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f003 f939 	bl	8006618 <USB_SetCurrentMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0bf      	b.n	8003538 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	e04a      	b.n	8003454 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3315      	adds	r3, #21
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3314      	adds	r3, #20
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	b298      	uxth	r0, r3
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	332e      	adds	r3, #46	@ 0x2e
 80033fa:	4602      	mov	r2, r0
 80033fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033fe:	7bfa      	ldrb	r2, [r7, #15]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3318      	adds	r3, #24
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	331c      	adds	r3, #28
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3320      	adds	r3, #32
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3324      	adds	r3, #36	@ 0x24
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3301      	adds	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	429a      	cmp	r2, r3
 800345c:	d3af      	bcc.n	80033be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
 8003462:	e044      	b.n	80034ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003464:	7bfa      	ldrb	r2, [r7, #15]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	4413      	add	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034a2:	2200      	movs	r2, #0
 80034a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034a6:	7bfa      	ldrb	r2, [r7, #15]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	3301      	adds	r3, #1
 80034ec:	73fb      	strb	r3, [r7, #15]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	791b      	ldrb	r3, [r3, #4]
 80034f2:	7bfa      	ldrb	r2, [r7, #15]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d3b5      	bcc.n	8003464 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7c1a      	ldrb	r2, [r3, #16]
 8003500:	f88d 2000 	strb.w	r2, [sp]
 8003504:	3304      	adds	r3, #4
 8003506:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003508:	f003 f8d2 	bl	80066b0 <USB_DevInit>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2202      	movs	r2, #2
 8003516:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00c      	b.n	8003538 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 f91c 	bl	800776e <USB_DevDisconnect>

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_PCD_Start+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e022      	b.n	80035a2 <HAL_PCD_Start+0x62>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800357c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f003 f823 	bl	80065d4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f004 f8ca 	bl	800772c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035aa:	b590      	push	{r4, r7, lr}
 80035ac:	b08d      	sub	sp, #52	@ 0x34
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 f988 	bl	80078d6 <USB_GetMode>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f040 848c 	bne.w	8003ee6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f8ec 	bl	80077b0 <USB_ReadInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8482 	beq.w	8003ee4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 f8d9 	bl	80077b0 <USB_ReadInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d107      	bne.n	8003618 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695a      	ldr	r2, [r3, #20]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f002 0202 	and.w	r2, r2, #2
 8003616:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4618      	mov	r0, r3
 800361e:	f004 f8c7 	bl	80077b0 <USB_ReadInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f003 0310 	and.w	r3, r3, #16
 8003628:	2b10      	cmp	r3, #16
 800362a:	d161      	bne.n	80036f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0210 	bic.w	r2, r2, #16
 800363a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	0c5b      	lsrs	r3, r3, #17
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	2b02      	cmp	r3, #2
 8003666:	d124      	bne.n	80036b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d035      	beq.n	80036e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800367e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	6a38      	ldr	r0, [r7, #32]
 8003688:	f003 fefe 	bl	8007488 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003698:	441a      	add	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	091b      	lsrs	r3, r3, #4
 80036a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036aa:	441a      	add	r2, r3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	615a      	str	r2, [r3, #20]
 80036b0:	e016      	b.n	80036e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	0c5b      	lsrs	r3, r3, #17
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d110      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036c4:	2208      	movs	r2, #8
 80036c6:	4619      	mov	r1, r3
 80036c8:	6a38      	ldr	r0, [r7, #32]
 80036ca:	f003 fedd 	bl	8007488 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036da:	441a      	add	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699a      	ldr	r2, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0210 	orr.w	r2, r2, #16
 80036ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 f85b 	bl	80077b0 <USB_ReadInterrupts>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003700:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003704:	f040 80a7 	bne.w	8003856 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f004 f860 	bl	80077d6 <USB_ReadDevAllOutEpInterrupt>
 8003716:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003718:	e099      	b.n	800384e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 808e 	beq.w	8003842 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f004 f884 	bl	800783e <USB_ReadDevOutEPInterrupt>
 8003736:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800374e:	461a      	mov	r2, r3
 8003750:	2301      	movs	r3, #1
 8003752:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fea4 	bl	80044a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00c      	beq.n	8003780 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003772:	461a      	mov	r2, r3
 8003774:	2308      	movs	r3, #8
 8003776:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003778:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 ff7a 	bl	8004674 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003796:	461a      	mov	r2, r3
 8003798:	2310      	movs	r3, #16
 800379a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d030      	beq.n	8003808 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ae:	2b80      	cmp	r3, #128	@ 0x80
 80037b0:	d109      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	69fa      	ldr	r2, [r7, #28]
 80037bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	4413      	add	r3, r2
 80037d8:	3304      	adds	r3, #4
 80037da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	78db      	ldrb	r3, [r3, #3]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d108      	bne.n	80037f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	4619      	mov	r1, r3
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f006 fbb7 	bl	8009f64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003802:	461a      	mov	r2, r3
 8003804:	2302      	movs	r3, #2
 8003806:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800381e:	461a      	mov	r2, r3
 8003820:	2320      	movs	r3, #32
 8003822:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383a:	461a      	mov	r2, r3
 800383c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003840:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	3301      	adds	r3, #1
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	2b00      	cmp	r3, #0
 8003852:	f47f af62 	bne.w	800371a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f003 ffa8 	bl	80077b0 <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003866:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800386a:	f040 80db 	bne.w	8003a24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f003 ffc9 	bl	800780a <USB_ReadDevAllInEpInterrupt>
 8003878:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800387e:	e0cd      	b.n	8003a1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80c2 	beq.w	8003a10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	4611      	mov	r1, r2
 8003896:	4618      	mov	r0, r3
 8003898:	f003 ffef 	bl	800787a <USB_ReadDevInEPInterrupt>
 800389c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d057      	beq.n	8003958 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	2201      	movs	r2, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69f9      	ldr	r1, [r7, #28]
 80038c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038c8:	4013      	ands	r3, r2
 80038ca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d8:	461a      	mov	r2, r3
 80038da:	2301      	movs	r3, #1
 80038dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	799b      	ldrb	r3, [r3, #6]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d132      	bne.n	800394c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ea:	4613      	mov	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4413      	add	r3, r2
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	3320      	adds	r3, #32
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fc:	4613      	mov	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4413      	add	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4403      	add	r3, r0
 8003906:	331c      	adds	r3, #28
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4419      	add	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4403      	add	r3, r0
 800391a:	3320      	adds	r3, #32
 800391c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d113      	bne.n	800394c <HAL_PCD_IRQHandler+0x3a2>
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003928:	4613      	mov	r3, r2
 800392a:	00db      	lsls	r3, r3, #3
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	3324      	adds	r3, #36	@ 0x24
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d108      	bne.n	800394c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003944:	461a      	mov	r2, r3
 8003946:	2101      	movs	r1, #1
 8003948:	f003 fff6 	bl	8007938 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800394c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394e:	b2db      	uxtb	r3, r3
 8003950:	4619      	mov	r1, r3
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f006 fa81 	bl	8009e5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800396e:	461a      	mov	r2, r3
 8003970:	2308      	movs	r3, #8
 8003972:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398a:	461a      	mov	r2, r3
 800398c:	2310      	movs	r3, #16
 800398e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a6:	461a      	mov	r2, r3
 80039a8:	2340      	movs	r3, #64	@ 0x40
 80039aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d023      	beq.n	80039fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039b8:	6a38      	ldr	r0, [r7, #32]
 80039ba:	f002 ffdd 	bl	8006978 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3310      	adds	r3, #16
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	78db      	ldrb	r3, [r3, #3]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d108      	bne.n	80039ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f006 face 	bl	8009f88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f8:	461a      	mov	r2, r3
 80039fa:	2302      	movs	r3, #2
 80039fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fcbd 	bl	800438a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	3301      	adds	r3, #1
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f47f af2e 	bne.w	8003880 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f003 fec1 	bl	80077b0 <USB_ReadInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a38:	d122      	bne.n	8003a80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d108      	bne.n	8003a6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a60:	2100      	movs	r1, #0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fea4 	bl	80047b0 <HAL_PCDEx_LPM_Callback>
 8003a68:	e002      	b.n	8003a70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f006 fa6c 	bl	8009f48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f003 fe93 	bl	80077b0 <USB_ReadInterrupts>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a94:	d112      	bne.n	8003abc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d102      	bne.n	8003aac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f006 fa28 	bl	8009efc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003aba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 fe75 	bl	80077b0 <USB_ReadInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad0:	f040 80b7 	bne.w	8003c42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	69fa      	ldr	r2, [r7, #28]
 8003ade:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2110      	movs	r1, #16
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 ff42 	bl	8006978 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003af8:	e046      	b.n	8003b88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b06:	461a      	mov	r2, r3
 8003b08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b1e:	0151      	lsls	r1, r2, #5
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	440a      	add	r2, r1
 8003b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b52:	0151      	lsls	r1, r2, #5
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	440a      	add	r2, r1
 8003b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b72:	0151      	lsls	r1, r2, #5
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	440a      	add	r2, r1
 8003b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b84:	3301      	adds	r3, #1
 8003b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	791b      	ldrb	r3, [r3, #4]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d3b2      	bcc.n	8003afa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ba2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ba6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7bdb      	ldrb	r3, [r3, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc0:	f043 030b 	orr.w	r3, r3, #11
 8003bc4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bd6:	f043 030b 	orr.w	r3, r3, #11
 8003bda:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bdc:	e015      	b.n	8003c0a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bf0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003bf4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c04:	f043 030b 	orr.w	r3, r3, #11
 8003c08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c18:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f003 fe83 	bl	8007938 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	695a      	ldr	r2, [r3, #20]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 fdb2 	bl	80077b0 <USB_ReadInterrupts>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c56:	d123      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f003 fe48 	bl	80078f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 feff 	bl	8006a6a <USB_GetDevSpeed>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681c      	ldr	r4, [r3, #0]
 8003c78:	f001 fa0a 	bl	8005090 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c82:	461a      	mov	r2, r3
 8003c84:	4620      	mov	r0, r4
 8003c86:	f002 fc03 	bl	8006490 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f006 f90d 	bl	8009eaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 fd83 	bl	80077b0 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d10a      	bne.n	8003cca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f006 f8ea 	bl	8009e8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f002 0208 	and.w	r2, r2, #8
 8003cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 fd6e 	bl	80077b0 <USB_ReadInterrupts>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cda:	2b80      	cmp	r3, #128	@ 0x80
 8003cdc:	d123      	bne.n	8003d26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cee:	e014      	b.n	8003d1a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fb0a 	bl	8004328 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	3301      	adds	r3, #1
 8003d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d3e4      	bcc.n	8003cf0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f003 fd40 	bl	80077b0 <USB_ReadInterrupts>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d3a:	d13c      	bne.n	8003db6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d40:	e02b      	b.n	8003d9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	4413      	add	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	3318      	adds	r3, #24
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d115      	bne.n	8003d94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	da12      	bge.n	8003d94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d72:	4613      	mov	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	4413      	add	r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	3317      	adds	r3, #23
 8003d7e:	2201      	movs	r2, #1
 8003d80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 faca 	bl	8004328 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	3301      	adds	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	791b      	ldrb	r3, [r3, #4]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d3cd      	bcc.n	8003d42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 fcf8 	bl	80077b0 <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dca:	d156      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dcc:	2301      	movs	r3, #1
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd0:	e045      	b.n	8003e5e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	4613      	mov	r3, r2
 8003de8:	00db      	lsls	r3, r3, #3
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d12e      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dfa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	da2b      	bge.n	8003e58 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d121      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e26:	2201      	movs	r2, #1
 8003e28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e54:	6053      	str	r3, [r2, #4]
            break;
 8003e56:	e008      	b.n	8003e6a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	791b      	ldrb	r3, [r3, #4]
 8003e62:	461a      	mov	r2, r3
 8003e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d3b3      	bcc.n	8003dd2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 fc96 	bl	80077b0 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f006 f88b 	bl	8009fac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 fc80 	bl	80077b0 <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d115      	bne.n	8003ee6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f006 f87b 	bl	8009fc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6859      	ldr	r1, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e000      	b.n	8003ee6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003ee4:	bf00      	nop
    }
  }
}
 8003ee6:	3734      	adds	r7, #52	@ 0x34
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd90      	pop	{r4, r7, pc}

08003eec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_PCD_SetAddress+0x1a>
 8003f02:	2302      	movs	r3, #2
 8003f04:	e012      	b.n	8003f2c <HAL_PCD_SetAddress+0x40>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 fbdf 	bl	80076e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	70fb      	strb	r3, [r7, #3]
 8003f46:	460b      	mov	r3, r1
 8003f48:	803b      	strh	r3, [r7, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	da0f      	bge.n	8003f7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	3310      	adds	r3, #16
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3304      	adds	r3, #4
 8003f70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	705a      	strb	r2, [r3, #1]
 8003f78:	e00f      	b.n	8003f9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	f003 020f 	and.w	r2, r3, #15
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	f003 030f 	and.w	r3, r3, #15
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003fa6:	883b      	ldrh	r3, [r7, #0]
 8003fa8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	78ba      	ldrb	r2, [r7, #2]
 8003fb4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d004      	beq.n	8003fc8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fc8:	78bb      	ldrb	r3, [r7, #2]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d102      	bne.n	8003fd4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_PCD_EP_Open+0xae>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e00e      	b.n	8004000 <HAL_PCD_EP_Open+0xcc>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fd5f 	bl	8006ab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da0f      	bge.n	800403c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	3310      	adds	r3, #16
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	705a      	strb	r2, [r3, #1]
 800403a:	e00f      	b.n	800405c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	3304      	adds	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 030f 	and.w	r3, r3, #15
 8004062:	b2da      	uxtb	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800406e:	2b01      	cmp	r3, #1
 8004070:	d101      	bne.n	8004076 <HAL_PCD_EP_Close+0x6e>
 8004072:	2302      	movs	r3, #2
 8004074:	e00e      	b.n	8004094 <HAL_PCD_EP_Close+0x8c>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	4618      	mov	r0, r3
 8004086:	f002 fd9d 	bl	8006bc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	460b      	mov	r3, r1
 80040aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ac:	7afb      	ldrb	r3, [r7, #11]
 80040ae:	f003 020f 	and.w	r2, r3, #15
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4413      	add	r3, r2
 80040c2:	3304      	adds	r3, #4
 80040c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2200      	movs	r2, #0
 80040d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	2200      	movs	r2, #0
 80040dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040de:	7afb      	ldrb	r3, [r7, #11]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	799b      	ldrb	r3, [r3, #6]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	799b      	ldrb	r3, [r3, #6]
 8004100:	461a      	mov	r2, r3
 8004102:	6979      	ldr	r1, [r7, #20]
 8004104:	f002 fe3a 	bl	8006d7c <USB_EPStartXfer>

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004134:	681b      	ldr	r3, [r3, #0]
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
 800414e:	460b      	mov	r3, r1
 8004150:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004152:	7afb      	ldrb	r3, [r7, #11]
 8004154:	f003 020f 	and.w	r2, r3, #15
 8004158:	4613      	mov	r3, r2
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	3310      	adds	r3, #16
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2201      	movs	r2, #1
 8004180:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	b2da      	uxtb	r2, r3
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	799b      	ldrb	r3, [r3, #6]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d102      	bne.n	800419c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	799b      	ldrb	r3, [r3, #6]
 80041a4:	461a      	mov	r2, r3
 80041a6:	6979      	ldr	r1, [r7, #20]
 80041a8:	f002 fde8 	bl	8006d7c <USB_EPStartXfer>

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b084      	sub	sp, #16
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	7912      	ldrb	r2, [r2, #4]
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d901      	bls.n	80041d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e04f      	b.n	8004274 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	da0f      	bge.n	80041fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041dc:	78fb      	ldrb	r3, [r7, #3]
 80041de:	f003 020f 	and.w	r2, r3, #15
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	3310      	adds	r3, #16
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	3304      	adds	r3, #4
 80041f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	705a      	strb	r2, [r3, #1]
 80041fa:	e00d      	b.n	8004218 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	4613      	mov	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 030f 	and.w	r3, r3, #15
 8004224:	b2da      	uxtb	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004230:	2b01      	cmp	r3, #1
 8004232:	d101      	bne.n	8004238 <HAL_PCD_EP_SetStall+0x82>
 8004234:	2302      	movs	r3, #2
 8004236:	e01d      	b.n	8004274 <HAL_PCD_EP_SetStall+0xbe>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68f9      	ldr	r1, [r7, #12]
 8004246:	4618      	mov	r0, r3
 8004248:	f003 f976 	bl	8007538 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800424c:	78fb      	ldrb	r3, [r7, #3]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	7999      	ldrb	r1, [r3, #6]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004264:	461a      	mov	r2, r3
 8004266:	f003 fb67 	bl	8007938 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	7912      	ldrb	r2, [r2, #4]
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e042      	b.n	8004320 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800429a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da0f      	bge.n	80042c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3310      	adds	r3, #16
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	705a      	strb	r2, [r3, #1]
 80042c0:	e00f      	b.n	80042e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 020f 	and.w	r2, r3, #15
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	4413      	add	r3, r2
 80042d8:	3304      	adds	r3, #4
 80042da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e8:	78fb      	ldrb	r3, [r7, #3]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_PCD_EP_ClrStall+0x86>
 80042fe:	2302      	movs	r3, #2
 8004300:	e00e      	b.n	8004320 <HAL_PCD_EP_ClrStall+0xa4>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	4618      	mov	r0, r3
 8004312:	f003 f97f 	bl	8007614 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800431e:	2300      	movs	r3, #0
}
 8004320:	4618      	mov	r0, r3
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	da0c      	bge.n	8004356 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3310      	adds	r3, #16
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e00c      	b.n	8004370 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	4413      	add	r3, r2
 800436c:	3304      	adds	r3, #4
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68f9      	ldr	r1, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	f002 ff9e 	bl	80072b8 <USB_EPStopXfer>
 800437c:	4603      	mov	r3, r0
 800437e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004380:	7afb      	ldrb	r3, [r7, #11]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b08a      	sub	sp, #40	@ 0x28
 800438e:	af02      	add	r7, sp, #8
 8004390:	6078      	str	r0, [r7, #4]
 8004392:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	3310      	adds	r3, #16
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	3304      	adds	r3, #4
 80043b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	695a      	ldr	r2, [r3, #20]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d901      	bls.n	80043c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06b      	b.n	800449a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d902      	bls.n	80043de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3303      	adds	r3, #3
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043e6:	e02a      	b.n	800443e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	69fa      	ldr	r2, [r7, #28]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d902      	bls.n	8004404 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	3303      	adds	r3, #3
 8004408:	089b      	lsrs	r3, r3, #2
 800440a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	68d9      	ldr	r1, [r3, #12]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	4603      	mov	r3, r0
 8004420:	6978      	ldr	r0, [r7, #20]
 8004422:	f002 fff3 	bl	800740c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	441a      	add	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	441a      	add	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	429a      	cmp	r2, r3
 8004452:	d809      	bhi.n	8004468 <PCD_WriteEmptyTxFifo+0xde>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445c:	429a      	cmp	r2, r3
 800445e:	d203      	bcs.n	8004468 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1bf      	bne.n	80043e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	691a      	ldr	r2, [r3, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	d811      	bhi.n	8004498 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	2201      	movs	r2, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	43db      	mvns	r3, r3
 800448e:	6939      	ldr	r1, [r7, #16]
 8004490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004494:	4013      	ands	r3, r2
 8004496:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	333c      	adds	r3, #60	@ 0x3c
 80044bc:	3304      	adds	r3, #4
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	799b      	ldrb	r3, [r3, #6]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d17b      	bne.n	80045d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d015      	beq.n	8004510 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	4a61      	ldr	r2, [pc, #388]	@ (800466c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	f240 80b9 	bls.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80b3 	beq.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450c:	6093      	str	r3, [r2, #8]
 800450e:	e0a7      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	461a      	mov	r2, r3
 8004528:	2320      	movs	r3, #32
 800452a:	6093      	str	r3, [r2, #8]
 800452c:	e098      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004534:	2b00      	cmp	r3, #0
 8004536:	f040 8093 	bne.w	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4a4b      	ldr	r2, [pc, #300]	@ (800466c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d90f      	bls.n	8004562 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004558:	461a      	mov	r2, r3
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	6093      	str	r3, [r2, #8]
 8004560:	e07e      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	4613      	mov	r3, r2
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	0159      	lsls	r1, r3, #5
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	440b      	add	r3, r1
 8004584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458e:	1ad2      	subs	r2, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d114      	bne.n	80045c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d109      	bne.n	80045b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045ac:	461a      	mov	r2, r3
 80045ae:	2101      	movs	r1, #1
 80045b0:	f003 f9c2 	bl	8007938 <USB_EP0_OutStart>
 80045b4:	e006      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	441a      	add	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f005 fc2a 	bl	8009e24 <HAL_PCD_DataOutStageCallback>
 80045d0:	e046      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4a26      	ldr	r2, [pc, #152]	@ (8004670 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d124      	bne.n	8004624 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f0:	461a      	mov	r2, r3
 80045f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045f6:	6093      	str	r3, [r2, #8]
 80045f8:	e032      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	2320      	movs	r3, #32
 8004614:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f005 fc01 	bl	8009e24 <HAL_PCD_DataOutStageCallback>
 8004622:	e01d      	b.n	8004660 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d114      	bne.n	8004654 <PCD_EP_OutXfrComplete_int+0x1b0>
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d108      	bne.n	8004654 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800464c:	461a      	mov	r2, r3
 800464e:	2100      	movs	r1, #0
 8004650:	f003 f972 	bl	8007938 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f005 fbe2 	bl	8009e24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	4f54300a 	.word	0x4f54300a
 8004670:	4f54310a 	.word	0x4f54310a

08004674 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	333c      	adds	r3, #60	@ 0x3c
 800468c:	3304      	adds	r3, #4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a15      	ldr	r2, [pc, #84]	@ (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90e      	bls.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046c0:	461a      	mov	r2, r3
 80046c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f005 fb99 	bl	8009e00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	4a0a      	ldr	r2, [pc, #40]	@ (80046fc <PCD_EP_OutSetupPacket_int+0x88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d90c      	bls.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	799b      	ldrb	r3, [r3, #6]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d108      	bne.n	80046f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046e8:	461a      	mov	r2, r3
 80046ea:	2101      	movs	r1, #1
 80046ec:	f003 f924 	bl	8007938 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	4f54300a 	.word	0x4f54300a

08004700 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
 800470c:	4613      	mov	r3, r2
 800470e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004716:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800471e:	883b      	ldrh	r3, [r7, #0]
 8004720:	0419      	lsls	r1, r3, #16
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	430a      	orrs	r2, r1
 800472a:	629a      	str	r2, [r3, #40]	@ 0x28
 800472c:	e028      	b.n	8004780 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	68ba      	ldr	r2, [r7, #8]
 8004738:	4413      	add	r3, r2
 800473a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800473c:	2300      	movs	r3, #0
 800473e:	73fb      	strb	r3, [r7, #15]
 8004740:	e00d      	b.n	800475e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	3340      	adds	r3, #64	@ 0x40
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	3301      	adds	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	7bfa      	ldrb	r2, [r7, #15]
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	3b01      	subs	r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d3ec      	bcc.n	8004742 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004768:	883b      	ldrh	r3, [r7, #0]
 800476a:	0418      	lsls	r0, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6819      	ldr	r1, [r3, #0]
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	3b01      	subs	r3, #1
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	4302      	orrs	r2, r0
 8004778:	3340      	adds	r3, #64	@ 0x40
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	887a      	ldrh	r2, [r7, #2]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	460b      	mov	r3, r1
 80047ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e267      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d075      	beq.n	80048d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047e6:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d00c      	beq.n	800480c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047f2:	4b85      	ldr	r3, [pc, #532]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	d112      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047fe:	4b82      	ldr	r3, [pc, #520]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480a:	d10b      	bne.n	8004824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d05b      	beq.n	80048d0 <HAL_RCC_OscConfig+0x108>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d157      	bne.n	80048d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e242      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800482c:	d106      	bne.n	800483c <HAL_RCC_OscConfig+0x74>
 800482e:	4b76      	ldr	r3, [pc, #472]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a75      	ldr	r2, [pc, #468]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e01d      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004844:	d10c      	bne.n	8004860 <HAL_RCC_OscConfig+0x98>
 8004846:	4b70      	ldr	r3, [pc, #448]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a6f      	ldr	r2, [pc, #444]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800484c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b6d      	ldr	r3, [pc, #436]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a6c      	ldr	r2, [pc, #432]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485c:	6013      	str	r3, [r2, #0]
 800485e:	e00b      	b.n	8004878 <HAL_RCC_OscConfig+0xb0>
 8004860:	4b69      	ldr	r3, [pc, #420]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a68      	ldr	r2, [pc, #416]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800486a:	6013      	str	r3, [r2, #0]
 800486c:	4b66      	ldr	r3, [pc, #408]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a65      	ldr	r2, [pc, #404]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd fb1a 	bl	8001eb8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004888:	f7fd fb16 	bl	8001eb8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	@ 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e207      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0xc0>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fd fb06 	bl	8001eb8 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048b0:	f7fd fb02 	bl	8001eb8 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b64      	cmp	r3, #100	@ 0x64
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1f3      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c2:	4b51      	ldr	r3, [pc, #324]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0xe8>
 80048ce:	e000      	b.n	80048d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048de:	4b4a      	ldr	r3, [pc, #296]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ea:	4b47      	ldr	r3, [pc, #284]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d11c      	bne.n	8004930 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048f6:	4b44      	ldr	r3, [pc, #272]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d116      	bne.n	8004930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x152>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e1c7      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	4b3b      	ldr	r3, [pc, #236]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4937      	ldr	r1, [pc, #220]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800492a:	4313      	orrs	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	e03a      	b.n	80049a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004938:	4b34      	ldr	r3, [pc, #208]	@ (8004a0c <HAL_RCC_OscConfig+0x244>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493e:	f7fd fabb 	bl	8001eb8 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004946:	f7fd fab7 	bl	8001eb8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e1a8      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004958:	4b2b      	ldr	r3, [pc, #172]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004964:	4b28      	ldr	r3, [pc, #160]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4925      	ldr	r1, [pc, #148]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
 8004978:	e015      	b.n	80049a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800497a:	4b24      	ldr	r3, [pc, #144]	@ (8004a0c <HAL_RCC_OscConfig+0x244>)
 800497c:	2200      	movs	r2, #0
 800497e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004980:	f7fd fa9a 	bl	8001eb8 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004988:	f7fd fa96 	bl	8001eb8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e187      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800499a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d036      	beq.n	8004a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d016      	beq.n	80049e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049ba:	4b15      	ldr	r3, [pc, #84]	@ (8004a10 <HAL_RCC_OscConfig+0x248>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fd fa7a 	bl	8001eb8 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049c8:	f7fd fa76 	bl	8001eb8 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e167      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049da:	4b0b      	ldr	r3, [pc, #44]	@ (8004a08 <HAL_RCC_OscConfig+0x240>)
 80049dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0f0      	beq.n	80049c8 <HAL_RCC_OscConfig+0x200>
 80049e6:	e01b      	b.n	8004a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049e8:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <HAL_RCC_OscConfig+0x248>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ee:	f7fd fa63 	bl	8001eb8 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	e00e      	b.n	8004a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f6:	f7fd fa5f 	bl	8001eb8 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d907      	bls.n	8004a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e150      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	42470000 	.word	0x42470000
 8004a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a14:	4b88      	ldr	r3, [pc, #544]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1ea      	bne.n	80049f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 8097 	beq.w	8004b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a32:	4b81      	ldr	r3, [pc, #516]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10f      	bne.n	8004a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	4b7d      	ldr	r3, [pc, #500]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a46:	4a7c      	ldr	r2, [pc, #496]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5e:	4b77      	ldr	r3, [pc, #476]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d118      	bne.n	8004a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a6a:	4b74      	ldr	r3, [pc, #464]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a73      	ldr	r2, [pc, #460]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a76:	f7fd fa1f 	bl	8001eb8 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7e:	f7fd fa1b 	bl	8001eb8 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e10c      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4b6a      	ldr	r3, [pc, #424]	@ (8004c3c <HAL_RCC_OscConfig+0x474>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d0f0      	beq.n	8004a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d106      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x2ea>
 8004aa4:	4b64      	ldr	r3, [pc, #400]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa8:	4a63      	ldr	r2, [pc, #396]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab0:	e01c      	b.n	8004aec <HAL_RCC_OscConfig+0x324>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b05      	cmp	r3, #5
 8004ab8:	d10c      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x30c>
 8004aba:	4b5f      	ldr	r3, [pc, #380]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	4a5e      	ldr	r2, [pc, #376]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	4a5b      	ldr	r2, [pc, #364]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ad2:	e00b      	b.n	8004aec <HAL_RCC_OscConfig+0x324>
 8004ad4:	4b58      	ldr	r3, [pc, #352]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad8:	4a57      	ldr	r2, [pc, #348]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae0:	4b55      	ldr	r3, [pc, #340]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae4:	4a54      	ldr	r2, [pc, #336]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004ae6:	f023 0304 	bic.w	r3, r3, #4
 8004aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d015      	beq.n	8004b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd f9e0 	bl	8001eb8 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fd f9dc 	bl	8001eb8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0cb      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b12:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0ee      	beq.n	8004afc <HAL_RCC_OscConfig+0x334>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fd f9ca 	bl	8001eb8 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fd f9c6 	bl	8001eb8 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e0b5      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1ee      	bne.n	8004b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b4a:	7dfb      	ldrb	r3, [r7, #23]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b50:	4b39      	ldr	r3, [pc, #228]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b54:	4a38      	ldr	r2, [pc, #224]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a1 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b66:	4b34      	ldr	r3, [pc, #208]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d05c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d141      	bne.n	8004bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b7a:	4b31      	ldr	r3, [pc, #196]	@ (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b80:	f7fd f99a 	bl	8001eb8 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b88:	f7fd f996 	bl	8001eb8 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e087      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b9a:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	085b      	lsrs	r3, r3, #1
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	491b      	ldr	r1, [pc, #108]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd6:	f7fd f96f 	bl	8001eb8 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bde:	f7fd f96b 	bl	8001eb8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e05c      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf0:	4b11      	ldr	r3, [pc, #68]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x416>
 8004bfc:	e054      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfe:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <HAL_RCC_OscConfig+0x478>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fd f958 	bl	8001eb8 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c0c:	f7fd f954 	bl	8001eb8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e045      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <HAL_RCC_OscConfig+0x470>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0x444>
 8004c2a:	e03d      	b.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e038      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x4ec>)
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d028      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d121      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d11a      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d111      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d001      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800

08004cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0cc      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ccc:	4b68      	ldr	r3, [pc, #416]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90c      	bls.n	8004cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cda:	4b65      	ldr	r3, [pc, #404]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	b2d2      	uxtb	r2, r2
 8004ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ce2:	4b63      	ldr	r3, [pc, #396]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 030f 	and.w	r3, r3, #15
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0b8      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0302 	and.w	r3, r3, #2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d020      	beq.n	8004d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d0c:	4b59      	ldr	r3, [pc, #356]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	4a58      	ldr	r2, [pc, #352]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d24:	4b53      	ldr	r3, [pc, #332]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a52      	ldr	r2, [pc, #328]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d30:	4b50      	ldr	r3, [pc, #320]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	494d      	ldr	r1, [pc, #308]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d044      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d56:	4b47      	ldr	r3, [pc, #284]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d119      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d003      	beq.n	8004d76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d76:	4b3f      	ldr	r3, [pc, #252]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e06f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d86:	4b3b      	ldr	r3, [pc, #236]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e067      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d96:	4b37      	ldr	r3, [pc, #220]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f023 0203 	bic.w	r2, r3, #3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4934      	ldr	r1, [pc, #208]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004da8:	f7fd f886 	bl	8001eb8 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dae:	e00a      	b.n	8004dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004db0:	f7fd f882 	bl	8001eb8 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e04f      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 020c 	and.w	r2, r3, #12
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d1eb      	bne.n	8004db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd8:	4b25      	ldr	r3, [pc, #148]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d20c      	bcs.n	8004e00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de6:	4b22      	ldr	r3, [pc, #136]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <HAL_RCC_ClockConfig+0x1b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e032      	b.n	8004e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e0c:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4916      	ldr	r1, [pc, #88]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d009      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	490e      	ldr	r1, [pc, #56]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	490a      	ldr	r1, [pc, #40]	@ (8004e78 <HAL_RCC_ClockConfig+0x1c0>)
 8004e50:	5ccb      	ldrb	r3, [r1, r3]
 8004e52:	fa22 f303 	lsr.w	r3, r2, r3
 8004e56:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x1c4>)
 8004e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e5a:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fc ffe6 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40023c00 	.word	0x40023c00
 8004e74:	40023800 	.word	0x40023800
 8004e78:	0800ae3c 	.word	0x0800ae3c
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	2000004c 	.word	0x2000004c

08004e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e88:	b094      	sub	sp, #80	@ 0x50
 8004e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9c:	4b79      	ldr	r3, [pc, #484]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 030c 	and.w	r3, r3, #12
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	f200 80e1 	bhi.w	8005070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d003      	beq.n	8004ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8004eb6:	e0db      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004eb8:	4b73      	ldr	r3, [pc, #460]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ebc:	e0db      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ebe:	4b73      	ldr	r3, [pc, #460]	@ (800508c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec2:	e0d8      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ec4:	4b6f      	ldr	r3, [pc, #444]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ecc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ece:	4b6d      	ldr	r3, [pc, #436]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d063      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eda:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	099b      	lsrs	r3, r3, #6
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ee4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	f04f 0000 	mov.w	r0, #0
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	0159      	lsls	r1, r3, #5
 8004f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f08:	0150      	lsls	r0, r2, #5
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4621      	mov	r1, r4
 8004f10:	1a51      	subs	r1, r2, r1
 8004f12:	6139      	str	r1, [r7, #16]
 8004f14:	4629      	mov	r1, r5
 8004f16:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1a:	617b      	str	r3, [r7, #20]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f28:	4659      	mov	r1, fp
 8004f2a:	018b      	lsls	r3, r1, #6
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f32:	4651      	mov	r1, sl
 8004f34:	018a      	lsls	r2, r1, #6
 8004f36:	4651      	mov	r1, sl
 8004f38:	ebb2 0801 	subs.w	r8, r2, r1
 8004f3c:	4659      	mov	r1, fp
 8004f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f56:	4690      	mov	r8, r2
 8004f58:	4699      	mov	r9, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	eb18 0303 	adds.w	r3, r8, r3
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	462b      	mov	r3, r5
 8004f64:	eb49 0303 	adc.w	r3, r9, r3
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f76:	4629      	mov	r1, r5
 8004f78:	024b      	lsls	r3, r1, #9
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f80:	4621      	mov	r1, r4
 8004f82:	024a      	lsls	r2, r1, #9
 8004f84:	4610      	mov	r0, r2
 8004f86:	4619      	mov	r1, r3
 8004f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f94:	f7fb f98c 	bl	80002b0 <__aeabi_uldivmod>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa0:	e058      	b.n	8005054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa2:	4b38      	ldr	r3, [pc, #224]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	4611      	mov	r1, r2
 8004fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	f04f 0000 	mov.w	r0, #0
 8004fc4:	f04f 0100 	mov.w	r1, #0
 8004fc8:	0159      	lsls	r1, r3, #5
 8004fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fce:	0150      	lsls	r0, r2, #5
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8004ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	00eb      	lsls	r3, r5, #3
 8005006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800500a:	00e2      	lsls	r2, r4, #3
 800500c:	4614      	mov	r4, r2
 800500e:	461d      	mov	r5, r3
 8005010:	4643      	mov	r3, r8
 8005012:	18e3      	adds	r3, r4, r3
 8005014:	603b      	str	r3, [r7, #0]
 8005016:	464b      	mov	r3, r9
 8005018:	eb45 0303 	adc.w	r3, r5, r3
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800502a:	4629      	mov	r1, r5
 800502c:	028b      	lsls	r3, r1, #10
 800502e:	4621      	mov	r1, r4
 8005030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005034:	4621      	mov	r1, r4
 8005036:	028a      	lsls	r2, r1, #10
 8005038:	4610      	mov	r0, r2
 800503a:	4619      	mov	r1, r3
 800503c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800503e:	2200      	movs	r2, #0
 8005040:	61bb      	str	r3, [r7, #24]
 8005042:	61fa      	str	r2, [r7, #28]
 8005044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005048:	f7fb f932 	bl	80002b0 <__aeabi_uldivmod>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4613      	mov	r3, r2
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005054:	4b0b      	ldr	r3, [pc, #44]	@ (8005084 <HAL_RCC_GetSysClockFreq+0x200>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	0c1b      	lsrs	r3, r3, #16
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	3301      	adds	r3, #1
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005064:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800506e:	e002      	b.n	8005076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005070:	4b05      	ldr	r3, [pc, #20]	@ (8005088 <HAL_RCC_GetSysClockFreq+0x204>)
 8005072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005078:	4618      	mov	r0, r3
 800507a:	3750      	adds	r7, #80	@ 0x50
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005082:	bf00      	nop
 8005084:	40023800 	.word	0x40023800
 8005088:	00f42400 	.word	0x00f42400
 800508c:	007a1200 	.word	0x007a1200

08005090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005094:	4b03      	ldr	r3, [pc, #12]	@ (80050a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	20000000 	.word	0x20000000

080050a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10b      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d075      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050dc:	4b91      	ldr	r3, [pc, #580]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050e2:	f7fc fee9 	bl	8001eb8 <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050ea:	f7fc fee5 	bl	8001eb8 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e189      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050fc:	4b8a      	ldr	r3, [pc, #552]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d009      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	019a      	lsls	r2, r3, #6
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	071b      	lsls	r3, r3, #28
 8005120:	4981      	ldr	r1, [pc, #516]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01f      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005134:	4b7c      	ldr	r3, [pc, #496]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800513a:	0f1b      	lsrs	r3, r3, #28
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	019a      	lsls	r2, r3, #6
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	061b      	lsls	r3, r3, #24
 800514e:	431a      	orrs	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	071b      	lsls	r3, r3, #28
 8005154:	4974      	ldr	r1, [pc, #464]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800515c:	4b72      	ldr	r3, [pc, #456]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800515e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005162:	f023 021f 	bic.w	r2, r3, #31
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	3b01      	subs	r3, #1
 800516c:	496e      	ldr	r1, [pc, #440]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	019a      	lsls	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	061b      	lsls	r3, r3, #24
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	071b      	lsls	r3, r3, #28
 8005194:	4964      	ldr	r1, [pc, #400]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800519c:	4b61      	ldr	r3, [pc, #388]	@ (8005324 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800519e:	2201      	movs	r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051a2:	f7fc fe89 	bl	8001eb8 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051aa:	f7fc fe85 	bl	8001eb8 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e129      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d079      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80051e0:	4b52      	ldr	r3, [pc, #328]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051e6:	f7fc fe67 	bl	8001eb8 <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051ec:	e008      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051ee:	f7fc fe63 	bl	8001eb8 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d901      	bls.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e107      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005200:	4b49      	ldr	r3, [pc, #292]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800520c:	d0ef      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800521a:	4b43      	ldr	r3, [pc, #268]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005220:	0f1b      	lsrs	r3, r3, #28
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	019a      	lsls	r2, r3, #6
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	431a      	orrs	r2, r3
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	493b      	ldr	r1, [pc, #236]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005242:	4b39      	ldr	r3, [pc, #228]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005248:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a1b      	ldr	r3, [r3, #32]
 8005250:	3b01      	subs	r3, #1
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	4934      	ldr	r1, [pc, #208]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01e      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005268:	4b2f      	ldr	r3, [pc, #188]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800526e:	0e1b      	lsrs	r3, r3, #24
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	019a      	lsls	r2, r3, #6
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	061b      	lsls	r3, r3, #24
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	071b      	lsls	r3, r3, #28
 8005288:	4927      	ldr	r1, [pc, #156]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800528a:	4313      	orrs	r3, r2
 800528c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005290:	4b25      	ldr	r3, [pc, #148]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005292:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005296:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	4922      	ldr	r1, [pc, #136]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052a6:	4b21      	ldr	r3, [pc, #132]	@ (800532c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ac:	f7fc fe04 	bl	8001eb8 <HAL_GetTick>
 80052b0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052b4:	f7fc fe00 	bl	8001eb8 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0a4      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052c6:	4b18      	ldr	r3, [pc, #96]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052d2:	d1ef      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 808b 	beq.w	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	4b10      	ldr	r3, [pc, #64]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ea:	4a0f      	ldr	r2, [pc, #60]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a0b      	ldr	r2, [pc, #44]	@ (8005330 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005308:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800530a:	f7fc fdd5 	bl	8001eb8 <HAL_GetTick>
 800530e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005310:	e010      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005312:	f7fc fdd1 	bl	8001eb8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d909      	bls.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e075      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005324:	42470068 	.word	0x42470068
 8005328:	40023800 	.word	0x40023800
 800532c:	42470070 	.word	0x42470070
 8005330:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005334:	4b38      	ldr	r3, [pc, #224]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0e8      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005340:	4b36      	ldr	r3, [pc, #216]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005344:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005348:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02f      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	429a      	cmp	r2, r3
 800535c:	d028      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800535e:	4b2f      	ldr	r3, [pc, #188]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005366:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005368:	4b2d      	ldr	r3, [pc, #180]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800536a:	2201      	movs	r2, #1
 800536c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800536e:	4b2c      	ldr	r3, [pc, #176]	@ (8005420 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005370:	2200      	movs	r2, #0
 8005372:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005374:	4a29      	ldr	r2, [pc, #164]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800537a:	4b28      	ldr	r3, [pc, #160]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b01      	cmp	r3, #1
 8005384:	d114      	bne.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005386:	f7fc fd97 	bl	8001eb8 <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800538c:	e00a      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538e:	f7fc fd93 	bl	8001eb8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e035      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a4:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ee      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053bc:	d10d      	bne.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x332>
 80053be:	4b17      	ldr	r3, [pc, #92]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80053ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d2:	4912      	ldr	r1, [pc, #72]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	608b      	str	r3, [r1, #8]
 80053d8:	e005      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80053da:	4b10      	ldr	r3, [pc, #64]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4a0f      	ldr	r2, [pc, #60]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80053e4:	6093      	str	r3, [r2, #8]
 80053e6:	4b0d      	ldr	r3, [pc, #52]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053e8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f2:	490a      	ldr	r1, [pc, #40]	@ (800541c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800540c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40007000 	.word	0x40007000
 800541c:	40023800 	.word	0x40023800
 8005420:	42470e40 	.word	0x42470e40
 8005424:	424711e0 	.word	0x424711e0

08005428 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e025      	b.n	8005488 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f81d 	bl	8005490 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f000 fe93 	bl	8006194 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	461a      	mov	r2, r3
 8005478:	6839      	ldr	r1, [r7, #0]
 800547a:	f000 fee8 	bl	800624e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b086      	sub	sp, #24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80054b6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d101      	bne.n	80054c2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80054be:	2302      	movs	r3, #2
 80054c0:	e021      	b.n	8005506 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d002      	beq.n	80054ce <HAL_SDRAM_SendCommand+0x2a>
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d118      	bne.n	8005500 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 ff1e 	bl	8006320 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d104      	bne.n	80054f6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2205      	movs	r2, #5
 80054f0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054f4:	e006      	b.n	8005504 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80054fe:	e001      	b.n	8005504 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3718      	adds	r7, #24
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b082      	sub	sp, #8
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b02      	cmp	r3, #2
 8005522:	d101      	bne.n	8005528 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
 8005526:	e016      	b.n	8005556 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	d10f      	bne.n	8005554 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 ff29 	bl	800639a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	e000      	b.n	8005556 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e07b      	b.n	8005668 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005574:	2b00      	cmp	r3, #0
 8005576:	d108      	bne.n	800558a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005580:	d009      	beq.n	8005596 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	61da      	str	r2, [r3, #28]
 8005588:	e005      	b.n	8005596 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f885 	bl	80056c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	431a      	orrs	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561a:	ea42 0103 	orr.w	r1, r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005622:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	0c1b      	lsrs	r3, r3, #16
 8005634:	f003 0104 	and.w	r1, r3, #4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	f003 0210 	and.w	r2, r3, #16
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005656:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e01a      	b.n	80056b8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2202      	movs	r2, #2
 8005686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005698:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f81a 	bl	80056d4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b088      	sub	sp, #32
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f8:	f7fc fbde 	bl	8001eb8 <HAL_GetTick>
 80056fc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b01      	cmp	r3, #1
 800570c:	d001      	beq.n	8005712 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	e12a      	b.n	8005968 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_SPI_Transmit+0x36>
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e122      	b.n	8005968 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_SPI_Transmit+0x48>
 800572c:	2302      	movs	r3, #2
 800572e:	e11b      	b.n	8005968 <HAL_SPI_Transmit+0x280>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2203      	movs	r2, #3
 800573c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	88fa      	ldrh	r2, [r7, #6]
 8005750:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	88fa      	ldrh	r2, [r7, #6]
 8005756:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800577e:	d10f      	bne.n	80057a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800578e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800579e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057aa:	2b40      	cmp	r3, #64	@ 0x40
 80057ac:	d007      	beq.n	80057be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c6:	d152      	bne.n	800586e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <HAL_SPI_Transmit+0xee>
 80057d0:	8b7b      	ldrh	r3, [r7, #26]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d145      	bne.n	8005862 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057da:	881a      	ldrh	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057e6:	1c9a      	adds	r2, r3, #2
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057fa:	e032      	b.n	8005862 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b02      	cmp	r3, #2
 8005808:	d112      	bne.n	8005830 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	881a      	ldrh	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	1c9a      	adds	r2, r3, #2
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800582e:	e018      	b.n	8005862 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005830:	f7fc fb42 	bl	8001eb8 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d803      	bhi.n	8005848 <HAL_SPI_Transmit+0x160>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d102      	bne.n	800584e <HAL_SPI_Transmit+0x166>
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e082      	b.n	8005968 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005866:	b29b      	uxth	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1c7      	bne.n	80057fc <HAL_SPI_Transmit+0x114>
 800586c:	e053      	b.n	8005916 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d002      	beq.n	800587c <HAL_SPI_Transmit+0x194>
 8005876:	8b7b      	ldrh	r3, [r7, #26]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d147      	bne.n	800590c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	7812      	ldrb	r2, [r2, #0]
 8005888:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058a2:	e033      	b.n	800590c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f003 0302 	and.w	r3, r3, #2
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d113      	bne.n	80058da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	330c      	adds	r3, #12
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058d8:	e018      	b.n	800590c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058da:	f7fc faed 	bl	8001eb8 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d803      	bhi.n	80058f2 <HAL_SPI_Transmit+0x20a>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f0:	d102      	bne.n	80058f8 <HAL_SPI_Transmit+0x210>
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d109      	bne.n	800590c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e02d      	b.n	8005968 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1c6      	bne.n	80058a4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	6839      	ldr	r1, [r7, #0]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 fbe6 	bl	80060ec <SPI_EndRxTxTransaction>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d002      	beq.n	800592c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005966:	2300      	movs	r3, #0
  }
}
 8005968:	4618      	mov	r0, r3
 800596a:	3720      	adds	r7, #32
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b088      	sub	sp, #32
 8005974:	af02      	add	r7, sp, #8
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	603b      	str	r3, [r7, #0]
 800597c:	4613      	mov	r3, r2
 800597e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b01      	cmp	r3, #1
 800598a:	d001      	beq.n	8005990 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
 800598e:	e104      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005998:	d112      	bne.n	80059c0 <HAL_SPI_Receive+0x50>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10e      	bne.n	80059c0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2204      	movs	r2, #4
 80059a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4613      	mov	r3, r2
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f000 f8f3 	bl	8005ba2 <HAL_SPI_TransmitReceive>
 80059bc:	4603      	mov	r3, r0
 80059be:	e0ec      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c0:	f7fc fa7a 	bl	8001eb8 <HAL_GetTick>
 80059c4:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d002      	beq.n	80059d2 <HAL_SPI_Receive+0x62>
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e0e1      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_SPI_Receive+0x74>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e0da      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2204      	movs	r2, #4
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	88fa      	ldrh	r2, [r7, #6]
 8005a04:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a32:	d10f      	bne.n	8005a54 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d007      	beq.n	8005a72 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d170      	bne.n	8005b5c <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a7a:	e035      	b.n	8005ae8 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d115      	bne.n	8005ab6 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f103 020c 	add.w	r2, r3, #12
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa0:	1c5a      	adds	r2, r3, #1
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ab4:	e018      	b.n	8005ae8 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab6:	f7fc f9ff 	bl	8001eb8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d803      	bhi.n	8005ace <HAL_SPI_Receive+0x15e>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d102      	bne.n	8005ad4 <HAL_SPI_Receive+0x164>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d109      	bne.n	8005ae8 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e058      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1c4      	bne.n	8005a7c <HAL_SPI_Receive+0x10c>
 8005af2:	e038      	b.n	8005b66 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d113      	bne.n	8005b2a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b28:	e018      	b.n	8005b5c <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b2a:	f7fc f9c5 	bl	8001eb8 <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d803      	bhi.n	8005b42 <HAL_SPI_Receive+0x1d2>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d102      	bne.n	8005b48 <HAL_SPI_Receive+0x1d8>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e01e      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1c6      	bne.n	8005af4 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa58 	bl	8006020 <SPI_EndRxTransaction>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d001      	beq.n	8005b98 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005b98:	2300      	movs	r3, #0
  }
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08a      	sub	sp, #40	@ 0x28
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	60b9      	str	r1, [r7, #8]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bb4:	f7fc f980 	bl	8001eb8 <HAL_GetTick>
 8005bb8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005bc8:	887b      	ldrh	r3, [r7, #2]
 8005bca:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d00c      	beq.n	8005bec <HAL_SPI_TransmitReceive+0x4a>
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd8:	d106      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <HAL_SPI_TransmitReceive+0x46>
 8005be2:	7ffb      	ldrb	r3, [r7, #31]
 8005be4:	2b04      	cmp	r3, #4
 8005be6:	d001      	beq.n	8005bec <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005be8:	2302      	movs	r3, #2
 8005bea:	e17f      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d005      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x5c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_TransmitReceive+0x5c>
 8005bf8:	887b      	ldrh	r3, [r7, #2]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e174      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x6e>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e16d      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d003      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2205      	movs	r2, #5
 8005c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	887a      	ldrh	r2, [r7, #2]
 8005c42:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	887a      	ldrh	r2, [r7, #2]
 8005c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	887a      	ldrh	r2, [r7, #2]
 8005c54:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d007      	beq.n	8005c80 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c88:	d17e      	bne.n	8005d88 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_SPI_TransmitReceive+0xf6>
 8005c92:	8afb      	ldrh	r3, [r7, #22]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d16c      	bne.n	8005d72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9c:	881a      	ldrh	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca8:	1c9a      	adds	r2, r3, #2
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cbc:	e059      	b.n	8005d72 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d11b      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x162>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d016      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x162>
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d113      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce0:	881a      	ldrh	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	1c9a      	adds	r2, r3, #2
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d119      	bne.n	8005d46 <HAL_SPI_TransmitReceive+0x1a4>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d014      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	b292      	uxth	r2, r2
 8005d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d42:	2301      	movs	r3, #1
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d46:	f7fc f8b7 	bl	8001eb8 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d80d      	bhi.n	8005d72 <HAL_SPI_TransmitReceive+0x1d0>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d009      	beq.n	8005d72 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0bc      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1a0      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x11c>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d19b      	bne.n	8005cbe <HAL_SPI_TransmitReceive+0x11c>
 8005d86:	e082      	b.n	8005e8e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_TransmitReceive+0x1f4>
 8005d90:	8afb      	ldrh	r3, [r7, #22]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d171      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	330c      	adds	r3, #12
 8005da0:	7812      	ldrb	r2, [r2, #0]
 8005da2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	3b01      	subs	r3, #1
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	e05d      	b.n	8005e7a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d11c      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x264>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d017      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x264>
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d114      	bne.n	8005e06 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	7812      	ldrb	r2, [r2, #0]
 8005de8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	b29a      	uxth	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d119      	bne.n	8005e48 <HAL_SPI_TransmitReceive+0x2a6>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d014      	beq.n	8005e48 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e44:	2301      	movs	r3, #1
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e48:	f7fc f836 	bl	8001eb8 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d803      	bhi.n	8005e60 <HAL_SPI_TransmitReceive+0x2be>
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d102      	bne.n	8005e66 <HAL_SPI_TransmitReceive+0x2c4>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d109      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e038      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d19c      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x21c>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d197      	bne.n	8005dbe <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e8e:	6a3a      	ldr	r2, [r7, #32]
 8005e90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f92a 	bl	80060ec <SPI_EndRxTxTransaction>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e01d      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	613b      	str	r3, [r7, #16]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005eea:	2300      	movs	r3, #0
  }
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3728      	adds	r7, #40	@ 0x28
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f02:	b2db      	uxtb	r3, r3
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f20:	f7fb ffca 	bl	8001eb8 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f30:	f7fb ffc2 	bl	8001eb8 <HAL_GetTick>
 8005f34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f36:	4b39      	ldr	r3, [pc, #228]	@ (800601c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	015b      	lsls	r3, r3, #5
 8005f3c:	0d1b      	lsrs	r3, r3, #20
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	fb02 f303 	mul.w	r3, r2, r3
 8005f44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f46:	e054      	b.n	8005ff2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4e:	d050      	beq.n	8005ff2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f50:	f7fb ffb2 	bl	8001eb8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d902      	bls.n	8005f66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d13d      	bne.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f7e:	d111      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f88:	d004      	beq.n	8005f94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f92:	d107      	bne.n	8005fa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fac:	d10f      	bne.n	8005fce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e017      	b.n	8006012 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	689a      	ldr	r2, [r3, #8]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	bf0c      	ite	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	2300      	movne	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	461a      	mov	r2, r3
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	429a      	cmp	r2, r3
 800600e:	d19b      	bne.n	8005f48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000000 	.word	0x20000000

08006020 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006034:	d111      	bne.n	800605a <SPI_EndRxTransaction+0x3a>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800603e:	d004      	beq.n	800604a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006048:	d107      	bne.n	800605a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006058:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006062:	d12a      	bne.n	80060ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606c:	d012      	beq.n	8006094 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2200      	movs	r2, #0
 8006076:	2180      	movs	r1, #128	@ 0x80
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff ff49 	bl	8005f10 <SPI_WaitFlagStateUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d02d      	beq.n	80060e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006088:	f043 0220 	orr.w	r2, r3, #32
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e026      	b.n	80060e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	2101      	movs	r1, #1
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f7ff ff36 	bl	8005f10 <SPI_WaitFlagStateUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01a      	beq.n	80060e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e013      	b.n	80060e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2101      	movs	r1, #1
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f7ff ff23 	bl	8005f10 <SPI_WaitFlagStateUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d007      	beq.n	80060e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e000      	b.n	80060e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b088      	sub	sp, #32
 80060f0:	af02      	add	r7, sp, #8
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2201      	movs	r2, #1
 8006100:	2102      	movs	r1, #2
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f7ff ff04 	bl	8005f10 <SPI_WaitFlagStateUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d007      	beq.n	800611e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006112:	f043 0220 	orr.w	r2, r3, #32
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e032      	b.n	8006184 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800611e:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <SPI_EndRxTxTransaction+0xa0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1b      	ldr	r2, [pc, #108]	@ (8006190 <SPI_EndRxTxTransaction+0xa4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	0d5b      	lsrs	r3, r3, #21
 800612a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800612e:	fb02 f303 	mul.w	r3, r2, r3
 8006132:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800613c:	d112      	bne.n	8006164 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	2180      	movs	r1, #128	@ 0x80
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f7ff fee1 	bl	8005f10 <SPI_WaitFlagStateUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d016      	beq.n	8006182 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e00f      	b.n	8006184 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00a      	beq.n	8006180 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	3b01      	subs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617a:	2b80      	cmp	r3, #128	@ 0x80
 800617c:	d0f2      	beq.n	8006164 <SPI_EndRxTxTransaction+0x78>
 800617e:	e000      	b.n	8006182 <SPI_EndRxTxTransaction+0x96>
        break;
 8006180:	bf00      	nop
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3718      	adds	r7, #24
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	20000000 	.word	0x20000000
 8006190:	165e9f81 	.word	0x165e9f81

08006194 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d123      	bne.n	80061ee <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80061ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	6851      	ldr	r1, [r2, #4]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	6892      	ldr	r2, [r2, #8]
 80061ba:	4311      	orrs	r1, r2
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	68d2      	ldr	r2, [r2, #12]
 80061c0:	4311      	orrs	r1, r2
 80061c2:	683a      	ldr	r2, [r7, #0]
 80061c4:	6912      	ldr	r2, [r2, #16]
 80061c6:	4311      	orrs	r1, r2
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	6952      	ldr	r2, [r2, #20]
 80061cc:	4311      	orrs	r1, r2
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	6992      	ldr	r2, [r2, #24]
 80061d2:	4311      	orrs	r1, r2
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	69d2      	ldr	r2, [r2, #28]
 80061d8:	4311      	orrs	r1, r2
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	6a12      	ldr	r2, [r2, #32]
 80061de:	4311      	orrs	r1, r2
 80061e0:	683a      	ldr	r2, [r7, #0]
 80061e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061e4:	430a      	orrs	r2, r1
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e028      	b.n	8006240 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	69d9      	ldr	r1, [r3, #28]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	4319      	orrs	r1, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006204:	430b      	orrs	r3, r1
 8006206:	431a      	orrs	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006214:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	6851      	ldr	r1, [r2, #4]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	6892      	ldr	r2, [r2, #8]
 8006220:	4311      	orrs	r1, r2
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	68d2      	ldr	r2, [r2, #12]
 8006226:	4311      	orrs	r1, r2
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	6912      	ldr	r2, [r2, #16]
 800622c:	4311      	orrs	r1, r2
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	6952      	ldr	r2, [r2, #20]
 8006232:	4311      	orrs	r1, r2
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	6992      	ldr	r2, [r2, #24]
 8006238:	430a      	orrs	r2, r1
 800623a:	431a      	orrs	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d128      	bne.n	80062b2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	1e59      	subs	r1, r3, #1
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	3b01      	subs	r3, #1
 8006274:	011b      	lsls	r3, r3, #4
 8006276:	4319      	orrs	r1, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	3b01      	subs	r3, #1
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	4319      	orrs	r1, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	3b01      	subs	r3, #1
 8006288:	031b      	lsls	r3, r3, #12
 800628a:	4319      	orrs	r1, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	3b01      	subs	r3, #1
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	4319      	orrs	r1, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	3b01      	subs	r3, #1
 800629c:	051b      	lsls	r3, r3, #20
 800629e:	4319      	orrs	r1, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	061b      	lsls	r3, r3, #24
 80062a8:	430b      	orrs	r3, r1
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	e02f      	b.n	8006312 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	68d2      	ldr	r2, [r2, #12]
 80062c2:	3a01      	subs	r2, #1
 80062c4:	0311      	lsls	r1, r2, #12
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	6952      	ldr	r2, [r2, #20]
 80062ca:	3a01      	subs	r2, #1
 80062cc:	0512      	lsls	r2, r2, #20
 80062ce:	430a      	orrs	r2, r1
 80062d0:	431a      	orrs	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1e59      	subs	r1, r3, #1
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	4319      	orrs	r1, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	021b      	lsls	r3, r3, #8
 80062f6:	4319      	orrs	r1, r3
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	3b01      	subs	r3, #1
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	4319      	orrs	r1, r3
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	3b01      	subs	r3, #1
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	430b      	orrs	r3, r1
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	0d9b      	lsrs	r3, r3, #22
 8006336:	059b      	lsls	r3, r3, #22
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	6811      	ldr	r1, [r2, #0]
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	6852      	ldr	r2, [r2, #4]
 8006340:	4311      	orrs	r1, r2
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6892      	ldr	r2, [r2, #8]
 8006346:	3a01      	subs	r2, #1
 8006348:	0152      	lsls	r2, r2, #5
 800634a:	4311      	orrs	r1, r2
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	68d2      	ldr	r2, [r2, #12]
 8006350:	0252      	lsls	r2, r2, #9
 8006352:	430a      	orrs	r2, r1
 8006354:	431a      	orrs	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800635a:	f7fb fdad 	bl	8001eb8 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006360:	e010      	b.n	8006384 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006368:	d00c      	beq.n	8006384 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <FMC_SDRAM_SendCommand+0x60>
 8006370:	f7fb fda2 	bl	8001eb8 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d201      	bcs.n	8006384 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e006      	b.n	8006392 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b20      	cmp	r3, #32
 800638e:	d0e8      	beq.n	8006362 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
 80063a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80063ac:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	0052      	lsls	r2, r2, #1
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063c8:	b084      	sub	sp, #16
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	f107 001c 	add.w	r0, r7, #28
 80063d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80063da:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d123      	bne.n	800642a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80063f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800640a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800640e:	2b01      	cmp	r3, #1
 8006410:	d105      	bne.n	800641e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fae8 	bl	80079f4 <USB_CoreReset>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
 8006428:	e01b      	b.n	8006462 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fadc 	bl	80079f4 <USB_CoreReset>
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006440:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	639a      	str	r2, [r3, #56]	@ 0x38
 8006454:	e005      	b.n	8006462 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006462:	7fbb      	ldrb	r3, [r7, #30]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10b      	bne.n	8006480 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f043 0206 	orr.w	r2, r3, #6
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f043 0220 	orr.w	r2, r3, #32
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800648c:	b004      	add	sp, #16
 800648e:	4770      	bx	lr

08006490 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d165      	bne.n	8006570 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4a41      	ldr	r2, [pc, #260]	@ (80065ac <USB_SetTurnaroundTime+0x11c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d906      	bls.n	80064ba <USB_SetTurnaroundTime+0x2a>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4a40      	ldr	r2, [pc, #256]	@ (80065b0 <USB_SetTurnaroundTime+0x120>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d202      	bcs.n	80064ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064b4:	230f      	movs	r3, #15
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	e062      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4a3c      	ldr	r2, [pc, #240]	@ (80065b0 <USB_SetTurnaroundTime+0x120>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d306      	bcc.n	80064d0 <USB_SetTurnaroundTime+0x40>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4a3b      	ldr	r2, [pc, #236]	@ (80065b4 <USB_SetTurnaroundTime+0x124>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d202      	bcs.n	80064d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064ca:	230e      	movs	r3, #14
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e057      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4a38      	ldr	r2, [pc, #224]	@ (80065b4 <USB_SetTurnaroundTime+0x124>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d306      	bcc.n	80064e6 <USB_SetTurnaroundTime+0x56>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	4a37      	ldr	r2, [pc, #220]	@ (80065b8 <USB_SetTurnaroundTime+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d202      	bcs.n	80064e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80064e0:	230d      	movs	r3, #13
 80064e2:	617b      	str	r3, [r7, #20]
 80064e4:	e04c      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4a33      	ldr	r2, [pc, #204]	@ (80065b8 <USB_SetTurnaroundTime+0x128>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d306      	bcc.n	80064fc <USB_SetTurnaroundTime+0x6c>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a32      	ldr	r2, [pc, #200]	@ (80065bc <USB_SetTurnaroundTime+0x12c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d802      	bhi.n	80064fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80064f6:	230c      	movs	r3, #12
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e041      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a2f      	ldr	r2, [pc, #188]	@ (80065bc <USB_SetTurnaroundTime+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d906      	bls.n	8006512 <USB_SetTurnaroundTime+0x82>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4a2e      	ldr	r2, [pc, #184]	@ (80065c0 <USB_SetTurnaroundTime+0x130>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d802      	bhi.n	8006512 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800650c:	230b      	movs	r3, #11
 800650e:	617b      	str	r3, [r7, #20]
 8006510:	e036      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4a2a      	ldr	r2, [pc, #168]	@ (80065c0 <USB_SetTurnaroundTime+0x130>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d906      	bls.n	8006528 <USB_SetTurnaroundTime+0x98>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4a29      	ldr	r2, [pc, #164]	@ (80065c4 <USB_SetTurnaroundTime+0x134>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d802      	bhi.n	8006528 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006522:	230a      	movs	r3, #10
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e02b      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a26      	ldr	r2, [pc, #152]	@ (80065c4 <USB_SetTurnaroundTime+0x134>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d906      	bls.n	800653e <USB_SetTurnaroundTime+0xae>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4a25      	ldr	r2, [pc, #148]	@ (80065c8 <USB_SetTurnaroundTime+0x138>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d202      	bcs.n	800653e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006538:	2309      	movs	r3, #9
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e020      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a21      	ldr	r2, [pc, #132]	@ (80065c8 <USB_SetTurnaroundTime+0x138>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d306      	bcc.n	8006554 <USB_SetTurnaroundTime+0xc4>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4a20      	ldr	r2, [pc, #128]	@ (80065cc <USB_SetTurnaroundTime+0x13c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d802      	bhi.n	8006554 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800654e:	2308      	movs	r3, #8
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e015      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a1d      	ldr	r2, [pc, #116]	@ (80065cc <USB_SetTurnaroundTime+0x13c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d906      	bls.n	800656a <USB_SetTurnaroundTime+0xda>
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	4a1c      	ldr	r2, [pc, #112]	@ (80065d0 <USB_SetTurnaroundTime+0x140>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d202      	bcs.n	800656a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006564:	2307      	movs	r3, #7
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e00a      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800656a:	2306      	movs	r3, #6
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	e007      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d102      	bne.n	800657c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006576:	2309      	movs	r3, #9
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e001      	b.n	8006580 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800657c:	2309      	movs	r3, #9
 800657e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	029b      	lsls	r3, r3, #10
 8006594:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	371c      	adds	r7, #28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	00d8acbf 	.word	0x00d8acbf
 80065b0:	00e4e1c0 	.word	0x00e4e1c0
 80065b4:	00f42400 	.word	0x00f42400
 80065b8:	01067380 	.word	0x01067380
 80065bc:	011a499f 	.word	0x011a499f
 80065c0:	01312cff 	.word	0x01312cff
 80065c4:	014ca43f 	.word	0x014ca43f
 80065c8:	016e3600 	.word	0x016e3600
 80065cc:	01a6ab1f 	.word	0x01a6ab1f
 80065d0:	01e84800 	.word	0x01e84800

080065d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f043 0201 	orr.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 0201 	bic.w	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d115      	bne.n	8006666 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006646:	200a      	movs	r0, #10
 8006648:	f7fb fc42 	bl	8001ed0 <HAL_Delay>
      ms += 10U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	330a      	adds	r3, #10
 8006650:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f93f 	bl	80078d6 <USB_GetMode>
 8006658:	4603      	mov	r3, r0
 800665a:	2b01      	cmp	r3, #1
 800665c:	d01e      	beq.n	800669c <USB_SetCurrentMode+0x84>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2bc7      	cmp	r3, #199	@ 0xc7
 8006662:	d9f0      	bls.n	8006646 <USB_SetCurrentMode+0x2e>
 8006664:	e01a      	b.n	800669c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d115      	bne.n	8006698 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006678:	200a      	movs	r0, #10
 800667a:	f7fb fc29 	bl	8001ed0 <HAL_Delay>
      ms += 10U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	330a      	adds	r3, #10
 8006682:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f001 f926 	bl	80078d6 <USB_GetMode>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d005      	beq.n	800669c <USB_SetCurrentMode+0x84>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2bc7      	cmp	r3, #199	@ 0xc7
 8006694:	d9f0      	bls.n	8006678 <USB_SetCurrentMode+0x60>
 8006696:	e001      	b.n	800669c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e005      	b.n	80066a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2bc8      	cmp	r3, #200	@ 0xc8
 80066a0:	d101      	bne.n	80066a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e000      	b.n	80066a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066b0:	b084      	sub	sp, #16
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80066be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	e009      	b.n	80066e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3340      	adds	r3, #64	@ 0x40
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	3301      	adds	r3, #1
 80066e2:	613b      	str	r3, [r7, #16]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b0e      	cmp	r3, #14
 80066e8:	d9f2      	bls.n	80066d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80066ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d11c      	bne.n	800672c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006716:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006722:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	639a      	str	r2, [r3, #56]	@ 0x38
 800672a:	e00b      	b.n	8006744 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006730:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800674a:	461a      	mov	r2, r3
 800674c:	2300      	movs	r3, #0
 800674e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006750:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006754:	2b01      	cmp	r3, #1
 8006756:	d10d      	bne.n	8006774 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f968 	bl	8006a38 <USB_SetDevSpeed>
 8006768:	e008      	b.n	800677c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800676a:	2101      	movs	r1, #1
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f963 	bl	8006a38 <USB_SetDevSpeed>
 8006772:	e003      	b.n	800677c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006774:	2103      	movs	r1, #3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f95e 	bl	8006a38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800677c:	2110      	movs	r1, #16
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f8fa 	bl	8006978 <USB_FlushTxFifo>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f924 	bl	80069dc <USB_FlushRxFifo>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067b0:	461a      	mov	r2, r3
 80067b2:	2300      	movs	r3, #0
 80067b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067bc:	461a      	mov	r2, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	e043      	b.n	8006850 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067de:	d118      	bne.n	8006812 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f2:	461a      	mov	r2, r3
 80067f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e013      	b.n	8006824 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006808:	461a      	mov	r2, r3
 800680a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	e008      	b.n	8006824 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4413      	add	r3, r2
 800681a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800681e:	461a      	mov	r2, r3
 8006820:	2300      	movs	r3, #0
 8006822:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006842:	461a      	mov	r2, r3
 8006844:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006848:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3301      	adds	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006854:	461a      	mov	r2, r3
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4293      	cmp	r3, r2
 800685a:	d3b5      	bcc.n	80067c8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e043      	b.n	80068ea <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006878:	d118      	bne.n	80068ac <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	e013      	b.n	80068be <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a2:	461a      	mov	r2, r3
 80068a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e008      	b.n	80068be <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b8:	461a      	mov	r2, r3
 80068ba:	2300      	movs	r3, #0
 80068bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ca:	461a      	mov	r2, r3
 80068cc:	2300      	movs	r3, #0
 80068ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068dc:	461a      	mov	r2, r3
 80068de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	3301      	adds	r3, #1
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068ee:	461a      	mov	r2, r3
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d3b5      	bcc.n	8006862 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006908:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006916:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006918:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800691c:	2b00      	cmp	r3, #0
 800691e:	d105      	bne.n	800692c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	f043 0210 	orr.w	r2, r3, #16
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	4b10      	ldr	r3, [pc, #64]	@ (8006974 <USB_DevInit+0x2c4>)
 8006932:	4313      	orrs	r3, r2
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006938:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f043 0208 	orr.w	r2, r3, #8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800694c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006950:	2b01      	cmp	r3, #1
 8006952:	d107      	bne.n	8006964 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800695c:	f043 0304 	orr.w	r3, r3, #4
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006970:	b004      	add	sp, #16
 8006972:	4770      	bx	lr
 8006974:	803c3800 	.word	0x803c3800

08006978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006992:	d901      	bls.n	8006998 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e01b      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	daf2      	bge.n	8006986 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	019b      	lsls	r3, r3, #6
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3301      	adds	r3, #1
 80069b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069bc:	d901      	bls.n	80069c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e006      	b.n	80069d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d0f0      	beq.n	80069b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069f4:	d901      	bls.n	80069fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e018      	b.n	8006a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	daf2      	bge.n	80069e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2210      	movs	r2, #16
 8006a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a18:	d901      	bls.n	8006a1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e006      	b.n	8006a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0310 	and.w	r3, r3, #16
 8006a26:	2b10      	cmp	r3, #16
 8006a28:	d0f0      	beq.n	8006a0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	68f9      	ldr	r1, [r7, #12]
 8006a54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b087      	sub	sp, #28
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f003 0306 	and.w	r3, r3, #6
 8006a82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]
 8006a8e:	e00a      	b.n	8006aa6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d002      	beq.n	8006a9c <USB_GetDevSpeed+0x32>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b06      	cmp	r3, #6
 8006a9a:	d102      	bne.n	8006aa2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	75fb      	strb	r3, [r7, #23]
 8006aa0:	e001      	b.n	8006aa6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006aa2:	230f      	movs	r3, #15
 8006aa4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d13a      	bne.n	8006b46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	f003 030f 	and.w	r3, r3, #15
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006aee:	4313      	orrs	r3, r2
 8006af0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d155      	bne.n	8006bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	791b      	ldrb	r3, [r3, #4]
 8006b22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	059b      	lsls	r3, r3, #22
 8006b2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	e036      	b.n	8006bb4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b4c:	69da      	ldr	r2, [r3, #28]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	f003 030f 	and.w	r3, r3, #15
 8006b56:	2101      	movs	r1, #1
 8006b58:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5c:	041b      	lsls	r3, r3, #16
 8006b5e:	68f9      	ldr	r1, [r7, #12]
 8006b60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d11a      	bne.n	8006bb4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	791b      	ldrb	r3, [r3, #4]
 8006b98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b9a:	430b      	orrs	r3, r1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	0151      	lsls	r1, r2, #5
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	440a      	add	r2, r1
 8006ba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	785b      	ldrb	r3, [r3, #1]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d161      	bne.n	8006ca4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bf6:	d11f      	bne.n	8006c38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68ba      	ldr	r2, [r7, #8]
 8006c08:	0151      	lsls	r1, r2, #5
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	440a      	add	r2, r1
 8006c0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c12:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	2101      	movs	r1, #1
 8006c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	43db      	mvns	r3, r3
 8006c52:	68f9      	ldr	r1, [r7, #12]
 8006c54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c58:	4013      	ands	r3, r2
 8006c5a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	f003 030f 	and.w	r3, r3, #15
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	43db      	mvns	r3, r3
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	0159      	lsls	r1, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	440b      	add	r3, r1
 8006c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4b35      	ldr	r3, [pc, #212]	@ (8006d74 <USB_DeactivateEndpoint+0x1b0>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]
 8006ca2:	e060      	b.n	8006d66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006cba:	d11f      	bne.n	8006cfc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006cda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	f003 030f 	and.w	r3, r3, #15
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d12:	041b      	lsls	r3, r3, #16
 8006d14:	43db      	mvns	r3, r3
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	2101      	movs	r1, #1
 8006d32:	fa01 f303 	lsl.w	r3, r1, r3
 8006d36:	041b      	lsls	r3, r3, #16
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	68f9      	ldr	r1, [r7, #12]
 8006d3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d40:	4013      	ands	r3, r2
 8006d42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	0159      	lsls	r1, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	440b      	add	r3, r1
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <USB_DeactivateEndpoint+0x1b4>)
 8006d62:	4013      	ands	r3, r2
 8006d64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr
 8006d74:	ec337800 	.word	0xec337800
 8006d78:	eff37800 	.word	0xeff37800

08006d7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	@ 0x28
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	4613      	mov	r3, r2
 8006d88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	f040 817f 	bne.w	800709c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d132      	bne.n	8006e0c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	69ba      	ldr	r2, [r7, #24]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	69fa      	ldr	r2, [r7, #28]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dc0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006dc4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006de4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006de8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	015a      	lsls	r2, r3, #5
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	4413      	add	r3, r2
 8006df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e04:	0cdb      	lsrs	r3, r3, #19
 8006e06:	04db      	lsls	r3, r3, #19
 8006e08:	6113      	str	r3, [r2, #16]
 8006e0a:	e097      	b.n	8006f3c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e26:	0cdb      	lsrs	r3, r3, #19
 8006e28:	04db      	lsls	r3, r3, #19
 8006e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e4e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d11a      	bne.n	8006e8c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	691a      	ldr	r2, [r3, #16]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d903      	bls.n	8006e6a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e88:	6113      	str	r3, [r2, #16]
 8006e8a:	e044      	b.n	8006f16 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	4413      	add	r3, r2
 8006e96:	1e5a      	subs	r2, r3, #1
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	69fb      	ldr	r3, [r7, #28]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eae:	691a      	ldr	r2, [r3, #16]
 8006eb0:	8afb      	ldrh	r3, [r7, #22]
 8006eb2:	04d9      	lsls	r1, r3, #19
 8006eb4:	4ba4      	ldr	r3, [pc, #656]	@ (8007148 <USB_EPStartXfer+0x3cc>)
 8006eb6:	400b      	ands	r3, r1
 8006eb8:	69b9      	ldr	r1, [r7, #24]
 8006eba:	0148      	lsls	r0, r1, #5
 8006ebc:	69f9      	ldr	r1, [r7, #28]
 8006ebe:	4401      	add	r1, r0
 8006ec0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	791b      	ldrb	r3, [r3, #4]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d122      	bne.n	8006f16 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	69fa      	ldr	r2, [r7, #28]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eea:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006eee:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efc:	691a      	ldr	r2, [r3, #16]
 8006efe:	8afb      	ldrh	r3, [r7, #22]
 8006f00:	075b      	lsls	r3, r3, #29
 8006f02:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f06:	69b9      	ldr	r1, [r7, #24]
 8006f08:	0148      	lsls	r0, r1, #5
 8006f0a:	69f9      	ldr	r1, [r7, #28]
 8006f0c:	4401      	add	r1, r0
 8006f0e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f12:	4313      	orrs	r3, r2
 8006f14:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f22:	691a      	ldr	r2, [r3, #16]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f2c:	69b9      	ldr	r1, [r7, #24]
 8006f2e:	0148      	lsls	r0, r1, #5
 8006f30:	69f9      	ldr	r1, [r7, #28]
 8006f32:	4401      	add	r1, r0
 8006f34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d14b      	bne.n	8006fda <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f56:	461a      	mov	r2, r3
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	791b      	ldrb	r3, [r3, #4]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d128      	bne.n	8006fb8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d110      	bne.n	8006f98 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	0151      	lsls	r1, r2, #5
 8006f88:	69fa      	ldr	r2, [r7, #28]
 8006f8a:	440a      	add	r2, r1
 8006f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	e00f      	b.n	8006fb8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	69fa      	ldr	r2, [r7, #28]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e166      	b.n	80072a8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ff4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ff8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d015      	beq.n	800702e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 814e 	beq.w	80072a8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	2101      	movs	r1, #1
 800701e:	fa01 f303 	lsl.w	r3, r1, r3
 8007022:	69f9      	ldr	r1, [r7, #28]
 8007024:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007028:	4313      	orrs	r3, r2
 800702a:	634b      	str	r3, [r1, #52]	@ 0x34
 800702c:	e13c      	b.n	80072a8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800703a:	2b00      	cmp	r3, #0
 800703c:	d110      	bne.n	8007060 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	015a      	lsls	r2, r3, #5
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	4413      	add	r3, r2
 8007046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	0151      	lsls	r1, r2, #5
 8007050:	69fa      	ldr	r2, [r7, #28]
 8007052:	440a      	add	r2, r1
 8007054:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007058:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e00f      	b.n	8007080 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	69fa      	ldr	r2, [r7, #28]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800707a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800707e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	68d9      	ldr	r1, [r3, #12]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	b298      	uxth	r0, r3
 800708e:	79fb      	ldrb	r3, [r7, #7]
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	4603      	mov	r3, r0
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f9b9 	bl	800740c <USB_WritePacket>
 800709a:	e105      	b.n	80072a8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b6:	0cdb      	lsrs	r3, r3, #19
 80070b8:	04db      	lsls	r3, r3, #19
 80070ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	015a      	lsls	r2, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	4413      	add	r3, r2
 80070c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	0151      	lsls	r1, r2, #5
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	440a      	add	r2, r1
 80070d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80070da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80070de:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d132      	bne.n	800714c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007114:	69b9      	ldr	r1, [r7, #24]
 8007116:	0148      	lsls	r0, r1, #5
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	4401      	add	r1, r0
 800711c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007120:	4313      	orrs	r3, r2
 8007122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	0151      	lsls	r1, r2, #5
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	440a      	add	r2, r1
 800713a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800713e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007142:	6113      	str	r3, [r2, #16]
 8007144:	e062      	b.n	800720c <USB_EPStartXfer+0x490>
 8007146:	bf00      	nop
 8007148:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d123      	bne.n	800719c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716a:	69b9      	ldr	r1, [r7, #24]
 800716c:	0148      	lsls	r0, r1, #5
 800716e:	69f9      	ldr	r1, [r7, #28]
 8007170:	4401      	add	r1, r0
 8007172:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007176:	4313      	orrs	r3, r2
 8007178:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007194:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007198:	6113      	str	r3, [r2, #16]
 800719a:	e037      	b.n	800720c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	4413      	add	r3, r2
 80071a6:	1e5a      	subs	r2, r3, #1
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	8afa      	ldrh	r2, [r7, #22]
 80071b8:	fb03 f202 	mul.w	r2, r3, r2
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071cc:	691a      	ldr	r2, [r3, #16]
 80071ce:	8afb      	ldrh	r3, [r7, #22]
 80071d0:	04d9      	lsls	r1, r3, #19
 80071d2:	4b38      	ldr	r3, [pc, #224]	@ (80072b4 <USB_EPStartXfer+0x538>)
 80071d4:	400b      	ands	r3, r1
 80071d6:	69b9      	ldr	r1, [r7, #24]
 80071d8:	0148      	lsls	r0, r1, #5
 80071da:	69f9      	ldr	r1, [r7, #28]
 80071dc:	4401      	add	r1, r0
 80071de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071e2:	4313      	orrs	r3, r2
 80071e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071f2:	691a      	ldr	r2, [r3, #16]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071fc:	69b9      	ldr	r1, [r7, #24]
 80071fe:	0148      	lsls	r0, r1, #5
 8007200:	69f9      	ldr	r1, [r7, #28]
 8007202:	4401      	add	r1, r0
 8007204:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007208:	4313      	orrs	r3, r2
 800720a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d10d      	bne.n	800722e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	68d9      	ldr	r1, [r3, #12]
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722a:	460a      	mov	r2, r1
 800722c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	791b      	ldrb	r3, [r3, #4]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d128      	bne.n	8007288 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d110      	bne.n	8007268 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007260:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e00f      	b.n	8007288 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	440a      	add	r2, r1
 800727e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007286:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	015a      	lsls	r2, r3, #5
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	0151      	lsls	r1, r2, #5
 800729a:	69fa      	ldr	r2, [r7, #28]
 800729c:	440a      	add	r2, r1
 800729e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3720      	adds	r7, #32
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	1ff80000 	.word	0x1ff80000

080072b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d14a      	bne.n	800736c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ee:	f040 8086 	bne.w	80073fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007310:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007314:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007334:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007338:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007346:	4293      	cmp	r3, r2
 8007348:	d902      	bls.n	8007350 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
          break;
 800734e:	e056      	b.n	80073fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007368:	d0e7      	beq.n	800733a <USB_EPStopXfer+0x82>
 800736a:	e048      	b.n	80073fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007384:	d13b      	bne.n	80073fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	7812      	ldrb	r2, [r2, #0]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3301      	adds	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073da:	4293      	cmp	r3, r2
 80073dc:	d902      	bls.n	80073e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	75fb      	strb	r3, [r7, #23]
          break;
 80073e2:	e00c      	b.n	80073fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073fc:	d0e7      	beq.n	80073ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007400:	4618      	mov	r0, r3
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	@ 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	4611      	mov	r1, r2
 8007418:	461a      	mov	r2, r3
 800741a:	460b      	mov	r3, r1
 800741c:	71fb      	strb	r3, [r7, #7]
 800741e:	4613      	mov	r3, r2
 8007420:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800742a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800742e:	2b00      	cmp	r3, #0
 8007430:	d123      	bne.n	800747a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007432:	88bb      	ldrh	r3, [r7, #4]
 8007434:	3303      	adds	r3, #3
 8007436:	089b      	lsrs	r3, r3, #2
 8007438:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800743a:	2300      	movs	r3, #0
 800743c:	61bb      	str	r3, [r7, #24]
 800743e:	e018      	b.n	8007472 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007440:	79fb      	ldrb	r3, [r7, #7]
 8007442:	031a      	lsls	r2, r3, #12
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	4413      	add	r3, r2
 8007448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800744c:	461a      	mov	r2, r3
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	3301      	adds	r3, #1
 8007458:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	3301      	adds	r3, #1
 800745e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	3301      	adds	r3, #1
 8007464:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	3301      	adds	r3, #1
 800746a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	3301      	adds	r3, #1
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	69ba      	ldr	r2, [r7, #24]
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	429a      	cmp	r2, r3
 8007478:	d3e2      	bcc.n	8007440 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3724      	adds	r7, #36	@ 0x24
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007488:	b480      	push	{r7}
 800748a:	b08b      	sub	sp, #44	@ 0x2c
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4613      	mov	r3, r2
 8007494:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	089b      	lsrs	r3, r3, #2
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80074ae:	2300      	movs	r3, #0
 80074b0:	623b      	str	r3, [r7, #32]
 80074b2:	e014      	b.n	80074de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	601a      	str	r2, [r3, #0]
    pDest++;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	3301      	adds	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	3301      	adds	r3, #1
 80074ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ce:	3301      	adds	r3, #1
 80074d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	3301      	adds	r3, #1
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80074d8:	6a3b      	ldr	r3, [r7, #32]
 80074da:	3301      	adds	r3, #1
 80074dc:	623b      	str	r3, [r7, #32]
 80074de:	6a3a      	ldr	r2, [r7, #32]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d3e6      	bcc.n	80074b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80074e6:	8bfb      	ldrh	r3, [r7, #30]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01e      	beq.n	800752a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074f6:	461a      	mov	r2, r3
 80074f8:	f107 0310 	add.w	r3, r7, #16
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	fa22 f303 	lsr.w	r3, r2, r3
 800750c:	b2da      	uxtb	r2, r3
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	701a      	strb	r2, [r3, #0]
      i++;
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	3301      	adds	r3, #1
 8007516:	623b      	str	r3, [r7, #32]
      pDest++;
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	3301      	adds	r3, #1
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800751e:	8bfb      	ldrh	r3, [r7, #30]
 8007520:	3b01      	subs	r3, #1
 8007522:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007524:	8bfb      	ldrh	r3, [r7, #30]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1ea      	bne.n	8007500 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800752c:	4618      	mov	r0, r3
 800752e:	372c      	adds	r7, #44	@ 0x2c
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d12c      	bne.n	80075ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	db12      	blt.n	800758c <USB_EPSetStall+0x54>
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d00f      	beq.n	800758c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68ba      	ldr	r2, [r7, #8]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007586:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800758a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	e02b      	b.n	8007606 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	db12      	blt.n	80075e6 <USB_EPSetStall+0xae>
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00f      	beq.n	80075e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007600:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007604:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d128      	bne.n	8007682 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800764a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800764e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	791b      	ldrb	r3, [r3, #4]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d003      	beq.n	8007660 <USB_EPClearStall+0x4c>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	791b      	ldrb	r3, [r3, #4]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d138      	bne.n	80076d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	0151      	lsls	r1, r2, #5
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	440a      	add	r2, r1
 8007676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800767e:	6013      	str	r3, [r2, #0]
 8007680:	e027      	b.n	80076d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	0151      	lsls	r1, r2, #5
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	440a      	add	r2, r1
 8007698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	791b      	ldrb	r3, [r3, #4]
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	d003      	beq.n	80076b2 <USB_EPClearStall+0x9e>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	791b      	ldrb	r3, [r3, #4]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d10f      	bne.n	80076d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	0151      	lsls	r1, r2, #5
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	440a      	add	r2, r1
 80076c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b085      	sub	sp, #20
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076fe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007702:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007714:	68f9      	ldr	r1, [r7, #12]
 8007716:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800771a:	4313      	orrs	r3, r2
 800771c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800775a:	f023 0302 	bic.w	r3, r3, #2
 800775e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3714      	adds	r7, #20
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800779c:	f043 0302 	orr.w	r3, r3, #2
 80077a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077c8:	68fb      	ldr	r3, [r7, #12]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e8:	699b      	ldr	r3, [r3, #24]
 80077ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	4013      	ands	r3, r2
 80077f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	0c1b      	lsrs	r3, r3, #16
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	4013      	ands	r3, r2
 800782c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	b29b      	uxth	r3, r3
}
 8007832:	4618      	mov	r0, r3
 8007834:	3714      	adds	r7, #20
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800783e:	b480      	push	{r7}
 8007840:	b085      	sub	sp, #20
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	4013      	ands	r3, r2
 800786a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800786c:	68bb      	ldr	r3, [r7, #8]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800787a:	b480      	push	{r7}
 800787c:	b087      	sub	sp, #28
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	460b      	mov	r3, r1
 8007884:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800789a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800789c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	fa22 f303 	lsr.w	r3, r2, r3
 80078aa:	01db      	lsls	r3, r3, #7
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	4013      	ands	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078c8:	68bb      	ldr	r3, [r7, #8]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	f003 0301 	and.w	r3, r3, #1
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800790c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007910:	f023 0307 	bic.w	r3, r3, #7
 8007914:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007928:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	460b      	mov	r3, r1
 8007942:	607a      	str	r2, [r7, #4]
 8007944:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	333c      	adds	r3, #60	@ 0x3c
 800794e:	3304      	adds	r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4a26      	ldr	r2, [pc, #152]	@ (80079f0 <USB_EP0_OutStart+0xb8>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d90a      	bls.n	8007972 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007968:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800796c:	d101      	bne.n	8007972 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	e037      	b.n	80079e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007978:	461a      	mov	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800798c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007990:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079a0:	f043 0318 	orr.w	r3, r3, #24
 80079a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80079b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80079ba:	7afb      	ldrb	r3, [r7, #11]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d10f      	bne.n	80079e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079c6:	461a      	mov	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079da:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80079de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	4f54300a 	.word	0x4f54300a

080079f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3301      	adds	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a0c:	d901      	bls.n	8007a12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e01b      	b.n	8007a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	daf2      	bge.n	8007a00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f043 0201 	orr.w	r2, r3, #1
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a36:	d901      	bls.n	8007a3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e006      	b.n	8007a4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	f003 0301 	and.w	r3, r3, #1
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d0f0      	beq.n	8007a2a <USB_CoreReset+0x36>

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
	...

08007a58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007a64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007a68:	f002 fc4c 	bl	800a304 <USBD_static_malloc>
 8007a6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d109      	bne.n	8007a88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	32b0      	adds	r2, #176	@ 0xb0
 8007a7e:	2100      	movs	r1, #0
 8007a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007a84:	2302      	movs	r3, #2
 8007a86:	e0d4      	b.n	8007c32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007a88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f002 fcd0 	bl	800a434 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32b0      	adds	r2, #176	@ 0xb0
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	32b0      	adds	r2, #176	@ 0xb0
 8007aae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	7c1b      	ldrb	r3, [r3, #16]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d138      	bne.n	8007b32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8007c3c <USBD_CDC_Init+0x1e4>)
 8007ac2:	7819      	ldrb	r1, [r3, #0]
 8007ac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ac8:	2202      	movs	r2, #2
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f002 faf7 	bl	800a0be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8007c3c <USBD_CDC_Init+0x1e4>)
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	f003 020f 	and.w	r2, r3, #15
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4613      	mov	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	440b      	add	r3, r1
 8007ae4:	3324      	adds	r3, #36	@ 0x24
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007aea:	4b55      	ldr	r3, [pc, #340]	@ (8007c40 <USBD_CDC_Init+0x1e8>)
 8007aec:	7819      	ldrb	r1, [r3, #0]
 8007aee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007af2:	2202      	movs	r2, #2
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f002 fae2 	bl	800a0be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007afa:	4b51      	ldr	r3, [pc, #324]	@ (8007c40 <USBD_CDC_Init+0x1e8>)
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	f003 020f 	and.w	r2, r3, #15
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4613      	mov	r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	4413      	add	r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b12:	2201      	movs	r2, #1
 8007b14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b16:	4b4b      	ldr	r3, [pc, #300]	@ (8007c44 <USBD_CDC_Init+0x1ec>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	f003 020f 	and.w	r2, r3, #15
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	4613      	mov	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	3326      	adds	r3, #38	@ 0x26
 8007b2c:	2210      	movs	r2, #16
 8007b2e:	801a      	strh	r2, [r3, #0]
 8007b30:	e035      	b.n	8007b9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b32:	4b42      	ldr	r3, [pc, #264]	@ (8007c3c <USBD_CDC_Init+0x1e4>)
 8007b34:	7819      	ldrb	r1, [r3, #0]
 8007b36:	2340      	movs	r3, #64	@ 0x40
 8007b38:	2202      	movs	r2, #2
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f002 fabf 	bl	800a0be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b40:	4b3e      	ldr	r3, [pc, #248]	@ (8007c3c <USBD_CDC_Init+0x1e4>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f003 020f 	and.w	r2, r3, #15
 8007b48:	6879      	ldr	r1, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	440b      	add	r3, r1
 8007b54:	3324      	adds	r3, #36	@ 0x24
 8007b56:	2201      	movs	r2, #1
 8007b58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b5a:	4b39      	ldr	r3, [pc, #228]	@ (8007c40 <USBD_CDC_Init+0x1e8>)
 8007b5c:	7819      	ldrb	r1, [r3, #0]
 8007b5e:	2340      	movs	r3, #64	@ 0x40
 8007b60:	2202      	movs	r2, #2
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f002 faab 	bl	800a0be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b68:	4b35      	ldr	r3, [pc, #212]	@ (8007c40 <USBD_CDC_Init+0x1e8>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	f003 020f 	and.w	r2, r3, #15
 8007b70:	6879      	ldr	r1, [r7, #4]
 8007b72:	4613      	mov	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	4413      	add	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	440b      	add	r3, r1
 8007b7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b80:	2201      	movs	r2, #1
 8007b82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007b84:	4b2f      	ldr	r3, [pc, #188]	@ (8007c44 <USBD_CDC_Init+0x1ec>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 020f 	and.w	r2, r3, #15
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	3326      	adds	r3, #38	@ 0x26
 8007b9a:	2210      	movs	r2, #16
 8007b9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b9e:	4b29      	ldr	r3, [pc, #164]	@ (8007c44 <USBD_CDC_Init+0x1ec>)
 8007ba0:	7819      	ldrb	r1, [r3, #0]
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f002 fa89 	bl	800a0be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007bac:	4b25      	ldr	r3, [pc, #148]	@ (8007c44 <USBD_CDC_Init+0x1ec>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f003 020f 	and.w	r2, r3, #15
 8007bb4:	6879      	ldr	r1, [r7, #4]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	3324      	adds	r3, #36	@ 0x24
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	33b0      	adds	r3, #176	@ 0xb0
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2200      	movs	r2, #0
 8007bee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e018      	b.n	8007c32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	7c1b      	ldrb	r3, [r3, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c08:	4b0d      	ldr	r3, [pc, #52]	@ (8007c40 <USBD_CDC_Init+0x1e8>)
 8007c0a:	7819      	ldrb	r1, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f002 fb40 	bl	800a29c <USBD_LL_PrepareReceive>
 8007c1c:	e008      	b.n	8007c30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c1e:	4b08      	ldr	r3, [pc, #32]	@ (8007c40 <USBD_CDC_Init+0x1e8>)
 8007c20:	7819      	ldrb	r1, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c28:	2340      	movs	r3, #64	@ 0x40
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f002 fb36 	bl	800a29c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	200000db 	.word	0x200000db
 8007c40:	200000dc 	.word	0x200000dc
 8007c44:	200000dd 	.word	0x200000dd

08007c48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007c54:	4b3a      	ldr	r3, [pc, #232]	@ (8007d40 <USBD_CDC_DeInit+0xf8>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f002 fa55 	bl	800a10a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007c60:	4b37      	ldr	r3, [pc, #220]	@ (8007d40 <USBD_CDC_DeInit+0xf8>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	f003 020f 	and.w	r2, r3, #15
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	440b      	add	r3, r1
 8007c74:	3324      	adds	r3, #36	@ 0x24
 8007c76:	2200      	movs	r2, #0
 8007c78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007c7a:	4b32      	ldr	r3, [pc, #200]	@ (8007d44 <USBD_CDC_DeInit+0xfc>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f002 fa42 	bl	800a10a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007c86:	4b2f      	ldr	r3, [pc, #188]	@ (8007d44 <USBD_CDC_DeInit+0xfc>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f003 020f 	and.w	r2, r3, #15
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ca2:	4b29      	ldr	r3, [pc, #164]	@ (8007d48 <USBD_CDC_DeInit+0x100>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f002 fa2e 	bl	800a10a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007cae:	4b26      	ldr	r3, [pc, #152]	@ (8007d48 <USBD_CDC_DeInit+0x100>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	f003 020f 	and.w	r2, r3, #15
 8007cb6:	6879      	ldr	r1, [r7, #4]
 8007cb8:	4613      	mov	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	440b      	add	r3, r1
 8007cc2:	3324      	adds	r3, #36	@ 0x24
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8007d48 <USBD_CDC_DeInit+0x100>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	f003 020f 	and.w	r2, r3, #15
 8007cd0:	6879      	ldr	r1, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	440b      	add	r3, r1
 8007cdc:	3326      	adds	r3, #38	@ 0x26
 8007cde:	2200      	movs	r2, #0
 8007ce0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	32b0      	adds	r2, #176	@ 0xb0
 8007cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d01f      	beq.n	8007d34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	33b0      	adds	r3, #176	@ 0xb0
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	32b0      	adds	r2, #176	@ 0xb0
 8007d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f002 fb02 	bl	800a320 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	32b0      	adds	r2, #176	@ 0xb0
 8007d26:	2100      	movs	r1, #0
 8007d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	200000db 	.word	0x200000db
 8007d44:	200000dc 	.word	0x200000dc
 8007d48:	200000dd 	.word	0x200000dd

08007d4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	32b0      	adds	r2, #176	@ 0xb0
 8007d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007d66:	2300      	movs	r3, #0
 8007d68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d101      	bne.n	8007d7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e0bf      	b.n	8007efc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d050      	beq.n	8007e2a <USBD_CDC_Setup+0xde>
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	f040 80af 	bne.w	8007eec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	88db      	ldrh	r3, [r3, #6]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d03a      	beq.n	8007e0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b25b      	sxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	da1b      	bge.n	8007dd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	33b0      	adds	r3, #176	@ 0xb0
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007db6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	88d2      	ldrh	r2, [r2, #6]
 8007dbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	88db      	ldrh	r3, [r3, #6]
 8007dc2:	2b07      	cmp	r3, #7
 8007dc4:	bf28      	it	cs
 8007dc6:	2307      	movcs	r3, #7
 8007dc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	89fa      	ldrh	r2, [r7, #14]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f001 fd53 	bl	800987c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007dd6:	e090      	b.n	8007efa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	785a      	ldrb	r2, [r3, #1]
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	88db      	ldrh	r3, [r3, #6]
 8007de6:	2b3f      	cmp	r3, #63	@ 0x3f
 8007de8:	d803      	bhi.n	8007df2 <USBD_CDC_Setup+0xa6>
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	88db      	ldrh	r3, [r3, #6]
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	e000      	b.n	8007df4 <USBD_CDC_Setup+0xa8>
 8007df2:	2240      	movs	r2, #64	@ 0x40
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007dfa:	6939      	ldr	r1, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e02:	461a      	mov	r2, r3
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f001 fd65 	bl	80098d4 <USBD_CtlPrepareRx>
      break;
 8007e0a:	e076      	b.n	8007efa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	33b0      	adds	r3, #176	@ 0xb0
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	7850      	ldrb	r0, [r2, #1]
 8007e22:	2200      	movs	r2, #0
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	4798      	blx	r3
      break;
 8007e28:	e067      	b.n	8007efa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	785b      	ldrb	r3, [r3, #1]
 8007e2e:	2b0b      	cmp	r3, #11
 8007e30:	d851      	bhi.n	8007ed6 <USBD_CDC_Setup+0x18a>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <USBD_CDC_Setup+0xec>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e69 	.word	0x08007e69
 8007e3c:	08007ee5 	.word	0x08007ee5
 8007e40:	08007ed7 	.word	0x08007ed7
 8007e44:	08007ed7 	.word	0x08007ed7
 8007e48:	08007ed7 	.word	0x08007ed7
 8007e4c:	08007ed7 	.word	0x08007ed7
 8007e50:	08007ed7 	.word	0x08007ed7
 8007e54:	08007ed7 	.word	0x08007ed7
 8007e58:	08007ed7 	.word	0x08007ed7
 8007e5c:	08007ed7 	.word	0x08007ed7
 8007e60:	08007e93 	.word	0x08007e93
 8007e64:	08007ebd 	.word	0x08007ebd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b03      	cmp	r3, #3
 8007e72:	d107      	bne.n	8007e84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007e74:	f107 030a 	add.w	r3, r7, #10
 8007e78:	2202      	movs	r2, #2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fcfd 	bl	800987c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e82:	e032      	b.n	8007eea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f001 fc7b 	bl	8009782 <USBD_CtlError>
            ret = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	75fb      	strb	r3, [r7, #23]
          break;
 8007e90:	e02b      	b.n	8007eea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d107      	bne.n	8007eae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e9e:	f107 030d 	add.w	r3, r7, #13
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f001 fce8 	bl	800987c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007eac:	e01d      	b.n	8007eea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fc66 	bl	8009782 <USBD_CtlError>
            ret = USBD_FAIL;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	75fb      	strb	r3, [r7, #23]
          break;
 8007eba:	e016      	b.n	8007eea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b03      	cmp	r3, #3
 8007ec6:	d00f      	beq.n	8007ee8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f001 fc59 	bl	8009782 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ed4:	e008      	b.n	8007ee8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007ed6:	6839      	ldr	r1, [r7, #0]
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 fc52 	bl	8009782 <USBD_CtlError>
          ret = USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ee2:	e002      	b.n	8007eea <USBD_CDC_Setup+0x19e>
          break;
 8007ee4:	bf00      	nop
 8007ee6:	e008      	b.n	8007efa <USBD_CDC_Setup+0x1ae>
          break;
 8007ee8:	bf00      	nop
      }
      break;
 8007eea:	e006      	b.n	8007efa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f001 fc47 	bl	8009782 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ef8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	32b0      	adds	r2, #176	@ 0xb0
 8007f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e065      	b.n	8007ffa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	32b0      	adds	r2, #176	@ 0xb0
 8007f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	3318      	adds	r3, #24
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02f      	beq.n	8007fb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	f003 020f 	and.w	r2, r3, #15
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	4413      	add	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	3318      	adds	r3, #24
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	78fb      	ldrb	r3, [r7, #3]
 8007f70:	f003 010f 	and.w	r1, r3, #15
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	460b      	mov	r3, r1
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	440b      	add	r3, r1
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4403      	add	r3, r0
 8007f80:	331c      	adds	r3, #28
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d112      	bne.n	8007fb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	f003 020f 	and.w	r2, r3, #15
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	440b      	add	r3, r1
 8007fa4:	3318      	adds	r3, #24
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007faa:	78f9      	ldrb	r1, [r7, #3]
 8007fac:	2300      	movs	r3, #0
 8007fae:	2200      	movs	r2, #0
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f002 f952 	bl	800a25a <USBD_LL_Transmit>
 8007fb6:	e01f      	b.n	8007ff8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	33b0      	adds	r3, #176	@ 0xb0
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d010      	beq.n	8007ff8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	33b0      	adds	r3, #176	@ 0xb0
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ff4:	78fa      	ldrb	r2, [r7, #3]
 8007ff6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	32b0      	adds	r2, #176	@ 0xb0
 8008018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800801c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	32b0      	adds	r2, #176	@ 0xb0
 8008028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008030:	2303      	movs	r3, #3
 8008032:	e01a      	b.n	800806a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f002 f950 	bl	800a2de <USBD_LL_GetRxDataSize>
 800803e:	4602      	mov	r2, r0
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	33b0      	adds	r3, #176	@ 0xb0
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	4413      	add	r3, r2
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008064:	4611      	mov	r1, r2
 8008066:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b084      	sub	sp, #16
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	32b0      	adds	r2, #176	@ 0xb0
 8008084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008088:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	e024      	b.n	80080de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	33b0      	adds	r3, #176	@ 0xb0
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4413      	add	r3, r2
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d019      	beq.n	80080dc <USBD_CDC_EP0_RxReady+0x6a>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80080ae:	2bff      	cmp	r3, #255	@ 0xff
 80080b0:	d014      	beq.n	80080dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	33b0      	adds	r3, #176	@ 0xb0
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	4413      	add	r3, r2
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80080ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80080d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	22ff      	movs	r2, #255	@ 0xff
 80080d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b086      	sub	sp, #24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080f0:	2182      	movs	r1, #130	@ 0x82
 80080f2:	4818      	ldr	r0, [pc, #96]	@ (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080f4:	f000 fd0f 	bl	8008b16 <USBD_GetEpDesc>
 80080f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080fa:	2101      	movs	r1, #1
 80080fc:	4815      	ldr	r0, [pc, #84]	@ (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80080fe:	f000 fd0a 	bl	8008b16 <USBD_GetEpDesc>
 8008102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008104:	2181      	movs	r1, #129	@ 0x81
 8008106:	4813      	ldr	r0, [pc, #76]	@ (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008108:	f000 fd05 	bl	8008b16 <USBD_GetEpDesc>
 800810c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	2210      	movs	r2, #16
 8008118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d006      	beq.n	800812e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	2200      	movs	r2, #0
 8008124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008128:	711a      	strb	r2, [r3, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800813c:	711a      	strb	r2, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2243      	movs	r2, #67	@ 0x43
 8008146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008148:	4b02      	ldr	r3, [pc, #8]	@ (8008154 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000098 	.word	0x20000098

08008158 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008160:	2182      	movs	r1, #130	@ 0x82
 8008162:	4818      	ldr	r0, [pc, #96]	@ (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008164:	f000 fcd7 	bl	8008b16 <USBD_GetEpDesc>
 8008168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800816a:	2101      	movs	r1, #1
 800816c:	4815      	ldr	r0, [pc, #84]	@ (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800816e:	f000 fcd2 	bl	8008b16 <USBD_GetEpDesc>
 8008172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008174:	2181      	movs	r1, #129	@ 0x81
 8008176:	4813      	ldr	r0, [pc, #76]	@ (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008178:	f000 fccd 	bl	8008b16 <USBD_GetEpDesc>
 800817c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2210      	movs	r2, #16
 8008188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d006      	beq.n	800819e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	2200      	movs	r2, #0
 8008194:	711a      	strb	r2, [r3, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f042 0202 	orr.w	r2, r2, #2
 800819c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d006      	beq.n	80081b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	711a      	strb	r2, [r3, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f042 0202 	orr.w	r2, r2, #2
 80081b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2243      	movs	r2, #67	@ 0x43
 80081b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081b8:	4b02      	ldr	r3, [pc, #8]	@ (80081c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000098 	.word	0x20000098

080081c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081d0:	2182      	movs	r1, #130	@ 0x82
 80081d2:	4818      	ldr	r0, [pc, #96]	@ (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081d4:	f000 fc9f 	bl	8008b16 <USBD_GetEpDesc>
 80081d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081da:	2101      	movs	r1, #1
 80081dc:	4815      	ldr	r0, [pc, #84]	@ (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081de:	f000 fc9a 	bl	8008b16 <USBD_GetEpDesc>
 80081e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081e4:	2181      	movs	r1, #129	@ 0x81
 80081e6:	4813      	ldr	r0, [pc, #76]	@ (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80081e8:	f000 fc95 	bl	8008b16 <USBD_GetEpDesc>
 80081ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2210      	movs	r2, #16
 80081f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2200      	movs	r2, #0
 8008204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008208:	711a      	strb	r2, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d006      	beq.n	8008222 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800821c:	711a      	strb	r2, [r3, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2243      	movs	r2, #67	@ 0x43
 8008226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008228:	4b02      	ldr	r3, [pc, #8]	@ (8008234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20000098 	.word	0x20000098

08008238 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	220a      	movs	r2, #10
 8008244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008246:	4b03      	ldr	r3, [pc, #12]	@ (8008254 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	20000054 	.word	0x20000054

08008258 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	e009      	b.n	8008280 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	33b0      	adds	r3, #176	@ 0xb0
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	4413      	add	r3, r2
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	32b0      	adds	r2, #176	@ 0xb0
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e008      	b.n	80082c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	371c      	adds	r7, #28
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	32b0      	adds	r2, #176	@ 0xb0
 80082e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e004      	b.n	80082fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
	...

0800830c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	32b0      	adds	r2, #176	@ 0xb0
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	32b0      	adds	r2, #176	@ 0xb0
 800832e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	e018      	b.n	800836c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7c1b      	ldrb	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008342:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <USBD_CDC_ReceivePacket+0x68>)
 8008344:	7819      	ldrb	r1, [r3, #0]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800834c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 ffa3 	bl	800a29c <USBD_LL_PrepareReceive>
 8008356:	e008      	b.n	800836a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008358:	4b06      	ldr	r3, [pc, #24]	@ (8008374 <USBD_CDC_ReceivePacket+0x68>)
 800835a:	7819      	ldrb	r1, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008362:	2340      	movs	r3, #64	@ 0x40
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 ff99 	bl	800a29c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	200000dc 	.word	0x200000dc

08008378 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	4613      	mov	r3, r2
 8008384:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800838c:	2303      	movs	r3, #3
 800838e:	e01f      	b.n	80083d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	79fa      	ldrb	r2, [r7, #7]
 80083c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f001 fe0d 	bl	8009fe4 <USBD_LL_Init>
 80083ca:	4603      	mov	r3, r0
 80083cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3718      	adds	r7, #24
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}

080083d8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e025      	b.n	800843c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	32ae      	adds	r2, #174	@ 0xae
 8008402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00f      	beq.n	800842c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	32ae      	adds	r2, #174	@ 0xae
 8008416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841c:	f107 020e 	add.w	r2, r7, #14
 8008420:	4610      	mov	r0, r2
 8008422:	4798      	blx	r3
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008432:	1c5a      	adds	r2, r3, #1
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fe1b 	bl	800a088 <USBD_LL_Start>
 8008452:	4603      	mov	r3, r0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008464:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008466:	4618      	mov	r0, r3
 8008468:	370c      	adds	r7, #12
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr

08008472 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b084      	sub	sp, #16
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
 800847a:	460b      	mov	r3, r1
 800847c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	4611      	mov	r1, r2
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	4798      	blx	r3
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	460b      	mov	r3, r1
 80084b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	4798      	blx	r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d001      	beq.n	80084d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 f90c 	bl	800970e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008512:	f003 031f 	and.w	r3, r3, #31
 8008516:	2b02      	cmp	r3, #2
 8008518:	d01a      	beq.n	8008550 <USBD_LL_SetupStage+0x72>
 800851a:	2b02      	cmp	r3, #2
 800851c:	d822      	bhi.n	8008564 <USBD_LL_SetupStage+0x86>
 800851e:	2b00      	cmp	r3, #0
 8008520:	d002      	beq.n	8008528 <USBD_LL_SetupStage+0x4a>
 8008522:	2b01      	cmp	r3, #1
 8008524:	d00a      	beq.n	800853c <USBD_LL_SetupStage+0x5e>
 8008526:	e01d      	b.n	8008564 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800852e:	4619      	mov	r1, r3
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fb63 	bl	8008bfc <USBD_StdDevReq>
 8008536:	4603      	mov	r3, r0
 8008538:	73fb      	strb	r3, [r7, #15]
      break;
 800853a:	e020      	b.n	800857e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fbcb 	bl	8008ce0 <USBD_StdItfReq>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
      break;
 800854e:	e016      	b.n	800857e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008556:	4619      	mov	r1, r3
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f000 fc2d 	bl	8008db8 <USBD_StdEPReq>
 800855e:	4603      	mov	r3, r0
 8008560:	73fb      	strb	r3, [r7, #15]
      break;
 8008562:	e00c      	b.n	800857e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800856a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f001 fde8 	bl	800a148 <USBD_LL_StallEP>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]
      break;
 800857c:	bf00      	nop
  }

  return ret;
 800857e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	460b      	mov	r3, r1
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d16e      	bne.n	800867e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	f040 8098 	bne.w	80086e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d913      	bls.n	80085e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	1ad2      	subs	r2, r2, r3
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	4293      	cmp	r3, r2
 80085d8:	bf28      	it	cs
 80085da:	4613      	movcs	r3, r2
 80085dc:	461a      	mov	r2, r3
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f001 f994 	bl	800990e <USBD_CtlContinueRx>
 80085e6:	e07d      	b.n	80086e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80085ee:	f003 031f 	and.w	r3, r3, #31
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d014      	beq.n	8008620 <USBD_LL_DataOutStage+0x98>
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d81d      	bhi.n	8008636 <USBD_LL_DataOutStage+0xae>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <USBD_LL_DataOutStage+0x7c>
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d003      	beq.n	800860a <USBD_LL_DataOutStage+0x82>
 8008602:	e018      	b.n	8008636 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	75bb      	strb	r3, [r7, #22]
            break;
 8008608:	e018      	b.n	800863c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008610:	b2db      	uxtb	r3, r3
 8008612:	4619      	mov	r1, r3
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 fa64 	bl	8008ae2 <USBD_CoreFindIF>
 800861a:	4603      	mov	r3, r0
 800861c:	75bb      	strb	r3, [r7, #22]
            break;
 800861e:	e00d      	b.n	800863c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008626:	b2db      	uxtb	r3, r3
 8008628:	4619      	mov	r1, r3
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fa66 	bl	8008afc <USBD_CoreFindEP>
 8008630:	4603      	mov	r3, r0
 8008632:	75bb      	strb	r3, [r7, #22]
            break;
 8008634:	e002      	b.n	800863c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	75bb      	strb	r3, [r7, #22]
            break;
 800863a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800863c:	7dbb      	ldrb	r3, [r7, #22]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d119      	bne.n	8008676 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d113      	bne.n	8008676 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800864e:	7dba      	ldrb	r2, [r7, #22]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	32ae      	adds	r2, #174	@ 0xae
 8008654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800865e:	7dba      	ldrb	r2, [r7, #22]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008666:	7dba      	ldrb	r2, [r7, #22]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	32ae      	adds	r2, #174	@ 0xae
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f001 f95a 	bl	8009930 <USBD_CtlSendStatus>
 800867c:	e032      	b.n	80086e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008684:	b2db      	uxtb	r3, r3
 8008686:	4619      	mov	r1, r3
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 fa37 	bl	8008afc <USBD_CoreFindEP>
 800868e:	4603      	mov	r3, r0
 8008690:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008692:	7dbb      	ldrb	r3, [r7, #22]
 8008694:	2bff      	cmp	r3, #255	@ 0xff
 8008696:	d025      	beq.n	80086e4 <USBD_LL_DataOutStage+0x15c>
 8008698:	7dbb      	ldrb	r3, [r7, #22]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d122      	bne.n	80086e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d117      	bne.n	80086da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80086aa:	7dba      	ldrb	r2, [r7, #22]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	32ae      	adds	r2, #174	@ 0xae
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00f      	beq.n	80086da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80086ba:	7dba      	ldrb	r2, [r7, #22]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80086c2:	7dba      	ldrb	r2, [r7, #22]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	32ae      	adds	r2, #174	@ 0xae
 80086c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	7afa      	ldrb	r2, [r7, #11]
 80086d0:	4611      	mov	r1, r2
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80086e0:	7dfb      	ldrb	r3, [r7, #23]
 80086e2:	e000      	b.n	80086e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3718      	adds	r7, #24
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	460b      	mov	r3, r1
 80086f8:	607a      	str	r2, [r7, #4]
 80086fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80086fc:	7afb      	ldrb	r3, [r7, #11]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d16f      	bne.n	80087e2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3314      	adds	r3, #20
 8008706:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800870e:	2b02      	cmp	r3, #2
 8008710:	d15a      	bne.n	80087c8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	689a      	ldr	r2, [r3, #8]
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	429a      	cmp	r2, r3
 800871c:	d914      	bls.n	8008748 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	689a      	ldr	r2, [r3, #8]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	1ad2      	subs	r2, r2, r3
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	461a      	mov	r2, r3
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f001 f8bc 	bl	80098b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800873a:	2300      	movs	r3, #0
 800873c:	2200      	movs	r2, #0
 800873e:	2100      	movs	r1, #0
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f001 fdab 	bl	800a29c <USBD_LL_PrepareReceive>
 8008746:	e03f      	b.n	80087c8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	429a      	cmp	r2, r3
 8008752:	d11c      	bne.n	800878e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800875c:	429a      	cmp	r2, r3
 800875e:	d316      	bcc.n	800878e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	685a      	ldr	r2, [r3, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800876a:	429a      	cmp	r2, r3
 800876c:	d20f      	bcs.n	800878e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800876e:	2200      	movs	r2, #0
 8008770:	2100      	movs	r1, #0
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f001 f89d 	bl	80098b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008780:	2300      	movs	r3, #0
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f001 fd88 	bl	800a29c <USBD_LL_PrepareReceive>
 800878c:	e01c      	b.n	80087c8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d10f      	bne.n	80087ba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80087ba:	2180      	movs	r1, #128	@ 0x80
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f001 fcc3 	bl	800a148 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f001 f8c7 	bl	8009956 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d03a      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	f7ff fe42 	bl	800845c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80087e0:	e032      	b.n	8008848 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80087e2:	7afb      	ldrb	r3, [r7, #11]
 80087e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	4619      	mov	r1, r3
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f985 	bl	8008afc <USBD_CoreFindEP>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	2bff      	cmp	r3, #255	@ 0xff
 80087fa:	d025      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
 80087fc:	7dfb      	ldrb	r3, [r7, #23]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d122      	bne.n	8008848 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d11c      	bne.n	8008848 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800880e:	7dfa      	ldrb	r2, [r7, #23]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	32ae      	adds	r2, #174	@ 0xae
 8008814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008818:	695b      	ldr	r3, [r3, #20]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d014      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800881e:	7dfa      	ldrb	r2, [r7, #23]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008826:	7dfa      	ldrb	r2, [r7, #23]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	32ae      	adds	r2, #174	@ 0xae
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	7afa      	ldrb	r2, [r7, #11]
 8008834:	4611      	mov	r1, r2
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	4798      	blx	r3
 800883a:	4603      	mov	r3, r0
 800883c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800883e:	7dbb      	ldrb	r3, [r7, #22]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d001      	beq.n	8008848 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008844:	7dbb      	ldrb	r3, [r7, #22]
 8008846:	e000      	b.n	800884a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888a:	2b00      	cmp	r3, #0
 800888c:	d014      	beq.n	80088b8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00e      	beq.n	80088b8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6852      	ldr	r2, [r2, #4]
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	4611      	mov	r1, r2
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	4798      	blx	r3
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d001      	beq.n	80088b8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b8:	2340      	movs	r3, #64	@ 0x40
 80088ba:	2200      	movs	r2, #0
 80088bc:	2100      	movs	r1, #0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fbfd 	bl	800a0be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2240      	movs	r2, #64	@ 0x40
 80088d0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088d4:	2340      	movs	r3, #64	@ 0x40
 80088d6:	2200      	movs	r2, #0
 80088d8:	2180      	movs	r1, #128	@ 0x80
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 fbef 	bl	800a0be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2240      	movs	r2, #64	@ 0x40
 80088ea:	621a      	str	r2, [r3, #32]

  return ret;
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	78fa      	ldrb	r2, [r7, #3]
 8008906:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008924:	b2db      	uxtb	r3, r3
 8008926:	2b04      	cmp	r3, #4
 8008928:	d006      	beq.n	8008938 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008930:	b2da      	uxtb	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2204      	movs	r2, #4
 800893c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800894e:	b480      	push	{r7}
 8008950:	b083      	sub	sp, #12
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b04      	cmp	r3, #4
 8008960:	d106      	bne.n	8008970 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008968:	b2da      	uxtb	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	370c      	adds	r7, #12
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b082      	sub	sp, #8
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b03      	cmp	r3, #3
 8008990:	d110      	bne.n	80089b4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	32ae      	adds	r2, #174	@ 0xae
 80089d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80089dc:	2303      	movs	r3, #3
 80089de:	e01c      	b.n	8008a1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d115      	bne.n	8008a18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	32ae      	adds	r2, #174	@ 0xae
 80089f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089fa:	6a1b      	ldr	r3, [r3, #32]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	32ae      	adds	r2, #174	@ 0xae
 8008a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	4611      	mov	r1, r2
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	32ae      	adds	r2, #174	@ 0xae
 8008a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e01c      	b.n	8008a7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d115      	bne.n	8008a7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	32ae      	adds	r2, #174	@ 0xae
 8008a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00b      	beq.n	8008a7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	32ae      	adds	r2, #174	@ 0xae
 8008a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a74:	78fa      	ldrb	r2, [r7, #3]
 8008a76:	4611      	mov	r1, r2
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00e      	beq.n	8008ad8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6852      	ldr	r2, [r2, #4]
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	4611      	mov	r1, r2
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008aee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008b08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d91f      	bls.n	8008b7c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008b42:	e013      	b.n	8008b6c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008b44:	f107 030a 	add.w	r3, r7, #10
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f000 f81b 	bl	8008b86 <USBD_GetNextDesc>
 8008b50:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	2b05      	cmp	r3, #5
 8008b58:	d108      	bne.n	8008b6c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	789b      	ldrb	r3, [r3, #2]
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d008      	beq.n	8008b7a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	897b      	ldrh	r3, [r7, #10]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d8e5      	bhi.n	8008b44 <USBD_GetEpDesc+0x2e>
 8008b78:	e000      	b.n	8008b7c <USBD_GetEpDesc+0x66>
          break;
 8008b7a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008b7c:	693b      	ldr	r3, [r7, #16]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	881b      	ldrh	r3, [r3, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	7812      	ldrb	r2, [r2, #0]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b087      	sub	sp, #28
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bdc:	8a3b      	ldrh	r3, [r7, #16]
 8008bde:	021b      	lsls	r3, r3, #8
 8008be0:	b21a      	sxth	r2, r3
 8008be2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	b21b      	sxth	r3, r3
 8008bea:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008bec:	89fb      	ldrh	r3, [r7, #14]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
	...

08008bfc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c12:	2b40      	cmp	r3, #64	@ 0x40
 8008c14:	d005      	beq.n	8008c22 <USBD_StdDevReq+0x26>
 8008c16:	2b40      	cmp	r3, #64	@ 0x40
 8008c18:	d857      	bhi.n	8008cca <USBD_StdDevReq+0xce>
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00f      	beq.n	8008c3e <USBD_StdDevReq+0x42>
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d153      	bne.n	8008cca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	32ae      	adds	r2, #174	@ 0xae
 8008c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	4798      	blx	r3
 8008c38:	4603      	mov	r3, r0
 8008c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c3c:	e04a      	b.n	8008cd4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	d83b      	bhi.n	8008cbe <USBD_StdDevReq+0xc2>
 8008c46:	a201      	add	r2, pc, #4	@ (adr r2, 8008c4c <USBD_StdDevReq+0x50>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008ca1 	.word	0x08008ca1
 8008c50:	08008cb5 	.word	0x08008cb5
 8008c54:	08008cbf 	.word	0x08008cbf
 8008c58:	08008cab 	.word	0x08008cab
 8008c5c:	08008cbf 	.word	0x08008cbf
 8008c60:	08008c7f 	.word	0x08008c7f
 8008c64:	08008c75 	.word	0x08008c75
 8008c68:	08008cbf 	.word	0x08008cbf
 8008c6c:	08008c97 	.word	0x08008c97
 8008c70:	08008c89 	.word	0x08008c89
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f000 fa3c 	bl	80090f4 <USBD_GetDescriptor>
          break;
 8008c7c:	e024      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fba1 	bl	80093c8 <USBD_SetAddress>
          break;
 8008c86:	e01f      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f000 fbe0 	bl	8009450 <USBD_SetConfig>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
          break;
 8008c94:	e018      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fc83 	bl	80095a4 <USBD_GetConfig>
          break;
 8008c9e:	e013      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fcb4 	bl	8009610 <USBD_GetStatus>
          break;
 8008ca8:	e00e      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fce3 	bl	8009678 <USBD_SetFeature>
          break;
 8008cb2:	e009      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fd07 	bl	80096ca <USBD_ClrFeature>
          break;
 8008cbc:	e004      	b.n	8008cc8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fd5e 	bl	8009782 <USBD_CtlError>
          break;
 8008cc6:	bf00      	nop
      }
      break;
 8008cc8:	e004      	b.n	8008cd4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008cca:	6839      	ldr	r1, [r7, #0]
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fd58 	bl	8009782 <USBD_CtlError>
      break;
 8008cd2:	bf00      	nop
  }

  return ret;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop

08008ce0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cf6:	2b40      	cmp	r3, #64	@ 0x40
 8008cf8:	d005      	beq.n	8008d06 <USBD_StdItfReq+0x26>
 8008cfa:	2b40      	cmp	r3, #64	@ 0x40
 8008cfc:	d852      	bhi.n	8008da4 <USBD_StdItfReq+0xc4>
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <USBD_StdItfReq+0x26>
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d14e      	bne.n	8008da4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d840      	bhi.n	8008d96 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	889b      	ldrh	r3, [r3, #4]
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d836      	bhi.n	8008d8c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	889b      	ldrh	r3, [r3, #4]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fedb 	bl	8008ae2 <USBD_CoreFindIF>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	2bff      	cmp	r3, #255	@ 0xff
 8008d34:	d01d      	beq.n	8008d72 <USBD_StdItfReq+0x92>
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d11a      	bne.n	8008d72 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008d3c:	7bba      	ldrb	r2, [r7, #14]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	32ae      	adds	r2, #174	@ 0xae
 8008d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00f      	beq.n	8008d6c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008d4c:	7bba      	ldrb	r2, [r7, #14]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d54:	7bba      	ldrb	r2, [r7, #14]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	32ae      	adds	r2, #174	@ 0xae
 8008d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	4798      	blx	r3
 8008d66:	4603      	mov	r3, r0
 8008d68:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d6a:	e004      	b.n	8008d76 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008d70:	e001      	b.n	8008d76 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008d72:	2303      	movs	r3, #3
 8008d74:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	88db      	ldrh	r3, [r3, #6]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d110      	bne.n	8008da0 <USBD_StdItfReq+0xc0>
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10d      	bne.n	8008da0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fdd3 	bl	8009930 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d8a:	e009      	b.n	8008da0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fcf7 	bl	8009782 <USBD_CtlError>
          break;
 8008d94:	e004      	b.n	8008da0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fcf2 	bl	8009782 <USBD_CtlError>
          break;
 8008d9e:	e000      	b.n	8008da2 <USBD_StdItfReq+0xc2>
          break;
 8008da0:	bf00      	nop
      }
      break;
 8008da2:	e004      	b.n	8008dae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fceb 	bl	8009782 <USBD_CtlError>
      break;
 8008dac:	bf00      	nop
  }

  return ret;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	889b      	ldrh	r3, [r3, #4]
 8008dca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dd4:	2b40      	cmp	r3, #64	@ 0x40
 8008dd6:	d007      	beq.n	8008de8 <USBD_StdEPReq+0x30>
 8008dd8:	2b40      	cmp	r3, #64	@ 0x40
 8008dda:	f200 817f 	bhi.w	80090dc <USBD_StdEPReq+0x324>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d02a      	beq.n	8008e38 <USBD_StdEPReq+0x80>
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	f040 817a 	bne.w	80090dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff fe85 	bl	8008afc <USBD_CoreFindEP>
 8008df2:	4603      	mov	r3, r0
 8008df4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008df6:	7b7b      	ldrb	r3, [r7, #13]
 8008df8:	2bff      	cmp	r3, #255	@ 0xff
 8008dfa:	f000 8174 	beq.w	80090e6 <USBD_StdEPReq+0x32e>
 8008dfe:	7b7b      	ldrb	r3, [r7, #13]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f040 8170 	bne.w	80090e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008e06:	7b7a      	ldrb	r2, [r7, #13]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008e0e:	7b7a      	ldrb	r2, [r7, #13]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	32ae      	adds	r2, #174	@ 0xae
 8008e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 8163 	beq.w	80090e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008e20:	7b7a      	ldrb	r2, [r7, #13]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	32ae      	adds	r2, #174	@ 0xae
 8008e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	4798      	blx	r3
 8008e32:	4603      	mov	r3, r0
 8008e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008e36:	e156      	b.n	80090e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	d008      	beq.n	8008e52 <USBD_StdEPReq+0x9a>
 8008e40:	2b03      	cmp	r3, #3
 8008e42:	f300 8145 	bgt.w	80090d0 <USBD_StdEPReq+0x318>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f000 809b 	beq.w	8008f82 <USBD_StdEPReq+0x1ca>
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d03c      	beq.n	8008eca <USBD_StdEPReq+0x112>
 8008e50:	e13e      	b.n	80090d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d002      	beq.n	8008e64 <USBD_StdEPReq+0xac>
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d016      	beq.n	8008e90 <USBD_StdEPReq+0xd8>
 8008e62:	e02c      	b.n	8008ebe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00d      	beq.n	8008e86 <USBD_StdEPReq+0xce>
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	2b80      	cmp	r3, #128	@ 0x80
 8008e6e:	d00a      	beq.n	8008e86 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 f967 	bl	800a148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e7a:	2180      	movs	r1, #128	@ 0x80
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 f963 	bl	800a148 <USBD_LL_StallEP>
 8008e82:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e84:	e020      	b.n	8008ec8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fc7a 	bl	8009782 <USBD_CtlError>
              break;
 8008e8e:	e01b      	b.n	8008ec8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	885b      	ldrh	r3, [r3, #2]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10e      	bne.n	8008eb6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <USBD_StdEPReq+0xfe>
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	2b80      	cmp	r3, #128	@ 0x80
 8008ea2:	d008      	beq.n	8008eb6 <USBD_StdEPReq+0xfe>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	88db      	ldrh	r3, [r3, #6]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d104      	bne.n	8008eb6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008eac:	7bbb      	ldrb	r3, [r7, #14]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 f949 	bl	800a148 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fd3a 	bl	8009930 <USBD_CtlSendStatus>

              break;
 8008ebc:	e004      	b.n	8008ec8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 fc5e 	bl	8009782 <USBD_CtlError>
              break;
 8008ec6:	bf00      	nop
          }
          break;
 8008ec8:	e107      	b.n	80090da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d002      	beq.n	8008edc <USBD_StdEPReq+0x124>
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d016      	beq.n	8008f08 <USBD_StdEPReq+0x150>
 8008eda:	e04b      	b.n	8008f74 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <USBD_StdEPReq+0x146>
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	2b80      	cmp	r3, #128	@ 0x80
 8008ee6:	d00a      	beq.n	8008efe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 f92b 	bl	800a148 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef2:	2180      	movs	r1, #128	@ 0x80
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 f927 	bl	800a148 <USBD_LL_StallEP>
 8008efa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008efc:	e040      	b.n	8008f80 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fc3e 	bl	8009782 <USBD_CtlError>
              break;
 8008f06:	e03b      	b.n	8008f80 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	885b      	ldrh	r3, [r3, #2]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d136      	bne.n	8008f7e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 f931 	bl	800a186 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fd03 	bl	8009930 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff fde4 	bl	8008afc <USBD_CoreFindEP>
 8008f34:	4603      	mov	r3, r0
 8008f36:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f38:	7b7b      	ldrb	r3, [r7, #13]
 8008f3a:	2bff      	cmp	r3, #255	@ 0xff
 8008f3c:	d01f      	beq.n	8008f7e <USBD_StdEPReq+0x1c6>
 8008f3e:	7b7b      	ldrb	r3, [r7, #13]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d11c      	bne.n	8008f7e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008f44:	7b7a      	ldrb	r2, [r7, #13]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008f4c:	7b7a      	ldrb	r2, [r7, #13]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32ae      	adds	r2, #174	@ 0xae
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d010      	beq.n	8008f7e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f5c:	7b7a      	ldrb	r2, [r7, #13]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	32ae      	adds	r2, #174	@ 0xae
 8008f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	4798      	blx	r3
 8008f6e:	4603      	mov	r3, r0
 8008f70:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008f72:	e004      	b.n	8008f7e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fc03 	bl	8009782 <USBD_CtlError>
              break;
 8008f7c:	e000      	b.n	8008f80 <USBD_StdEPReq+0x1c8>
              break;
 8008f7e:	bf00      	nop
          }
          break;
 8008f80:	e0ab      	b.n	80090da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d002      	beq.n	8008f94 <USBD_StdEPReq+0x1dc>
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d032      	beq.n	8008ff8 <USBD_StdEPReq+0x240>
 8008f92:	e097      	b.n	80090c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d007      	beq.n	8008faa <USBD_StdEPReq+0x1f2>
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b80      	cmp	r3, #128	@ 0x80
 8008f9e:	d004      	beq.n	8008faa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008fa0:	6839      	ldr	r1, [r7, #0]
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fbed 	bl	8009782 <USBD_CtlError>
                break;
 8008fa8:	e091      	b.n	80090ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008faa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	da0b      	bge.n	8008fca <USBD_StdEPReq+0x212>
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	3310      	adds	r3, #16
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	e00b      	b.n	8008fe2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	4413      	add	r3, r2
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	2202      	movs	r2, #2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fc43 	bl	800987c <USBD_CtlSendData>
              break;
 8008ff6:	e06a      	b.n	80090ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	da11      	bge.n	8009024 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	f003 020f 	and.w	r2, r3, #15
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	440b      	add	r3, r1
 8009012:	3324      	adds	r3, #36	@ 0x24
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d117      	bne.n	800904a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fbb0 	bl	8009782 <USBD_CtlError>
                  break;
 8009022:	e054      	b.n	80090ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009024:	7bbb      	ldrb	r3, [r7, #14]
 8009026:	f003 020f 	and.w	r2, r3, #15
 800902a:	6879      	ldr	r1, [r7, #4]
 800902c:	4613      	mov	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	440b      	add	r3, r1
 8009036:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fb9d 	bl	8009782 <USBD_CtlError>
                  break;
 8009048:	e041      	b.n	80090ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800904a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800904e:	2b00      	cmp	r3, #0
 8009050:	da0b      	bge.n	800906a <USBD_StdEPReq+0x2b2>
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009058:	4613      	mov	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	3310      	adds	r3, #16
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	4413      	add	r3, r2
 8009066:	3304      	adds	r3, #4
 8009068:	e00b      	b.n	8009082 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	3304      	adds	r3, #4
 8009082:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009084:	7bbb      	ldrb	r3, [r7, #14]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d002      	beq.n	8009090 <USBD_StdEPReq+0x2d8>
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b80      	cmp	r3, #128	@ 0x80
 800908e:	d103      	bne.n	8009098 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	e00e      	b.n	80090b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f891 	bl	800a1c4 <USBD_LL_IsStallEP>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d003      	beq.n	80090b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2201      	movs	r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	e002      	b.n	80090b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	2202      	movs	r2, #2
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fbdd 	bl	800987c <USBD_CtlSendData>
              break;
 80090c2:	e004      	b.n	80090ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fb5b 	bl	8009782 <USBD_CtlError>
              break;
 80090cc:	bf00      	nop
          }
          break;
 80090ce:	e004      	b.n	80090da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fb55 	bl	8009782 <USBD_CtlError>
          break;
 80090d8:	bf00      	nop
      }
      break;
 80090da:	e005      	b.n	80090e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fb4f 	bl	8009782 <USBD_CtlError>
      break;
 80090e4:	e000      	b.n	80090e8 <USBD_StdEPReq+0x330>
      break;
 80090e6:	bf00      	nop
  }

  return ret;
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
	...

080090f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090fe:	2300      	movs	r3, #0
 8009100:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009102:	2300      	movs	r3, #0
 8009104:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	885b      	ldrh	r3, [r3, #2]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	2b06      	cmp	r3, #6
 8009116:	f200 8128 	bhi.w	800936a <USBD_GetDescriptor+0x276>
 800911a:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <USBD_GetDescriptor+0x2c>)
 800911c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009120:	0800913d 	.word	0x0800913d
 8009124:	08009155 	.word	0x08009155
 8009128:	08009195 	.word	0x08009195
 800912c:	0800936b 	.word	0x0800936b
 8009130:	0800936b 	.word	0x0800936b
 8009134:	0800930b 	.word	0x0800930b
 8009138:	08009337 	.word	0x08009337
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	7c12      	ldrb	r2, [r2, #16]
 8009148:	f107 0108 	add.w	r1, r7, #8
 800914c:	4610      	mov	r0, r2
 800914e:	4798      	blx	r3
 8009150:	60f8      	str	r0, [r7, #12]
      break;
 8009152:	e112      	b.n	800937a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	7c1b      	ldrb	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10d      	bne.n	8009178 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009164:	f107 0208 	add.w	r2, r7, #8
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
 800916c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3301      	adds	r3, #1
 8009172:	2202      	movs	r2, #2
 8009174:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009176:	e100      	b.n	800937a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800917e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009180:	f107 0208 	add.w	r2, r7, #8
 8009184:	4610      	mov	r0, r2
 8009186:	4798      	blx	r3
 8009188:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3301      	adds	r3, #1
 800918e:	2202      	movs	r2, #2
 8009190:	701a      	strb	r2, [r3, #0]
      break;
 8009192:	e0f2      	b.n	800937a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	885b      	ldrh	r3, [r3, #2]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b05      	cmp	r3, #5
 800919c:	f200 80ac 	bhi.w	80092f8 <USBD_GetDescriptor+0x204>
 80091a0:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <USBD_GetDescriptor+0xb4>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	080091c1 	.word	0x080091c1
 80091ac:	080091f5 	.word	0x080091f5
 80091b0:	08009229 	.word	0x08009229
 80091b4:	0800925d 	.word	0x0800925d
 80091b8:	08009291 	.word	0x08009291
 80091bc:	080092c5 	.word	0x080092c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	7c12      	ldrb	r2, [r2, #16]
 80091d8:	f107 0108 	add.w	r1, r7, #8
 80091dc:	4610      	mov	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091e2:	e091      	b.n	8009308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 facb 	bl	8009782 <USBD_CtlError>
            err++;
 80091ec:	7afb      	ldrb	r3, [r7, #11]
 80091ee:	3301      	adds	r3, #1
 80091f0:	72fb      	strb	r3, [r7, #11]
          break;
 80091f2:	e089      	b.n	8009308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	7c12      	ldrb	r2, [r2, #16]
 800920c:	f107 0108 	add.w	r1, r7, #8
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009216:	e077      	b.n	8009308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009218:	6839      	ldr	r1, [r7, #0]
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fab1 	bl	8009782 <USBD_CtlError>
            err++;
 8009220:	7afb      	ldrb	r3, [r7, #11]
 8009222:	3301      	adds	r3, #1
 8009224:	72fb      	strb	r3, [r7, #11]
          break;
 8009226:	e06f      	b.n	8009308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923a:	68db      	ldr	r3, [r3, #12]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	7c12      	ldrb	r2, [r2, #16]
 8009240:	f107 0108 	add.w	r1, r7, #8
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
 8009248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800924a:	e05d      	b.n	8009308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fa97 	bl	8009782 <USBD_CtlError>
            err++;
 8009254:	7afb      	ldrb	r3, [r7, #11]
 8009256:	3301      	adds	r3, #1
 8009258:	72fb      	strb	r3, [r7, #11]
          break;
 800925a:	e055      	b.n	8009308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00b      	beq.n	8009280 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	7c12      	ldrb	r2, [r2, #16]
 8009274:	f107 0108 	add.w	r1, r7, #8
 8009278:	4610      	mov	r0, r2
 800927a:	4798      	blx	r3
 800927c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800927e:	e043      	b.n	8009308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fa7d 	bl	8009782 <USBD_CtlError>
            err++;
 8009288:	7afb      	ldrb	r3, [r7, #11]
 800928a:	3301      	adds	r3, #1
 800928c:	72fb      	strb	r3, [r7, #11]
          break;
 800928e:	e03b      	b.n	8009308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009296:	695b      	ldr	r3, [r3, #20]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00b      	beq.n	80092b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	7c12      	ldrb	r2, [r2, #16]
 80092a8:	f107 0108 	add.w	r1, r7, #8
 80092ac:	4610      	mov	r0, r2
 80092ae:	4798      	blx	r3
 80092b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092b2:	e029      	b.n	8009308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fa63 	bl	8009782 <USBD_CtlError>
            err++;
 80092bc:	7afb      	ldrb	r3, [r7, #11]
 80092be:	3301      	adds	r3, #1
 80092c0:	72fb      	strb	r3, [r7, #11]
          break;
 80092c2:	e021      	b.n	8009308 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	7c12      	ldrb	r2, [r2, #16]
 80092dc:	f107 0108 	add.w	r1, r7, #8
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e6:	e00f      	b.n	8009308 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fa49 	bl	8009782 <USBD_CtlError>
            err++;
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	3301      	adds	r3, #1
 80092f4:	72fb      	strb	r3, [r7, #11]
          break;
 80092f6:	e007      	b.n	8009308 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa41 	bl	8009782 <USBD_CtlError>
          err++;
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	3301      	adds	r3, #1
 8009304:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009306:	bf00      	nop
      }
      break;
 8009308:	e037      	b.n	800937a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7c1b      	ldrb	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d109      	bne.n	8009326 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800931a:	f107 0208 	add.w	r2, r7, #8
 800931e:	4610      	mov	r0, r2
 8009320:	4798      	blx	r3
 8009322:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009324:	e029      	b.n	800937a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fa2a 	bl	8009782 <USBD_CtlError>
        err++;
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	3301      	adds	r3, #1
 8009332:	72fb      	strb	r3, [r7, #11]
      break;
 8009334:	e021      	b.n	800937a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7c1b      	ldrb	r3, [r3, #16]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10d      	bne.n	800935a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009346:	f107 0208 	add.w	r2, r7, #8
 800934a:	4610      	mov	r0, r2
 800934c:	4798      	blx	r3
 800934e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	2207      	movs	r2, #7
 8009356:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009358:	e00f      	b.n	800937a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fa10 	bl	8009782 <USBD_CtlError>
        err++;
 8009362:	7afb      	ldrb	r3, [r7, #11]
 8009364:	3301      	adds	r3, #1
 8009366:	72fb      	strb	r3, [r7, #11]
      break;
 8009368:	e007      	b.n	800937a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fa08 	bl	8009782 <USBD_CtlError>
      err++;
 8009372:	7afb      	ldrb	r3, [r7, #11]
 8009374:	3301      	adds	r3, #1
 8009376:	72fb      	strb	r3, [r7, #11]
      break;
 8009378:	bf00      	nop
  }

  if (err != 0U)
 800937a:	7afb      	ldrb	r3, [r7, #11]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d11e      	bne.n	80093be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	88db      	ldrh	r3, [r3, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d016      	beq.n	80093b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009388:	893b      	ldrh	r3, [r7, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	88da      	ldrh	r2, [r3, #6]
 8009392:	893b      	ldrh	r3, [r7, #8]
 8009394:	4293      	cmp	r3, r2
 8009396:	bf28      	it	cs
 8009398:	4613      	movcs	r3, r2
 800939a:	b29b      	uxth	r3, r3
 800939c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800939e:	893b      	ldrh	r3, [r7, #8]
 80093a0:	461a      	mov	r2, r3
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 fa69 	bl	800987c <USBD_CtlSendData>
 80093aa:	e009      	b.n	80093c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80093ac:	6839      	ldr	r1, [r7, #0]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9e7 	bl	8009782 <USBD_CtlError>
 80093b4:	e004      	b.n	80093c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 faba 	bl	8009930 <USBD_CtlSendStatus>
 80093bc:	e000      	b.n	80093c0 <USBD_GetDescriptor+0x2cc>
    return;
 80093be:	bf00      	nop
  }
}
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop

080093c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	889b      	ldrh	r3, [r3, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d131      	bne.n	800943e <USBD_SetAddress+0x76>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	88db      	ldrh	r3, [r3, #6]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d12d      	bne.n	800943e <USBD_SetAddress+0x76>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	885b      	ldrh	r3, [r3, #2]
 80093e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80093e8:	d829      	bhi.n	800943e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	885b      	ldrh	r3, [r3, #2]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d104      	bne.n	800940c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f9bc 	bl	8009782 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940a:	e01d      	b.n	8009448 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	7bfa      	ldrb	r2, [r7, #15]
 8009410:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009414:	7bfb      	ldrb	r3, [r7, #15]
 8009416:	4619      	mov	r1, r3
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 feff 	bl	800a21c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa86 	bl	8009930 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d004      	beq.n	8009434 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	e009      	b.n	8009448 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800943c:	e004      	b.n	8009448 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f99e 	bl	8009782 <USBD_CtlError>
  }
}
 8009446:	bf00      	nop
 8009448:	bf00      	nop
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	885b      	ldrh	r3, [r3, #2]
 8009462:	b2da      	uxtb	r2, r3
 8009464:	4b4e      	ldr	r3, [pc, #312]	@ (80095a0 <USBD_SetConfig+0x150>)
 8009466:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009468:	4b4d      	ldr	r3, [pc, #308]	@ (80095a0 <USBD_SetConfig+0x150>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d905      	bls.n	800947c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f985 	bl	8009782 <USBD_CtlError>
    return USBD_FAIL;
 8009478:	2303      	movs	r3, #3
 800947a:	e08c      	b.n	8009596 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d002      	beq.n	800948e <USBD_SetConfig+0x3e>
 8009488:	2b03      	cmp	r3, #3
 800948a:	d029      	beq.n	80094e0 <USBD_SetConfig+0x90>
 800948c:	e075      	b.n	800957a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800948e:	4b44      	ldr	r3, [pc, #272]	@ (80095a0 <USBD_SetConfig+0x150>)
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d020      	beq.n	80094d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009496:	4b42      	ldr	r3, [pc, #264]	@ (80095a0 <USBD_SetConfig+0x150>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094a0:	4b3f      	ldr	r3, [pc, #252]	@ (80095a0 <USBD_SetConfig+0x150>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fe ffe3 	bl	8008472 <USBD_SetClassConfig>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d008      	beq.n	80094c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f962 	bl	8009782 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2202      	movs	r2, #2
 80094c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094c6:	e065      	b.n	8009594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa31 	bl	8009930 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2203      	movs	r2, #3
 80094d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094d6:	e05d      	b.n	8009594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fa29 	bl	8009930 <USBD_CtlSendStatus>
      break;
 80094de:	e059      	b.n	8009594 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80094e0:	4b2f      	ldr	r3, [pc, #188]	@ (80095a0 <USBD_SetConfig+0x150>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d112      	bne.n	800950e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2202      	movs	r2, #2
 80094ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80094f0:	4b2b      	ldr	r3, [pc, #172]	@ (80095a0 <USBD_SetConfig+0x150>)
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	461a      	mov	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094fa:	4b29      	ldr	r3, [pc, #164]	@ (80095a0 <USBD_SetConfig+0x150>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fe ffd2 	bl	80084aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fa12 	bl	8009930 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800950c:	e042      	b.n	8009594 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800950e:	4b24      	ldr	r3, [pc, #144]	@ (80095a0 <USBD_SetConfig+0x150>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	429a      	cmp	r2, r3
 800951a:	d02a      	beq.n	8009572 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	b2db      	uxtb	r3, r3
 8009522:	4619      	mov	r1, r3
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7fe ffc0 	bl	80084aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800952a:	4b1d      	ldr	r3, [pc, #116]	@ (80095a0 <USBD_SetConfig+0x150>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009534:	4b1a      	ldr	r3, [pc, #104]	@ (80095a0 <USBD_SetConfig+0x150>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f7fe ff99 	bl	8008472 <USBD_SetClassConfig>
 8009540:	4603      	mov	r3, r0
 8009542:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009544:	7bfb      	ldrb	r3, [r7, #15]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00f      	beq.n	800956a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f918 	bl	8009782 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	4619      	mov	r1, r3
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7fe ffa5 	bl	80084aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2202      	movs	r2, #2
 8009564:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009568:	e014      	b.n	8009594 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f9e0 	bl	8009930 <USBD_CtlSendStatus>
      break;
 8009570:	e010      	b.n	8009594 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f9dc 	bl	8009930 <USBD_CtlSendStatus>
      break;
 8009578:	e00c      	b.n	8009594 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f900 	bl	8009782 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009582:	4b07      	ldr	r3, [pc, #28]	@ (80095a0 <USBD_SetConfig+0x150>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7fe ff8e 	bl	80084aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800958e:	2303      	movs	r3, #3
 8009590:	73fb      	strb	r3, [r7, #15]
      break;
 8009592:	bf00      	nop
  }

  return ret;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	2000041c 	.word	0x2000041c

080095a4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	88db      	ldrh	r3, [r3, #6]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d004      	beq.n	80095c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80095b6:	6839      	ldr	r1, [r7, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f8e2 	bl	8009782 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80095be:	e023      	b.n	8009608 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	dc02      	bgt.n	80095d2 <USBD_GetConfig+0x2e>
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	dc03      	bgt.n	80095d8 <USBD_GetConfig+0x34>
 80095d0:	e015      	b.n	80095fe <USBD_GetConfig+0x5a>
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d00b      	beq.n	80095ee <USBD_GetConfig+0x4a>
 80095d6:	e012      	b.n	80095fe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3308      	adds	r3, #8
 80095e2:	2201      	movs	r2, #1
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f948 	bl	800987c <USBD_CtlSendData>
        break;
 80095ec:	e00c      	b.n	8009608 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3304      	adds	r3, #4
 80095f2:	2201      	movs	r2, #1
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f940 	bl	800987c <USBD_CtlSendData>
        break;
 80095fc:	e004      	b.n	8009608 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f8be 	bl	8009782 <USBD_CtlError>
        break;
 8009606:	bf00      	nop
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009620:	b2db      	uxtb	r3, r3
 8009622:	3b01      	subs	r3, #1
 8009624:	2b02      	cmp	r3, #2
 8009626:	d81e      	bhi.n	8009666 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	88db      	ldrh	r3, [r3, #6]
 800962c:	2b02      	cmp	r3, #2
 800962e:	d004      	beq.n	800963a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009630:	6839      	ldr	r1, [r7, #0]
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f8a5 	bl	8009782 <USBD_CtlError>
        break;
 8009638:	e01a      	b.n	8009670 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009646:	2b00      	cmp	r3, #0
 8009648:	d005      	beq.n	8009656 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f043 0202 	orr.w	r2, r3, #2
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	330c      	adds	r3, #12
 800965a:	2202      	movs	r2, #2
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f90c 	bl	800987c <USBD_CtlSendData>
      break;
 8009664:	e004      	b.n	8009670 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f88a 	bl	8009782 <USBD_CtlError>
      break;
 800966e:	bf00      	nop
  }
}
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	885b      	ldrh	r3, [r3, #2]
 8009686:	2b01      	cmp	r3, #1
 8009688:	d107      	bne.n	800969a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 f94c 	bl	8009930 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009698:	e013      	b.n	80096c2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	885b      	ldrh	r3, [r3, #2]
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d10b      	bne.n	80096ba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	889b      	ldrh	r3, [r3, #4]
 80096a6:	0a1b      	lsrs	r3, r3, #8
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f93c 	bl	8009930 <USBD_CtlSendStatus>
}
 80096b8:	e003      	b.n	80096c2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f860 	bl	8009782 <USBD_CtlError>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	3b01      	subs	r3, #1
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d80b      	bhi.n	80096fa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	885b      	ldrh	r3, [r3, #2]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d10c      	bne.n	8009704 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f91c 	bl	8009930 <USBD_CtlSendStatus>
      }
      break;
 80096f8:	e004      	b.n	8009704 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f840 	bl	8009782 <USBD_CtlError>
      break;
 8009702:	e000      	b.n	8009706 <USBD_ClrFeature+0x3c>
      break;
 8009704:	bf00      	nop
  }
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
 8009716:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	781a      	ldrb	r2, [r3, #0]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	781a      	ldrb	r2, [r3, #0]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3301      	adds	r3, #1
 8009736:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fa40 	bl	8008bbe <SWAPBYTE>
 800973e:	4603      	mov	r3, r0
 8009740:	461a      	mov	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3301      	adds	r3, #1
 800974a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3301      	adds	r3, #1
 8009750:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f7ff fa33 	bl	8008bbe <SWAPBYTE>
 8009758:	4603      	mov	r3, r0
 800975a:	461a      	mov	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	3301      	adds	r3, #1
 8009764:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3301      	adds	r3, #1
 800976a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff fa26 	bl	8008bbe <SWAPBYTE>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	80da      	strh	r2, [r3, #6]
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b082      	sub	sp, #8
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800978c:	2180      	movs	r1, #128	@ 0x80
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 fcda 	bl	800a148 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009794:	2100      	movs	r1, #0
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fcd6 	bl	800a148 <USBD_LL_StallEP>
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d042      	beq.n	8009840 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80097be:	6938      	ldr	r0, [r7, #16]
 80097c0:	f000 f842 	bl	8009848 <USBD_GetLen>
 80097c4:	4603      	mov	r3, r0
 80097c6:	3301      	adds	r3, #1
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ce:	d808      	bhi.n	80097e2 <USBD_GetString+0x3e>
 80097d0:	6938      	ldr	r0, [r7, #16]
 80097d2:	f000 f839 	bl	8009848 <USBD_GetLen>
 80097d6:	4603      	mov	r3, r0
 80097d8:	3301      	adds	r3, #1
 80097da:	b29b      	uxth	r3, r3
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	e001      	b.n	80097e6 <USBD_GetString+0x42>
 80097e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	4413      	add	r3, r2
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	7812      	ldrb	r2, [r2, #0]
 80097f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80097f6:	7dfb      	ldrb	r3, [r7, #23]
 80097f8:	3301      	adds	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80097fc:	7dfb      	ldrb	r3, [r7, #23]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	4413      	add	r3, r2
 8009802:	2203      	movs	r2, #3
 8009804:	701a      	strb	r2, [r3, #0]
  idx++;
 8009806:	7dfb      	ldrb	r3, [r7, #23]
 8009808:	3301      	adds	r3, #1
 800980a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800980c:	e013      	b.n	8009836 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	68ba      	ldr	r2, [r7, #8]
 8009812:	4413      	add	r3, r2
 8009814:	693a      	ldr	r2, [r7, #16]
 8009816:	7812      	ldrb	r2, [r2, #0]
 8009818:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	3301      	adds	r3, #1
 800981e:	613b      	str	r3, [r7, #16]
    idx++;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	3301      	adds	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009826:	7dfb      	ldrb	r3, [r7, #23]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	4413      	add	r3, r2
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009830:	7dfb      	ldrb	r3, [r7, #23]
 8009832:	3301      	adds	r3, #1
 8009834:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e7      	bne.n	800980e <USBD_GetString+0x6a>
 800983e:	e000      	b.n	8009842 <USBD_GetString+0x9e>
    return;
 8009840:	bf00      	nop
  }
}
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009858:	e005      	b.n	8009866 <USBD_GetLen+0x1e>
  {
    len++;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	3301      	adds	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	3301      	adds	r3, #1
 8009864:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1f5      	bne.n	800985a <USBD_GetLen+0x12>
  }

  return len;
 800986e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3714      	adds	r7, #20
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2202      	movs	r2, #2
 800988c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	2100      	movs	r1, #0
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 fcd9 	bl	800a25a <USBD_LL_Transmit>

  return USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	60f8      	str	r0, [r7, #12]
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	2100      	movs	r1, #0
 80098c4:	68f8      	ldr	r0, [r7, #12]
 80098c6:	f000 fcc8 	bl	800a25a <USBD_LL_Transmit>

  return USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2203      	movs	r2, #3
 80098e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	2100      	movs	r1, #0
 80098fe:	68f8      	ldr	r0, [r7, #12]
 8009900:	f000 fccc 	bl	800a29c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	60f8      	str	r0, [r7, #12]
 8009916:	60b9      	str	r1, [r7, #8]
 8009918:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	2100      	movs	r1, #0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fcbb 	bl	800a29c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2204      	movs	r2, #4
 800993c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009940:	2300      	movs	r3, #0
 8009942:	2200      	movs	r2, #0
 8009944:	2100      	movs	r1, #0
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 fc87 	bl	800a25a <USBD_LL_Transmit>

  return USBD_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b082      	sub	sp, #8
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2205      	movs	r2, #5
 8009962:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009966:	2300      	movs	r3, #0
 8009968:	2200      	movs	r2, #0
 800996a:	2100      	movs	r1, #0
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fc95 	bl	800a29c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009972:	2300      	movs	r3, #0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3708      	adds	r7, #8
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009980:	2201      	movs	r2, #1
 8009982:	4912      	ldr	r1, [pc, #72]	@ (80099cc <MX_USB_DEVICE_Init+0x50>)
 8009984:	4812      	ldr	r0, [pc, #72]	@ (80099d0 <MX_USB_DEVICE_Init+0x54>)
 8009986:	f7fe fcf7 	bl	8008378 <USBD_Init>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009990:	f7f6 ff96 	bl	80008c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009994:	490f      	ldr	r1, [pc, #60]	@ (80099d4 <MX_USB_DEVICE_Init+0x58>)
 8009996:	480e      	ldr	r0, [pc, #56]	@ (80099d0 <MX_USB_DEVICE_Init+0x54>)
 8009998:	f7fe fd1e 	bl	80083d8 <USBD_RegisterClass>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80099a2:	f7f6 ff8d 	bl	80008c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80099a6:	490c      	ldr	r1, [pc, #48]	@ (80099d8 <MX_USB_DEVICE_Init+0x5c>)
 80099a8:	4809      	ldr	r0, [pc, #36]	@ (80099d0 <MX_USB_DEVICE_Init+0x54>)
 80099aa:	f7fe fc55 	bl	8008258 <USBD_CDC_RegisterInterface>
 80099ae:	4603      	mov	r3, r0
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d001      	beq.n	80099b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80099b4:	f7f6 ff84 	bl	80008c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80099b8:	4805      	ldr	r0, [pc, #20]	@ (80099d0 <MX_USB_DEVICE_Init+0x54>)
 80099ba:	f7fe fd43 	bl	8008444 <USBD_Start>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80099c4:	f7f6 ff7c 	bl	80008c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80099c8:	bf00      	nop
 80099ca:	bd80      	pop	{r7, pc}
 80099cc:	200000f4 	.word	0x200000f4
 80099d0:	20000420 	.word	0x20000420
 80099d4:	20000060 	.word	0x20000060
 80099d8:	200000e0 	.word	0x200000e0

080099dc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80099e0:	2200      	movs	r2, #0
 80099e2:	4905      	ldr	r1, [pc, #20]	@ (80099f8 <CDC_Init_HS+0x1c>)
 80099e4:	4805      	ldr	r0, [pc, #20]	@ (80099fc <CDC_Init_HS+0x20>)
 80099e6:	f7fe fc51 	bl	800828c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80099ea:	4905      	ldr	r1, [pc, #20]	@ (8009a00 <CDC_Init_HS+0x24>)
 80099ec:	4803      	ldr	r0, [pc, #12]	@ (80099fc <CDC_Init_HS+0x20>)
 80099ee:	f7fe fc6f 	bl	80082d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80099f2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000efc 	.word	0x20000efc
 80099fc:	20000420 	.word	0x20000420
 8009a00:	200006fc 	.word	0x200006fc

08009a04 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009a08:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	6039      	str	r1, [r7, #0]
 8009a1e:	71fb      	strb	r3, [r7, #7]
 8009a20:	4613      	mov	r3, r2
 8009a22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009a24:	79fb      	ldrb	r3, [r7, #7]
 8009a26:	2b23      	cmp	r3, #35	@ 0x23
 8009a28:	d84a      	bhi.n	8009ac0 <CDC_Control_HS+0xac>
 8009a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a30 <CDC_Control_HS+0x1c>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009ac1 	.word	0x08009ac1
 8009a34:	08009ac1 	.word	0x08009ac1
 8009a38:	08009ac1 	.word	0x08009ac1
 8009a3c:	08009ac1 	.word	0x08009ac1
 8009a40:	08009ac1 	.word	0x08009ac1
 8009a44:	08009ac1 	.word	0x08009ac1
 8009a48:	08009ac1 	.word	0x08009ac1
 8009a4c:	08009ac1 	.word	0x08009ac1
 8009a50:	08009ac1 	.word	0x08009ac1
 8009a54:	08009ac1 	.word	0x08009ac1
 8009a58:	08009ac1 	.word	0x08009ac1
 8009a5c:	08009ac1 	.word	0x08009ac1
 8009a60:	08009ac1 	.word	0x08009ac1
 8009a64:	08009ac1 	.word	0x08009ac1
 8009a68:	08009ac1 	.word	0x08009ac1
 8009a6c:	08009ac1 	.word	0x08009ac1
 8009a70:	08009ac1 	.word	0x08009ac1
 8009a74:	08009ac1 	.word	0x08009ac1
 8009a78:	08009ac1 	.word	0x08009ac1
 8009a7c:	08009ac1 	.word	0x08009ac1
 8009a80:	08009ac1 	.word	0x08009ac1
 8009a84:	08009ac1 	.word	0x08009ac1
 8009a88:	08009ac1 	.word	0x08009ac1
 8009a8c:	08009ac1 	.word	0x08009ac1
 8009a90:	08009ac1 	.word	0x08009ac1
 8009a94:	08009ac1 	.word	0x08009ac1
 8009a98:	08009ac1 	.word	0x08009ac1
 8009a9c:	08009ac1 	.word	0x08009ac1
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac1 	.word	0x08009ac1
 8009aac:	08009ac1 	.word	0x08009ac1
 8009ab0:	08009ac1 	.word	0x08009ac1
 8009ab4:	08009ac1 	.word	0x08009ac1
 8009ab8:	08009ac1 	.word	0x08009ac1
 8009abc:	08009ac1 	.word	0x08009ac1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009ac0:	bf00      	nop
  }

  return (USBD_OK);
 8009ac2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	480c      	ldr	r0, [pc, #48]	@ (8009b10 <CDC_Receive_HS+0x40>)
 8009ade:	f7fe fbf7 	bl	80082d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009ae2:	480b      	ldr	r0, [pc, #44]	@ (8009b10 <CDC_Receive_HS+0x40>)
 8009ae4:	f7fe fc12 	bl	800830c <USBD_CDC_ReceivePacket>
  if (*Len > 0) {
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d00a      	beq.n	8009b06 <CDC_Receive_HS+0x36>
     snprintf(data, sizeof(data), "%.*s", (int)*Len, Buf);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	461a      	mov	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	4613      	mov	r3, r2
 8009afc:	4a05      	ldr	r2, [pc, #20]	@ (8009b14 <CDC_Receive_HS+0x44>)
 8009afe:	210f      	movs	r1, #15
 8009b00:	4805      	ldr	r0, [pc, #20]	@ (8009b18 <CDC_Receive_HS+0x48>)
 8009b02:	f000 fc43 	bl	800a38c <sniprintf>
  }
  return (USBD_OK);
 8009b06:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20000420 	.word	0x20000420
 8009b14:	0800adec 	.word	0x0800adec
 8009b18:	200001b0 	.word	0x200001b0

08009b1c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	4613      	mov	r3, r2
 8009b28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009b2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
	...

08009b40 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	6039      	str	r1, [r7, #0]
 8009b4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	2212      	movs	r2, #18
 8009b50:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009b52:	4b03      	ldr	r3, [pc, #12]	@ (8009b60 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	20000110 	.word	0x20000110

08009b64 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	6039      	str	r1, [r7, #0]
 8009b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2204      	movs	r2, #4
 8009b74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b76:	4b03      	ldr	r3, [pc, #12]	@ (8009b84 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr
 8009b84:	20000124 	.word	0x20000124

08009b88 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4907      	ldr	r1, [pc, #28]	@ (8009bbc <USBD_HS_ProductStrDescriptor+0x34>)
 8009b9e:	4808      	ldr	r0, [pc, #32]	@ (8009bc0 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ba0:	f7ff fe00 	bl	80097a4 <USBD_GetString>
 8009ba4:	e004      	b.n	8009bb0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4904      	ldr	r1, [pc, #16]	@ (8009bbc <USBD_HS_ProductStrDescriptor+0x34>)
 8009baa:	4805      	ldr	r0, [pc, #20]	@ (8009bc0 <USBD_HS_ProductStrDescriptor+0x38>)
 8009bac:	f7ff fdfa 	bl	80097a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bb0:	4b02      	ldr	r3, [pc, #8]	@ (8009bbc <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200016fc 	.word	0x200016fc
 8009bc0:	0800adf4 	.word	0x0800adf4

08009bc4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	4603      	mov	r3, r0
 8009bcc:	6039      	str	r1, [r7, #0]
 8009bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	4904      	ldr	r1, [pc, #16]	@ (8009be4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009bd4:	4804      	ldr	r0, [pc, #16]	@ (8009be8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009bd6:	f7ff fde5 	bl	80097a4 <USBD_GetString>
  return USBD_StrDesc;
 8009bda:	4b02      	ldr	r3, [pc, #8]	@ (8009be4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	200016fc 	.word	0x200016fc
 8009be8:	0800ae0c 	.word	0x0800ae0c

08009bec <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	221a      	movs	r2, #26
 8009bfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009bfe:	f000 f843 	bl	8009c88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009c02:	4b02      	ldr	r3, [pc, #8]	@ (8009c0c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000128 	.word	0x20000128

08009c10 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	4907      	ldr	r1, [pc, #28]	@ (8009c44 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009c26:	4808      	ldr	r0, [pc, #32]	@ (8009c48 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009c28:	f7ff fdbc 	bl	80097a4 <USBD_GetString>
 8009c2c:	e004      	b.n	8009c38 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	4904      	ldr	r1, [pc, #16]	@ (8009c44 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009c32:	4805      	ldr	r0, [pc, #20]	@ (8009c48 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009c34:	f7ff fdb6 	bl	80097a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c38:	4b02      	ldr	r3, [pc, #8]	@ (8009c44 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	200016fc 	.word	0x200016fc
 8009c48:	0800ae20 	.word	0x0800ae20

08009c4c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	4603      	mov	r3, r0
 8009c54:	6039      	str	r1, [r7, #0]
 8009c56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	4907      	ldr	r1, [pc, #28]	@ (8009c80 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009c62:	4808      	ldr	r0, [pc, #32]	@ (8009c84 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009c64:	f7ff fd9e 	bl	80097a4 <USBD_GetString>
 8009c68:	e004      	b.n	8009c74 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	4904      	ldr	r1, [pc, #16]	@ (8009c80 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009c6e:	4805      	ldr	r0, [pc, #20]	@ (8009c84 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009c70:	f7ff fd98 	bl	80097a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c74:	4b02      	ldr	r3, [pc, #8]	@ (8009c80 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	200016fc 	.word	0x200016fc
 8009c84:	0800ae2c 	.word	0x0800ae2c

08009c88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009ccc <Get_SerialNum+0x44>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c94:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd0 <Get_SerialNum+0x48>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009cd4 <Get_SerialNum+0x4c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009cae:	2208      	movs	r2, #8
 8009cb0:	4909      	ldr	r1, [pc, #36]	@ (8009cd8 <Get_SerialNum+0x50>)
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f814 	bl	8009ce0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009cb8:	2204      	movs	r2, #4
 8009cba:	4908      	ldr	r1, [pc, #32]	@ (8009cdc <Get_SerialNum+0x54>)
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	f000 f80f 	bl	8009ce0 <IntToUnicode>
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	1fff7a10 	.word	0x1fff7a10
 8009cd0:	1fff7a14 	.word	0x1fff7a14
 8009cd4:	1fff7a18 	.word	0x1fff7a18
 8009cd8:	2000012a 	.word	0x2000012a
 8009cdc:	2000013a 	.word	0x2000013a

08009ce0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	4613      	mov	r3, r2
 8009cec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75fb      	strb	r3, [r7, #23]
 8009cf6:	e027      	b.n	8009d48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	0f1b      	lsrs	r3, r3, #28
 8009cfc:	2b09      	cmp	r3, #9
 8009cfe:	d80b      	bhi.n	8009d18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	0f1b      	lsrs	r3, r3, #28
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	440b      	add	r3, r1
 8009d10:	3230      	adds	r2, #48	@ 0x30
 8009d12:	b2d2      	uxtb	r2, r2
 8009d14:	701a      	strb	r2, [r3, #0]
 8009d16:	e00a      	b.n	8009d2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	0f1b      	lsrs	r3, r3, #28
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	4619      	mov	r1, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	440b      	add	r3, r1
 8009d28:	3237      	adds	r2, #55	@ 0x37
 8009d2a:	b2d2      	uxtb	r2, r2
 8009d2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	005b      	lsls	r3, r3, #1
 8009d38:	3301      	adds	r3, #1
 8009d3a:	68ba      	ldr	r2, [r7, #8]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	3301      	adds	r3, #1
 8009d46:	75fb      	strb	r3, [r7, #23]
 8009d48:	7dfa      	ldrb	r2, [r7, #23]
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d3d3      	bcc.n	8009cf8 <IntToUnicode+0x18>
  }
}
 8009d50:	bf00      	nop
 8009d52:	bf00      	nop
 8009d54:	371c      	adds	r7, #28
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
	...

08009d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	@ 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d68:	f107 0314 	add.w	r3, r7, #20
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	605a      	str	r2, [r3, #4]
 8009d72:	609a      	str	r2, [r3, #8]
 8009d74:	60da      	str	r2, [r3, #12]
 8009d76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009df4 <HAL_PCD_MspInit+0x94>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d134      	bne.n	8009dec <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d82:	2300      	movs	r3, #0
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	4b1c      	ldr	r3, [pc, #112]	@ (8009df8 <HAL_PCD_MspInit+0x98>)
 8009d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009df8 <HAL_PCD_MspInit+0x98>)
 8009d8c:	f043 0302 	orr.w	r3, r3, #2
 8009d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8009d92:	4b19      	ldr	r3, [pc, #100]	@ (8009df8 <HAL_PCD_MspInit+0x98>)
 8009d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	613b      	str	r3, [r7, #16]
 8009d9c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009d9e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8009da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009da4:	2302      	movs	r3, #2
 8009da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da8:	2300      	movs	r3, #0
 8009daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dac:	2303      	movs	r3, #3
 8009dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009db0:	230c      	movs	r3, #12
 8009db2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009db4:	f107 0314 	add.w	r3, r7, #20
 8009db8:	4619      	mov	r1, r3
 8009dba:	4810      	ldr	r0, [pc, #64]	@ (8009dfc <HAL_PCD_MspInit+0x9c>)
 8009dbc:	f7f8 fe12 	bl	80029e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <HAL_PCD_MspInit+0x98>)
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8009df8 <HAL_PCD_MspInit+0x98>)
 8009dca:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8009dd0:	4b09      	ldr	r3, [pc, #36]	@ (8009df8 <HAL_PCD_MspInit+0x98>)
 8009dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dd8:	60fb      	str	r3, [r7, #12]
 8009dda:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2100      	movs	r1, #0
 8009de0:	204d      	movs	r0, #77	@ 0x4d
 8009de2:	f7f8 f974 	bl	80020ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009de6:	204d      	movs	r0, #77	@ 0x4d
 8009de8:	f7f8 f98d 	bl	8002106 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009dec:	bf00      	nop
 8009dee:	3728      	adds	r7, #40	@ 0x28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	40040000 	.word	0x40040000
 8009df8:	40023800 	.word	0x40023800
 8009dfc:	40020400 	.word	0x40020400

08009e00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f7fe fb61 	bl	80084de <USBD_LL_SetupStage>
}
 8009e1c:	bf00      	nop
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	6879      	ldr	r1, [r7, #4]
 8009e3a:	4613      	mov	r3, r2
 8009e3c:	00db      	lsls	r3, r3, #3
 8009e3e:	4413      	add	r3, r2
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	440b      	add	r3, r1
 8009e44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	78fb      	ldrb	r3, [r7, #3]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f7fe fb9b 	bl	8008588 <USBD_LL_DataOutStage>
}
 8009e52:	bf00      	nop
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	4613      	mov	r3, r2
 8009e72:	00db      	lsls	r3, r3, #3
 8009e74:	4413      	add	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	3320      	adds	r3, #32
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7fe fc34 	bl	80086ee <USBD_LL_DataInStage>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7fe fd6e 	bl	800897e <USBD_LL_SOF>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	79db      	ldrb	r3, [r3, #7]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d102      	bne.n	8009ec4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	e008      	b.n	8009ed6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	79db      	ldrb	r3, [r3, #7]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d102      	bne.n	8009ed2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	e001      	b.n	8009ed6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ed2:	f7f6 fcf5 	bl	80008c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009edc:	7bfa      	ldrb	r2, [r7, #15]
 8009ede:	4611      	mov	r1, r2
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe fd08 	bl	80088f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fe fcb0 	bl	8008852 <USBD_LL_Reset>
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fd03 	bl	8008916 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f22:	f043 0301 	orr.w	r3, r3, #1
 8009f26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	7adb      	ldrb	r3, [r3, #11]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f30:	4b04      	ldr	r3, [pc, #16]	@ (8009f44 <HAL_PCD_SuspendCallback+0x48>)
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	4a03      	ldr	r2, [pc, #12]	@ (8009f44 <HAL_PCD_SuspendCallback+0x48>)
 8009f36:	f043 0306 	orr.w	r3, r3, #6
 8009f3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009f3c:	bf00      	nop
 8009f3e:	3708      	adds	r7, #8
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	e000ed00 	.word	0xe000ed00

08009f48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fcf9 	bl	800894e <USBD_LL_Resume>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f76:	78fa      	ldrb	r2, [r7, #3]
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fe fd51 	bl	8008a22 <USBD_LL_IsoOUTIncomplete>
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	460b      	mov	r3, r1
 8009f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f9a:	78fa      	ldrb	r2, [r7, #3]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fe fd0d 	bl	80089be <USBD_LL_IsoINIncomplete>
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fd63 	bl	8008a86 <USBD_LL_DevConnected>
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7fe fd60 	bl	8008a9c <USBD_LL_DevDisconnected>
}
 8009fdc:	bf00      	nop
 8009fde:	3708      	adds	r7, #8
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d140      	bne.n	800a076 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009ff4:	4a22      	ldr	r2, [pc, #136]	@ (800a080 <USBD_LL_Init+0x9c>)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a20      	ldr	r2, [pc, #128]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a000:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a004:	4b1e      	ldr	r3, [pc, #120]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a006:	4a1f      	ldr	r2, [pc, #124]	@ (800a084 <USBD_LL_Init+0xa0>)
 800a008:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a00a:	4b1d      	ldr	r3, [pc, #116]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a00c:	2206      	movs	r2, #6
 800a00e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a010:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a012:	2202      	movs	r2, #2
 800a014:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a016:	4b1a      	ldr	r3, [pc, #104]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a018:	2200      	movs	r2, #0
 800a01a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a01c:	4b18      	ldr	r3, [pc, #96]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a01e:	2202      	movs	r2, #2
 800a020:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a022:	4b17      	ldr	r3, [pc, #92]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a024:	2200      	movs	r2, #0
 800a026:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a028:	4b15      	ldr	r3, [pc, #84]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a02e:	4b14      	ldr	r3, [pc, #80]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a030:	2200      	movs	r2, #0
 800a032:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a034:	4b12      	ldr	r3, [pc, #72]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a036:	2200      	movs	r2, #0
 800a038:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a03a:	4b11      	ldr	r3, [pc, #68]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a040:	4b0f      	ldr	r3, [pc, #60]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a042:	2200      	movs	r2, #0
 800a044:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a046:	480e      	ldr	r0, [pc, #56]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a048:	f7f9 f96b 	bl	8003322 <HAL_PCD_Init>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a052:	f7f6 fc35 	bl	80008c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a056:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a05a:	4809      	ldr	r0, [pc, #36]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a05c:	f7fa fb97 	bl	800478e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a060:	2280      	movs	r2, #128	@ 0x80
 800a062:	2100      	movs	r1, #0
 800a064:	4806      	ldr	r0, [pc, #24]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a066:	f7fa fb4b 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a06a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800a06e:	2101      	movs	r1, #1
 800a070:	4803      	ldr	r0, [pc, #12]	@ (800a080 <USBD_LL_Init+0x9c>)
 800a072:	f7fa fb45 	bl	8004700 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200018fc 	.word	0x200018fc
 800a084:	40040000 	.word	0x40040000

0800a088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7f9 fa4e 	bl	8003540 <HAL_PCD_Start>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 f942 	bl	800a334 <USBD_Get_USB_Status>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	70fb      	strb	r3, [r7, #3]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	70bb      	strb	r3, [r7, #2]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a0e6:	78bb      	ldrb	r3, [r7, #2]
 800a0e8:	883a      	ldrh	r2, [r7, #0]
 800a0ea:	78f9      	ldrb	r1, [r7, #3]
 800a0ec:	f7f9 ff22 	bl	8003f34 <HAL_PCD_EP_Open>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 f91c 	bl	800a334 <USBD_Get_USB_Status>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a100:	7bbb      	ldrb	r3, [r7, #14]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b084      	sub	sp, #16
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
 800a112:	460b      	mov	r3, r1
 800a114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a124:	78fa      	ldrb	r2, [r7, #3]
 800a126:	4611      	mov	r1, r2
 800a128:	4618      	mov	r0, r3
 800a12a:	f7f9 ff6d 	bl	8004008 <HAL_PCD_EP_Close>
 800a12e:	4603      	mov	r3, r0
 800a130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a132:	7bfb      	ldrb	r3, [r7, #15]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 f8fd 	bl	800a334 <USBD_Get_USB_Status>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a158:	2300      	movs	r3, #0
 800a15a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a162:	78fa      	ldrb	r2, [r7, #3]
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f7fa f825 	bl	80041b6 <HAL_PCD_EP_SetStall>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a170:	7bfb      	ldrb	r3, [r7, #15]
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f8de 	bl	800a334 <USBD_Get_USB_Status>
 800a178:	4603      	mov	r3, r0
 800a17a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a17c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1a0:	78fa      	ldrb	r2, [r7, #3]
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fa f869 	bl	800427c <HAL_PCD_EP_ClrStall>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f000 f8bf 	bl	800a334 <USBD_Get_USB_Status>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a1d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	da0b      	bge.n	800a1f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a1e0:	78fb      	ldrb	r3, [r7, #3]
 800a1e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1e6:	68f9      	ldr	r1, [r7, #12]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	00db      	lsls	r3, r3, #3
 800a1ec:	4413      	add	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	3316      	adds	r3, #22
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	e00b      	b.n	800a210 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1fe:	68f9      	ldr	r1, [r7, #12]
 800a200:	4613      	mov	r3, r2
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a20e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a210:	4618      	mov	r0, r3
 800a212:	3714      	adds	r7, #20
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a236:	78fa      	ldrb	r2, [r7, #3]
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7f9 fe56 	bl	8003eec <HAL_PCD_SetAddress>
 800a240:	4603      	mov	r3, r0
 800a242:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a244:	7bfb      	ldrb	r3, [r7, #15]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f874 	bl	800a334 <USBD_Get_USB_Status>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a250:	7bbb      	ldrb	r3, [r7, #14]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b086      	sub	sp, #24
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	607a      	str	r2, [r7, #4]
 800a264:	603b      	str	r3, [r7, #0]
 800a266:	460b      	mov	r3, r1
 800a268:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a26a:	2300      	movs	r3, #0
 800a26c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a278:	7af9      	ldrb	r1, [r7, #11]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	f7f9 ff60 	bl	8004142 <HAL_PCD_EP_Transmit>
 800a282:	4603      	mov	r3, r0
 800a284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a286:	7dfb      	ldrb	r3, [r7, #23]
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 f853 	bl	800a334 <USBD_Get_USB_Status>
 800a28e:	4603      	mov	r3, r0
 800a290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a292:	7dbb      	ldrb	r3, [r7, #22]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	607a      	str	r2, [r7, #4]
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a2ba:	7af9      	ldrb	r1, [r7, #11]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	f7f9 feec 	bl	800409c <HAL_PCD_EP_Receive>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f832 	bl	800a334 <USBD_Get_USB_Status>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3718      	adds	r7, #24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}

0800a2de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2de:	b580      	push	{r7, lr}
 800a2e0:	b082      	sub	sp, #8
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2f0:	78fa      	ldrb	r2, [r7, #3]
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7f9 ff0c 	bl	8004112 <HAL_PCD_EP_GetRxCount>
 800a2fa:	4603      	mov	r3, r0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a30c:	4b03      	ldr	r3, [pc, #12]	@ (800a31c <USBD_static_malloc+0x18>)
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20001de0 	.word	0x20001de0

0800a320 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]

}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	2b03      	cmp	r3, #3
 800a346:	d817      	bhi.n	800a378 <USBD_Get_USB_Status+0x44>
 800a348:	a201      	add	r2, pc, #4	@ (adr r2, 800a350 <USBD_Get_USB_Status+0x1c>)
 800a34a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34e:	bf00      	nop
 800a350:	0800a361 	.word	0x0800a361
 800a354:	0800a367 	.word	0x0800a367
 800a358:	0800a36d 	.word	0x0800a36d
 800a35c:	0800a373 	.word	0x0800a373
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	73fb      	strb	r3, [r7, #15]
    break;
 800a364:	e00b      	b.n	800a37e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a366:	2303      	movs	r3, #3
 800a368:	73fb      	strb	r3, [r7, #15]
    break;
 800a36a:	e008      	b.n	800a37e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a36c:	2301      	movs	r3, #1
 800a36e:	73fb      	strb	r3, [r7, #15]
    break;
 800a370:	e005      	b.n	800a37e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a372:	2303      	movs	r3, #3
 800a374:	73fb      	strb	r3, [r7, #15]
    break;
 800a376:	e002      	b.n	800a37e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a378:	2303      	movs	r3, #3
 800a37a:	73fb      	strb	r3, [r7, #15]
    break;
 800a37c:	bf00      	nop
  }
  return usb_status;
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <sniprintf>:
 800a38c:	b40c      	push	{r2, r3}
 800a38e:	b530      	push	{r4, r5, lr}
 800a390:	4b17      	ldr	r3, [pc, #92]	@ (800a3f0 <sniprintf+0x64>)
 800a392:	1e0c      	subs	r4, r1, #0
 800a394:	681d      	ldr	r5, [r3, #0]
 800a396:	b09d      	sub	sp, #116	@ 0x74
 800a398:	da08      	bge.n	800a3ac <sniprintf+0x20>
 800a39a:	238b      	movs	r3, #139	@ 0x8b
 800a39c:	602b      	str	r3, [r5, #0]
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a2:	b01d      	add	sp, #116	@ 0x74
 800a3a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3a8:	b002      	add	sp, #8
 800a3aa:	4770      	bx	lr
 800a3ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a3b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a3b4:	bf14      	ite	ne
 800a3b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a3ba:	4623      	moveq	r3, r4
 800a3bc:	9304      	str	r3, [sp, #16]
 800a3be:	9307      	str	r3, [sp, #28]
 800a3c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3c4:	9002      	str	r0, [sp, #8]
 800a3c6:	9006      	str	r0, [sp, #24]
 800a3c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a3ce:	ab21      	add	r3, sp, #132	@ 0x84
 800a3d0:	a902      	add	r1, sp, #8
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	9301      	str	r3, [sp, #4]
 800a3d6:	f000 f9b5 	bl	800a744 <_svfiprintf_r>
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	bfbc      	itt	lt
 800a3de:	238b      	movlt	r3, #139	@ 0x8b
 800a3e0:	602b      	strlt	r3, [r5, #0]
 800a3e2:	2c00      	cmp	r4, #0
 800a3e4:	d0dd      	beq.n	800a3a2 <sniprintf+0x16>
 800a3e6:	9b02      	ldr	r3, [sp, #8]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	e7d9      	b.n	800a3a2 <sniprintf+0x16>
 800a3ee:	bf00      	nop
 800a3f0:	20000144 	.word	0x20000144

0800a3f4 <siprintf>:
 800a3f4:	b40e      	push	{r1, r2, r3}
 800a3f6:	b500      	push	{lr}
 800a3f8:	b09c      	sub	sp, #112	@ 0x70
 800a3fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800a3fc:	9002      	str	r0, [sp, #8]
 800a3fe:	9006      	str	r0, [sp, #24]
 800a400:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a404:	4809      	ldr	r0, [pc, #36]	@ (800a42c <siprintf+0x38>)
 800a406:	9107      	str	r1, [sp, #28]
 800a408:	9104      	str	r1, [sp, #16]
 800a40a:	4909      	ldr	r1, [pc, #36]	@ (800a430 <siprintf+0x3c>)
 800a40c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a410:	9105      	str	r1, [sp, #20]
 800a412:	6800      	ldr	r0, [r0, #0]
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	a902      	add	r1, sp, #8
 800a418:	f000 f994 	bl	800a744 <_svfiprintf_r>
 800a41c:	9b02      	ldr	r3, [sp, #8]
 800a41e:	2200      	movs	r2, #0
 800a420:	701a      	strb	r2, [r3, #0]
 800a422:	b01c      	add	sp, #112	@ 0x70
 800a424:	f85d eb04 	ldr.w	lr, [sp], #4
 800a428:	b003      	add	sp, #12
 800a42a:	4770      	bx	lr
 800a42c:	20000144 	.word	0x20000144
 800a430:	ffff0208 	.word	0xffff0208

0800a434 <memset>:
 800a434:	4402      	add	r2, r0
 800a436:	4603      	mov	r3, r0
 800a438:	4293      	cmp	r3, r2
 800a43a:	d100      	bne.n	800a43e <memset+0xa>
 800a43c:	4770      	bx	lr
 800a43e:	f803 1b01 	strb.w	r1, [r3], #1
 800a442:	e7f9      	b.n	800a438 <memset+0x4>

0800a444 <__errno>:
 800a444:	4b01      	ldr	r3, [pc, #4]	@ (800a44c <__errno+0x8>)
 800a446:	6818      	ldr	r0, [r3, #0]
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	20000144 	.word	0x20000144

0800a450 <__libc_init_array>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	4d0d      	ldr	r5, [pc, #52]	@ (800a488 <__libc_init_array+0x38>)
 800a454:	4c0d      	ldr	r4, [pc, #52]	@ (800a48c <__libc_init_array+0x3c>)
 800a456:	1b64      	subs	r4, r4, r5
 800a458:	10a4      	asrs	r4, r4, #2
 800a45a:	2600      	movs	r6, #0
 800a45c:	42a6      	cmp	r6, r4
 800a45e:	d109      	bne.n	800a474 <__libc_init_array+0x24>
 800a460:	4d0b      	ldr	r5, [pc, #44]	@ (800a490 <__libc_init_array+0x40>)
 800a462:	4c0c      	ldr	r4, [pc, #48]	@ (800a494 <__libc_init_array+0x44>)
 800a464:	f000 fc66 	bl	800ad34 <_init>
 800a468:	1b64      	subs	r4, r4, r5
 800a46a:	10a4      	asrs	r4, r4, #2
 800a46c:	2600      	movs	r6, #0
 800a46e:	42a6      	cmp	r6, r4
 800a470:	d105      	bne.n	800a47e <__libc_init_array+0x2e>
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	f855 3b04 	ldr.w	r3, [r5], #4
 800a478:	4798      	blx	r3
 800a47a:	3601      	adds	r6, #1
 800a47c:	e7ee      	b.n	800a45c <__libc_init_array+0xc>
 800a47e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a482:	4798      	blx	r3
 800a484:	3601      	adds	r6, #1
 800a486:	e7f2      	b.n	800a46e <__libc_init_array+0x1e>
 800a488:	0800c948 	.word	0x0800c948
 800a48c:	0800c948 	.word	0x0800c948
 800a490:	0800c948 	.word	0x0800c948
 800a494:	0800c94c 	.word	0x0800c94c

0800a498 <__retarget_lock_acquire_recursive>:
 800a498:	4770      	bx	lr

0800a49a <__retarget_lock_release_recursive>:
 800a49a:	4770      	bx	lr

0800a49c <_free_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4605      	mov	r5, r0
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	d041      	beq.n	800a528 <_free_r+0x8c>
 800a4a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4a8:	1f0c      	subs	r4, r1, #4
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfb8      	it	lt
 800a4ae:	18e4      	addlt	r4, r4, r3
 800a4b0:	f000 f8e0 	bl	800a674 <__malloc_lock>
 800a4b4:	4a1d      	ldr	r2, [pc, #116]	@ (800a52c <_free_r+0x90>)
 800a4b6:	6813      	ldr	r3, [r2, #0]
 800a4b8:	b933      	cbnz	r3, 800a4c8 <_free_r+0x2c>
 800a4ba:	6063      	str	r3, [r4, #4]
 800a4bc:	6014      	str	r4, [r2, #0]
 800a4be:	4628      	mov	r0, r5
 800a4c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4c4:	f000 b8dc 	b.w	800a680 <__malloc_unlock>
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d908      	bls.n	800a4de <_free_r+0x42>
 800a4cc:	6820      	ldr	r0, [r4, #0]
 800a4ce:	1821      	adds	r1, r4, r0
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	bf01      	itttt	eq
 800a4d4:	6819      	ldreq	r1, [r3, #0]
 800a4d6:	685b      	ldreq	r3, [r3, #4]
 800a4d8:	1809      	addeq	r1, r1, r0
 800a4da:	6021      	streq	r1, [r4, #0]
 800a4dc:	e7ed      	b.n	800a4ba <_free_r+0x1e>
 800a4de:	461a      	mov	r2, r3
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	b10b      	cbz	r3, 800a4e8 <_free_r+0x4c>
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	d9fa      	bls.n	800a4de <_free_r+0x42>
 800a4e8:	6811      	ldr	r1, [r2, #0]
 800a4ea:	1850      	adds	r0, r2, r1
 800a4ec:	42a0      	cmp	r0, r4
 800a4ee:	d10b      	bne.n	800a508 <_free_r+0x6c>
 800a4f0:	6820      	ldr	r0, [r4, #0]
 800a4f2:	4401      	add	r1, r0
 800a4f4:	1850      	adds	r0, r2, r1
 800a4f6:	4283      	cmp	r3, r0
 800a4f8:	6011      	str	r1, [r2, #0]
 800a4fa:	d1e0      	bne.n	800a4be <_free_r+0x22>
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	6053      	str	r3, [r2, #4]
 800a502:	4408      	add	r0, r1
 800a504:	6010      	str	r0, [r2, #0]
 800a506:	e7da      	b.n	800a4be <_free_r+0x22>
 800a508:	d902      	bls.n	800a510 <_free_r+0x74>
 800a50a:	230c      	movs	r3, #12
 800a50c:	602b      	str	r3, [r5, #0]
 800a50e:	e7d6      	b.n	800a4be <_free_r+0x22>
 800a510:	6820      	ldr	r0, [r4, #0]
 800a512:	1821      	adds	r1, r4, r0
 800a514:	428b      	cmp	r3, r1
 800a516:	bf04      	itt	eq
 800a518:	6819      	ldreq	r1, [r3, #0]
 800a51a:	685b      	ldreq	r3, [r3, #4]
 800a51c:	6063      	str	r3, [r4, #4]
 800a51e:	bf04      	itt	eq
 800a520:	1809      	addeq	r1, r1, r0
 800a522:	6021      	streq	r1, [r4, #0]
 800a524:	6054      	str	r4, [r2, #4]
 800a526:	e7ca      	b.n	800a4be <_free_r+0x22>
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	20002144 	.word	0x20002144

0800a530 <sbrk_aligned>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4e0f      	ldr	r6, [pc, #60]	@ (800a570 <sbrk_aligned+0x40>)
 800a534:	460c      	mov	r4, r1
 800a536:	6831      	ldr	r1, [r6, #0]
 800a538:	4605      	mov	r5, r0
 800a53a:	b911      	cbnz	r1, 800a542 <sbrk_aligned+0x12>
 800a53c:	f000 fba6 	bl	800ac8c <_sbrk_r>
 800a540:	6030      	str	r0, [r6, #0]
 800a542:	4621      	mov	r1, r4
 800a544:	4628      	mov	r0, r5
 800a546:	f000 fba1 	bl	800ac8c <_sbrk_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	d103      	bne.n	800a556 <sbrk_aligned+0x26>
 800a54e:	f04f 34ff 	mov.w	r4, #4294967295
 800a552:	4620      	mov	r0, r4
 800a554:	bd70      	pop	{r4, r5, r6, pc}
 800a556:	1cc4      	adds	r4, r0, #3
 800a558:	f024 0403 	bic.w	r4, r4, #3
 800a55c:	42a0      	cmp	r0, r4
 800a55e:	d0f8      	beq.n	800a552 <sbrk_aligned+0x22>
 800a560:	1a21      	subs	r1, r4, r0
 800a562:	4628      	mov	r0, r5
 800a564:	f000 fb92 	bl	800ac8c <_sbrk_r>
 800a568:	3001      	adds	r0, #1
 800a56a:	d1f2      	bne.n	800a552 <sbrk_aligned+0x22>
 800a56c:	e7ef      	b.n	800a54e <sbrk_aligned+0x1e>
 800a56e:	bf00      	nop
 800a570:	20002140 	.word	0x20002140

0800a574 <_malloc_r>:
 800a574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a578:	1ccd      	adds	r5, r1, #3
 800a57a:	f025 0503 	bic.w	r5, r5, #3
 800a57e:	3508      	adds	r5, #8
 800a580:	2d0c      	cmp	r5, #12
 800a582:	bf38      	it	cc
 800a584:	250c      	movcc	r5, #12
 800a586:	2d00      	cmp	r5, #0
 800a588:	4606      	mov	r6, r0
 800a58a:	db01      	blt.n	800a590 <_malloc_r+0x1c>
 800a58c:	42a9      	cmp	r1, r5
 800a58e:	d904      	bls.n	800a59a <_malloc_r+0x26>
 800a590:	230c      	movs	r3, #12
 800a592:	6033      	str	r3, [r6, #0]
 800a594:	2000      	movs	r0, #0
 800a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a670 <_malloc_r+0xfc>
 800a59e:	f000 f869 	bl	800a674 <__malloc_lock>
 800a5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a6:	461c      	mov	r4, r3
 800a5a8:	bb44      	cbnz	r4, 800a5fc <_malloc_r+0x88>
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7ff ffbf 	bl	800a530 <sbrk_aligned>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	d158      	bne.n	800a66a <_malloc_r+0xf6>
 800a5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800a5bc:	4627      	mov	r7, r4
 800a5be:	2f00      	cmp	r7, #0
 800a5c0:	d143      	bne.n	800a64a <_malloc_r+0xd6>
 800a5c2:	2c00      	cmp	r4, #0
 800a5c4:	d04b      	beq.n	800a65e <_malloc_r+0xea>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	4639      	mov	r1, r7
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	eb04 0903 	add.w	r9, r4, r3
 800a5d0:	f000 fb5c 	bl	800ac8c <_sbrk_r>
 800a5d4:	4581      	cmp	r9, r0
 800a5d6:	d142      	bne.n	800a65e <_malloc_r+0xea>
 800a5d8:	6821      	ldr	r1, [r4, #0]
 800a5da:	1a6d      	subs	r5, r5, r1
 800a5dc:	4629      	mov	r1, r5
 800a5de:	4630      	mov	r0, r6
 800a5e0:	f7ff ffa6 	bl	800a530 <sbrk_aligned>
 800a5e4:	3001      	adds	r0, #1
 800a5e6:	d03a      	beq.n	800a65e <_malloc_r+0xea>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	442b      	add	r3, r5
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	bb62      	cbnz	r2, 800a650 <_malloc_r+0xdc>
 800a5f6:	f8c8 7000 	str.w	r7, [r8]
 800a5fa:	e00f      	b.n	800a61c <_malloc_r+0xa8>
 800a5fc:	6822      	ldr	r2, [r4, #0]
 800a5fe:	1b52      	subs	r2, r2, r5
 800a600:	d420      	bmi.n	800a644 <_malloc_r+0xd0>
 800a602:	2a0b      	cmp	r2, #11
 800a604:	d917      	bls.n	800a636 <_malloc_r+0xc2>
 800a606:	1961      	adds	r1, r4, r5
 800a608:	42a3      	cmp	r3, r4
 800a60a:	6025      	str	r5, [r4, #0]
 800a60c:	bf18      	it	ne
 800a60e:	6059      	strne	r1, [r3, #4]
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	bf08      	it	eq
 800a614:	f8c8 1000 	streq.w	r1, [r8]
 800a618:	5162      	str	r2, [r4, r5]
 800a61a:	604b      	str	r3, [r1, #4]
 800a61c:	4630      	mov	r0, r6
 800a61e:	f000 f82f 	bl	800a680 <__malloc_unlock>
 800a622:	f104 000b 	add.w	r0, r4, #11
 800a626:	1d23      	adds	r3, r4, #4
 800a628:	f020 0007 	bic.w	r0, r0, #7
 800a62c:	1ac2      	subs	r2, r0, r3
 800a62e:	bf1c      	itt	ne
 800a630:	1a1b      	subne	r3, r3, r0
 800a632:	50a3      	strne	r3, [r4, r2]
 800a634:	e7af      	b.n	800a596 <_malloc_r+0x22>
 800a636:	6862      	ldr	r2, [r4, #4]
 800a638:	42a3      	cmp	r3, r4
 800a63a:	bf0c      	ite	eq
 800a63c:	f8c8 2000 	streq.w	r2, [r8]
 800a640:	605a      	strne	r2, [r3, #4]
 800a642:	e7eb      	b.n	800a61c <_malloc_r+0xa8>
 800a644:	4623      	mov	r3, r4
 800a646:	6864      	ldr	r4, [r4, #4]
 800a648:	e7ae      	b.n	800a5a8 <_malloc_r+0x34>
 800a64a:	463c      	mov	r4, r7
 800a64c:	687f      	ldr	r7, [r7, #4]
 800a64e:	e7b6      	b.n	800a5be <_malloc_r+0x4a>
 800a650:	461a      	mov	r2, r3
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	42a3      	cmp	r3, r4
 800a656:	d1fb      	bne.n	800a650 <_malloc_r+0xdc>
 800a658:	2300      	movs	r3, #0
 800a65a:	6053      	str	r3, [r2, #4]
 800a65c:	e7de      	b.n	800a61c <_malloc_r+0xa8>
 800a65e:	230c      	movs	r3, #12
 800a660:	6033      	str	r3, [r6, #0]
 800a662:	4630      	mov	r0, r6
 800a664:	f000 f80c 	bl	800a680 <__malloc_unlock>
 800a668:	e794      	b.n	800a594 <_malloc_r+0x20>
 800a66a:	6005      	str	r5, [r0, #0]
 800a66c:	e7d6      	b.n	800a61c <_malloc_r+0xa8>
 800a66e:	bf00      	nop
 800a670:	20002144 	.word	0x20002144

0800a674 <__malloc_lock>:
 800a674:	4801      	ldr	r0, [pc, #4]	@ (800a67c <__malloc_lock+0x8>)
 800a676:	f7ff bf0f 	b.w	800a498 <__retarget_lock_acquire_recursive>
 800a67a:	bf00      	nop
 800a67c:	2000213c 	.word	0x2000213c

0800a680 <__malloc_unlock>:
 800a680:	4801      	ldr	r0, [pc, #4]	@ (800a688 <__malloc_unlock+0x8>)
 800a682:	f7ff bf0a 	b.w	800a49a <__retarget_lock_release_recursive>
 800a686:	bf00      	nop
 800a688:	2000213c 	.word	0x2000213c

0800a68c <__ssputs_r>:
 800a68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	688e      	ldr	r6, [r1, #8]
 800a692:	461f      	mov	r7, r3
 800a694:	42be      	cmp	r6, r7
 800a696:	680b      	ldr	r3, [r1, #0]
 800a698:	4682      	mov	sl, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	4690      	mov	r8, r2
 800a69e:	d82d      	bhi.n	800a6fc <__ssputs_r+0x70>
 800a6a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6a8:	d026      	beq.n	800a6f8 <__ssputs_r+0x6c>
 800a6aa:	6965      	ldr	r5, [r4, #20]
 800a6ac:	6909      	ldr	r1, [r1, #16]
 800a6ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6b2:	eba3 0901 	sub.w	r9, r3, r1
 800a6b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6ba:	1c7b      	adds	r3, r7, #1
 800a6bc:	444b      	add	r3, r9
 800a6be:	106d      	asrs	r5, r5, #1
 800a6c0:	429d      	cmp	r5, r3
 800a6c2:	bf38      	it	cc
 800a6c4:	461d      	movcc	r5, r3
 800a6c6:	0553      	lsls	r3, r2, #21
 800a6c8:	d527      	bpl.n	800a71a <__ssputs_r+0x8e>
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	f7ff ff52 	bl	800a574 <_malloc_r>
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	b360      	cbz	r0, 800a72e <__ssputs_r+0xa2>
 800a6d4:	6921      	ldr	r1, [r4, #16]
 800a6d6:	464a      	mov	r2, r9
 800a6d8:	f000 fae8 	bl	800acac <memcpy>
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a6e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6e6:	81a3      	strh	r3, [r4, #12]
 800a6e8:	6126      	str	r6, [r4, #16]
 800a6ea:	6165      	str	r5, [r4, #20]
 800a6ec:	444e      	add	r6, r9
 800a6ee:	eba5 0509 	sub.w	r5, r5, r9
 800a6f2:	6026      	str	r6, [r4, #0]
 800a6f4:	60a5      	str	r5, [r4, #8]
 800a6f6:	463e      	mov	r6, r7
 800a6f8:	42be      	cmp	r6, r7
 800a6fa:	d900      	bls.n	800a6fe <__ssputs_r+0x72>
 800a6fc:	463e      	mov	r6, r7
 800a6fe:	6820      	ldr	r0, [r4, #0]
 800a700:	4632      	mov	r2, r6
 800a702:	4641      	mov	r1, r8
 800a704:	f000 faa8 	bl	800ac58 <memmove>
 800a708:	68a3      	ldr	r3, [r4, #8]
 800a70a:	1b9b      	subs	r3, r3, r6
 800a70c:	60a3      	str	r3, [r4, #8]
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	4433      	add	r3, r6
 800a712:	6023      	str	r3, [r4, #0]
 800a714:	2000      	movs	r0, #0
 800a716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a71a:	462a      	mov	r2, r5
 800a71c:	f000 fad4 	bl	800acc8 <_realloc_r>
 800a720:	4606      	mov	r6, r0
 800a722:	2800      	cmp	r0, #0
 800a724:	d1e0      	bne.n	800a6e8 <__ssputs_r+0x5c>
 800a726:	6921      	ldr	r1, [r4, #16]
 800a728:	4650      	mov	r0, sl
 800a72a:	f7ff feb7 	bl	800a49c <_free_r>
 800a72e:	230c      	movs	r3, #12
 800a730:	f8ca 3000 	str.w	r3, [sl]
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a73a:	81a3      	strh	r3, [r4, #12]
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295
 800a740:	e7e9      	b.n	800a716 <__ssputs_r+0x8a>
	...

0800a744 <_svfiprintf_r>:
 800a744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a748:	4698      	mov	r8, r3
 800a74a:	898b      	ldrh	r3, [r1, #12]
 800a74c:	061b      	lsls	r3, r3, #24
 800a74e:	b09d      	sub	sp, #116	@ 0x74
 800a750:	4607      	mov	r7, r0
 800a752:	460d      	mov	r5, r1
 800a754:	4614      	mov	r4, r2
 800a756:	d510      	bpl.n	800a77a <_svfiprintf_r+0x36>
 800a758:	690b      	ldr	r3, [r1, #16]
 800a75a:	b973      	cbnz	r3, 800a77a <_svfiprintf_r+0x36>
 800a75c:	2140      	movs	r1, #64	@ 0x40
 800a75e:	f7ff ff09 	bl	800a574 <_malloc_r>
 800a762:	6028      	str	r0, [r5, #0]
 800a764:	6128      	str	r0, [r5, #16]
 800a766:	b930      	cbnz	r0, 800a776 <_svfiprintf_r+0x32>
 800a768:	230c      	movs	r3, #12
 800a76a:	603b      	str	r3, [r7, #0]
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	b01d      	add	sp, #116	@ 0x74
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	2340      	movs	r3, #64	@ 0x40
 800a778:	616b      	str	r3, [r5, #20]
 800a77a:	2300      	movs	r3, #0
 800a77c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a77e:	2320      	movs	r3, #32
 800a780:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a784:	f8cd 800c 	str.w	r8, [sp, #12]
 800a788:	2330      	movs	r3, #48	@ 0x30
 800a78a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a928 <_svfiprintf_r+0x1e4>
 800a78e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a792:	f04f 0901 	mov.w	r9, #1
 800a796:	4623      	mov	r3, r4
 800a798:	469a      	mov	sl, r3
 800a79a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a79e:	b10a      	cbz	r2, 800a7a4 <_svfiprintf_r+0x60>
 800a7a0:	2a25      	cmp	r2, #37	@ 0x25
 800a7a2:	d1f9      	bne.n	800a798 <_svfiprintf_r+0x54>
 800a7a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7a8:	d00b      	beq.n	800a7c2 <_svfiprintf_r+0x7e>
 800a7aa:	465b      	mov	r3, fp
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4629      	mov	r1, r5
 800a7b0:	4638      	mov	r0, r7
 800a7b2:	f7ff ff6b 	bl	800a68c <__ssputs_r>
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	f000 80a7 	beq.w	800a90a <_svfiprintf_r+0x1c6>
 800a7bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7be:	445a      	add	r2, fp
 800a7c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	f000 809f 	beq.w	800a90a <_svfiprintf_r+0x1c6>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7d6:	f10a 0a01 	add.w	sl, sl, #1
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	9307      	str	r3, [sp, #28]
 800a7de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7e4:	4654      	mov	r4, sl
 800a7e6:	2205      	movs	r2, #5
 800a7e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ec:	484e      	ldr	r0, [pc, #312]	@ (800a928 <_svfiprintf_r+0x1e4>)
 800a7ee:	f7f5 fd0f 	bl	8000210 <memchr>
 800a7f2:	9a04      	ldr	r2, [sp, #16]
 800a7f4:	b9d8      	cbnz	r0, 800a82e <_svfiprintf_r+0xea>
 800a7f6:	06d0      	lsls	r0, r2, #27
 800a7f8:	bf44      	itt	mi
 800a7fa:	2320      	movmi	r3, #32
 800a7fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a800:	0711      	lsls	r1, r2, #28
 800a802:	bf44      	itt	mi
 800a804:	232b      	movmi	r3, #43	@ 0x2b
 800a806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a80a:	f89a 3000 	ldrb.w	r3, [sl]
 800a80e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a810:	d015      	beq.n	800a83e <_svfiprintf_r+0xfa>
 800a812:	9a07      	ldr	r2, [sp, #28]
 800a814:	4654      	mov	r4, sl
 800a816:	2000      	movs	r0, #0
 800a818:	f04f 0c0a 	mov.w	ip, #10
 800a81c:	4621      	mov	r1, r4
 800a81e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a822:	3b30      	subs	r3, #48	@ 0x30
 800a824:	2b09      	cmp	r3, #9
 800a826:	d94b      	bls.n	800a8c0 <_svfiprintf_r+0x17c>
 800a828:	b1b0      	cbz	r0, 800a858 <_svfiprintf_r+0x114>
 800a82a:	9207      	str	r2, [sp, #28]
 800a82c:	e014      	b.n	800a858 <_svfiprintf_r+0x114>
 800a82e:	eba0 0308 	sub.w	r3, r0, r8
 800a832:	fa09 f303 	lsl.w	r3, r9, r3
 800a836:	4313      	orrs	r3, r2
 800a838:	9304      	str	r3, [sp, #16]
 800a83a:	46a2      	mov	sl, r4
 800a83c:	e7d2      	b.n	800a7e4 <_svfiprintf_r+0xa0>
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	1d19      	adds	r1, r3, #4
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	9103      	str	r1, [sp, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	bfbb      	ittet	lt
 800a84a:	425b      	neglt	r3, r3
 800a84c:	f042 0202 	orrlt.w	r2, r2, #2
 800a850:	9307      	strge	r3, [sp, #28]
 800a852:	9307      	strlt	r3, [sp, #28]
 800a854:	bfb8      	it	lt
 800a856:	9204      	strlt	r2, [sp, #16]
 800a858:	7823      	ldrb	r3, [r4, #0]
 800a85a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a85c:	d10a      	bne.n	800a874 <_svfiprintf_r+0x130>
 800a85e:	7863      	ldrb	r3, [r4, #1]
 800a860:	2b2a      	cmp	r3, #42	@ 0x2a
 800a862:	d132      	bne.n	800a8ca <_svfiprintf_r+0x186>
 800a864:	9b03      	ldr	r3, [sp, #12]
 800a866:	1d1a      	adds	r2, r3, #4
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	9203      	str	r2, [sp, #12]
 800a86c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a870:	3402      	adds	r4, #2
 800a872:	9305      	str	r3, [sp, #20]
 800a874:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a938 <_svfiprintf_r+0x1f4>
 800a878:	7821      	ldrb	r1, [r4, #0]
 800a87a:	2203      	movs	r2, #3
 800a87c:	4650      	mov	r0, sl
 800a87e:	f7f5 fcc7 	bl	8000210 <memchr>
 800a882:	b138      	cbz	r0, 800a894 <_svfiprintf_r+0x150>
 800a884:	9b04      	ldr	r3, [sp, #16]
 800a886:	eba0 000a 	sub.w	r0, r0, sl
 800a88a:	2240      	movs	r2, #64	@ 0x40
 800a88c:	4082      	lsls	r2, r0
 800a88e:	4313      	orrs	r3, r2
 800a890:	3401      	adds	r4, #1
 800a892:	9304      	str	r3, [sp, #16]
 800a894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a898:	4824      	ldr	r0, [pc, #144]	@ (800a92c <_svfiprintf_r+0x1e8>)
 800a89a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a89e:	2206      	movs	r2, #6
 800a8a0:	f7f5 fcb6 	bl	8000210 <memchr>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d036      	beq.n	800a916 <_svfiprintf_r+0x1d2>
 800a8a8:	4b21      	ldr	r3, [pc, #132]	@ (800a930 <_svfiprintf_r+0x1ec>)
 800a8aa:	bb1b      	cbnz	r3, 800a8f4 <_svfiprintf_r+0x1b0>
 800a8ac:	9b03      	ldr	r3, [sp, #12]
 800a8ae:	3307      	adds	r3, #7
 800a8b0:	f023 0307 	bic.w	r3, r3, #7
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	9303      	str	r3, [sp, #12]
 800a8b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ba:	4433      	add	r3, r6
 800a8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8be:	e76a      	b.n	800a796 <_svfiprintf_r+0x52>
 800a8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8c4:	460c      	mov	r4, r1
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	e7a8      	b.n	800a81c <_svfiprintf_r+0xd8>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	3401      	adds	r4, #1
 800a8ce:	9305      	str	r3, [sp, #20]
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f04f 0c0a 	mov.w	ip, #10
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8dc:	3a30      	subs	r2, #48	@ 0x30
 800a8de:	2a09      	cmp	r2, #9
 800a8e0:	d903      	bls.n	800a8ea <_svfiprintf_r+0x1a6>
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0c6      	beq.n	800a874 <_svfiprintf_r+0x130>
 800a8e6:	9105      	str	r1, [sp, #20]
 800a8e8:	e7c4      	b.n	800a874 <_svfiprintf_r+0x130>
 800a8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e7f0      	b.n	800a8d6 <_svfiprintf_r+0x192>
 800a8f4:	ab03      	add	r3, sp, #12
 800a8f6:	9300      	str	r3, [sp, #0]
 800a8f8:	462a      	mov	r2, r5
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a934 <_svfiprintf_r+0x1f0>)
 800a8fc:	a904      	add	r1, sp, #16
 800a8fe:	4638      	mov	r0, r7
 800a900:	f3af 8000 	nop.w
 800a904:	1c42      	adds	r2, r0, #1
 800a906:	4606      	mov	r6, r0
 800a908:	d1d6      	bne.n	800a8b8 <_svfiprintf_r+0x174>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	065b      	lsls	r3, r3, #25
 800a90e:	f53f af2d 	bmi.w	800a76c <_svfiprintf_r+0x28>
 800a912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a914:	e72c      	b.n	800a770 <_svfiprintf_r+0x2c>
 800a916:	ab03      	add	r3, sp, #12
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	462a      	mov	r2, r5
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <_svfiprintf_r+0x1f0>)
 800a91e:	a904      	add	r1, sp, #16
 800a920:	4638      	mov	r0, r7
 800a922:	f000 f879 	bl	800aa18 <_printf_i>
 800a926:	e7ed      	b.n	800a904 <_svfiprintf_r+0x1c0>
 800a928:	0800c90c 	.word	0x0800c90c
 800a92c:	0800c916 	.word	0x0800c916
 800a930:	00000000 	.word	0x00000000
 800a934:	0800a68d 	.word	0x0800a68d
 800a938:	0800c912 	.word	0x0800c912

0800a93c <_printf_common>:
 800a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a940:	4616      	mov	r6, r2
 800a942:	4698      	mov	r8, r3
 800a944:	688a      	ldr	r2, [r1, #8]
 800a946:	690b      	ldr	r3, [r1, #16]
 800a948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a94c:	4293      	cmp	r3, r2
 800a94e:	bfb8      	it	lt
 800a950:	4613      	movlt	r3, r2
 800a952:	6033      	str	r3, [r6, #0]
 800a954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a958:	4607      	mov	r7, r0
 800a95a:	460c      	mov	r4, r1
 800a95c:	b10a      	cbz	r2, 800a962 <_printf_common+0x26>
 800a95e:	3301      	adds	r3, #1
 800a960:	6033      	str	r3, [r6, #0]
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	0699      	lsls	r1, r3, #26
 800a966:	bf42      	ittt	mi
 800a968:	6833      	ldrmi	r3, [r6, #0]
 800a96a:	3302      	addmi	r3, #2
 800a96c:	6033      	strmi	r3, [r6, #0]
 800a96e:	6825      	ldr	r5, [r4, #0]
 800a970:	f015 0506 	ands.w	r5, r5, #6
 800a974:	d106      	bne.n	800a984 <_printf_common+0x48>
 800a976:	f104 0a19 	add.w	sl, r4, #25
 800a97a:	68e3      	ldr	r3, [r4, #12]
 800a97c:	6832      	ldr	r2, [r6, #0]
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	42ab      	cmp	r3, r5
 800a982:	dc26      	bgt.n	800a9d2 <_printf_common+0x96>
 800a984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a988:	6822      	ldr	r2, [r4, #0]
 800a98a:	3b00      	subs	r3, #0
 800a98c:	bf18      	it	ne
 800a98e:	2301      	movne	r3, #1
 800a990:	0692      	lsls	r2, r2, #26
 800a992:	d42b      	bmi.n	800a9ec <_printf_common+0xb0>
 800a994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a998:	4641      	mov	r1, r8
 800a99a:	4638      	mov	r0, r7
 800a99c:	47c8      	blx	r9
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d01e      	beq.n	800a9e0 <_printf_common+0xa4>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	6922      	ldr	r2, [r4, #16]
 800a9a6:	f003 0306 	and.w	r3, r3, #6
 800a9aa:	2b04      	cmp	r3, #4
 800a9ac:	bf02      	ittt	eq
 800a9ae:	68e5      	ldreq	r5, [r4, #12]
 800a9b0:	6833      	ldreq	r3, [r6, #0]
 800a9b2:	1aed      	subeq	r5, r5, r3
 800a9b4:	68a3      	ldr	r3, [r4, #8]
 800a9b6:	bf0c      	ite	eq
 800a9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9bc:	2500      	movne	r5, #0
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	bfc4      	itt	gt
 800a9c2:	1a9b      	subgt	r3, r3, r2
 800a9c4:	18ed      	addgt	r5, r5, r3
 800a9c6:	2600      	movs	r6, #0
 800a9c8:	341a      	adds	r4, #26
 800a9ca:	42b5      	cmp	r5, r6
 800a9cc:	d11a      	bne.n	800aa04 <_printf_common+0xc8>
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	e008      	b.n	800a9e4 <_printf_common+0xa8>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	4652      	mov	r2, sl
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	4638      	mov	r0, r7
 800a9da:	47c8      	blx	r9
 800a9dc:	3001      	adds	r0, #1
 800a9de:	d103      	bne.n	800a9e8 <_printf_common+0xac>
 800a9e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9e8:	3501      	adds	r5, #1
 800a9ea:	e7c6      	b.n	800a97a <_printf_common+0x3e>
 800a9ec:	18e1      	adds	r1, r4, r3
 800a9ee:	1c5a      	adds	r2, r3, #1
 800a9f0:	2030      	movs	r0, #48	@ 0x30
 800a9f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a9f6:	4422      	add	r2, r4
 800a9f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a9fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa00:	3302      	adds	r3, #2
 800aa02:	e7c7      	b.n	800a994 <_printf_common+0x58>
 800aa04:	2301      	movs	r3, #1
 800aa06:	4622      	mov	r2, r4
 800aa08:	4641      	mov	r1, r8
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	47c8      	blx	r9
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d0e6      	beq.n	800a9e0 <_printf_common+0xa4>
 800aa12:	3601      	adds	r6, #1
 800aa14:	e7d9      	b.n	800a9ca <_printf_common+0x8e>
	...

0800aa18 <_printf_i>:
 800aa18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1c:	7e0f      	ldrb	r7, [r1, #24]
 800aa1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa20:	2f78      	cmp	r7, #120	@ 0x78
 800aa22:	4691      	mov	r9, r2
 800aa24:	4680      	mov	r8, r0
 800aa26:	460c      	mov	r4, r1
 800aa28:	469a      	mov	sl, r3
 800aa2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa2e:	d807      	bhi.n	800aa40 <_printf_i+0x28>
 800aa30:	2f62      	cmp	r7, #98	@ 0x62
 800aa32:	d80a      	bhi.n	800aa4a <_printf_i+0x32>
 800aa34:	2f00      	cmp	r7, #0
 800aa36:	f000 80d2 	beq.w	800abde <_printf_i+0x1c6>
 800aa3a:	2f58      	cmp	r7, #88	@ 0x58
 800aa3c:	f000 80b9 	beq.w	800abb2 <_printf_i+0x19a>
 800aa40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aa48:	e03a      	b.n	800aac0 <_printf_i+0xa8>
 800aa4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aa4e:	2b15      	cmp	r3, #21
 800aa50:	d8f6      	bhi.n	800aa40 <_printf_i+0x28>
 800aa52:	a101      	add	r1, pc, #4	@ (adr r1, 800aa58 <_printf_i+0x40>)
 800aa54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa58:	0800aab1 	.word	0x0800aab1
 800aa5c:	0800aac5 	.word	0x0800aac5
 800aa60:	0800aa41 	.word	0x0800aa41
 800aa64:	0800aa41 	.word	0x0800aa41
 800aa68:	0800aa41 	.word	0x0800aa41
 800aa6c:	0800aa41 	.word	0x0800aa41
 800aa70:	0800aac5 	.word	0x0800aac5
 800aa74:	0800aa41 	.word	0x0800aa41
 800aa78:	0800aa41 	.word	0x0800aa41
 800aa7c:	0800aa41 	.word	0x0800aa41
 800aa80:	0800aa41 	.word	0x0800aa41
 800aa84:	0800abc5 	.word	0x0800abc5
 800aa88:	0800aaef 	.word	0x0800aaef
 800aa8c:	0800ab7f 	.word	0x0800ab7f
 800aa90:	0800aa41 	.word	0x0800aa41
 800aa94:	0800aa41 	.word	0x0800aa41
 800aa98:	0800abe7 	.word	0x0800abe7
 800aa9c:	0800aa41 	.word	0x0800aa41
 800aaa0:	0800aaef 	.word	0x0800aaef
 800aaa4:	0800aa41 	.word	0x0800aa41
 800aaa8:	0800aa41 	.word	0x0800aa41
 800aaac:	0800ab87 	.word	0x0800ab87
 800aab0:	6833      	ldr	r3, [r6, #0]
 800aab2:	1d1a      	adds	r2, r3, #4
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	6032      	str	r2, [r6, #0]
 800aab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aabc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aac0:	2301      	movs	r3, #1
 800aac2:	e09d      	b.n	800ac00 <_printf_i+0x1e8>
 800aac4:	6833      	ldr	r3, [r6, #0]
 800aac6:	6820      	ldr	r0, [r4, #0]
 800aac8:	1d19      	adds	r1, r3, #4
 800aaca:	6031      	str	r1, [r6, #0]
 800aacc:	0606      	lsls	r6, r0, #24
 800aace:	d501      	bpl.n	800aad4 <_printf_i+0xbc>
 800aad0:	681d      	ldr	r5, [r3, #0]
 800aad2:	e003      	b.n	800aadc <_printf_i+0xc4>
 800aad4:	0645      	lsls	r5, r0, #25
 800aad6:	d5fb      	bpl.n	800aad0 <_printf_i+0xb8>
 800aad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aadc:	2d00      	cmp	r5, #0
 800aade:	da03      	bge.n	800aae8 <_printf_i+0xd0>
 800aae0:	232d      	movs	r3, #45	@ 0x2d
 800aae2:	426d      	negs	r5, r5
 800aae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aae8:	4859      	ldr	r0, [pc, #356]	@ (800ac50 <_printf_i+0x238>)
 800aaea:	230a      	movs	r3, #10
 800aaec:	e011      	b.n	800ab12 <_printf_i+0xfa>
 800aaee:	6821      	ldr	r1, [r4, #0]
 800aaf0:	6833      	ldr	r3, [r6, #0]
 800aaf2:	0608      	lsls	r0, r1, #24
 800aaf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800aaf8:	d402      	bmi.n	800ab00 <_printf_i+0xe8>
 800aafa:	0649      	lsls	r1, r1, #25
 800aafc:	bf48      	it	mi
 800aafe:	b2ad      	uxthmi	r5, r5
 800ab00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab02:	4853      	ldr	r0, [pc, #332]	@ (800ac50 <_printf_i+0x238>)
 800ab04:	6033      	str	r3, [r6, #0]
 800ab06:	bf14      	ite	ne
 800ab08:	230a      	movne	r3, #10
 800ab0a:	2308      	moveq	r3, #8
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab12:	6866      	ldr	r6, [r4, #4]
 800ab14:	60a6      	str	r6, [r4, #8]
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	bfa2      	ittt	ge
 800ab1a:	6821      	ldrge	r1, [r4, #0]
 800ab1c:	f021 0104 	bicge.w	r1, r1, #4
 800ab20:	6021      	strge	r1, [r4, #0]
 800ab22:	b90d      	cbnz	r5, 800ab28 <_printf_i+0x110>
 800ab24:	2e00      	cmp	r6, #0
 800ab26:	d04b      	beq.n	800abc0 <_printf_i+0x1a8>
 800ab28:	4616      	mov	r6, r2
 800ab2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ab32:	5dc7      	ldrb	r7, [r0, r7]
 800ab34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab38:	462f      	mov	r7, r5
 800ab3a:	42bb      	cmp	r3, r7
 800ab3c:	460d      	mov	r5, r1
 800ab3e:	d9f4      	bls.n	800ab2a <_printf_i+0x112>
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d10b      	bne.n	800ab5c <_printf_i+0x144>
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	07df      	lsls	r7, r3, #31
 800ab48:	d508      	bpl.n	800ab5c <_printf_i+0x144>
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	6861      	ldr	r1, [r4, #4]
 800ab4e:	4299      	cmp	r1, r3
 800ab50:	bfde      	ittt	le
 800ab52:	2330      	movle	r3, #48	@ 0x30
 800ab54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab5c:	1b92      	subs	r2, r2, r6
 800ab5e:	6122      	str	r2, [r4, #16]
 800ab60:	f8cd a000 	str.w	sl, [sp]
 800ab64:	464b      	mov	r3, r9
 800ab66:	aa03      	add	r2, sp, #12
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	f7ff fee6 	bl	800a93c <_printf_common>
 800ab70:	3001      	adds	r0, #1
 800ab72:	d14a      	bne.n	800ac0a <_printf_i+0x1f2>
 800ab74:	f04f 30ff 	mov.w	r0, #4294967295
 800ab78:	b004      	add	sp, #16
 800ab7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f043 0320 	orr.w	r3, r3, #32
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	4833      	ldr	r0, [pc, #204]	@ (800ac54 <_printf_i+0x23c>)
 800ab88:	2778      	movs	r7, #120	@ 0x78
 800ab8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	6831      	ldr	r1, [r6, #0]
 800ab92:	061f      	lsls	r7, r3, #24
 800ab94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab98:	d402      	bmi.n	800aba0 <_printf_i+0x188>
 800ab9a:	065f      	lsls	r7, r3, #25
 800ab9c:	bf48      	it	mi
 800ab9e:	b2ad      	uxthmi	r5, r5
 800aba0:	6031      	str	r1, [r6, #0]
 800aba2:	07d9      	lsls	r1, r3, #31
 800aba4:	bf44      	itt	mi
 800aba6:	f043 0320 	orrmi.w	r3, r3, #32
 800abaa:	6023      	strmi	r3, [r4, #0]
 800abac:	b11d      	cbz	r5, 800abb6 <_printf_i+0x19e>
 800abae:	2310      	movs	r3, #16
 800abb0:	e7ac      	b.n	800ab0c <_printf_i+0xf4>
 800abb2:	4827      	ldr	r0, [pc, #156]	@ (800ac50 <_printf_i+0x238>)
 800abb4:	e7e9      	b.n	800ab8a <_printf_i+0x172>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	f023 0320 	bic.w	r3, r3, #32
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	e7f6      	b.n	800abae <_printf_i+0x196>
 800abc0:	4616      	mov	r6, r2
 800abc2:	e7bd      	b.n	800ab40 <_printf_i+0x128>
 800abc4:	6833      	ldr	r3, [r6, #0]
 800abc6:	6825      	ldr	r5, [r4, #0]
 800abc8:	6961      	ldr	r1, [r4, #20]
 800abca:	1d18      	adds	r0, r3, #4
 800abcc:	6030      	str	r0, [r6, #0]
 800abce:	062e      	lsls	r6, r5, #24
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	d501      	bpl.n	800abd8 <_printf_i+0x1c0>
 800abd4:	6019      	str	r1, [r3, #0]
 800abd6:	e002      	b.n	800abde <_printf_i+0x1c6>
 800abd8:	0668      	lsls	r0, r5, #25
 800abda:	d5fb      	bpl.n	800abd4 <_printf_i+0x1bc>
 800abdc:	8019      	strh	r1, [r3, #0]
 800abde:	2300      	movs	r3, #0
 800abe0:	6123      	str	r3, [r4, #16]
 800abe2:	4616      	mov	r6, r2
 800abe4:	e7bc      	b.n	800ab60 <_printf_i+0x148>
 800abe6:	6833      	ldr	r3, [r6, #0]
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	6032      	str	r2, [r6, #0]
 800abec:	681e      	ldr	r6, [r3, #0]
 800abee:	6862      	ldr	r2, [r4, #4]
 800abf0:	2100      	movs	r1, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7f5 fb0c 	bl	8000210 <memchr>
 800abf8:	b108      	cbz	r0, 800abfe <_printf_i+0x1e6>
 800abfa:	1b80      	subs	r0, r0, r6
 800abfc:	6060      	str	r0, [r4, #4]
 800abfe:	6863      	ldr	r3, [r4, #4]
 800ac00:	6123      	str	r3, [r4, #16]
 800ac02:	2300      	movs	r3, #0
 800ac04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac08:	e7aa      	b.n	800ab60 <_printf_i+0x148>
 800ac0a:	6923      	ldr	r3, [r4, #16]
 800ac0c:	4632      	mov	r2, r6
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4640      	mov	r0, r8
 800ac12:	47d0      	blx	sl
 800ac14:	3001      	adds	r0, #1
 800ac16:	d0ad      	beq.n	800ab74 <_printf_i+0x15c>
 800ac18:	6823      	ldr	r3, [r4, #0]
 800ac1a:	079b      	lsls	r3, r3, #30
 800ac1c:	d413      	bmi.n	800ac46 <_printf_i+0x22e>
 800ac1e:	68e0      	ldr	r0, [r4, #12]
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	4298      	cmp	r0, r3
 800ac24:	bfb8      	it	lt
 800ac26:	4618      	movlt	r0, r3
 800ac28:	e7a6      	b.n	800ab78 <_printf_i+0x160>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	4632      	mov	r2, r6
 800ac2e:	4649      	mov	r1, r9
 800ac30:	4640      	mov	r0, r8
 800ac32:	47d0      	blx	sl
 800ac34:	3001      	adds	r0, #1
 800ac36:	d09d      	beq.n	800ab74 <_printf_i+0x15c>
 800ac38:	3501      	adds	r5, #1
 800ac3a:	68e3      	ldr	r3, [r4, #12]
 800ac3c:	9903      	ldr	r1, [sp, #12]
 800ac3e:	1a5b      	subs	r3, r3, r1
 800ac40:	42ab      	cmp	r3, r5
 800ac42:	dcf2      	bgt.n	800ac2a <_printf_i+0x212>
 800ac44:	e7eb      	b.n	800ac1e <_printf_i+0x206>
 800ac46:	2500      	movs	r5, #0
 800ac48:	f104 0619 	add.w	r6, r4, #25
 800ac4c:	e7f5      	b.n	800ac3a <_printf_i+0x222>
 800ac4e:	bf00      	nop
 800ac50:	0800c91d 	.word	0x0800c91d
 800ac54:	0800c92e 	.word	0x0800c92e

0800ac58 <memmove>:
 800ac58:	4288      	cmp	r0, r1
 800ac5a:	b510      	push	{r4, lr}
 800ac5c:	eb01 0402 	add.w	r4, r1, r2
 800ac60:	d902      	bls.n	800ac68 <memmove+0x10>
 800ac62:	4284      	cmp	r4, r0
 800ac64:	4623      	mov	r3, r4
 800ac66:	d807      	bhi.n	800ac78 <memmove+0x20>
 800ac68:	1e43      	subs	r3, r0, #1
 800ac6a:	42a1      	cmp	r1, r4
 800ac6c:	d008      	beq.n	800ac80 <memmove+0x28>
 800ac6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac76:	e7f8      	b.n	800ac6a <memmove+0x12>
 800ac78:	4402      	add	r2, r0
 800ac7a:	4601      	mov	r1, r0
 800ac7c:	428a      	cmp	r2, r1
 800ac7e:	d100      	bne.n	800ac82 <memmove+0x2a>
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac8a:	e7f7      	b.n	800ac7c <memmove+0x24>

0800ac8c <_sbrk_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d06      	ldr	r5, [pc, #24]	@ (800aca8 <_sbrk_r+0x1c>)
 800ac90:	2300      	movs	r3, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	4608      	mov	r0, r1
 800ac96:	602b      	str	r3, [r5, #0]
 800ac98:	f7f5 fe7a 	bl	8000990 <_sbrk>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d102      	bne.n	800aca6 <_sbrk_r+0x1a>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	b103      	cbz	r3, 800aca6 <_sbrk_r+0x1a>
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	20002138 	.word	0x20002138

0800acac <memcpy>:
 800acac:	440a      	add	r2, r1
 800acae:	4291      	cmp	r1, r2
 800acb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800acb4:	d100      	bne.n	800acb8 <memcpy+0xc>
 800acb6:	4770      	bx	lr
 800acb8:	b510      	push	{r4, lr}
 800acba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acc2:	4291      	cmp	r1, r2
 800acc4:	d1f9      	bne.n	800acba <memcpy+0xe>
 800acc6:	bd10      	pop	{r4, pc}

0800acc8 <_realloc_r>:
 800acc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800accc:	4680      	mov	r8, r0
 800acce:	4615      	mov	r5, r2
 800acd0:	460c      	mov	r4, r1
 800acd2:	b921      	cbnz	r1, 800acde <_realloc_r+0x16>
 800acd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd8:	4611      	mov	r1, r2
 800acda:	f7ff bc4b 	b.w	800a574 <_malloc_r>
 800acde:	b92a      	cbnz	r2, 800acec <_realloc_r+0x24>
 800ace0:	f7ff fbdc 	bl	800a49c <_free_r>
 800ace4:	2400      	movs	r4, #0
 800ace6:	4620      	mov	r0, r4
 800ace8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acec:	f000 f81a 	bl	800ad24 <_malloc_usable_size_r>
 800acf0:	4285      	cmp	r5, r0
 800acf2:	4606      	mov	r6, r0
 800acf4:	d802      	bhi.n	800acfc <_realloc_r+0x34>
 800acf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acfa:	d8f4      	bhi.n	800ace6 <_realloc_r+0x1e>
 800acfc:	4629      	mov	r1, r5
 800acfe:	4640      	mov	r0, r8
 800ad00:	f7ff fc38 	bl	800a574 <_malloc_r>
 800ad04:	4607      	mov	r7, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d0ec      	beq.n	800ace4 <_realloc_r+0x1c>
 800ad0a:	42b5      	cmp	r5, r6
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4621      	mov	r1, r4
 800ad10:	bf28      	it	cs
 800ad12:	4632      	movcs	r2, r6
 800ad14:	f7ff ffca 	bl	800acac <memcpy>
 800ad18:	4621      	mov	r1, r4
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	f7ff fbbe 	bl	800a49c <_free_r>
 800ad20:	463c      	mov	r4, r7
 800ad22:	e7e0      	b.n	800ace6 <_realloc_r+0x1e>

0800ad24 <_malloc_usable_size_r>:
 800ad24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad28:	1f18      	subs	r0, r3, #4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bfbc      	itt	lt
 800ad2e:	580b      	ldrlt	r3, [r1, r0]
 800ad30:	18c0      	addlt	r0, r0, r3
 800ad32:	4770      	bx	lr

0800ad34 <_init>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	bf00      	nop
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr

0800ad40 <_fini>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	bf00      	nop
 800ad44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad46:	bc08      	pop	{r3}
 800ad48:	469e      	mov	lr, r3
 800ad4a:	4770      	bx	lr
