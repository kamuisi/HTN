
Baitap_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb18  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bd0  0800ecc8  0800ecc8  0000fcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010898  08010898  000121cc  2**0
                  CONTENTS
  4 .ARM          00000008  08010898  08010898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108a0  080108a0  000121cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108a0  080108a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080108a4  080108a4  000118a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  080108a8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121cc  2**0
                  CONTENTS
 10 .bss          00006988  200001cc  200001cc  000121cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006b54  20006b54  000121cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028627  00000000  00000000  000121fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006433  00000000  00000000  0003a823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002478  00000000  00000000  00040c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bdb  00000000  00000000  000430d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009366  00000000  00000000  00044cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ba9f  00000000  00000000  0004e011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f58cb  00000000  00000000  00079ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f37b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ee8  00000000  00000000  0016f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  001792a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ecb0 	.word	0x0800ecb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	0800ecb0 	.word	0x0800ecb0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b96a 	b.w	8000be8 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	460c      	mov	r4, r1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d14e      	bne.n	80009d6 <__udivmoddi4+0xaa>
 8000938:	4694      	mov	ip, r2
 800093a:	458c      	cmp	ip, r1
 800093c:	4686      	mov	lr, r0
 800093e:	fab2 f282 	clz	r2, r2
 8000942:	d962      	bls.n	8000a0a <__udivmoddi4+0xde>
 8000944:	b14a      	cbz	r2, 800095a <__udivmoddi4+0x2e>
 8000946:	f1c2 0320 	rsb	r3, r2, #32
 800094a:	4091      	lsls	r1, r2
 800094c:	fa20 f303 	lsr.w	r3, r0, r3
 8000950:	fa0c fc02 	lsl.w	ip, ip, r2
 8000954:	4319      	orrs	r1, r3
 8000956:	fa00 fe02 	lsl.w	lr, r0, r2
 800095a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095e:	fa1f f68c 	uxth.w	r6, ip
 8000962:	fbb1 f4f7 	udiv	r4, r1, r7
 8000966:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800096a:	fb07 1114 	mls	r1, r7, r4, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb04 f106 	mul.w	r1, r4, r6
 8000976:	4299      	cmp	r1, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x64>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000982:	f080 8112 	bcs.w	8000baa <__udivmoddi4+0x27e>
 8000986:	4299      	cmp	r1, r3
 8000988:	f240 810f 	bls.w	8000baa <__udivmoddi4+0x27e>
 800098c:	3c02      	subs	r4, #2
 800098e:	4463      	add	r3, ip
 8000990:	1a59      	subs	r1, r3, r1
 8000992:	fa1f f38e 	uxth.w	r3, lr
 8000996:	fbb1 f0f7 	udiv	r0, r1, r7
 800099a:	fb07 1110 	mls	r1, r7, r0, r1
 800099e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a2:	fb00 f606 	mul.w	r6, r0, r6
 80009a6:	429e      	cmp	r6, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x94>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b2:	f080 80fc 	bcs.w	8000bae <__udivmoddi4+0x282>
 80009b6:	429e      	cmp	r6, r3
 80009b8:	f240 80f9 	bls.w	8000bae <__udivmoddi4+0x282>
 80009bc:	4463      	add	r3, ip
 80009be:	3802      	subs	r0, #2
 80009c0:	1b9b      	subs	r3, r3, r6
 80009c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009c6:	2100      	movs	r1, #0
 80009c8:	b11d      	cbz	r5, 80009d2 <__udivmoddi4+0xa6>
 80009ca:	40d3      	lsrs	r3, r2
 80009cc:	2200      	movs	r2, #0
 80009ce:	e9c5 3200 	strd	r3, r2, [r5]
 80009d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d905      	bls.n	80009e6 <__udivmoddi4+0xba>
 80009da:	b10d      	cbz	r5, 80009e0 <__udivmoddi4+0xb4>
 80009dc:	e9c5 0100 	strd	r0, r1, [r5]
 80009e0:	2100      	movs	r1, #0
 80009e2:	4608      	mov	r0, r1
 80009e4:	e7f5      	b.n	80009d2 <__udivmoddi4+0xa6>
 80009e6:	fab3 f183 	clz	r1, r3
 80009ea:	2900      	cmp	r1, #0
 80009ec:	d146      	bne.n	8000a7c <__udivmoddi4+0x150>
 80009ee:	42a3      	cmp	r3, r4
 80009f0:	d302      	bcc.n	80009f8 <__udivmoddi4+0xcc>
 80009f2:	4290      	cmp	r0, r2
 80009f4:	f0c0 80f0 	bcc.w	8000bd8 <__udivmoddi4+0x2ac>
 80009f8:	1a86      	subs	r6, r0, r2
 80009fa:	eb64 0303 	sbc.w	r3, r4, r3
 80009fe:	2001      	movs	r0, #1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d0e6      	beq.n	80009d2 <__udivmoddi4+0xa6>
 8000a04:	e9c5 6300 	strd	r6, r3, [r5]
 8000a08:	e7e3      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	f040 8090 	bne.w	8000b30 <__udivmoddi4+0x204>
 8000a10:	eba1 040c 	sub.w	r4, r1, ip
 8000a14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a18:	fa1f f78c 	uxth.w	r7, ip
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a26:	fb08 4416 	mls	r4, r8, r6, r4
 8000a2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2e:	fb07 f006 	mul.w	r0, r7, r6
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0x11c>
 8000a36:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a3e:	d202      	bcs.n	8000a46 <__udivmoddi4+0x11a>
 8000a40:	4298      	cmp	r0, r3
 8000a42:	f200 80cd 	bhi.w	8000be0 <__udivmoddi4+0x2b4>
 8000a46:	4626      	mov	r6, r4
 8000a48:	1a1c      	subs	r4, r3, r0
 8000a4a:	fa1f f38e 	uxth.w	r3, lr
 8000a4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a52:	fb08 4410 	mls	r4, r8, r0, r4
 8000a56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a5a:	fb00 f707 	mul.w	r7, r0, r7
 8000a5e:	429f      	cmp	r7, r3
 8000a60:	d908      	bls.n	8000a74 <__udivmoddi4+0x148>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a6a:	d202      	bcs.n	8000a72 <__udivmoddi4+0x146>
 8000a6c:	429f      	cmp	r7, r3
 8000a6e:	f200 80b0 	bhi.w	8000bd2 <__udivmoddi4+0x2a6>
 8000a72:	4620      	mov	r0, r4
 8000a74:	1bdb      	subs	r3, r3, r7
 8000a76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a7a:	e7a5      	b.n	80009c8 <__udivmoddi4+0x9c>
 8000a7c:	f1c1 0620 	rsb	r6, r1, #32
 8000a80:	408b      	lsls	r3, r1
 8000a82:	fa22 f706 	lsr.w	r7, r2, r6
 8000a86:	431f      	orrs	r7, r3
 8000a88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a90:	ea43 030c 	orr.w	r3, r3, ip
 8000a94:	40f4      	lsrs	r4, r6
 8000a96:	fa00 f801 	lsl.w	r8, r0, r1
 8000a9a:	0c38      	lsrs	r0, r7, #16
 8000a9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000aa0:	fbb4 fef0 	udiv	lr, r4, r0
 8000aa4:	fa1f fc87 	uxth.w	ip, r7
 8000aa8:	fb00 441e 	mls	r4, r0, lr, r4
 8000aac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ab4:	45a1      	cmp	r9, r4
 8000ab6:	fa02 f201 	lsl.w	r2, r2, r1
 8000aba:	d90a      	bls.n	8000ad2 <__udivmoddi4+0x1a6>
 8000abc:	193c      	adds	r4, r7, r4
 8000abe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ac2:	f080 8084 	bcs.w	8000bce <__udivmoddi4+0x2a2>
 8000ac6:	45a1      	cmp	r9, r4
 8000ac8:	f240 8081 	bls.w	8000bce <__udivmoddi4+0x2a2>
 8000acc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ad0:	443c      	add	r4, r7
 8000ad2:	eba4 0409 	sub.w	r4, r4, r9
 8000ad6:	fa1f f983 	uxth.w	r9, r3
 8000ada:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ade:	fb00 4413 	mls	r4, r0, r3, r4
 8000ae2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ae6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aea:	45a4      	cmp	ip, r4
 8000aec:	d907      	bls.n	8000afe <__udivmoddi4+0x1d2>
 8000aee:	193c      	adds	r4, r7, r4
 8000af0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000af4:	d267      	bcs.n	8000bc6 <__udivmoddi4+0x29a>
 8000af6:	45a4      	cmp	ip, r4
 8000af8:	d965      	bls.n	8000bc6 <__udivmoddi4+0x29a>
 8000afa:	3b02      	subs	r3, #2
 8000afc:	443c      	add	r4, r7
 8000afe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b02:	fba0 9302 	umull	r9, r3, r0, r2
 8000b06:	eba4 040c 	sub.w	r4, r4, ip
 8000b0a:	429c      	cmp	r4, r3
 8000b0c:	46ce      	mov	lr, r9
 8000b0e:	469c      	mov	ip, r3
 8000b10:	d351      	bcc.n	8000bb6 <__udivmoddi4+0x28a>
 8000b12:	d04e      	beq.n	8000bb2 <__udivmoddi4+0x286>
 8000b14:	b155      	cbz	r5, 8000b2c <__udivmoddi4+0x200>
 8000b16:	ebb8 030e 	subs.w	r3, r8, lr
 8000b1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b22:	40cb      	lsrs	r3, r1
 8000b24:	431e      	orrs	r6, r3
 8000b26:	40cc      	lsrs	r4, r1
 8000b28:	e9c5 6400 	strd	r6, r4, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	e750      	b.n	80009d2 <__udivmoddi4+0xa6>
 8000b30:	f1c2 0320 	rsb	r3, r2, #32
 8000b34:	fa20 f103 	lsr.w	r1, r0, r3
 8000b38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b40:	4094      	lsls	r4, r2
 8000b42:	430c      	orrs	r4, r1
 8000b44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4c:	fa1f f78c 	uxth.w	r7, ip
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3110 	mls	r1, r8, r0, r3
 8000b58:	0c23      	lsrs	r3, r4, #16
 8000b5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5e:	fb00 f107 	mul.w	r1, r0, r7
 8000b62:	4299      	cmp	r1, r3
 8000b64:	d908      	bls.n	8000b78 <__udivmoddi4+0x24c>
 8000b66:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b6e:	d22c      	bcs.n	8000bca <__udivmoddi4+0x29e>
 8000b70:	4299      	cmp	r1, r3
 8000b72:	d92a      	bls.n	8000bca <__udivmoddi4+0x29e>
 8000b74:	3802      	subs	r0, #2
 8000b76:	4463      	add	r3, ip
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b80:	fb08 3311 	mls	r3, r8, r1, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb01 f307 	mul.w	r3, r1, r7
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0x276>
 8000b90:	eb1c 0404 	adds.w	r4, ip, r4
 8000b94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b98:	d213      	bcs.n	8000bc2 <__udivmoddi4+0x296>
 8000b9a:	42a3      	cmp	r3, r4
 8000b9c:	d911      	bls.n	8000bc2 <__udivmoddi4+0x296>
 8000b9e:	3902      	subs	r1, #2
 8000ba0:	4464      	add	r4, ip
 8000ba2:	1ae4      	subs	r4, r4, r3
 8000ba4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ba8:	e739      	b.n	8000a1e <__udivmoddi4+0xf2>
 8000baa:	4604      	mov	r4, r0
 8000bac:	e6f0      	b.n	8000990 <__udivmoddi4+0x64>
 8000bae:	4608      	mov	r0, r1
 8000bb0:	e706      	b.n	80009c0 <__udivmoddi4+0x94>
 8000bb2:	45c8      	cmp	r8, r9
 8000bb4:	d2ae      	bcs.n	8000b14 <__udivmoddi4+0x1e8>
 8000bb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bbe:	3801      	subs	r0, #1
 8000bc0:	e7a8      	b.n	8000b14 <__udivmoddi4+0x1e8>
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	e7ed      	b.n	8000ba2 <__udivmoddi4+0x276>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	e799      	b.n	8000afe <__udivmoddi4+0x1d2>
 8000bca:	4630      	mov	r0, r6
 8000bcc:	e7d4      	b.n	8000b78 <__udivmoddi4+0x24c>
 8000bce:	46d6      	mov	lr, sl
 8000bd0:	e77f      	b.n	8000ad2 <__udivmoddi4+0x1a6>
 8000bd2:	4463      	add	r3, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	e74d      	b.n	8000a74 <__udivmoddi4+0x148>
 8000bd8:	4606      	mov	r6, r0
 8000bda:	4623      	mov	r3, r4
 8000bdc:	4608      	mov	r0, r1
 8000bde:	e70f      	b.n	8000a00 <__udivmoddi4+0xd4>
 8000be0:	3e02      	subs	r6, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	e730      	b.n	8000a48 <__udivmoddi4+0x11c>
 8000be6:	bf00      	nop

08000be8 <__aeabi_idiv0>:
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf0:	f002 f84c 	bl	8002c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf4:	f000 f83e 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf8:	f000 f8a6 	bl	8000d48 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000bfc:	f001 f9cc 	bl	8001f98 <BSP_GYRO_Init>
  BSP_LCD_Init();
 8000c00:	f001 fa44 	bl	800208c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000c04:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 fac1 	bl	8002190 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000c0e:	2001      	movs	r0, #1
 8000c10:	f001 fb22 	bl	8002258 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000c14:	f001 fd2c 	bl	8002670 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000c18:	480f      	ldr	r0, [pc, #60]	@ (8000c58 <main+0x6c>)
 8000c1a:	f001 fb79 	bl	8002310 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000c1e:	480e      	ldr	r0, [pc, #56]	@ (8000c58 <main+0x6c>)
 8000c20:	f001 fb42 	bl	80022a8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f001 fb26 	bl	8002278 <BSP_LCD_SetTextColor>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c2c:	f00a f902 	bl	800ae34 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <main+0x70>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	480a      	ldr	r0, [pc, #40]	@ (8000c60 <main+0x74>)
 8000c36:	f00a f947 	bl	800aec8 <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <main+0x78>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 8000c40:	4a09      	ldr	r2, [pc, #36]	@ (8000c68 <main+0x7c>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <main+0x80>)
 8000c46:	f00a f93f 	bl	800aec8 <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a08      	ldr	r2, [pc, #32]	@ (8000c70 <main+0x84>)
 8000c4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c50:	f00a f914 	bl	800ae7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <main+0x68>
 8000c58:	ff0000ff 	.word	0xff0000ff
 8000c5c:	0800ed44 	.word	0x0800ed44
 8000c60:	08000db9 	.word	0x08000db9
 8000c64:	200001e8 	.word	0x200001e8
 8000c68:	0800ed68 	.word	0x0800ed68
 8000c6c:	08000ee9 	.word	0x08000ee9
 8000c70:	200001ec 	.word	0x200001ec

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b094      	sub	sp, #80	@ 0x50
 8000c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2230      	movs	r2, #48	@ 0x30
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00d fb94 	bl	800e3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <SystemClock_Config+0xcc>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	4a27      	ldr	r2, [pc, #156]	@ (8000d40 <SystemClock_Config+0xcc>)
 8000ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <SystemClock_Config+0xcc>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <SystemClock_Config+0xd0>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a21      	ldr	r2, [pc, #132]	@ (8000d44 <SystemClock_Config+0xd0>)
 8000cbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <SystemClock_Config+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cde:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ce8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f004 fc54 	bl	80055a8 <HAL_RCC_OscConfig>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d06:	f000 f9d3 	bl	80010b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0a:	230f      	movs	r3, #15
 8000d0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	2105      	movs	r1, #5
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 feb5 	bl	8005a98 <HAL_RCC_ClockConfig>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d34:	f000 f9bc 	bl	80010b0 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	@ 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a16      	ldr	r2, [pc, #88]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a0f      	ldr	r2, [pc, #60]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d74:	f043 0302 	orr.w	r3, r3, #2
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	60bb      	str	r3, [r7, #8]
 8000d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <MX_GPIO_Init+0x68>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	00000000 	.word	0x00000000

08000db8 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af02      	add	r7, sp, #8
 8000dbe:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000dc0:	f00c fdba 	bl	800d938 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    BSP_GYRO_GetXYZ(pData);
 8000dc4:	4844      	ldr	r0, [pc, #272]	@ (8000ed8 <StartTask01+0x120>)
 8000dc6:	f001 f94d 	bl	8002064 <BSP_GYRO_GetXYZ>
    pData[0] = pData[0] * 17.5 * 0.001;
 8000dca:	4b43      	ldr	r3, [pc, #268]	@ (8000ed8 <StartTask01+0x120>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fcec 	bl	80007ac <__aeabi_f2d>
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b40      	ldr	r3, [pc, #256]	@ (8000edc <StartTask01+0x124>)
 8000dda:	f7ff fa59 	bl	8000290 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	a33a      	add	r3, pc, #232	@ (adr r3, 8000ed0 <StartTask01+0x118>)
 8000de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dec:	f7ff fa50 	bl	8000290 <__aeabi_dmul>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	4610      	mov	r0, r2
 8000df6:	4619      	mov	r1, r3
 8000df8:	f7ff fd30 	bl	800085c <__aeabi_d2f>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a36      	ldr	r2, [pc, #216]	@ (8000ed8 <StartTask01+0x120>)
 8000e00:	6013      	str	r3, [r2, #0]
    pData[1] = pData[1] * 17.5 * 0.001;
 8000e02:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <StartTask01+0x120>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff fcd0 	bl	80007ac <__aeabi_f2d>
 8000e0c:	f04f 0200 	mov.w	r2, #0
 8000e10:	4b32      	ldr	r3, [pc, #200]	@ (8000edc <StartTask01+0x124>)
 8000e12:	f7ff fa3d 	bl	8000290 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	a32c      	add	r3, pc, #176	@ (adr r3, 8000ed0 <StartTask01+0x118>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fa34 	bl	8000290 <__aeabi_dmul>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fd14 	bl	800085c <__aeabi_d2f>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a28      	ldr	r2, [pc, #160]	@ (8000ed8 <StartTask01+0x120>)
 8000e38:	6053      	str	r3, [r2, #4]
    pData[2] = pData[2] * 17.5 * 0.001;
 8000e3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ed8 <StartTask01+0x120>)
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fcb4 	bl	80007ac <__aeabi_f2d>
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <StartTask01+0x124>)
 8000e4a:	f7ff fa21 	bl	8000290 <__aeabi_dmul>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	a31e      	add	r3, pc, #120	@ (adr r3, 8000ed0 <StartTask01+0x118>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	f7ff fa18 	bl	8000290 <__aeabi_dmul>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fcf8 	bl	800085c <__aeabi_d2f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed8 <StartTask01+0x120>)
 8000e70:	6093      	str	r3, [r2, #8]
    uint16_t data_len = sprintf(text, "%d %d %d\n", (int16_t)pData[0], (int16_t)pData[1], (int16_t)pData[2]);
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <StartTask01+0x120>)
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7c:	ee17 3a90 	vmov	r3, s15
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <StartTask01+0x120>)
 8000e86:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8e:	ee17 3a90 	vmov	r3, s15
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	4b10      	ldr	r3, [pc, #64]	@ (8000ed8 <StartTask01+0x120>)
 8000e98:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea0:	ee17 3a90 	vmov	r3, s15
 8000ea4:	b21b      	sxth	r3, r3
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <StartTask01+0x128>)
 8000eac:	480d      	ldr	r0, [pc, #52]	@ (8000ee4 <StartTask01+0x12c>)
 8000eae:	f00d fa5f 	bl	800e370 <siprintf>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	81fb      	strh	r3, [r7, #14]
    CDC_Transmit_HS((uint8_t*)text, data_len);
 8000eb6:	89fb      	ldrh	r3, [r7, #14]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480a      	ldr	r0, [pc, #40]	@ (8000ee4 <StartTask01+0x12c>)
 8000ebc:	f00c fdfa 	bl	800dab4 <CDC_Transmit_HS>
    osDelay(100);
 8000ec0:	2064      	movs	r0, #100	@ 0x64
 8000ec2:	f00a f893 	bl	800afec <osDelay>
  {
 8000ec6:	bf00      	nop
 8000ec8:	e77c      	b.n	8000dc4 <StartTask01+0xc>
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ed4:	3f50624d 	.word	0x3f50624d
 8000ed8:	20000224 	.word	0x20000224
 8000edc:	40318000 	.word	0x40318000
 8000ee0:	0800ecd8 	.word	0x0800ecd8
 8000ee4:	200001f0 	.word	0x200001f0

08000ee8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000ef0:	2064      	movs	r0, #100	@ 0x64
 8000ef2:	f00a f87b 	bl	800afec <osDelay>
    if(pData[0] > 1000 && pData[1] > 1000 && pData[2])
 8000ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8001074 <StartTask02+0x18c>)
 8000ef8:	edd3 7a00 	vldr	s15, [r3]
 8000efc:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8001078 <StartTask02+0x190>
 8000f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	dd2c      	ble.n	8000f64 <StartTask02+0x7c>
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001074 <StartTask02+0x18c>)
 8000f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f10:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001078 <StartTask02+0x190>
 8000f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	dd22      	ble.n	8000f64 <StartTask02+0x7c>
 8000f1e:	4b55      	ldr	r3, [pc, #340]	@ (8001074 <StartTask02+0x18c>)
 8000f20:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2c:	d01a      	beq.n	8000f64 <StartTask02+0x7c>
    {
    	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000f2e:	4853      	ldr	r0, [pc, #332]	@ (800107c <StartTask02+0x194>)
 8000f30:	f001 f9ee 	bl	8002310 <BSP_LCD_Clear>
    	BSP_LCD_FillTriangle(238, 215, 215, 163, 140, 186); //phai
 8000f34:	23ba      	movs	r3, #186	@ 0xba
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	238c      	movs	r3, #140	@ 0x8c
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	23a3      	movs	r3, #163	@ 0xa3
 8000f3e:	22d7      	movs	r2, #215	@ 0xd7
 8000f40:	21d7      	movs	r1, #215	@ 0xd7
 8000f42:	20ee      	movs	r0, #238	@ 0xee
 8000f44:	f001 fad6 	bl	80024f4 <BSP_LCD_FillTriangle>
    	BSP_LCD_FillTriangle(121, 98, 144, 318, 295, 295); //duoi
 8000f48:	f240 1327 	movw	r3, #295	@ 0x127
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	f240 1327 	movw	r3, #295	@ 0x127
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	f44f 739f 	mov.w	r3, #318	@ 0x13e
 8000f58:	2290      	movs	r2, #144	@ 0x90
 8000f5a:	2162      	movs	r1, #98	@ 0x62
 8000f5c:	2079      	movs	r0, #121	@ 0x79
 8000f5e:	f001 fac9 	bl	80024f4 <BSP_LCD_FillTriangle>
 8000f62:	e085      	b.n	8001070 <StartTask02+0x188>
    }
    else if(pData[0] < -1000 && pData[1] < -1000)
 8000f64:	4b43      	ldr	r3, [pc, #268]	@ (8001074 <StartTask02+0x18c>)
 8000f66:	edd3 7a00 	vldr	s15, [r3]
 8000f6a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001080 <StartTask02+0x198>
 8000f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d521      	bpl.n	8000fbc <StartTask02+0xd4>
 8000f78:	4b3e      	ldr	r3, [pc, #248]	@ (8001074 <StartTask02+0x18c>)
 8000f7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f7e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8001080 <StartTask02+0x198>
 8000f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	d517      	bpl.n	8000fbc <StartTask02+0xd4>
    {
    	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000f8c:	483b      	ldr	r0, [pc, #236]	@ (800107c <StartTask02+0x194>)
 8000f8e:	f001 f9bf 	bl	8002310 <BSP_LCD_Clear>
    	BSP_LCD_FillTriangle(1, 24, 24, 163, 140, 186); //trai
 8000f92:	23ba      	movs	r3, #186	@ 0xba
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	238c      	movs	r3, #140	@ 0x8c
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	23a3      	movs	r3, #163	@ 0xa3
 8000f9c:	2218      	movs	r2, #24
 8000f9e:	2118      	movs	r1, #24
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f001 faa7 	bl	80024f4 <BSP_LCD_FillTriangle>
    	BSP_LCD_FillTriangle(121, 98, 144, 1, 24, 24); //tren
 8000fa6:	2318      	movs	r3, #24
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	2318      	movs	r3, #24
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	2290      	movs	r2, #144	@ 0x90
 8000fb2:	2162      	movs	r1, #98	@ 0x62
 8000fb4:	2079      	movs	r0, #121	@ 0x79
 8000fb6:	f001 fa9d 	bl	80024f4 <BSP_LCD_FillTriangle>
 8000fba:	e059      	b.n	8001070 <StartTask02+0x188>
    }
    else if(pData[0] < -1000 && pData[1] > 100)
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <StartTask02+0x18c>)
 8000fbe:	edd3 7a00 	vldr	s15, [r3]
 8000fc2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001080 <StartTask02+0x198>
 8000fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fce:	d521      	bpl.n	8001014 <StartTask02+0x12c>
 8000fd0:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <StartTask02+0x18c>)
 8000fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fd6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001084 <StartTask02+0x19c>
 8000fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe2:	dd17      	ble.n	8001014 <StartTask02+0x12c>
    {
    	BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000fe4:	4825      	ldr	r0, [pc, #148]	@ (800107c <StartTask02+0x194>)
 8000fe6:	f001 f993 	bl	8002310 <BSP_LCD_Clear>
    	BSP_LCD_FillTriangle(238, 215, 215, 163, 140, 186); //phai
 8000fea:	23ba      	movs	r3, #186	@ 0xba
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	238c      	movs	r3, #140	@ 0x8c
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	23a3      	movs	r3, #163	@ 0xa3
 8000ff4:	22d7      	movs	r2, #215	@ 0xd7
 8000ff6:	21d7      	movs	r1, #215	@ 0xd7
 8000ff8:	20ee      	movs	r0, #238	@ 0xee
 8000ffa:	f001 fa7b 	bl	80024f4 <BSP_LCD_FillTriangle>
    	BSP_LCD_FillTriangle(121, 98, 144, 1, 24, 24); //tren
 8000ffe:	2318      	movs	r3, #24
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	2318      	movs	r3, #24
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2290      	movs	r2, #144	@ 0x90
 800100a:	2162      	movs	r1, #98	@ 0x62
 800100c:	2079      	movs	r0, #121	@ 0x79
 800100e:	f001 fa71 	bl	80024f4 <BSP_LCD_FillTriangle>
 8001012:	e02d      	b.n	8001070 <StartTask02+0x188>
    }
    else if(pData[0] > 1000 && pData[1] < -100)
 8001014:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <StartTask02+0x18c>)
 8001016:	edd3 7a00 	vldr	s15, [r3]
 800101a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001078 <StartTask02+0x190>
 800101e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001026:	dd23      	ble.n	8001070 <StartTask02+0x188>
 8001028:	4b12      	ldr	r3, [pc, #72]	@ (8001074 <StartTask02+0x18c>)
 800102a:	edd3 7a01 	vldr	s15, [r3, #4]
 800102e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001088 <StartTask02+0x1a0>
 8001032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	d519      	bpl.n	8001070 <StartTask02+0x188>
    {
    	BSP_LCD_Clear(LCD_COLOR_BLUE);
 800103c:	480f      	ldr	r0, [pc, #60]	@ (800107c <StartTask02+0x194>)
 800103e:	f001 f967 	bl	8002310 <BSP_LCD_Clear>
    	BSP_LCD_FillTriangle(1, 24, 24, 163, 140, 186); //trai
 8001042:	23ba      	movs	r3, #186	@ 0xba
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	238c      	movs	r3, #140	@ 0x8c
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	23a3      	movs	r3, #163	@ 0xa3
 800104c:	2218      	movs	r2, #24
 800104e:	2118      	movs	r1, #24
 8001050:	2001      	movs	r0, #1
 8001052:	f001 fa4f 	bl	80024f4 <BSP_LCD_FillTriangle>
    	BSP_LCD_FillTriangle(121, 98, 144, 318, 295, 295); //duoi
 8001056:	f240 1327 	movw	r3, #295	@ 0x127
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	f240 1327 	movw	r3, #295	@ 0x127
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	f44f 739f 	mov.w	r3, #318	@ 0x13e
 8001066:	2290      	movs	r2, #144	@ 0x90
 8001068:	2162      	movs	r1, #98	@ 0x62
 800106a:	2079      	movs	r0, #121	@ 0x79
 800106c:	f001 fa42 	bl	80024f4 <BSP_LCD_FillTriangle>
    osDelay(100);
 8001070:	e73e      	b.n	8000ef0 <StartTask02+0x8>
 8001072:	bf00      	nop
 8001074:	20000224 	.word	0x20000224
 8001078:	447a0000 	.word	0x447a0000
 800107c:	ff0000ff 	.word	0xff0000ff
 8001080:	c47a0000 	.word	0xc47a0000
 8001084:	42c80000 	.word	0x42c80000
 8001088:	c2c80000 	.word	0xc2c80000

0800108c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a04      	ldr	r2, [pc, #16]	@ (80010ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d101      	bne.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109e:	f001 fe17 	bl	8002cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40001000 	.word	0x40001000

080010b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b4:	b672      	cpsid	i
}
 80010b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <Error_Handler+0x8>

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_MspInit+0x54>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ca:	4a11      	ldr	r2, [pc, #68]	@ (8001110 <HAL_MspInit+0x54>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <HAL_MspInit+0x54>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <HAL_MspInit+0x54>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_MspInit+0x54>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <HAL_MspInit+0x54>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	f06f 0001 	mvn.w	r0, #1
 8001102:	f001 fee1 	bl	8002ec8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08e      	sub	sp, #56	@ 0x38
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_InitTick+0xe4>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112c:	4a32      	ldr	r2, [pc, #200]	@ (80011f8 <HAL_InitTick+0xe4>)
 800112e:	f043 0310 	orr.w	r3, r3, #16
 8001132:	6413      	str	r3, [r2, #64]	@ 0x40
 8001134:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_InitTick+0xe4>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001138:	f003 0310 	and.w	r3, r3, #16
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001140:	f107 0210 	add.w	r2, r7, #16
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f004 feb0 	bl	8005eb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800115a:	f004 fe95 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 800115e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001160:	e004      	b.n	800116c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001162:	f004 fe91 	bl	8005e88 <HAL_RCC_GetPCLK1Freq>
 8001166:	4603      	mov	r3, r0
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116e:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_InitTick+0xe8>)
 8001170:	fba2 2303 	umull	r2, r3, r2, r3
 8001174:	0c9b      	lsrs	r3, r3, #18
 8001176:	3b01      	subs	r3, #1
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800117a:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_InitTick+0xec>)
 800117c:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <HAL_InitTick+0xf0>)
 800117e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <HAL_InitTick+0xec>)
 8001182:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001186:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_InitTick+0xec>)
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800118e:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_InitTick+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <HAL_InitTick+0xec>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_InitTick+0xec>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <HAL_InitTick+0xec>)
 80011a2:	f005 ff2d 	bl	8007000 <HAL_TIM_Base_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d11b      	bne.n	80011ec <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011b4:	4812      	ldr	r0, [pc, #72]	@ (8001200 <HAL_InitTick+0xec>)
 80011b6:	f005 ff7d 	bl	80070b4 <HAL_TIM_Base_Start_IT>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d111      	bne.n	80011ec <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c8:	2036      	movs	r0, #54	@ 0x36
 80011ca:	f001 fe99 	bl	8002f00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	d808      	bhi.n	80011e6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011d4:	2200      	movs	r2, #0
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	2036      	movs	r0, #54	@ 0x36
 80011da:	f001 fe75 	bl	8002ec8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_InitTick+0xf4>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e002      	b.n	80011ec <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3738      	adds	r7, #56	@ 0x38
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40023800 	.word	0x40023800
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	20000230 	.word	0x20000230
 8001204:	40001000 	.word	0x40001000
 8001208:	20000080 	.word	0x20000080

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <TIM6_DAC_IRQHandler+0x10>)
 800124a:	f005 ffa3 	bl	8007194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000230 	.word	0x20000230

08001258 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <OTG_HS_IRQHandler+0x10>)
 800125e:	f003 f894 	bl	800438a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20006308 	.word	0x20006308

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f00d f890 	bl	800e3c0 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20030000 	.word	0x20030000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	20000278 	.word	0x20000278
 80012d4:	20006b58 	.word	0x20006b58

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001334 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001300:	f7ff ffea 	bl	80012d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001304:	480c      	ldr	r0, [pc, #48]	@ (8001338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001306:	490d      	ldr	r1, [pc, #52]	@ (800133c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001308:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800131c:	4c0a      	ldr	r4, [pc, #40]	@ (8001348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800132a:	f00d f84f 	bl	800e3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132e:	f7ff fc5d 	bl	8000bec <main>
  bx  lr    
 8001332:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001334:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001340:	080108a8 	.word	0x080108a8
  ldr r2, =_sbss
 8001344:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001348:	20006b54 	.word	0x20006b54

0800134c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC_IRQHandler>

0800134e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001352:	f000 fc6f 	bl	8001c34 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001356:	20ca      	movs	r0, #202	@ 0xca
 8001358:	f000 f95d 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800135c:	20c3      	movs	r0, #195	@ 0xc3
 800135e:	f000 f967 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001362:	2008      	movs	r0, #8
 8001364:	f000 f964 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001368:	2050      	movs	r0, #80	@ 0x50
 800136a:	f000 f961 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800136e:	20cf      	movs	r0, #207	@ 0xcf
 8001370:	f000 f951 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001374:	2000      	movs	r0, #0
 8001376:	f000 f95b 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800137a:	20c1      	movs	r0, #193	@ 0xc1
 800137c:	f000 f958 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001380:	2030      	movs	r0, #48	@ 0x30
 8001382:	f000 f955 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001386:	20ed      	movs	r0, #237	@ 0xed
 8001388:	f000 f945 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800138c:	2064      	movs	r0, #100	@ 0x64
 800138e:	f000 f94f 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001392:	2003      	movs	r0, #3
 8001394:	f000 f94c 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001398:	2012      	movs	r0, #18
 800139a:	f000 f949 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800139e:	2081      	movs	r0, #129	@ 0x81
 80013a0:	f000 f946 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80013a4:	20e8      	movs	r0, #232	@ 0xe8
 80013a6:	f000 f936 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80013aa:	2085      	movs	r0, #133	@ 0x85
 80013ac:	f000 f940 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f000 f93d 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80013b6:	2078      	movs	r0, #120	@ 0x78
 80013b8:	f000 f93a 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80013bc:	20cb      	movs	r0, #203	@ 0xcb
 80013be:	f000 f92a 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80013c2:	2039      	movs	r0, #57	@ 0x39
 80013c4:	f000 f934 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80013c8:	202c      	movs	r0, #44	@ 0x2c
 80013ca:	f000 f931 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f92e 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80013d4:	2034      	movs	r0, #52	@ 0x34
 80013d6:	f000 f92b 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80013da:	2002      	movs	r0, #2
 80013dc:	f000 f928 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80013e0:	20f7      	movs	r0, #247	@ 0xf7
 80013e2:	f000 f918 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80013e6:	2020      	movs	r0, #32
 80013e8:	f000 f922 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80013ec:	20ea      	movs	r0, #234	@ 0xea
 80013ee:	f000 f912 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013f2:	2000      	movs	r0, #0
 80013f4:	f000 f91c 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80013f8:	2000      	movs	r0, #0
 80013fa:	f000 f919 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80013fe:	20b1      	movs	r0, #177	@ 0xb1
 8001400:	f000 f909 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001404:	2000      	movs	r0, #0
 8001406:	f000 f913 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800140a:	201b      	movs	r0, #27
 800140c:	f000 f910 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001410:	20b6      	movs	r0, #182	@ 0xb6
 8001412:	f000 f900 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001416:	200a      	movs	r0, #10
 8001418:	f000 f90a 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800141c:	20a2      	movs	r0, #162	@ 0xa2
 800141e:	f000 f907 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001422:	20c0      	movs	r0, #192	@ 0xc0
 8001424:	f000 f8f7 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001428:	2010      	movs	r0, #16
 800142a:	f000 f901 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800142e:	20c1      	movs	r0, #193	@ 0xc1
 8001430:	f000 f8f1 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001434:	2010      	movs	r0, #16
 8001436:	f000 f8fb 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800143a:	20c5      	movs	r0, #197	@ 0xc5
 800143c:	f000 f8eb 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001440:	2045      	movs	r0, #69	@ 0x45
 8001442:	f000 f8f5 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001446:	2015      	movs	r0, #21
 8001448:	f000 f8f2 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800144c:	20c7      	movs	r0, #199	@ 0xc7
 800144e:	f000 f8e2 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001452:	2090      	movs	r0, #144	@ 0x90
 8001454:	f000 f8ec 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001458:	2036      	movs	r0, #54	@ 0x36
 800145a:	f000 f8dc 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800145e:	20c8      	movs	r0, #200	@ 0xc8
 8001460:	f000 f8e6 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001464:	20f2      	movs	r0, #242	@ 0xf2
 8001466:	f000 f8d6 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800146a:	2000      	movs	r0, #0
 800146c:	f000 f8e0 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001470:	20b0      	movs	r0, #176	@ 0xb0
 8001472:	f000 f8d0 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001476:	20c2      	movs	r0, #194	@ 0xc2
 8001478:	f000 f8da 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800147c:	20b6      	movs	r0, #182	@ 0xb6
 800147e:	f000 f8ca 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001482:	200a      	movs	r0, #10
 8001484:	f000 f8d4 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001488:	20a7      	movs	r0, #167	@ 0xa7
 800148a:	f000 f8d1 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800148e:	2027      	movs	r0, #39	@ 0x27
 8001490:	f000 f8ce 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001494:	2004      	movs	r0, #4
 8001496:	f000 f8cb 	bl	8001630 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800149a:	202a      	movs	r0, #42	@ 0x2a
 800149c:	f000 f8bb 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 f8c5 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f8c2 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014ac:	2000      	movs	r0, #0
 80014ae:	f000 f8bf 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80014b2:	20ef      	movs	r0, #239	@ 0xef
 80014b4:	f000 f8bc 	bl	8001630 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80014b8:	202b      	movs	r0, #43	@ 0x2b
 80014ba:	f000 f8ac 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014be:	2000      	movs	r0, #0
 80014c0:	f000 f8b6 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f8b3 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 f8b0 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80014d0:	203f      	movs	r0, #63	@ 0x3f
 80014d2:	f000 f8ad 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80014d6:	20f6      	movs	r0, #246	@ 0xf6
 80014d8:	f000 f89d 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80014dc:	2001      	movs	r0, #1
 80014de:	f000 f8a7 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 f8a4 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80014e8:	2006      	movs	r0, #6
 80014ea:	f000 f8a1 	bl	8001630 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80014ee:	202c      	movs	r0, #44	@ 0x2c
 80014f0:	f000 f891 	bl	8001616 <ili9341_WriteReg>
  LCD_Delay(200);
 80014f4:	20c8      	movs	r0, #200	@ 0xc8
 80014f6:	f000 fc8b 	bl	8001e10 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80014fa:	2026      	movs	r0, #38	@ 0x26
 80014fc:	f000 f88b 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001500:	2001      	movs	r0, #1
 8001502:	f000 f895 	bl	8001630 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001506:	20e0      	movs	r0, #224	@ 0xe0
 8001508:	f000 f885 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800150c:	200f      	movs	r0, #15
 800150e:	f000 f88f 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001512:	2029      	movs	r0, #41	@ 0x29
 8001514:	f000 f88c 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001518:	2024      	movs	r0, #36	@ 0x24
 800151a:	f000 f889 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800151e:	200c      	movs	r0, #12
 8001520:	f000 f886 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001524:	200e      	movs	r0, #14
 8001526:	f000 f883 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800152a:	2009      	movs	r0, #9
 800152c:	f000 f880 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001530:	204e      	movs	r0, #78	@ 0x4e
 8001532:	f000 f87d 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001536:	2078      	movs	r0, #120	@ 0x78
 8001538:	f000 f87a 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800153c:	203c      	movs	r0, #60	@ 0x3c
 800153e:	f000 f877 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001542:	2009      	movs	r0, #9
 8001544:	f000 f874 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001548:	2013      	movs	r0, #19
 800154a:	f000 f871 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800154e:	2005      	movs	r0, #5
 8001550:	f000 f86e 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001554:	2017      	movs	r0, #23
 8001556:	f000 f86b 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800155a:	2011      	movs	r0, #17
 800155c:	f000 f868 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001560:	2000      	movs	r0, #0
 8001562:	f000 f865 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001566:	20e1      	movs	r0, #225	@ 0xe1
 8001568:	f000 f855 	bl	8001616 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f85f 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001572:	2016      	movs	r0, #22
 8001574:	f000 f85c 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001578:	201b      	movs	r0, #27
 800157a:	f000 f859 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800157e:	2004      	movs	r0, #4
 8001580:	f000 f856 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001584:	2011      	movs	r0, #17
 8001586:	f000 f853 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800158a:	2007      	movs	r0, #7
 800158c:	f000 f850 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001590:	2031      	movs	r0, #49	@ 0x31
 8001592:	f000 f84d 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001596:	2033      	movs	r0, #51	@ 0x33
 8001598:	f000 f84a 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800159c:	2042      	movs	r0, #66	@ 0x42
 800159e:	f000 f847 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80015a2:	2005      	movs	r0, #5
 80015a4:	f000 f844 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80015a8:	200c      	movs	r0, #12
 80015aa:	f000 f841 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80015ae:	200a      	movs	r0, #10
 80015b0:	f000 f83e 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80015b4:	2028      	movs	r0, #40	@ 0x28
 80015b6:	f000 f83b 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80015ba:	202f      	movs	r0, #47	@ 0x2f
 80015bc:	f000 f838 	bl	8001630 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80015c0:	200f      	movs	r0, #15
 80015c2:	f000 f835 	bl	8001630 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80015c6:	2011      	movs	r0, #17
 80015c8:	f000 f825 	bl	8001616 <ili9341_WriteReg>
  LCD_Delay(200);
 80015cc:	20c8      	movs	r0, #200	@ 0xc8
 80015ce:	f000 fc1f 	bl	8001e10 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80015d2:	2029      	movs	r0, #41	@ 0x29
 80015d4:	f000 f81f 	bl	8001616 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80015d8:	202c      	movs	r0, #44	@ 0x2c
 80015da:	f000 f81c 	bl	8001616 <ili9341_WriteReg>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80015e6:	f000 fb25 	bl	8001c34 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80015ea:	2103      	movs	r1, #3
 80015ec:	20d3      	movs	r0, #211	@ 0xd3
 80015ee:	f000 f82c 	bl	800164a <ili9341_ReadData>
 80015f2:	4603      	mov	r3, r0
 80015f4:	b29b      	uxth	r3, r3
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	bd80      	pop	{r7, pc}

080015fa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80015fe:	2029      	movs	r0, #41	@ 0x29
 8001600:	f000 f809 	bl	8001616 <ili9341_WriteReg>
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800160c:	2028      	movs	r0, #40	@ 0x28
 800160e:	f000 f802 	bl	8001616 <ili9341_WriteReg>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}

08001616 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fba0 	bl	8001d68 <LCD_IO_WriteReg>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fb71 	bl	8001d24 <LCD_IO_WriteData>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	460a      	mov	r2, r1
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4613      	mov	r3, r2
 8001658:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800165a:	797a      	ldrb	r2, [r7, #5]
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fba3 	bl	8001dac <LCD_IO_ReadData>
 8001666:	4603      	mov	r3, r0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001674:	23f0      	movs	r3, #240	@ 0xf0
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001684:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001688:	4618      	mov	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80016a0:	f000 fbc2 	bl	8001e28 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80016aa:	f107 030f 	add.w	r3, r7, #15
 80016ae:	2201      	movs	r2, #1
 80016b0:	2120      	movs	r1, #32
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fc04 	bl	8001ec0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80016c2:	f107 030f 	add.w	r3, r7, #15
 80016c6:	2201      	movs	r2, #1
 80016c8:	2123      	movs	r1, #35	@ 0x23
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fbf8 	bl	8001ec0 <GYRO_IO_Write>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80016ec:	f000 fb9c 	bl	8001e28 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80016f0:	1dfb      	adds	r3, r7, #7
 80016f2:	2201      	movs	r2, #1
 80016f4:	210f      	movs	r1, #15
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fc14 	bl	8001f24 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800170c:	1dfb      	adds	r3, r7, #7
 800170e:	2201      	movs	r2, #1
 8001710:	2124      	movs	r1, #36	@ 0x24
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fc06 	bl	8001f24 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800171e:	b2db      	uxtb	r3, r3
 8001720:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	2201      	movs	r2, #1
 8001726:	2124      	movs	r1, #36	@ 0x24
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fbc9 	bl	8001ec0 <GYRO_IO_Write>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800174a:	f107 030f 	add.w	r3, r7, #15
 800174e:	2201      	movs	r2, #1
 8001750:	2120      	movs	r1, #32
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fbb4 	bl	8001ec0 <GYRO_IO_Write>
}
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	2300      	movs	r3, #0
 8001770:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001772:	f107 030f 	add.w	r3, r7, #15
 8001776:	2201      	movs	r2, #1
 8001778:	2130      	movs	r1, #48	@ 0x30
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fbd2 	bl	8001f24 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001780:	f107 030e 	add.w	r3, r7, #14
 8001784:	2201      	movs	r2, #1
 8001786:	2122      	movs	r1, #34	@ 0x22
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fbcb 	bl	8001f24 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001794:	b2db      	uxtb	r3, r3
 8001796:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	121b      	asrs	r3, r3, #8
 800179e:	b25a      	sxtb	r2, r3
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	4313      	orrs	r3, r2
 80017a6:	b25b      	sxtb	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	f023 0320 	bic.w	r3, r3, #32
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	7bbb      	ldrb	r3, [r7, #14]
 80017bc:	4313      	orrs	r3, r2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80017c2:	f107 030f 	add.w	r3, r7, #15
 80017c6:	2201      	movs	r2, #1
 80017c8:	2130      	movs	r1, #48	@ 0x30
 80017ca:	4618      	mov	r0, r3
 80017cc:	f000 fb78 	bl	8001ec0 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80017d0:	f107 030e 	add.w	r3, r7, #14
 80017d4:	2201      	movs	r2, #1
 80017d6:	2122      	movs	r1, #34	@ 0x22
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 fb71 	bl	8001ec0 <GYRO_IO_Write>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80017f0:	f107 030f 	add.w	r3, r7, #15
 80017f4:	2201      	movs	r2, #1
 80017f6:	2122      	movs	r1, #34	@ 0x22
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fb93 	bl	8001f24 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10a      	bne.n	800181a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800180a:	b2db      	uxtb	r3, r3
 800180c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001814:	b2db      	uxtb	r3, r3
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e00c      	b.n	8001834 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d109      	bne.n	8001834 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	f023 0308 	bic.w	r3, r3, #8
 8001826:	b2db      	uxtb	r3, r3
 8001828:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001834:	f107 030f 	add.w	r3, r7, #15
 8001838:	2201      	movs	r2, #1
 800183a:	2122      	movs	r1, #34	@ 0x22
 800183c:	4618      	mov	r0, r3
 800183e:	f000 fb3f 	bl	8001ec0 <GYRO_IO_Write>
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001854:	f107 030f 	add.w	r3, r7, #15
 8001858:	2201      	movs	r2, #1
 800185a:	2122      	movs	r1, #34	@ 0x22
 800185c:	4618      	mov	r0, r3
 800185e:	f000 fb61 	bl	8001f24 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d107      	bne.n	8001878 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800186e:	b2db      	uxtb	r3, r3
 8001870:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	73fb      	strb	r3, [r7, #15]
 8001876:	e009      	b.n	800188c <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d106      	bne.n	800188c <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	f023 0308 	bic.w	r3, r3, #8
 8001884:	b2db      	uxtb	r3, r3
 8001886:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800188c:	f107 030f 	add.w	r3, r7, #15
 8001890:	2201      	movs	r2, #1
 8001892:	2122      	movs	r1, #34	@ 0x22
 8001894:	4618      	mov	r0, r3
 8001896:	f000 fb13 	bl	8001ec0 <GYRO_IO_Write>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018ac:	f107 030f 	add.w	r3, r7, #15
 80018b0:	2201      	movs	r2, #1
 80018b2:	2121      	movs	r1, #33	@ 0x21
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 fb35 	bl	8001f24 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80018c4:	7bfa      	ldrb	r2, [r7, #15]
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80018ce:	f107 030f 	add.w	r3, r7, #15
 80018d2:	2201      	movs	r2, #1
 80018d4:	2121      	movs	r1, #33	@ 0x21
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 faf2 	bl	8001ec0 <GYRO_IO_Write>
}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80018ee:	f107 030f 	add.w	r3, r7, #15
 80018f2:	2201      	movs	r2, #1
 80018f4:	2124      	movs	r1, #36	@ 0x24
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 fb14 	bl	8001f24 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	f023 0310 	bic.w	r3, r3, #16
 8001902:	b2db      	uxtb	r3, r3
 8001904:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	4313      	orrs	r3, r2
 800190c:	b2db      	uxtb	r3, r3
 800190e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001910:	f107 030f 	add.w	r3, r7, #15
 8001914:	2201      	movs	r2, #1
 8001916:	2124      	movs	r1, #36	@ 0x24
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fad1 	bl	8001ec0 <GYRO_IO_Write>
}
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	@ 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	2300      	movs	r3, #0
 8001936:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001950:	f107 030f 	add.w	r3, r7, #15
 8001954:	2201      	movs	r2, #1
 8001956:	2123      	movs	r1, #35	@ 0x23
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fae3 	bl	8001f24 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800195e:	f107 0318 	add.w	r3, r7, #24
 8001962:	2206      	movs	r2, #6
 8001964:	2128      	movs	r1, #40	@ 0x28
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fadc 	bl	8001f24 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001972:	2b00      	cmp	r3, #0
 8001974:	d121      	bne.n	80019ba <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
 800197a:	e01a      	b.n	80019b2 <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	3301      	adds	r3, #1
 8001982:	3328      	adds	r3, #40	@ 0x28
 8001984:	443b      	add	r3, r7
 8001986:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	b29b      	uxth	r3, r3
 800198e:	6a3a      	ldr	r2, [r7, #32]
 8001990:	0052      	lsls	r2, r2, #1
 8001992:	3228      	adds	r2, #40	@ 0x28
 8001994:	443a      	add	r2, r7
 8001996:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	3328      	adds	r3, #40	@ 0x28
 80019a6:	443b      	add	r3, r7
 80019a8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80019ac:	6a3b      	ldr	r3, [r7, #32]
 80019ae:	3301      	adds	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	dde1      	ble.n	800197c <L3GD20_ReadXYZAngRate+0x54>
 80019b8:	e020      	b.n	80019fc <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
 80019be:	e01a      	b.n	80019f6 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	3328      	adds	r3, #40	@ 0x28
 80019c6:	443b      	add	r3, r7
 80019c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	6a3a      	ldr	r2, [r7, #32]
 80019d2:	0052      	lsls	r2, r2, #1
 80019d4:	3201      	adds	r2, #1
 80019d6:	3228      	adds	r2, #40	@ 0x28
 80019d8:	443a      	add	r2, r7
 80019da:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80019de:	4413      	add	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	3328      	adds	r3, #40	@ 0x28
 80019ea:	443b      	add	r3, r7
 80019ec:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	3301      	adds	r3, #1
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	dde1      	ble.n	80019c0 <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d00c      	beq.n	8001a20 <L3GD20_ReadXYZAngRate+0xf8>
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	dc0d      	bgt.n	8001a26 <L3GD20_ReadXYZAngRate+0xfe>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <L3GD20_ReadXYZAngRate+0xec>
 8001a0e:	2b10      	cmp	r3, #16
 8001a10:	d003      	beq.n	8001a1a <L3GD20_ReadXYZAngRate+0xf2>
 8001a12:	e008      	b.n	8001a26 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <L3GD20_ReadXYZAngRate+0x144>)
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001a18:	e005      	b.n	8001a26 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <L3GD20_ReadXYZAngRate+0x148>)
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001a1e:	e002      	b.n	8001a26 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001a20:	4b14      	ldr	r3, [pc, #80]	@ (8001a74 <L3GD20_ReadXYZAngRate+0x14c>)
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 8001a24:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	e016      	b.n	8001a5a <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	3328      	adds	r3, #40	@ 0x28
 8001a32:	443b      	add	r3, r7
 8001a34:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001a38:	ee07 3a90 	vmov	s15, r3
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	3301      	adds	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	dde5      	ble.n	8001a2c <L3GD20_ReadXYZAngRate+0x104>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	410c0000 	.word	0x410c0000
 8001a70:	418c0000 	.word	0x418c0000
 8001a74:	428c0000 	.word	0x428c0000

08001a78 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a7c:	4819      	ldr	r0, [pc, #100]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001a7e:	f005 f96f 	bl	8006d60 <HAL_SPI_GetState>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d12b      	bne.n	8001ae0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001a8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <SPIx_Init+0x70>)
 8001a8c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001a90:	2218      	movs	r2, #24
 8001a92:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001a94:	4b13      	ldr	r3, [pc, #76]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001aac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001aae:	2207      	movs	r2, #7
 8001ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ac4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001ace:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ad2:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001ad4:	4803      	ldr	r0, [pc, #12]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001ad6:	f000 f873 	bl	8001bc0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001ada:	4802      	ldr	r0, [pc, #8]	@ (8001ae4 <SPIx_Init+0x6c>)
 8001adc:	f004 fc75 	bl	80063ca <HAL_SPI_Init>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000027c 	.word	0x2000027c
 8001ae8:	40015000 	.word	0x40015000

08001aec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <SPIx_Read+0x38>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f107 0108 	add.w	r1, r7, #8
 8001b06:	4808      	ldr	r0, [pc, #32]	@ (8001b28 <SPIx_Read+0x3c>)
 8001b08:	f004 fe68 	bl	80067dc <HAL_SPI_Receive>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b16:	f000 f847 	bl	8001ba8 <SPIx_Error>
  }

  return readvalue;
 8001b1a:	68bb      	ldr	r3, [r7, #8]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000070 	.word	0x20000070
 8001b28:	2000027c 	.word	0x2000027c

08001b2c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <SPIx_Write+0x34>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	1db9      	adds	r1, r7, #6
 8001b40:	2201      	movs	r2, #1
 8001b42:	4808      	ldr	r0, [pc, #32]	@ (8001b64 <SPIx_Write+0x38>)
 8001b44:	f004 fd06 	bl	8006554 <HAL_SPI_Transmit>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b52:	f000 f829 	bl	8001ba8 <SPIx_Error>
  }
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000070 	.word	0x20000070
 8001b64:	2000027c 	.word	0x2000027c

08001b68 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <SPIx_WriteRead+0x38>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f107 020f 	add.w	r2, r7, #15
 8001b7e:	1df9      	adds	r1, r7, #7
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2301      	movs	r3, #1
 8001b84:	4807      	ldr	r0, [pc, #28]	@ (8001ba4 <SPIx_WriteRead+0x3c>)
 8001b86:	f004 ff42 	bl	8006a0e <HAL_SPI_TransmitReceive>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001b90:	f000 f80a 	bl	8001ba8 <SPIx_Error>
  }

  return receivedbyte;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000070 	.word	0x20000070
 8001ba4:	2000027c 	.word	0x2000027c

08001ba8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <SPIx_Error+0x14>)
 8001bae:	f004 fc95 	bl	80064dc <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001bb2:	f7ff ff61 	bl	8001a78 <SPIx_Init>
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000027c 	.word	0x2000027c

08001bc0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	4b17      	ldr	r3, [pc, #92]	@ (8001c2c <SPIx_MspInit+0x6c>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <SPIx_MspInit+0x6c>)
 8001bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd8:	4b14      	ldr	r3, [pc, #80]	@ (8001c2c <SPIx_MspInit+0x6c>)
 8001bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001be4:	2300      	movs	r3, #0
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	4b10      	ldr	r3, [pc, #64]	@ (8001c2c <SPIx_MspInit+0x6c>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <SPIx_MspInit+0x6c>)
 8001bee:	f043 0320 	orr.w	r3, r3, #32
 8001bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <SPIx_MspInit+0x6c>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001c00:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c12:	2305      	movs	r3, #5
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4804      	ldr	r0, [pc, #16]	@ (8001c30 <SPIx_MspInit+0x70>)
 8001c1e:	f001 fdd1 	bl	80037c4 <HAL_GPIO_Init>
}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	@ 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40021400 	.word	0x40021400

08001c34 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <LCD_IO_Init+0xe0>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d164      	bne.n	8001d0c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c42:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <LCD_IO_Init+0xe0>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	4b32      	ldr	r3, [pc, #200]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	4a31      	ldr	r2, [pc, #196]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c58:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c76:	f107 030c 	add.w	r3, r7, #12
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4827      	ldr	r0, [pc, #156]	@ (8001d1c <LCD_IO_Init+0xe8>)
 8001c7e:	f001 fda1 	bl	80037c4 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b24      	ldr	r3, [pc, #144]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b21      	ldr	r3, [pc, #132]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4819      	ldr	r0, [pc, #100]	@ (8001d1c <LCD_IO_Init+0xe8>)
 8001cb8:	f001 fd84 	bl	80037c4 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <LCD_IO_Init+0xe4>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	603b      	str	r3, [r7, #0]
 8001cd6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <LCD_IO_Init+0xec>)
 8001cf0:	f001 fd68 	bl	80037c4 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	4809      	ldr	r0, [pc, #36]	@ (8001d20 <LCD_IO_Init+0xec>)
 8001cfa:	f001 ff0f 	bl	8003b1c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001cfe:	2201      	movs	r2, #1
 8001d00:	2104      	movs	r1, #4
 8001d02:	4807      	ldr	r0, [pc, #28]	@ (8001d20 <LCD_IO_Init+0xec>)
 8001d04:	f001 ff0a 	bl	8003b1c <HAL_GPIO_WritePin>

    SPIx_Init();
 8001d08:	f7ff feb6 	bl	8001a78 <SPIx_Init>
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	200002d4 	.word	0x200002d4
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020c00 	.word	0x40020c00
 8001d20:	40020800 	.word	0x40020800

08001d24 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d34:	480a      	ldr	r0, [pc, #40]	@ (8001d60 <LCD_IO_WriteData+0x3c>)
 8001d36:	f001 fef1 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <LCD_IO_WriteData+0x40>)
 8001d40:	f001 feec 	bl	8003b1c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fef0 	bl	8001b2c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2104      	movs	r1, #4
 8001d50:	4804      	ldr	r0, [pc, #16]	@ (8001d64 <LCD_IO_WriteData+0x40>)
 8001d52:	f001 fee3 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40020800 	.word	0x40020800

08001d68 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d78:	480a      	ldr	r0, [pc, #40]	@ (8001da4 <LCD_IO_WriteReg+0x3c>)
 8001d7a:	f001 fecf 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2104      	movs	r1, #4
 8001d82:	4809      	ldr	r0, [pc, #36]	@ (8001da8 <LCD_IO_WriteReg+0x40>)
 8001d84:	f001 feca 	bl	8003b1c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001d88:	79fb      	ldrb	r3, [r7, #7]
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fecd 	bl	8001b2c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d92:	2201      	movs	r2, #1
 8001d94:	2104      	movs	r1, #4
 8001d96:	4804      	ldr	r0, [pc, #16]	@ (8001da8 <LCD_IO_WriteReg+0x40>)
 8001d98:	f001 fec0 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40020c00 	.word	0x40020c00
 8001da8:	40020800 	.word	0x40020800

08001dac <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	4613      	mov	r3, r2
 8001dba:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4810      	ldr	r0, [pc, #64]	@ (8001e08 <LCD_IO_ReadData+0x5c>)
 8001dc6:	f001 fea9 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dd0:	480e      	ldr	r0, [pc, #56]	@ (8001e0c <LCD_IO_ReadData+0x60>)
 8001dd2:	f001 fea3 	bl	8003b1c <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fea7 	bl	8001b2c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001dde:	797b      	ldrb	r3, [r7, #5]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fe83 	bl	8001aec <SPIx_Read>
 8001de6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001de8:	2201      	movs	r2, #1
 8001dea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dee:	4807      	ldr	r0, [pc, #28]	@ (8001e0c <LCD_IO_ReadData+0x60>)
 8001df0:	f001 fe94 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001df4:	2201      	movs	r2, #1
 8001df6:	2104      	movs	r1, #4
 8001df8:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <LCD_IO_ReadData+0x5c>)
 8001dfa:	f001 fe8f 	bl	8003b1c <HAL_GPIO_WritePin>

  return readvalue;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020c00 	.word	0x40020c00

08001e10 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 ff79 	bl	8002d10 <HAL_Delay>
}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <GYRO_IO_Init+0x8c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb4 <GYRO_IO_Init+0x8c>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <GYRO_IO_Init+0x8c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001e56:	2301      	movs	r3, #1
 8001e58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4815      	ldr	r0, [pc, #84]	@ (8001eb8 <GYRO_IO_Init+0x90>)
 8001e62:	f001 fcaf 	bl	80037c4 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8001e66:	2201      	movs	r2, #1
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4813      	ldr	r0, [pc, #76]	@ (8001eb8 <GYRO_IO_Init+0x90>)
 8001e6c:	f001 fe56 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb4 <GYRO_IO_Init+0x8c>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e78:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <GYRO_IO_Init+0x8c>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e80:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb4 <GYRO_IO_Init+0x8c>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001e8c:	2306      	movs	r3, #6
 8001e8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001e9c:	f107 030c 	add.w	r3, r7, #12
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	@ (8001ebc <GYRO_IO_Init+0x94>)
 8001ea4:	f001 fc8e 	bl	80037c4 <HAL_GPIO_Init>

  SPIx_Init();
 8001ea8:	f7ff fde6 	bl	8001a78 <SPIx_Init>
}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 8001ed0:	883b      	ldrh	r3, [r7, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d903      	bls.n	8001ede <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001edc:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	480f      	ldr	r0, [pc, #60]	@ (8001f20 <GYRO_IO_Write+0x60>)
 8001ee4:	f001 fe1a 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fe3c 	bl	8001b68 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 8001ef0:	e00a      	b.n	8001f08 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe36 	bl	8001b68 <SPIx_WriteRead>
    NumByteToWrite--;
 8001efc:	883b      	ldrh	r3, [r7, #0]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3301      	adds	r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f1      	bne.n	8001ef2 <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2102      	movs	r1, #2
 8001f12:	4803      	ldr	r0, [pc, #12]	@ (8001f20 <GYRO_IO_Write+0x60>)
 8001f14:	f001 fe02 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40020800 	.word	0x40020800

08001f24 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
 8001f30:	4613      	mov	r3, r2
 8001f32:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 8001f34:	883b      	ldrh	r3, [r7, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d904      	bls.n	8001f44 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001f40:	70fb      	strb	r3, [r7, #3]
 8001f42:	e003      	b.n	8001f4c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f4a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4810      	ldr	r0, [pc, #64]	@ (8001f94 <GYRO_IO_Read+0x70>)
 8001f52:	f001 fde3 	bl	8003b1c <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fe05 	bl	8001b68 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 8001f5e:	e00c      	b.n	8001f7a <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff fe01 	bl	8001b68 <SPIx_WriteRead>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001f6e:	883b      	ldrh	r3, [r7, #0]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3301      	adds	r3, #1
 8001f78:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8001f7a:	883b      	ldrh	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ef      	bne.n	8001f60 <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 8001f80:	2201      	movs	r2, #1
 8001f82:	2102      	movs	r1, #2
 8001f84:	4803      	ldr	r0, [pc, #12]	@ (8001f94 <GYRO_IO_Read+0x70>)
 8001f86:	f001 fdc9 	bl	8003b1c <HAL_GPIO_WritePin>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40020800 	.word	0x40020800

08001f98 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	703b      	strb	r3, [r7, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001fae:	4b2b      	ldr	r3, [pc, #172]	@ (800205c <BSP_GYRO_Init+0xc4>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	4798      	blx	r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2bd4      	cmp	r3, #212	@ 0xd4
 8001fb8:	d005      	beq.n	8001fc6 <BSP_GYRO_Init+0x2e>
 8001fba:	4b28      	ldr	r3, [pc, #160]	@ (800205c <BSP_GYRO_Init+0xc4>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4798      	blx	r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2bd5      	cmp	r3, #213	@ 0xd5
 8001fc4:	d144      	bne.n	8002050 <BSP_GYRO_Init+0xb8>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	@ (8002060 <BSP_GYRO_Init+0xc8>)
 8001fc8:	4a24      	ldr	r2, [pc, #144]	@ (800205c <BSP_GYRO_Init+0xc4>)
 8001fca:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8001fcc:	2308      	movs	r3, #8
 8001fce:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8001fd8:	2330      	movs	r3, #48	@ 0x30
 8001fda:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001fe8:	793a      	ldrb	r2, [r7, #4]
 8001fea:	797b      	ldrb	r3, [r7, #5]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001ff0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8001ffe:	7a3a      	ldrb	r2, [r7, #8]
 8002000:	7a7b      	ldrb	r3, [r7, #9]
 8002002:	4313      	orrs	r3, r2
 8002004:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002006:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002008:	4313      	orrs	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	b29a      	uxth	r2, r3
 8002010:	89bb      	ldrh	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <BSP_GYRO_Init+0xc8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	89ba      	ldrh	r2, [r7, #12]
 800201e:	4610      	mov	r0, r2
 8002020:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002022:	2300      	movs	r3, #0
 8002024:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002026:	2300      	movs	r3, #0
 8002028:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800202a:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800202c:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 800202e:	4313      	orrs	r3, r2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002034:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <BSP_GYRO_Init+0xc8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800203a:	89ba      	ldrh	r2, [r7, #12]
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	4610      	mov	r0, r2
 8002040:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <BSP_GYRO_Init+0xc8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002048:	2010      	movs	r0, #16
 800204a:	4798      	blx	r3

    ret = GYRO_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002050:	7bfb      	ldrb	r3, [r7, #15]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000003c 	.word	0x2000003c
 8002060:	200002d8 	.word	0x200002d8

08002064 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <BSP_GYRO_GetXYZ+0x24>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	2b00      	cmp	r3, #0
 8002074:	d004      	beq.n	8002080 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002076:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <BSP_GYRO_GetXYZ+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
  }
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	200002d8 	.word	0x200002d8

0800208c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <BSP_LCD_Init+0xbc>)
 8002092:	4a2e      	ldr	r2, [pc, #184]	@ (800214c <BSP_LCD_Init+0xc0>)
 8002094:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002096:	4b2c      	ldr	r3, [pc, #176]	@ (8002148 <BSP_LCD_Init+0xbc>)
 8002098:	2209      	movs	r2, #9
 800209a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800209c:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <BSP_LCD_Init+0xbc>)
 800209e:	2201      	movs	r2, #1
 80020a0:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020a4:	221d      	movs	r2, #29
 80020a6:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80020a8:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020aa:	2203      	movs	r2, #3
 80020ac:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 80020ae:	4b26      	ldr	r3, [pc, #152]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020b0:	f240 120d 	movw	r2, #269	@ 0x10d
 80020b4:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 80020b6:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020b8:	f240 1243 	movw	r2, #323	@ 0x143
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 80020be:	4b22      	ldr	r3, [pc, #136]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020c0:	f240 1217 	movw	r2, #279	@ 0x117
 80020c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 80020c6:	4b20      	ldr	r3, [pc, #128]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020c8:	f240 1247 	movw	r2, #327	@ 0x147
 80020cc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <BSP_LCD_Init+0xbc>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002150 <BSP_LCD_Init+0xc4>)
 80020e8:	2208      	movs	r2, #8
 80020ea:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80020ec:	4b18      	ldr	r3, [pc, #96]	@ (8002150 <BSP_LCD_Init+0xc4>)
 80020ee:	22c0      	movs	r2, #192	@ 0xc0
 80020f0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80020f2:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <BSP_LCD_Init+0xc4>)
 80020f4:	2204      	movs	r2, #4
 80020f6:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80020f8:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <BSP_LCD_Init+0xc4>)
 80020fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020fe:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002100:	4813      	ldr	r0, [pc, #76]	@ (8002150 <BSP_LCD_Init+0xc4>)
 8002102:	f003 ff07 	bl	8005f14 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <BSP_LCD_Init+0xbc>)
 8002108:	2200      	movs	r2, #0
 800210a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800210c:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <BSP_LCD_Init+0xbc>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002112:	4b0d      	ldr	r3, [pc, #52]	@ (8002148 <BSP_LCD_Init+0xbc>)
 8002114:	2200      	movs	r2, #0
 8002116:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <BSP_LCD_Init+0xbc>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 800211e:	f000 fab7 	bl	8002690 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8002122:	4809      	ldr	r0, [pc, #36]	@ (8002148 <BSP_LCD_Init+0xbc>)
 8002124:	f001 fd14 	bl	8003b50 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <BSP_LCD_Init+0xc8>)
 800212a:	4a0b      	ldr	r2, [pc, #44]	@ (8002158 <BSP_LCD_Init+0xcc>)
 800212c:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <BSP_LCD_Init+0xc8>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002136:	f000 fbdf 	bl	80028f8 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800213a:	4808      	ldr	r0, [pc, #32]	@ (800215c <BSP_LCD_Init+0xd0>)
 800213c:	f000 f8ce 	bl	80022dc <BSP_LCD_SetFont>

  return LCD_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200002dc 	.word	0x200002dc
 800214c:	40016800 	.word	0x40016800
 8002150:	200003c4 	.word	0x200003c4
 8002154:	20000410 	.word	0x20000410
 8002158:	20000004 	.word	0x20000004
 800215c:	20000074 	.word	0x20000074

08002160 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <BSP_LCD_GetXSize+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216a:	4798      	blx	r3
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000410 	.word	0x20000410

08002178 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <BSP_LCD_GetYSize+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	4798      	blx	r3
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000410 	.word	0x20000410

08002190 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b090      	sub	sp, #64	@ 0x40
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80021a0:	f7ff ffde 	bl	8002160 <BSP_LCD_GetXSize>
 80021a4:	4603      	mov	r3, r0
 80021a6:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 80021ac:	f7ff ffe4 	bl	8002178 <BSP_LCD_GetYSize>
 80021b0:	4603      	mov	r3, r0
 80021b2:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 80021bc:	23ff      	movs	r3, #255	@ 0xff
 80021be:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80021d6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021da:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80021dc:	2307      	movs	r3, #7
 80021de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80021e0:	f7ff ffbe 	bl	8002160 <BSP_LCD_GetXSize>
 80021e4:	4603      	mov	r3, r0
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80021e8:	f7ff ffc6 	bl	8002178 <BSP_LCD_GetYSize>
 80021ec:	4603      	mov	r3, r0
 80021ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 80021f0:	88fa      	ldrh	r2, [r7, #6]
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4619      	mov	r1, r3
 80021f8:	4814      	ldr	r0, [pc, #80]	@ (800224c <BSP_LCD_LayerDefaultInit+0xbc>)
 80021fa:	f001 fd83 	bl	8003d04 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80021fe:	88fa      	ldrh	r2, [r7, #6]
 8002200:	4913      	ldr	r1, [pc, #76]	@ (8002250 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3304      	adds	r3, #4
 800220e:	f04f 32ff 	mov.w	r2, #4294967295
 8002212:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002214:	88fa      	ldrh	r2, [r7, #6]
 8002216:	490e      	ldr	r1, [pc, #56]	@ (8002250 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	3308      	adds	r3, #8
 8002224:	4a0b      	ldr	r2, [pc, #44]	@ (8002254 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002226:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	4909      	ldr	r1, [pc, #36]	@ (8002250 <BSP_LCD_LayerDefaultInit+0xc0>)
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800223a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800223c:	4803      	ldr	r0, [pc, #12]	@ (800224c <BSP_LCD_LayerDefaultInit+0xbc>)
 800223e:	f001 fd9f 	bl	8003d80 <HAL_LTDC_EnableDither>
}
 8002242:	bf00      	nop
 8002244:	3740      	adds	r7, #64	@ 0x40
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	200002dc 	.word	0x200002dc
 8002250:	200003f8 	.word	0x200003f8
 8002254:	20000074 	.word	0x20000074

08002258 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002260:	4a04      	ldr	r2, [pc, #16]	@ (8002274 <BSP_LCD_SelectLayer+0x1c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200003f4 	.word	0x200003f4

08002278 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <BSP_LCD_SetTextColor+0x28>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4907      	ldr	r1, [pc, #28]	@ (80022a4 <BSP_LCD_SetTextColor+0x2c>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	200003f4 	.word	0x200003f4
 80022a4:	200003f8 	.word	0x200003f8

080022a8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <BSP_LCD_SetBackColor+0x2c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4908      	ldr	r1, [pc, #32]	@ (80022d8 <BSP_LCD_SetBackColor+0x30>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3304      	adds	r3, #4
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	601a      	str	r2, [r3, #0]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	200003f4 	.word	0x200003f4
 80022d8:	200003f8 	.word	0x200003f8

080022dc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80022e4:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <BSP_LCD_SetFont+0x2c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4908      	ldr	r1, [pc, #32]	@ (800230c <BSP_LCD_SetFont+0x30>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3308      	adds	r3, #8
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200003f4 	.word	0x200003f4
 800230c:	200003f8 	.word	0x200003f8

08002310 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002312:	b085      	sub	sp, #20
 8002314:	af02      	add	r7, sp, #8
 8002316:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 8002318:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <BSP_LCD_Clear+0x48>)
 800231a:	681c      	ldr	r4, [r3, #0]
 800231c:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <BSP_LCD_Clear+0x48>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0e      	ldr	r2, [pc, #56]	@ (800235c <BSP_LCD_Clear+0x4c>)
 8002322:	2134      	movs	r1, #52	@ 0x34
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	335c      	adds	r3, #92	@ 0x5c
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461e      	mov	r6, r3
 8002330:	f7ff ff16 	bl	8002160 <BSP_LCD_GetXSize>
 8002334:	4605      	mov	r5, r0
 8002336:	f7ff ff1f 	bl	8002178 <BSP_LCD_GetYSize>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2300      	movs	r3, #0
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	462a      	mov	r2, r5
 8002348:	4631      	mov	r1, r6
 800234a:	4620      	mov	r0, r4
 800234c:	f000 fa9c 	bl	8002888 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002358:	200003f4 	.word	0x200003f4
 800235c:	200002dc 	.word	0x200002dc

08002360 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b08b      	sub	sp, #44	@ 0x2c
 8002364:	af00      	add	r7, sp, #0
 8002366:	4604      	mov	r4, r0
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	80fb      	strh	r3, [r7, #6]
 8002372:	4603      	mov	r3, r0
 8002374:	80bb      	strh	r3, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	807b      	strh	r3, [r7, #2]
 800237a:	4613      	mov	r3, r2
 800237c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 800237e:	2300      	movs	r3, #0
 8002380:	823b      	strh	r3, [r7, #16]
 8002382:	2300      	movs	r3, #0
 8002384:	81fb      	strh	r3, [r7, #14]
 8002386:	2300      	movs	r3, #0
 8002388:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800238a:	2300      	movs	r3, #0
 800238c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800238e:	2300      	movs	r3, #0
 8002390:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002392:	2300      	movs	r3, #0
 8002394:	843b      	strh	r3, [r7, #32]
          yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8002396:	2300      	movs	r3, #0
 8002398:	83fb      	strh	r3, [r7, #30]
 800239a:	2300      	movs	r3, #0
 800239c:	83bb      	strh	r3, [r7, #28]
 800239e:	2300      	movs	r3, #0
 80023a0:	837b      	strh	r3, [r7, #26]
 80023a2:	2300      	movs	r3, #0
 80023a4:	833b      	strh	r3, [r7, #24]
 80023a6:	2300      	movs	r3, #0
 80023a8:	82fb      	strh	r3, [r7, #22]
 80023aa:	2300      	movs	r3, #0
 80023ac:	82bb      	strh	r3, [r7, #20]
          curpixel = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	827b      	strh	r3, [r7, #18]

  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bfb8      	it	lt
 80023bc:	425b      	neglt	r3, r3
 80023be:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80023c0:	883a      	ldrh	r2, [r7, #0]
 80023c2:	88bb      	ldrh	r3, [r7, #4]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bfb8      	it	lt
 80023ca:	425b      	neglt	r3, r3
 80023cc:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80023ce:	88fb      	ldrh	r3, [r7, #6]
 80023d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80023d2:	88bb      	ldrh	r3, [r7, #4]
 80023d4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (X2 >= X1)                 /* The x-values are increasing */
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d304      	bcc.n	80023e8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	843b      	strh	r3, [r7, #32]
 80023e6:	e005      	b.n	80023f4 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80023e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023ec:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 80023ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023f2:	843b      	strh	r3, [r7, #32]
  }

  if (Y2 >= Y1)                 /* The y-values are increasing */
 80023f4:	883a      	ldrh	r2, [r7, #0]
 80023f6:	88bb      	ldrh	r3, [r7, #4]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d304      	bcc.n	8002406 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80023fc:	2301      	movs	r3, #1
 80023fe:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002400:	2301      	movs	r3, #1
 8002402:	83bb      	strh	r3, [r7, #28]
 8002404:	e005      	b.n	8002412 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002406:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800240a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800240c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002410:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002412:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002416:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800241a:	429a      	cmp	r2, r3
 800241c:	db10      	blt.n	8002440 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800241e:	2300      	movs	r3, #0
 8002420:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002422:	2300      	movs	r3, #0
 8002424:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002426:	8a3b      	ldrh	r3, [r7, #16]
 8002428:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800242a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800242e:	0fda      	lsrs	r2, r3, #31
 8002430:	4413      	add	r3, r2
 8002432:	105b      	asrs	r3, r3, #1
 8002434:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800243a:	8a3b      	ldrh	r3, [r7, #16]
 800243c:	82bb      	strh	r3, [r7, #20]
 800243e:	e00f      	b.n	8002460 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002440:	2300      	movs	r3, #0
 8002442:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002444:	2300      	movs	r3, #0
 8002446:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800244c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002450:	0fda      	lsrs	r2, r3, #31
 8002452:	4413      	add	r3, r2
 8002454:	105b      	asrs	r3, r3, #1
 8002456:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002458:	8a3b      	ldrh	r3, [r7, #16]
 800245a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 800245c:	89fb      	ldrh	r3, [r7, #14]
 800245e:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002460:	2300      	movs	r3, #0
 8002462:	827b      	strh	r3, [r7, #18]
 8002464:	e037      	b.n	80024d6 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002466:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8002468:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800246a:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <BSP_LCD_DrawLine+0x18c>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	4c20      	ldr	r4, [pc, #128]	@ (80024f0 <BSP_LCD_DrawLine+0x190>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4423      	add	r3, r4
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	461a      	mov	r2, r3
 800247e:	f000 f9dd 	bl	800283c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002482:	8b3a      	ldrh	r2, [r7, #24]
 8002484:	8afb      	ldrh	r3, [r7, #22]
 8002486:	4413      	add	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800248c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002490:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002494:	429a      	cmp	r2, r3
 8002496:	db0e      	blt.n	80024b6 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002498:	8b3a      	ldrh	r2, [r7, #24]
 800249a:	8b7b      	ldrh	r3, [r7, #26]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	b29b      	uxth	r3, r3
 80024a0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 80024a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80024a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80024a6:	4413      	add	r3, r2
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80024ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024ae:	8bfb      	ldrh	r3, [r7, #30]
 80024b0:	4413      	add	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80024b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80024b8:	8c3b      	ldrh	r3, [r7, #32]
 80024ba:	4413      	add	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80024c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024c2:	8bbb      	ldrh	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80024ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	827b      	strh	r3, [r7, #18]
 80024d6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80024da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	ddc1      	ble.n	8002466 <BSP_LCD_DrawLine+0x106>
  }
}
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	372c      	adds	r7, #44	@ 0x2c
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd90      	pop	{r4, r7, pc}
 80024ec:	200003f4 	.word	0x200003f4
 80024f0:	200003f8 	.word	0x200003f8

080024f4 <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b08b      	sub	sp, #44	@ 0x2c
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4604      	mov	r4, r0
 80024fc:	4608      	mov	r0, r1
 80024fe:	4611      	mov	r1, r2
 8002500:	461a      	mov	r2, r3
 8002502:	4623      	mov	r3, r4
 8002504:	80fb      	strh	r3, [r7, #6]
 8002506:	4603      	mov	r3, r0
 8002508:	80bb      	strh	r3, [r7, #4]
 800250a:	460b      	mov	r3, r1
 800250c:	807b      	strh	r3, [r7, #2]
 800250e:	4613      	mov	r3, r2
 8002510:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8002512:	2300      	movs	r3, #0
 8002514:	823b      	strh	r3, [r7, #16]
 8002516:	2300      	movs	r3, #0
 8002518:	81fb      	strh	r3, [r7, #14]
 800251a:	2300      	movs	r3, #0
 800251c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800251e:	2300      	movs	r3, #0
 8002520:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002522:	2300      	movs	r3, #0
 8002524:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002526:	2300      	movs	r3, #0
 8002528:	843b      	strh	r3, [r7, #32]
          yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800252a:	2300      	movs	r3, #0
 800252c:	83fb      	strh	r3, [r7, #30]
 800252e:	2300      	movs	r3, #0
 8002530:	83bb      	strh	r3, [r7, #28]
 8002532:	2300      	movs	r3, #0
 8002534:	837b      	strh	r3, [r7, #26]
 8002536:	2300      	movs	r3, #0
 8002538:	833b      	strh	r3, [r7, #24]
 800253a:	2300      	movs	r3, #0
 800253c:	82fb      	strh	r3, [r7, #22]
 800253e:	2300      	movs	r3, #0
 8002540:	82bb      	strh	r3, [r7, #20]
          curpixel = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	827b      	strh	r3, [r7, #18]

  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002546:	88ba      	ldrh	r2, [r7, #4]
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bfb8      	it	lt
 8002550:	425b      	neglt	r3, r3
 8002552:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002554:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002556:	883b      	ldrh	r3, [r7, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	bfb8      	it	lt
 800255e:	425b      	neglt	r3, r3
 8002560:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002566:	883b      	ldrh	r3, [r7, #0]
 8002568:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (X2 >= X1)                 /* The x-values are increasing */
 800256a:	88ba      	ldrh	r2, [r7, #4]
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	429a      	cmp	r2, r3
 8002570:	d304      	bcc.n	800257c <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 8002572:	2301      	movs	r3, #1
 8002574:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	843b      	strh	r3, [r7, #32]
 800257a:	e005      	b.n	8002588 <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800257c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002580:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8002582:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002586:	843b      	strh	r3, [r7, #32]
  }

  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002588:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800258a:	883b      	ldrh	r3, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d304      	bcc.n	800259a <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002590:	2301      	movs	r3, #1
 8002592:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002594:	2301      	movs	r3, #1
 8002596:	83bb      	strh	r3, [r7, #28]
 8002598:	e005      	b.n	80025a6 <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800259a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800259e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80025a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025a4:	83bb      	strh	r3, [r7, #28]
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80025a6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80025aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	db10      	blt.n	80025d4 <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80025b2:	2300      	movs	r3, #0
 80025b4:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80025b6:	2300      	movs	r3, #0
 80025b8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80025ba:	8a3b      	ldrh	r3, [r7, #16]
 80025bc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80025be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80025c2:	0fda      	lsrs	r2, r3, #31
 80025c4:	4413      	add	r3, r2
 80025c6:	105b      	asrs	r3, r3, #1
 80025c8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80025ca:	89fb      	ldrh	r3, [r7, #14]
 80025cc:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80025ce:	8a3b      	ldrh	r3, [r7, #16]
 80025d0:	82bb      	strh	r3, [r7, #20]
 80025d2:	e00f      	b.n	80025f4 <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80025d4:	2300      	movs	r3, #0
 80025d6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80025d8:	2300      	movs	r3, #0
 80025da:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80025dc:	89fb      	ldrh	r3, [r7, #14]
 80025de:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80025e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025e4:	0fda      	lsrs	r2, r3, #31
 80025e6:	4413      	add	r3, r2
 80025e8:	105b      	asrs	r3, r3, #1
 80025ea:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80025ec:	8a3b      	ldrh	r3, [r7, #16]
 80025ee:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80025f0:	89fb      	ldrh	r3, [r7, #14]
 80025f2:	82bb      	strh	r3, [r7, #20]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	827b      	strh	r3, [r7, #18]
 80025f8:	e02f      	b.n	800265a <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 80025fa:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 80025fc:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 80025fe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002600:	887a      	ldrh	r2, [r7, #2]
 8002602:	f7ff fead 	bl	8002360 <BSP_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002606:	8b3a      	ldrh	r2, [r7, #24]
 8002608:	8afb      	ldrh	r3, [r7, #22]
 800260a:	4413      	add	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002610:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002614:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002618:	429a      	cmp	r2, r3
 800261a:	db0e      	blt.n	800263a <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 800261c:	8b3a      	ldrh	r2, [r7, #24]
 800261e:	8b7b      	ldrh	r3, [r7, #26]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	b29b      	uxth	r3, r3
 8002624:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002626:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002628:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800262a:	4413      	add	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002630:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002632:	8bfb      	ldrh	r3, [r7, #30]
 8002634:	4413      	add	r3, r2
 8002636:	b29b      	uxth	r3, r3
 8002638:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800263a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800263c:	8c3b      	ldrh	r3, [r7, #32]
 800263e:	4413      	add	r3, r2
 8002640:	b29b      	uxth	r3, r3
 8002642:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002644:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002646:	8bbb      	ldrh	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	b29b      	uxth	r3, r3
 800264c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800264e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002652:	b29b      	uxth	r3, r3
 8002654:	3301      	adds	r3, #1
 8002656:	b29b      	uxth	r3, r3
 8002658:	827b      	strh	r3, [r7, #18]
 800265a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800265e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002662:	429a      	cmp	r2, r3
 8002664:	ddc9      	ble.n	80025fa <BSP_LCD_FillTriangle+0x106>
  }
}
 8002666:	bf00      	nop
 8002668:	bf00      	nop
 800266a:	372c      	adds	r7, #44	@ 0x2c
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}

08002670 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002674:	4b05      	ldr	r3, [pc, #20]	@ (800268c <BSP_LCD_DisplayOn+0x1c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800267e:	4b03      	ldr	r3, [pc, #12]	@ (800268c <BSP_LCD_DisplayOn+0x1c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4798      	blx	r3
  }
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000410 	.word	0x20000410

08002690 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08e      	sub	sp, #56	@ 0x38
 8002694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a60      	ldr	r2, [pc, #384]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a59      	ldr	r2, [pc, #356]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b57      	ldr	r3, [pc, #348]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	4b53      	ldr	r3, [pc, #332]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d6:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80026de:	4b50      	ldr	r3, [pc, #320]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026fa:	4b49      	ldr	r3, [pc, #292]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	4b45      	ldr	r3, [pc, #276]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	4a44      	ldr	r2, [pc, #272]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6313      	str	r3, [r2, #48]	@ 0x30
 8002716:	4b42      	ldr	r3, [pc, #264]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b3e      	ldr	r3, [pc, #248]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	4a3d      	ldr	r2, [pc, #244]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6313      	str	r3, [r2, #48]	@ 0x30
 8002732:	4b3b      	ldr	r3, [pc, #236]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	4b37      	ldr	r3, [pc, #220]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a36      	ldr	r2, [pc, #216]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002748:	f043 0320 	orr.w	r3, r3, #32
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b34      	ldr	r3, [pc, #208]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b30      	ldr	r3, [pc, #192]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a2f      	ldr	r2, [pc, #188]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 8002764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b2d      	ldr	r3, [pc, #180]	@ (8002820 <BSP_LCD_MspInit+0x190>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002776:	f641 0358 	movw	r3, #6232	@ 0x1858
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002784:	2302      	movs	r3, #2
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002788:	230e      	movs	r3, #14
 800278a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800278c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002790:	4619      	mov	r1, r3
 8002792:	4824      	ldr	r0, [pc, #144]	@ (8002824 <BSP_LCD_MspInit+0x194>)
 8002794:	f001 f816 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002798:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800279e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a2:	4619      	mov	r1, r3
 80027a4:	4820      	ldr	r0, [pc, #128]	@ (8002828 <BSP_LCD_MspInit+0x198>)
 80027a6:	f001 f80d 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80027aa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80027b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b4:	4619      	mov	r1, r3
 80027b6:	481d      	ldr	r0, [pc, #116]	@ (800282c <BSP_LCD_MspInit+0x19c>)
 80027b8:	f001 f804 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80027bc:	2348      	movs	r3, #72	@ 0x48
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80027c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027c4:	4619      	mov	r1, r3
 80027c6:	481a      	ldr	r0, [pc, #104]	@ (8002830 <BSP_LCD_MspInit+0x1a0>)
 80027c8:	f000 fffc 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80027cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80027d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d6:	4619      	mov	r1, r3
 80027d8:	4816      	ldr	r0, [pc, #88]	@ (8002834 <BSP_LCD_MspInit+0x1a4>)
 80027da:	f000 fff3 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80027de:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80027e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	4813      	ldr	r0, [pc, #76]	@ (8002838 <BSP_LCD_MspInit+0x1a8>)
 80027ec:	f000 ffea 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80027f0:	2303      	movs	r3, #3
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80027f4:	2309      	movs	r3, #9
 80027f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80027f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027fc:	4619      	mov	r1, r3
 80027fe:	480a      	ldr	r0, [pc, #40]	@ (8002828 <BSP_LCD_MspInit+0x198>)
 8002800:	f000 ffe0 	bl	80037c4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002804:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800280a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800280e:	4619      	mov	r1, r3
 8002810:	4809      	ldr	r0, [pc, #36]	@ (8002838 <BSP_LCD_MspInit+0x1a8>)
 8002812:	f000 ffd7 	bl	80037c4 <HAL_GPIO_Init>
}
 8002816:	bf00      	nop
 8002818:	3738      	adds	r7, #56	@ 0x38
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021400 	.word	0x40021400
 8002838:	40021800 	.word	0x40021800

0800283c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800283c:	b5b0      	push	{r4, r5, r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	603a      	str	r2, [r7, #0]
 8002846:	80fb      	strh	r3, [r7, #6]
 8002848:	460b      	mov	r3, r1
 800284a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <BSP_LCD_DrawPixel+0x44>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0c      	ldr	r2, [pc, #48]	@ (8002884 <BSP_LCD_DrawPixel+0x48>)
 8002852:	2134      	movs	r1, #52	@ 0x34
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	335c      	adds	r3, #92	@ 0x5c
 800285c:	681c      	ldr	r4, [r3, #0]
 800285e:	88bd      	ldrh	r5, [r7, #4]
 8002860:	f7ff fc7e 	bl	8002160 <BSP_LCD_GetXSize>
 8002864:	4603      	mov	r3, r0
 8002866:	fb03 f205 	mul.w	r2, r3, r5
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4423      	add	r3, r4
 8002872:	461a      	mov	r2, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	200003f4 	.word	0x200003f4
 8002884:	200002dc 	.word	0x200002dc

08002888 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <FillBuffer+0x68>)
 8002898:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800289c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800289e:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <FillBuffer+0x68>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80028a4:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <FillBuffer+0x68>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <FillBuffer+0x68>)
 80028ac:	4a11      	ldr	r2, [pc, #68]	@ (80028f4 <FillBuffer+0x6c>)
 80028ae:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80028b0:	480f      	ldr	r0, [pc, #60]	@ (80028f0 <FillBuffer+0x68>)
 80028b2:	f000 fcf1 	bl	8003298 <HAL_DMA2D_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d115      	bne.n	80028e8 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	480c      	ldr	r0, [pc, #48]	@ (80028f0 <FillBuffer+0x68>)
 80028c0:	f000 fe52 	bl	8003568 <HAL_DMA2D_ConfigLayer>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10e      	bne.n	80028e8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69f9      	ldr	r1, [r7, #28]
 80028d4:	4806      	ldr	r0, [pc, #24]	@ (80028f0 <FillBuffer+0x68>)
 80028d6:	f000 fd32 	bl	800333e <HAL_DMA2D_Start>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d103      	bne.n	80028e8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80028e0:	210a      	movs	r1, #10
 80028e2:	4803      	ldr	r0, [pc, #12]	@ (80028f0 <FillBuffer+0x68>)
 80028e4:	f000 fd56 	bl	8003394 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80028e8:	bf00      	nop
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20000384 	.word	0x20000384
 80028f4:	4002b000 	.word	0x4002b000

080028f8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80028fc:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 80028fe:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <BSP_SDRAM_Init+0xb0>)
 8002900:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002902:	4b2a      	ldr	r3, [pc, #168]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 8002904:	2202      	movs	r2, #2
 8002906:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002908:	4b28      	ldr	r3, [pc, #160]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 800290a:	2207      	movs	r2, #7
 800290c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800290e:	4b27      	ldr	r3, [pc, #156]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 8002910:	2204      	movs	r2, #4
 8002912:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002914:	4b25      	ldr	r3, [pc, #148]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 8002916:	2207      	movs	r2, #7
 8002918:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800291a:	4b24      	ldr	r3, [pc, #144]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 800291c:	2202      	movs	r2, #2
 800291e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002920:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 8002922:	2202      	movs	r2, #2
 8002924:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002926:	4b21      	ldr	r3, [pc, #132]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 8002928:	2202      	movs	r2, #2
 800292a:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800292c:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 800292e:	2201      	movs	r2, #1
 8002930:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002932:	4b1c      	ldr	r3, [pc, #112]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002938:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 800293a:	2204      	movs	r2, #4
 800293c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800293e:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002940:	2210      	movs	r2, #16
 8002942:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002946:	2240      	movs	r2, #64	@ 0x40
 8002948:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800294a:	4b16      	ldr	r3, [pc, #88]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 800294c:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002950:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002952:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002954:	2200      	movs	r2, #0
 8002956:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002958:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 800295a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800295e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002960:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002966:	4b0f      	ldr	r3, [pc, #60]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002968:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800296e:	2100      	movs	r1, #0
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 8002972:	f000 f87f 	bl	8002a74 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002976:	490d      	ldr	r1, [pc, #52]	@ (80029ac <BSP_SDRAM_Init+0xb4>)
 8002978:	480a      	ldr	r0, [pc, #40]	@ (80029a4 <BSP_SDRAM_Init+0xac>)
 800297a:	f003 fc8b 	bl	8006294 <HAL_SDRAM_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002984:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <BSP_SDRAM_Init+0xb8>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e002      	b.n	8002992 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <BSP_SDRAM_Init+0xb8>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002992:	f240 506a 	movw	r0, #1386	@ 0x56a
 8002996:	f000 f80d 	bl	80029b4 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 800299a:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <BSP_SDRAM_Init+0xb8>)
 800299c:	781b      	ldrb	r3, [r3, #0]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000414 	.word	0x20000414
 80029a8:	a0000140 	.word	0xa0000140
 80029ac:	20000448 	.word	0x20000448
 80029b0:	2000007c 	.word	0x2000007c

080029b4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80029c0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029c6:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029c8:	2208      	movs	r2, #8
 80029ca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029cc:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029d2:	4b26      	ldr	r3, [pc, #152]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80029d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029dc:	4923      	ldr	r1, [pc, #140]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029de:	4824      	ldr	r0, [pc, #144]	@ (8002a70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80029e0:	f003 fc96 	bl	8006310 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80029e4:	2001      	movs	r0, #1
 80029e6:	f000 f993 	bl	8002d10 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80029ea:	4b20      	ldr	r3, [pc, #128]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029ec:	2202      	movs	r2, #2
 80029ee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80029f0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f2:	2208      	movs	r2, #8
 80029f4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80029f6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a06:	4919      	ldr	r1, [pc, #100]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a08:	4819      	ldr	r0, [pc, #100]	@ (8002a70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a0a:	f003 fc81 	bl	8006310 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a10:	2203      	movs	r2, #3
 8002a12:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a16:	2208      	movs	r2, #8
 8002a18:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002a20:	4b12      	ldr	r3, [pc, #72]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a2a:	4910      	ldr	r1, [pc, #64]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a2c:	4810      	ldr	r0, [pc, #64]	@ (8002a70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a2e:	f003 fc6f 	bl	8006310 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002a32:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8002a36:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a40:	2208      	movs	r2, #8
 8002a42:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002a44:	4b09      	ldr	r3, [pc, #36]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a4e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002a50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a54:	4905      	ldr	r1, [pc, #20]	@ (8002a6c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002a56:	4806      	ldr	r0, [pc, #24]	@ (8002a70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a58:	f003 fc5a 	bl	8006310 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4804      	ldr	r0, [pc, #16]	@ (8002a70 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002a60:	f003 fc8b 	bl	800637a <HAL_SDRAM_ProgramRefreshRate>
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000464 	.word	0x20000464
 8002a70:	20000414 	.word	0x20000414

08002a74 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b090      	sub	sp, #64	@ 0x40
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80ec 	beq.w	8002c5e <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a8a:	4b77      	ldr	r3, [pc, #476]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8e:	4a76      	ldr	r2, [pc, #472]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a96:	4b74      	ldr	r3, [pc, #464]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa6:	4b70      	ldr	r3, [pc, #448]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	4a6f      	ldr	r2, [pc, #444]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002aac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	4b69      	ldr	r3, [pc, #420]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a68      	ldr	r2, [pc, #416]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b66      	ldr	r3, [pc, #408]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	4b62      	ldr	r3, [pc, #392]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	4a61      	ldr	r2, [pc, #388]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aea:	4b5f      	ldr	r3, [pc, #380]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	4b5b      	ldr	r3, [pc, #364]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	4a5a      	ldr	r2, [pc, #360]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b00:	f043 0308 	orr.w	r3, r3, #8
 8002b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b06:	4b58      	ldr	r3, [pc, #352]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	4b54      	ldr	r3, [pc, #336]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	4a53      	ldr	r2, [pc, #332]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b1c:	f043 0310 	orr.w	r3, r3, #16
 8002b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b22:	4b51      	ldr	r3, [pc, #324]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	617b      	str	r3, [r7, #20]
 8002b2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	4b4d      	ldr	r3, [pc, #308]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a4c      	ldr	r2, [pc, #304]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b38:	f043 0320 	orr.w	r3, r3, #32
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b46      	ldr	r3, [pc, #280]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a45      	ldr	r2, [pc, #276]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <BSP_SDRAM_MspInit+0x1f4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002b66:	2302      	movs	r3, #2
 8002b68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002b72:	230c      	movs	r3, #12
 8002b74:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002b76:	2360      	movs	r3, #96	@ 0x60
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b7e:	4619      	mov	r1, r3
 8002b80:	483a      	ldr	r0, [pc, #232]	@ (8002c6c <BSP_SDRAM_MspInit+0x1f8>)
 8002b82:	f000 fe1f 	bl	80037c4 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002b86:	2301      	movs	r3, #1
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4837      	ldr	r0, [pc, #220]	@ (8002c70 <BSP_SDRAM_MspInit+0x1fc>)
 8002b92:	f000 fe17 	bl	80037c4 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002b96:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4834      	ldr	r0, [pc, #208]	@ (8002c74 <BSP_SDRAM_MspInit+0x200>)
 8002ba4:	f000 fe0e 	bl	80037c4 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ba8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002bae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4830      	ldr	r0, [pc, #192]	@ (8002c78 <BSP_SDRAM_MspInit+0x204>)
 8002bb6:	f000 fe05 	bl	80037c4 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8002bba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	482d      	ldr	r0, [pc, #180]	@ (8002c7c <BSP_SDRAM_MspInit+0x208>)
 8002bc8:	f000 fdfc 	bl	80037c4 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002bcc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4829      	ldr	r0, [pc, #164]	@ (8002c80 <BSP_SDRAM_MspInit+0x20c>)
 8002bda:	f000 fdf3 	bl	80037c4 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002bde:	4b29      	ldr	r3, [pc, #164]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002be4:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002bea:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002bec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bf0:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002bf2:	4b24      	ldr	r3, [pc, #144]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002bf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bf8:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002bfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c00:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002c02:	4b20      	ldr	r3, [pc, #128]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c04:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c08:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002c10:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c16:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002c18:	4b1a      	ldr	r3, [pc, #104]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c20:	2203      	movs	r2, #3
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002c24:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002c2a:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002c30:	4b14      	ldr	r3, [pc, #80]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c32:	4a15      	ldr	r2, [pc, #84]	@ (8002c88 <BSP_SDRAM_MspInit+0x214>)
 8002c34:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c3c:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002c42:	4810      	ldr	r0, [pc, #64]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c44:	f000 fa18 	bl	8003078 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002c48:	480e      	ldr	r0, [pc, #56]	@ (8002c84 <BSP_SDRAM_MspInit+0x210>)
 8002c4a:	f000 f967 	bl	8002f1c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	210f      	movs	r1, #15
 8002c52:	2038      	movs	r0, #56	@ 0x38
 8002c54:	f000 f938 	bl	8002ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002c58:	2038      	movs	r0, #56	@ 0x38
 8002c5a:	f000 f951 	bl	8002f00 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002c5e:	bf00      	nop
 8002c60:	3740      	adds	r7, #64	@ 0x40
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40020800 	.word	0x40020800
 8002c74:	40020c00 	.word	0x40020c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40021400 	.word	0x40021400
 8002c80:	40021800 	.word	0x40021800
 8002c84:	20000474 	.word	0x20000474
 8002c88:	40026410 	.word	0x40026410

08002c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ccc <HAL_Init+0x40>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <HAL_Init+0x40>)
 8002ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_Init+0x40>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_Init+0x40>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f000 f8fc 	bl	8002eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cba:	200f      	movs	r0, #15
 8002cbc:	f7fe fa2a 	bl	8001114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc0:	f7fe f9fc 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023c00 	.word	0x40023c00

08002cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_IncTick+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_IncTick+0x24>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <HAL_IncTick+0x24>)
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000084 	.word	0x20000084
 8002cf4:	200004d4 	.word	0x200004d4

08002cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_GetTick+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	200004d4 	.word	0x200004d4

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff ffee 	bl	8002cf8 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffde 	bl	8002cf8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000084 	.word	0x20000084

08002d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6e:	68ba      	ldr	r2, [r7, #8]
 8002d70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d74:	4013      	ands	r3, r2
 8002d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d8a:	4a04      	ldr	r2, [pc, #16]	@ (8002d9c <__NVIC_SetPriorityGrouping+0x44>)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	60d3      	str	r3, [r2, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <__NVIC_GetPriorityGrouping+0x18>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	0a1b      	lsrs	r3, r3, #8
 8002daa:	f003 0307 	and.w	r3, r3, #7
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	db0b      	blt.n	8002de6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	f003 021f 	and.w	r2, r3, #31
 8002dd4:	4907      	ldr	r1, [pc, #28]	@ (8002df4 <__NVIC_EnableIRQ+0x38>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	2001      	movs	r0, #1
 8002dde:	fa00 f202 	lsl.w	r2, r0, r2
 8002de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000e100 	.word	0xe000e100

08002df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	6039      	str	r1, [r7, #0]
 8002e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	db0a      	blt.n	8002e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	490c      	ldr	r1, [pc, #48]	@ (8002e44 <__NVIC_SetPriority+0x4c>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e20:	e00a      	b.n	8002e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4908      	ldr	r1, [pc, #32]	@ (8002e48 <__NVIC_SetPriority+0x50>)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	440b      	add	r3, r1
 8002e36:	761a      	strb	r2, [r3, #24]
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000e100 	.word	0xe000e100
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b089      	sub	sp, #36	@ 0x24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f1c3 0307 	rsb	r3, r3, #7
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	bf28      	it	cs
 8002e6a:	2304      	movcs	r3, #4
 8002e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3304      	adds	r3, #4
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d902      	bls.n	8002e7c <NVIC_EncodePriority+0x30>
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3b03      	subs	r3, #3
 8002e7a:	e000      	b.n	8002e7e <NVIC_EncodePriority+0x32>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	401a      	ands	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e94:	f04f 31ff 	mov.w	r1, #4294967295
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	43d9      	mvns	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	4313      	orrs	r3, r2
         );
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	@ 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ff4c 	bl	8002d58 <__NVIC_SetPriorityGrouping>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
 8002ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002eda:	f7ff ff61 	bl	8002da0 <__NVIC_GetPriorityGrouping>
 8002ede:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	6978      	ldr	r0, [r7, #20]
 8002ee6:	f7ff ffb1 	bl	8002e4c <NVIC_EncodePriority>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff80 	bl	8002df8 <__NVIC_SetPriority>
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff54 	bl	8002dbc <__NVIC_EnableIRQ>
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f28:	f7ff fee6 	bl	8002cf8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e099      	b.n	800306c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	e00f      	b.n	8002f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5a:	f7ff fecd 	bl	8002cf8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d908      	bls.n	8002f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e078      	b.n	800306c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e8      	bne.n	8002f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <HAL_DMA_Init+0x158>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0307 	bic.w	r3, r3, #7
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b04      	cmp	r3, #4
 800300c:	d117      	bne.n	800303e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8bd 	bl	80031a0 <DMA_CheckFifoParam>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	@ 0x40
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800303a:	2301      	movs	r3, #1
 800303c:	e016      	b.n	800306c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f874 	bl	8003134 <DMA_CalcBaseAndBitshift>
 800304c:	4603      	mov	r3, r0
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	223f      	movs	r2, #63	@ 0x3f
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	f010803f 	.word	0xf010803f

08003078 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e050      	b.n	800312c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d101      	bne.n	800309a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
 8003098:	e048      	b.n	800312c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2200      	movs	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2221      	movs	r2, #33	@ 0x21
 80030d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f82a 	bl	8003134 <DMA_CalcBaseAndBitshift>
 80030e0:	4603      	mov	r3, r0
 80030e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	223f      	movs	r2, #63	@ 0x3f
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3b10      	subs	r3, #16
 8003144:	4a14      	ldr	r2, [pc, #80]	@ (8003198 <DMA_CalcBaseAndBitshift+0x64>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800314e:	4a13      	ldr	r2, [pc, #76]	@ (800319c <DMA_CalcBaseAndBitshift+0x68>)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d909      	bls.n	8003176 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	1d1a      	adds	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	659a      	str	r2, [r3, #88]	@ 0x58
 8003174:	e007      	b.n	8003186 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	aaaaaaab 	.word	0xaaaaaaab
 800319c:	0801085c 	.word	0x0801085c

080031a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d856      	bhi.n	800326e <DMA_CheckFifoParam+0xce>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <DMA_CheckFifoParam+0x28>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	080031d9 	.word	0x080031d9
 80031cc:	080031eb 	.word	0x080031eb
 80031d0:	080031d9 	.word	0x080031d9
 80031d4:	0800326f 	.word	0x0800326f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d046      	beq.n	8003272 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031e8:	e043      	b.n	8003272 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031f2:	d140      	bne.n	8003276 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f8:	e03d      	b.n	8003276 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003202:	d121      	bne.n	8003248 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d837      	bhi.n	800327a <DMA_CheckFifoParam+0xda>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <DMA_CheckFifoParam+0x70>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003221 	.word	0x08003221
 8003214:	08003227 	.word	0x08003227
 8003218:	08003221 	.word	0x08003221
 800321c:	08003239 	.word	0x08003239
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e030      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d025      	beq.n	800327e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003236:	e022      	b.n	800327e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003240:	d11f      	bne.n	8003282 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003246:	e01c      	b.n	8003282 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d903      	bls.n	8003256 <DMA_CheckFifoParam+0xb6>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d003      	beq.n	800325c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003254:	e018      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
      break;
 800325a:	e015      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
      break;
 800326c:	e00b      	b.n	8003286 <DMA_CheckFifoParam+0xe6>
      break;
 800326e:	bf00      	nop
 8003270:	e00a      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 8003272:	bf00      	nop
 8003274:	e008      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 8003276:	bf00      	nop
 8003278:	e006      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e004      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e002      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;   
 8003282:	bf00      	nop
 8003284:	e000      	b.n	8003288 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
    }
  } 
  
  return status; 
 8003288:	7bfb      	ldrb	r3, [r7, #15]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e03b      	b.n	8003322 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f833 	bl	800332a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e8:	f023 0107 	bic.w	r1, r3, #7
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003302:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68d1      	ldr	r1, [r2, #12]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6812      	ldr	r2, [r2, #0]
 800330e:	430b      	orrs	r3, r1
 8003310:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af02      	add	r7, sp, #8
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_DMA2D_Start+0x1c>
 8003356:	2302      	movs	r3, #2
 8003358:	e018      	b.n	800338c <HAL_DMA2D_Start+0x4e>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f989 	bl	800368c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d056      	beq.n	800345e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80033b0:	f7ff fca2 	bl	8002cf8 <HAL_GetTick>
 80033b4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80033b6:	e04b      	b.n	8003450 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d023      	beq.n	8003412 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2221      	movs	r2, #33	@ 0x21
 80033fc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2204      	movs	r2, #4
 8003402:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0a5      	b.n	800355e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d01a      	beq.n	8003450 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800341a:	f7ff fc6d 	bl	8002cf8 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d302      	bcc.n	8003430 <HAL_DMA2D_PollForTransfer+0x9c>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10f      	bne.n	8003450 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003434:	f043 0220 	orr.w	r2, r3, #32
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2203      	movs	r2, #3
 8003440:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e086      	b.n	800355e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0ac      	beq.n	80033b8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d061      	beq.n	8003544 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003480:	f7ff fc3a 	bl	8002cf8 <HAL_GetTick>
 8003484:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003486:	e056      	b.n	8003536 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8003496:	2b00      	cmp	r3, #0
 8003498:	d02e      	beq.n	80034f8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	f043 0204 	orr.w	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2229      	movs	r2, #41	@ 0x29
 80034e2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2204      	movs	r2, #4
 80034e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d01a      	beq.n	8003536 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7ff fbfa 	bl	8002cf8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <HAL_DMA2D_PollForTransfer+0x182>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10f      	bne.n	8003536 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	f043 0220 	orr.w	r2, r3, #32
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2203      	movs	r2, #3
 8003526:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e013      	b.n	800355e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0a1      	beq.n	8003488 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2212      	movs	r2, #18
 800354a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_DMA2D_ConfigLayer+0x20>
 8003584:	2302      	movs	r3, #2
 8003586:	e079      	b.n	800367c <HAL_DMA2D_ConfigLayer+0x114>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	3318      	adds	r3, #24
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4413      	add	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80035b2:	4b35      	ldr	r3, [pc, #212]	@ (8003688 <HAL_DMA2D_ConfigLayer+0x120>)
 80035b4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b0a      	cmp	r3, #10
 80035bc:	d003      	beq.n	80035c6 <HAL_DMA2D_ConfigLayer+0x5e>
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	d107      	bne.n	80035d6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e005      	b.n	80035e2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	061b      	lsls	r3, r3, #24
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d120      	bne.n	800362a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	ea02 0103 	and.w	r1, r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b0a      	cmp	r3, #10
 8003610:	d003      	beq.n	800361a <HAL_DMA2D_ConfigLayer+0xb2>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b09      	cmp	r3, #9
 8003618:	d127      	bne.n	800366a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003626:	629a      	str	r2, [r3, #40]	@ 0x28
 8003628:	e01f      	b.n	800366a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69da      	ldr	r2, [r3, #28]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	43db      	mvns	r3, r3
 8003634:	ea02 0103 	and.w	r1, r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	430a      	orrs	r2, r1
 8003640:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b0a      	cmp	r3, #10
 8003652:	d003      	beq.n	800365c <HAL_DMA2D_ConfigLayer+0xf4>
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	2b09      	cmp	r3, #9
 800365a:	d106      	bne.n	800366a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003668:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	ff03000f 	.word	0xff03000f

0800368c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800368c:	b480      	push	{r7}
 800368e:	b08b      	sub	sp, #44	@ 0x2c
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	041a      	lsls	r2, r3, #16
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80036c4:	d174      	bne.n	80037b0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80036cc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80036d4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80036dc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d108      	bne.n	80036fe <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80036fc:	e053      	b.n	80037a6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d106      	bne.n	8003714 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4313      	orrs	r3, r2
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	627b      	str	r3, [r7, #36]	@ 0x24
 8003712:	e048      	b.n	80037a6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d111      	bne.n	8003740 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	0cdb      	lsrs	r3, r3, #19
 8003720:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	0a9b      	lsrs	r3, r3, #10
 8003726:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	08db      	lsrs	r3, r3, #3
 800372c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	02db      	lsls	r3, r3, #11
 8003736:	4313      	orrs	r3, r2
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
 800373e:	e032      	b.n	80037a6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d117      	bne.n	8003778 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	0fdb      	lsrs	r3, r3, #31
 800374c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	0cdb      	lsrs	r3, r3, #19
 8003752:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	0adb      	lsrs	r3, r3, #11
 8003758:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	08db      	lsrs	r3, r3, #3
 800375e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	431a      	orrs	r2, r3
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	03db      	lsls	r3, r3, #15
 800376e:	4313      	orrs	r3, r2
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
 8003776:	e016      	b.n	80037a6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	0f1b      	lsrs	r3, r3, #28
 800377c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0d1b      	lsrs	r3, r3, #20
 8003782:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	0b1b      	lsrs	r3, r3, #12
 8003788:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	011a      	lsls	r2, r3, #4
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	021b      	lsls	r3, r3, #8
 8003798:	431a      	orrs	r2, r3
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	031b      	lsls	r3, r3, #12
 800379e:	4313      	orrs	r3, r2
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80037ae:	e003      	b.n	80037b8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	60da      	str	r2, [r3, #12]
}
 80037b8:	bf00      	nop
 80037ba:	372c      	adds	r7, #44	@ 0x2c
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	@ 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e177      	b.n	8003ad0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	f040 8166 	bne.w	8003aca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003812:	2b02      	cmp	r3, #2
 8003814:	d130      	bne.n	8003878 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4313      	orrs	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 0201 	and.w	r2, r3, #1
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d017      	beq.n	80038b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	69ba      	ldr	r2, [r7, #24]
 8003898:	4013      	ands	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d123      	bne.n	8003908 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	fa02 f303 	lsl.w	r3, r2, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	08da      	lsrs	r2, r3, #3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3208      	adds	r2, #8
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	2203      	movs	r2, #3
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69ba      	ldr	r2, [r7, #24]
 800393a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80c0 	beq.w	8003aca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b66      	ldr	r3, [pc, #408]	@ (8003ae8 <HAL_GPIO_Init+0x324>)
 8003950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003952:	4a65      	ldr	r2, [pc, #404]	@ (8003ae8 <HAL_GPIO_Init+0x324>)
 8003954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003958:	6453      	str	r3, [r2, #68]	@ 0x44
 800395a:	4b63      	ldr	r3, [pc, #396]	@ (8003ae8 <HAL_GPIO_Init+0x324>)
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003966:	4a61      	ldr	r2, [pc, #388]	@ (8003aec <HAL_GPIO_Init+0x328>)
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	220f      	movs	r2, #15
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a58      	ldr	r2, [pc, #352]	@ (8003af0 <HAL_GPIO_Init+0x32c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d037      	beq.n	8003a02 <HAL_GPIO_Init+0x23e>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a57      	ldr	r2, [pc, #348]	@ (8003af4 <HAL_GPIO_Init+0x330>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d031      	beq.n	80039fe <HAL_GPIO_Init+0x23a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a56      	ldr	r2, [pc, #344]	@ (8003af8 <HAL_GPIO_Init+0x334>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02b      	beq.n	80039fa <HAL_GPIO_Init+0x236>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a55      	ldr	r2, [pc, #340]	@ (8003afc <HAL_GPIO_Init+0x338>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d025      	beq.n	80039f6 <HAL_GPIO_Init+0x232>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a54      	ldr	r2, [pc, #336]	@ (8003b00 <HAL_GPIO_Init+0x33c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <HAL_GPIO_Init+0x22e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a53      	ldr	r2, [pc, #332]	@ (8003b04 <HAL_GPIO_Init+0x340>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d019      	beq.n	80039ee <HAL_GPIO_Init+0x22a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a52      	ldr	r2, [pc, #328]	@ (8003b08 <HAL_GPIO_Init+0x344>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_GPIO_Init+0x226>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a51      	ldr	r2, [pc, #324]	@ (8003b0c <HAL_GPIO_Init+0x348>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00d      	beq.n	80039e6 <HAL_GPIO_Init+0x222>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a50      	ldr	r2, [pc, #320]	@ (8003b10 <HAL_GPIO_Init+0x34c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_Init+0x21e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003b14 <HAL_GPIO_Init+0x350>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_GPIO_Init+0x21a>
 80039da:	2309      	movs	r3, #9
 80039dc:	e012      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039de:	230a      	movs	r3, #10
 80039e0:	e010      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039e2:	2308      	movs	r3, #8
 80039e4:	e00e      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039e6:	2307      	movs	r3, #7
 80039e8:	e00c      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039ea:	2306      	movs	r3, #6
 80039ec:	e00a      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039ee:	2305      	movs	r3, #5
 80039f0:	e008      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039f2:	2304      	movs	r3, #4
 80039f4:	e006      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039f6:	2303      	movs	r3, #3
 80039f8:	e004      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e002      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_GPIO_Init+0x240>
 8003a02:	2300      	movs	r3, #0
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	f002 0203 	and.w	r2, r2, #3
 8003a0a:	0092      	lsls	r2, r2, #2
 8003a0c:	4093      	lsls	r3, r2
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a14:	4935      	ldr	r1, [pc, #212]	@ (8003aec <HAL_GPIO_Init+0x328>)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	089b      	lsrs	r3, r3, #2
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a22:	4b3d      	ldr	r3, [pc, #244]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a46:	4a34      	ldr	r2, [pc, #208]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a4c:	4b32      	ldr	r3, [pc, #200]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a70:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a76:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ac4:	4a14      	ldr	r2, [pc, #80]	@ (8003b18 <HAL_GPIO_Init+0x354>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b0f      	cmp	r3, #15
 8003ad4:	f67f ae84 	bls.w	80037e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	3724      	adds	r7, #36	@ 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40013800 	.word	0x40013800
 8003af0:	40020000 	.word	0x40020000
 8003af4:	40020400 	.word	0x40020400
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40020c00 	.word	0x40020c00
 8003b00:	40021000 	.word	0x40021000
 8003b04:	40021400 	.word	0x40021400
 8003b08:	40021800 	.word	0x40021800
 8003b0c:	40021c00 	.word	0x40021c00
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40022400 	.word	0x40022400
 8003b18:	40013c00 	.word	0x40013c00

08003b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b2c:	787b      	ldrb	r3, [r7, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b32:	887a      	ldrh	r2, [r7, #2]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b38:	e003      	b.n	8003b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	041a      	lsls	r2, r3, #16
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	619a      	str	r2, [r3, #24]
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
	...

08003b50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0bf      	b.n	8003ce2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f8ba 	bl	8003cf0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003b92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ba8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_LTDC_Init+0x19c>)
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6899      	ldr	r1, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68d9      	ldr	r1, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cec <HAL_LTDC_Init+0x19c>)
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	041b      	lsls	r3, r3, #16
 8003bfc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68d9      	ldr	r1, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1a      	ldr	r2, [r3, #32]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6919      	ldr	r1, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <HAL_LTDC_Init+0x19c>)
 8003c20:	400b      	ands	r3, r1
 8003c22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6919      	ldr	r1, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6959      	ldr	r1, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b27      	ldr	r3, [pc, #156]	@ (8003cec <HAL_LTDC_Init+0x19c>)
 8003c4e:	400b      	ands	r3, r1
 8003c50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6959      	ldr	r1, [r3, #20]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0206 	orr.w	r2, r2, #6
 8003cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699a      	ldr	r2, [r3, #24]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	f000f800 	.word	0xf000f800

08003cf0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_LTDC_ConfigLayer+0x1a>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e02c      	b.n	8003d78 <HAL_LTDC_ConfigLayer+0x74>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2134      	movs	r1, #52	@ 0x34
 8003d34:	fb01 f303 	mul.w	r3, r1, r3
 8003d38:	4413      	add	r3, r2
 8003d3a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4614      	mov	r4, r2
 8003d42:	461d      	mov	r5, r3
 8003d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d50:	682b      	ldr	r3, [r5, #0]
 8003d52:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f83b 	bl	8003dd4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdb0      	pop	{r4, r5, r7, pc}

08003d80 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_LTDC_EnableDither+0x16>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e016      	b.n	8003dc4 <HAL_LTDC_EnableDither+0x44>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003da6:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <HAL_LTDC_EnableDither+0x50>)
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <HAL_LTDC_EnableDither+0x50>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003db0:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40016800 	.word	0x40016800

08003dd4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b089      	sub	sp, #36	@ 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	0c1b      	lsrs	r3, r3, #16
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	4413      	add	r3, r2
 8003df2:	041b      	lsls	r3, r3, #16
 8003df4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	01db      	lsls	r3, r3, #7
 8003e00:	4413      	add	r3, r2
 8003e02:	3384      	adds	r3, #132	@ 0x84
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	01d2      	lsls	r2, r2, #7
 8003e10:	440a      	add	r2, r1
 8003e12:	3284      	adds	r2, #132	@ 0x84
 8003e14:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	01db      	lsls	r3, r3, #7
 8003e38:	440b      	add	r3, r1
 8003e3a:	3384      	adds	r3, #132	@ 0x84
 8003e3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e52:	4413      	add	r3, r2
 8003e54:	041b      	lsls	r3, r3, #16
 8003e56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	01db      	lsls	r3, r3, #7
 8003e62:	4413      	add	r3, r2
 8003e64:	3384      	adds	r3, #132	@ 0x84
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	01d2      	lsls	r2, r2, #7
 8003e72:	440a      	add	r2, r1
 8003e74:	3284      	adds	r2, #132	@ 0x84
 8003e76:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8a:	4413      	add	r3, r2
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	01db      	lsls	r3, r3, #7
 8003e98:	440b      	add	r3, r1
 8003e9a:	3384      	adds	r3, #132	@ 0x84
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	01db      	lsls	r3, r3, #7
 8003eae:	4413      	add	r3, r2
 8003eb0:	3384      	adds	r3, #132	@ 0x84
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	01d2      	lsls	r2, r2, #7
 8003ebe:	440a      	add	r2, r1
 8003ec0:	3284      	adds	r2, #132	@ 0x84
 8003ec2:	f023 0307 	bic.w	r3, r3, #7
 8003ec6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	01db      	lsls	r3, r3, #7
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3384      	adds	r3, #132	@ 0x84
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003eee:	041b      	lsls	r3, r3, #16
 8003ef0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	061b      	lsls	r3, r3, #24
 8003ef8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	01db      	lsls	r3, r3, #7
 8003f04:	4413      	add	r3, r2
 8003f06:	3384      	adds	r3, #132	@ 0x84
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	01db      	lsls	r3, r3, #7
 8003f14:	4413      	add	r3, r2
 8003f16:	3384      	adds	r3, #132	@ 0x84
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f24:	461a      	mov	r2, r3
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	01db      	lsls	r3, r3, #7
 8003f38:	440b      	add	r3, r1
 8003f3a:	3384      	adds	r3, #132	@ 0x84
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	01db      	lsls	r3, r3, #7
 8003f4e:	4413      	add	r3, r2
 8003f50:	3384      	adds	r3, #132	@ 0x84
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	6812      	ldr	r2, [r2, #0]
 8003f58:	4611      	mov	r1, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	01d2      	lsls	r2, r2, #7
 8003f5e:	440a      	add	r2, r1
 8003f60:	3284      	adds	r2, #132	@ 0x84
 8003f62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	01db      	lsls	r3, r3, #7
 8003f72:	4413      	add	r3, r2
 8003f74:	3384      	adds	r3, #132	@ 0x84
 8003f76:	461a      	mov	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	4413      	add	r3, r2
 8003f8a:	3384      	adds	r3, #132	@ 0x84
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	4611      	mov	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	01d2      	lsls	r2, r2, #7
 8003f98:	440a      	add	r2, r1
 8003f9a:	3284      	adds	r2, #132	@ 0x84
 8003f9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003fa0:	f023 0307 	bic.w	r3, r3, #7
 8003fa4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	6809      	ldr	r1, [r1, #0]
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	01c9      	lsls	r1, r1, #7
 8003fb8:	4401      	add	r1, r0
 8003fba:	3184      	adds	r1, #132	@ 0x84
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	01db      	lsls	r3, r3, #7
 8003fca:	4413      	add	r3, r2
 8003fcc:	3384      	adds	r3, #132	@ 0x84
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	01db      	lsls	r3, r3, #7
 8003fda:	4413      	add	r3, r2
 8003fdc:	3384      	adds	r3, #132	@ 0x84
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	01db      	lsls	r3, r3, #7
 8003fee:	4413      	add	r3, r2
 8003ff0:	3384      	adds	r3, #132	@ 0x84
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004002:	2304      	movs	r3, #4
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e01b      	b.n	8004040 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d102      	bne.n	8004016 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004010:	2303      	movs	r3, #3
 8004012:	61fb      	str	r3, [r7, #28]
 8004014:	e014      	b.n	8004040 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d00b      	beq.n	8004036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004022:	2b02      	cmp	r3, #2
 8004024:	d007      	beq.n	8004036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800402a:	2b03      	cmp	r3, #3
 800402c:	d003      	beq.n	8004036 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004032:	2b07      	cmp	r3, #7
 8004034:	d102      	bne.n	800403c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004036:	2302      	movs	r3, #2
 8004038:	61fb      	str	r3, [r7, #28]
 800403a:	e001      	b.n	8004040 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800403c:	2301      	movs	r3, #1
 800403e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	01db      	lsls	r3, r3, #7
 800404a:	4413      	add	r3, r2
 800404c:	3384      	adds	r3, #132	@ 0x84
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	4611      	mov	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	01d2      	lsls	r2, r2, #7
 800405a:	440a      	add	r2, r1
 800405c:	3284      	adds	r2, #132	@ 0x84
 800405e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004062:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004068:	69fa      	ldr	r2, [r7, #28]
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	1acb      	subs	r3, r1, r3
 800407a:	69f9      	ldr	r1, [r7, #28]
 800407c:	fb01 f303 	mul.w	r3, r1, r3
 8004080:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	6809      	ldr	r1, [r1, #0]
 8004086:	4608      	mov	r0, r1
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	01c9      	lsls	r1, r1, #7
 800408c:	4401      	add	r1, r0
 800408e:	3184      	adds	r1, #132	@ 0x84
 8004090:	4313      	orrs	r3, r2
 8004092:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	01db      	lsls	r3, r3, #7
 800409e:	4413      	add	r3, r2
 80040a0:	3384      	adds	r3, #132	@ 0x84
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	6812      	ldr	r2, [r2, #0]
 80040a8:	4611      	mov	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	01d2      	lsls	r2, r2, #7
 80040ae:	440a      	add	r2, r1
 80040b0:	3284      	adds	r2, #132	@ 0x84
 80040b2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	01db      	lsls	r3, r3, #7
 80040c6:	4413      	add	r3, r2
 80040c8:	3384      	adds	r3, #132	@ 0x84
 80040ca:	461a      	mov	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	01db      	lsls	r3, r3, #7
 80040dc:	4413      	add	r3, r2
 80040de:	3384      	adds	r3, #132	@ 0x84
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	6812      	ldr	r2, [r2, #0]
 80040e6:	4611      	mov	r1, r2
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	01d2      	lsls	r2, r2, #7
 80040ec:	440a      	add	r2, r1
 80040ee:	3284      	adds	r2, #132	@ 0x84
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6013      	str	r3, [r2, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3724      	adds	r7, #36	@ 0x24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af02      	add	r7, sp, #8
 8004108:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e101      	b.n	8004318 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f009 fe08 	bl	800dd44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2203      	movs	r2, #3
 8004138:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004142:	d102      	bne.n	800414a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f003 fc29 	bl	80079a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7c1a      	ldrb	r2, [r3, #16]
 800415c:	f88d 2000 	strb.w	r2, [sp]
 8004160:	3304      	adds	r3, #4
 8004162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004164:	f003 fb08 	bl	8007778 <USB_CoreInit>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e0ce      	b.n	8004318 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fc21 	bl	80079c8 <USB_SetCurrentMode>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e0bf      	b.n	8004318 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e04a      	b.n	8004234 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	3315      	adds	r3, #21
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3314      	adds	r3, #20
 80041c2:	7bfa      	ldrb	r2, [r7, #15]
 80041c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	b298      	uxth	r0, r3
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	440b      	add	r3, r1
 80041d8:	332e      	adds	r3, #46	@ 0x2e
 80041da:	4602      	mov	r2, r0
 80041dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	3318      	adds	r3, #24
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	331c      	adds	r3, #28
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	3320      	adds	r3, #32
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800421a:	7bfa      	ldrb	r2, [r7, #15]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3324      	adds	r3, #36	@ 0x24
 800422a:	2200      	movs	r2, #0
 800422c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	3301      	adds	r3, #1
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	791b      	ldrb	r3, [r3, #4]
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	429a      	cmp	r2, r3
 800423c:	d3af      	bcc.n	800419e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
 8004242:	e044      	b.n	80042ce <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004282:	2200      	movs	r2, #0
 8004284:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004286:	7bfa      	ldrb	r2, [r7, #15]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800429c:	7bfa      	ldrb	r2, [r7, #15]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042b2:	7bfa      	ldrb	r2, [r7, #15]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	3301      	adds	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	791b      	ldrb	r3, [r3, #4]
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d3b5      	bcc.n	8004244 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	7c1a      	ldrb	r2, [r3, #16]
 80042e0:	f88d 2000 	strb.w	r2, [sp]
 80042e4:	3304      	adds	r3, #4
 80042e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042e8:	f003 fbba 	bl	8007a60 <USB_DevInit>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00c      	b.n	8004318 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f004 fc04 	bl	8008b1e <USB_DevDisconnect>

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_PCD_Start+0x1c>
 8004338:	2302      	movs	r3, #2
 800433a:	e022      	b.n	8004382 <HAL_PCD_Start+0x62>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f003 fb0b 	bl	8007984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f004 fbb2 	bl	8008adc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800438a:	b590      	push	{r4, r7, lr}
 800438c:	b08d      	sub	sp, #52	@ 0x34
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f004 fc70 	bl	8008c86 <USB_GetMode>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 848c 	bne.w	8004cc6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f004 fbd4 	bl	8008b60 <USB_ReadInterrupts>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8482 	beq.w	8004cc4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	0a1b      	lsrs	r3, r3, #8
 80043ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4618      	mov	r0, r3
 80043da:	f004 fbc1 	bl	8008b60 <USB_ReadInterrupts>
 80043de:	4603      	mov	r3, r0
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d107      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695a      	ldr	r2, [r3, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f002 0202 	and.w	r2, r2, #2
 80043f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f004 fbaf 	bl	8008b60 <USB_ReadInterrupts>
 8004402:	4603      	mov	r3, r0
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b10      	cmp	r3, #16
 800440a:	d161      	bne.n	80044d0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0210 	bic.w	r2, r2, #16
 800441a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 020f 	and.w	r2, r3, #15
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	0c5b      	lsrs	r3, r3, #17
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	2b02      	cmp	r3, #2
 8004446:	d124      	bne.n	8004492 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d035      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800445e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004462:	b29b      	uxth	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	6a38      	ldr	r0, [r7, #32]
 8004468:	f004 f9e6 	bl	8008838 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004478:	441a      	add	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800448a:	441a      	add	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	615a      	str	r2, [r3, #20]
 8004490:	e016      	b.n	80044c0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	0c5b      	lsrs	r3, r3, #17
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	2b06      	cmp	r3, #6
 800449c:	d110      	bne.n	80044c0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044a4:	2208      	movs	r2, #8
 80044a6:	4619      	mov	r1, r3
 80044a8:	6a38      	ldr	r0, [r7, #32]
 80044aa:	f004 f9c5 	bl	8008838 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	091b      	lsrs	r3, r3, #4
 80044b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ba:	441a      	add	r2, r3
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699a      	ldr	r2, [r3, #24]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0210 	orr.w	r2, r2, #16
 80044ce:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f004 fb43 	bl	8008b60 <USB_ReadInterrupts>
 80044da:	4603      	mov	r3, r0
 80044dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044e0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044e4:	f040 80a7 	bne.w	8004636 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 fb48 	bl	8008b86 <USB_ReadDevAllOutEpInterrupt>
 80044f6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80044f8:	e099      	b.n	800462e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 808e 	beq.w	8004622 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f004 fb6c 	bl	8008bee <USB_ReadDevOutEPInterrupt>
 8004516:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452e:	461a      	mov	r2, r3
 8004530:	2301      	movs	r3, #1
 8004532:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fea4 	bl	8005284 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	2308      	movs	r3, #8
 8004556:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004558:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 ff7a 	bl	8005454 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004576:	461a      	mov	r2, r3
 8004578:	2310      	movs	r3, #16
 800457a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d030      	beq.n	80045e8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800458e:	2b80      	cmp	r3, #128	@ 0x80
 8004590:	d109      	bne.n	80045a6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045a4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80045a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045a8:	4613      	mov	r3, r2
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	3304      	adds	r3, #4
 80045ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	78db      	ldrb	r3, [r3, #3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d108      	bne.n	80045d6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f009 fcb9 	bl	800df48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e2:	461a      	mov	r2, r3
 80045e4:	2302      	movs	r3, #2
 80045e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d008      	beq.n	8004604 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fe:	461a      	mov	r2, r3
 8004600:	2320      	movs	r3, #32
 8004602:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004620:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	3301      	adds	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004630:	2b00      	cmp	r3, #0
 8004632:	f47f af62 	bne.w	80044fa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f004 fa90 	bl	8008b60 <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004646:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800464a:	f040 80db 	bne.w	8004804 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f004 fab1 	bl	8008bba <USB_ReadDevAllInEpInterrupt>
 8004658:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800465e:	e0cd      	b.n	80047fc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80c2 	beq.w	80047f0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f004 fad7 	bl	8008c2a <USB_ReadDevInEPInterrupt>
 800467c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d057      	beq.n	8004738 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	2201      	movs	r2, #1
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	43db      	mvns	r3, r3
 80046a2:	69f9      	ldr	r1, [r7, #28]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046a8:	4013      	ands	r3, r2
 80046aa:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b8:	461a      	mov	r2, r3
 80046ba:	2301      	movs	r3, #1
 80046bc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	799b      	ldrb	r3, [r3, #6]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d132      	bne.n	800472c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3320      	adds	r3, #32
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046dc:	4613      	mov	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4403      	add	r3, r0
 80046e6:	331c      	adds	r3, #28
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4419      	add	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f0:	4613      	mov	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	4413      	add	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4403      	add	r3, r0
 80046fa:	3320      	adds	r3, #32
 80046fc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	2b00      	cmp	r3, #0
 8004702:	d113      	bne.n	800472c <HAL_PCD_IRQHandler+0x3a2>
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	3324      	adds	r3, #36	@ 0x24
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d108      	bne.n	800472c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004724:	461a      	mov	r2, r3
 8004726:	2101      	movs	r1, #1
 8004728:	f004 fade 	bl	8008ce8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	b2db      	uxtb	r3, r3
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f009 fb83 	bl	800de3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800474e:	461a      	mov	r2, r3
 8004750:	2308      	movs	r3, #8
 8004752:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476a:	461a      	mov	r2, r3
 800476c:	2310      	movs	r3, #16
 800476e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004786:	461a      	mov	r2, r3
 8004788:	2340      	movs	r3, #64	@ 0x40
 800478a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d023      	beq.n	80047de <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004798:	6a38      	ldr	r0, [r7, #32]
 800479a:	f003 fac5 	bl	8007d28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800479e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a0:	4613      	mov	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	4413      	add	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	3310      	adds	r3, #16
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	3304      	adds	r3, #4
 80047b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	78db      	ldrb	r3, [r3, #3]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d108      	bne.n	80047cc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f009 fbd0 	bl	800df6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	461a      	mov	r2, r3
 80047da:	2302      	movs	r3, #2
 80047dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 fcbd 	bl	800516a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f2:	3301      	adds	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80047f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	2b00      	cmp	r3, #0
 8004800:	f47f af2e 	bne.w	8004660 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f004 f9a9 	bl	8008b60 <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004818:	d122      	bne.n	8004860 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	69fa      	ldr	r2, [r7, #28]
 8004824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004834:	2b01      	cmp	r3, #1
 8004836:	d108      	bne.n	800484a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004840:	2100      	movs	r1, #0
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 fea4 	bl	8005590 <HAL_PCDEx_LPM_Callback>
 8004848:	e002      	b.n	8004850 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f009 fb6e 	bl	800df2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695a      	ldr	r2, [r3, #20]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800485e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f004 f97b 	bl	8008b60 <USB_ReadInterrupts>
 800486a:	4603      	mov	r3, r0
 800486c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004874:	d112      	bne.n	800489c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d102      	bne.n	800488c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f009 fb2a 	bl	800dee0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800489a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f004 f95d 	bl	8008b60 <USB_ReadInterrupts>
 80048a6:	4603      	mov	r3, r0
 80048a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048b0:	f040 80b7 	bne.w	8004a22 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048c2:	f023 0301 	bic.w	r3, r3, #1
 80048c6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2110      	movs	r1, #16
 80048ce:	4618      	mov	r0, r3
 80048d0:	f003 fa2a 	bl	8007d28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048d8:	e046      	b.n	8004968 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e6:	461a      	mov	r2, r3
 80048e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048ec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	69fa      	ldr	r2, [r7, #28]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004908:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800490c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800490e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004920:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	69fa      	ldr	r2, [r7, #28]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800493c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004940:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	69fa      	ldr	r2, [r7, #28]
 8004956:	440a      	add	r2, r1
 8004958:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800495c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004960:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004964:	3301      	adds	r3, #1
 8004966:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	791b      	ldrb	r3, [r3, #4]
 800496c:	461a      	mov	r2, r3
 800496e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004970:	4293      	cmp	r3, r2
 8004972:	d3b2      	bcc.n	80048da <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004982:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004986:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	7bdb      	ldrb	r3, [r3, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d016      	beq.n	80049be <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049a0:	f043 030b 	orr.w	r3, r3, #11
 80049a4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049b6:	f043 030b 	orr.w	r3, r3, #11
 80049ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80049bc:	e015      	b.n	80049ea <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049d0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80049d4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049e4:	f043 030b 	orr.w	r3, r3, #11
 80049e8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80049fc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f004 f96b 	bl	8008ce8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	695a      	ldr	r2, [r3, #20]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f004 f89a 	bl	8008b60 <USB_ReadInterrupts>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a36:	d123      	bne.n	8004a80 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f004 f930 	bl	8008ca2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f003 f9e7 	bl	8007e1a <USB_GetDevSpeed>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681c      	ldr	r4, [r3, #0]
 8004a58:	f001 fa0a 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8004a5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a62:	461a      	mov	r2, r3
 8004a64:	4620      	mov	r0, r4
 8004a66:	f002 feeb 	bl	8007840 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f009 fa0f 	bl	800de8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f004 f86b 	bl	8008b60 <USB_ReadInterrupts>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d10a      	bne.n	8004aaa <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f009 f9ec 	bl	800de72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f002 0208 	and.w	r2, r2, #8
 8004aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f004 f856 	bl	8008b60 <USB_ReadInterrupts>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b80      	cmp	r3, #128	@ 0x80
 8004abc:	d123      	bne.n	8004b06 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004aca:	2301      	movs	r3, #1
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ace:	e014      	b.n	8004afa <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	00db      	lsls	r3, r3, #3
 8004ad8:	4413      	add	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	440b      	add	r3, r1
 8004ade:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d105      	bne.n	8004af4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fb0a 	bl	8005108 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	3301      	adds	r3, #1
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	791b      	ldrb	r3, [r3, #4]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d3e4      	bcc.n	8004ad0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f004 f828 	bl	8008b60 <USB_ReadInterrupts>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b1a:	d13c      	bne.n	8004b96 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b20:	e02b      	b.n	8004b7a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b32:	6879      	ldr	r1, [r7, #4]
 8004b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	3318      	adds	r3, #24
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d115      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da12      	bge.n	8004b74 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3317      	adds	r3, #23
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 faca 	bl	8005108 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	3301      	adds	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	791b      	ldrb	r3, [r3, #4]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d3cd      	bcc.n	8004b22 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004b94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f003 ffe0 	bl	8008b60 <USB_ReadInterrupts>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ba6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004baa:	d156      	bne.n	8004c5a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bac:	2301      	movs	r3, #1
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb0:	e045      	b.n	8004c3e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d12e      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	da2b      	bge.n	8004c38 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004bec:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d121      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	440b      	add	r3, r1
 8004c02:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004c06:	2201      	movs	r2, #1
 8004c08:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c34:	6053      	str	r3, [r2, #4]
            break;
 8004c36:	e008      	b.n	8004c4a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	791b      	ldrb	r3, [r3, #4]
 8004c42:	461a      	mov	r2, r3
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d3b3      	bcc.n	8004bb2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695a      	ldr	r2, [r3, #20]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f003 ff7e 	bl	8008b60 <USB_ReadInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6e:	d10a      	bne.n	8004c86 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f009 f98d 	bl	800df90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f003 ff68 	bl	8008b60 <USB_ReadInterrupts>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f003 0304 	and.w	r3, r3, #4
 8004c96:	2b04      	cmp	r3, #4
 8004c98:	d115      	bne.n	8004cc6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f009 f97d 	bl	800dfac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	e000      	b.n	8004cc6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004cc4:	bf00      	nop
    }
  }
}
 8004cc6:	3734      	adds	r7, #52	@ 0x34
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd90      	pop	{r4, r7, pc}

08004ccc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_PCD_SetAddress+0x1a>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e012      	b.n	8004d0c <HAL_PCD_SetAddress+0x40>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	78fa      	ldrb	r2, [r7, #3]
 8004cf2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f003 fec7 	bl	8008a90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	4608      	mov	r0, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	70fb      	strb	r3, [r7, #3]
 8004d26:	460b      	mov	r3, r1
 8004d28:	803b      	strh	r3, [r7, #0]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	da0f      	bge.n	8004d5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	4413      	add	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	3310      	adds	r3, #16
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3304      	adds	r3, #4
 8004d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2201      	movs	r2, #1
 8004d56:	705a      	strb	r2, [r3, #1]
 8004d58:	e00f      	b.n	8004d7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d5a:	78fb      	ldrb	r3, [r7, #3]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004d86:	883b      	ldrh	r3, [r7, #0]
 8004d88:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	78ba      	ldrb	r2, [r7, #2]
 8004d94:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004da8:	78bb      	ldrb	r3, [r7, #2]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d102      	bne.n	8004db4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_PCD_EP_Open+0xae>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e00e      	b.n	8004de0 <HAL_PCD_EP_Open+0xcc>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 f847 	bl	8007e64 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004dde:	7afb      	ldrb	r3, [r7, #11]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	460b      	mov	r3, r1
 8004df2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da0f      	bge.n	8004e1c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3310      	adds	r3, #16
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4413      	add	r3, r2
 8004e10:	3304      	adds	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	705a      	strb	r2, [r3, #1]
 8004e1a:	e00f      	b.n	8004e3c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	f003 020f 	and.w	r2, r3, #15
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	3304      	adds	r3, #4
 8004e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_PCD_EP_Close+0x6e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e00e      	b.n	8004e74 <HAL_PCD_EP_Close+0x8c>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f003 f885 	bl	8007f74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	460b      	mov	r3, r1
 8004e8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e8c:	7afb      	ldrb	r3, [r7, #11]
 8004e8e:	f003 020f 	and.w	r2, r3, #15
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	799b      	ldrb	r3, [r3, #6]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d102      	bne.n	8004ed8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	799b      	ldrb	r3, [r3, #6]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	f003 f922 	bl	800812c <USB_EPStartXfer>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004f14:	681b      	ldr	r3, [r3, #0]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b086      	sub	sp, #24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	f003 020f 	and.w	r2, r3, #15
 8004f38:	4613      	mov	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	3310      	adds	r3, #16
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	3304      	adds	r3, #4
 8004f48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	f003 030f 	and.w	r3, r3, #15
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	799b      	ldrb	r3, [r3, #6]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d102      	bne.n	8004f7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	799b      	ldrb	r3, [r3, #6]
 8004f84:	461a      	mov	r2, r3
 8004f86:	6979      	ldr	r1, [r7, #20]
 8004f88:	f003 f8d0 	bl	800812c <USB_EPStartXfer>

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b084      	sub	sp, #16
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fa2:	78fb      	ldrb	r3, [r7, #3]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	7912      	ldrb	r2, [r2, #4]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e04f      	b.n	8005054 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	da0f      	bge.n	8004fdc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fbc:	78fb      	ldrb	r3, [r7, #3]
 8004fbe:	f003 020f 	and.w	r2, r3, #15
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	3310      	adds	r3, #16
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	4413      	add	r3, r2
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	705a      	strb	r2, [r3, #1]
 8004fda:	e00d      	b.n	8004ff8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_PCD_EP_SetStall+0x82>
 8005014:	2302      	movs	r3, #2
 8005016:	e01d      	b.n	8005054 <HAL_PCD_EP_SetStall+0xbe>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	4618      	mov	r0, r3
 8005028:	f003 fc5e 	bl	80088e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6818      	ldr	r0, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	7999      	ldrb	r1, [r3, #6]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005044:	461a      	mov	r2, r3
 8005046:	f003 fe4f 	bl	8008ce8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	460b      	mov	r3, r1
 8005066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	7912      	ldrb	r2, [r2, #4]
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e042      	b.n	8005100 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800507a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da0f      	bge.n	80050a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 020f 	and.w	r2, r3, #15
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	3310      	adds	r3, #16
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4413      	add	r3, r2
 8005096:	3304      	adds	r3, #4
 8005098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2201      	movs	r2, #1
 800509e:	705a      	strb	r2, [r3, #1]
 80050a0:	e00f      	b.n	80050c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	f003 020f 	and.w	r2, r3, #15
 80050a8:	4613      	mov	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_PCD_EP_ClrStall+0x86>
 80050de:	2302      	movs	r3, #2
 80050e0:	e00e      	b.n	8005100 <HAL_PCD_EP_ClrStall+0xa4>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68f9      	ldr	r1, [r7, #12]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f003 fc67 	bl	80089c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005118:	2b00      	cmp	r3, #0
 800511a:	da0c      	bge.n	8005136 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	3310      	adds	r3, #16
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	3304      	adds	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	e00c      	b.n	8005150 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	f003 020f 	and.w	r2, r3, #15
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4413      	add	r3, r2
 800514c:	3304      	adds	r3, #4
 800514e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	4618      	mov	r0, r3
 8005158:	f003 fa86 	bl	8008668 <USB_EPStopXfer>
 800515c:	4603      	mov	r3, r0
 800515e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005160:	7afb      	ldrb	r3, [r7, #11]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b08a      	sub	sp, #40	@ 0x28
 800516e:	af02      	add	r7, sp, #8
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	3310      	adds	r3, #16
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	695a      	ldr	r2, [r3, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	429a      	cmp	r2, r3
 800519c:	d901      	bls.n	80051a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e06b      	b.n	800527a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	69fa      	ldr	r2, [r7, #28]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d902      	bls.n	80051be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3303      	adds	r3, #3
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051c6:	e02a      	b.n	800521e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d902      	bls.n	80051e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	3303      	adds	r3, #3
 80051e8:	089b      	lsrs	r3, r3, #2
 80051ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	68d9      	ldr	r1, [r3, #12]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	4603      	mov	r3, r0
 8005200:	6978      	ldr	r0, [r7, #20]
 8005202:	f003 fadb 	bl	80087bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	441a      	add	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	429a      	cmp	r2, r3
 8005232:	d809      	bhi.n	8005248 <PCD_WriteEmptyTxFifo+0xde>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	695a      	ldr	r2, [r3, #20]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800523c:	429a      	cmp	r2, r3
 800523e:	d203      	bcs.n	8005248 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1bf      	bne.n	80051c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	429a      	cmp	r2, r3
 8005252:	d811      	bhi.n	8005278 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	2201      	movs	r2, #1
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	43db      	mvns	r3, r3
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005274:	4013      	ands	r3, r2
 8005276:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	333c      	adds	r3, #60	@ 0x3c
 800529c:	3304      	adds	r3, #4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	799b      	ldrb	r3, [r3, #6]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d17b      	bne.n	80053b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f003 0308 	and.w	r3, r3, #8
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4a61      	ldr	r2, [pc, #388]	@ (800544c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	f240 80b9 	bls.w	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80b3 	beq.w	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e6:	461a      	mov	r2, r3
 80052e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052ec:	6093      	str	r3, [r2, #8]
 80052ee:	e0a7      	b.n	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005306:	461a      	mov	r2, r3
 8005308:	2320      	movs	r3, #32
 800530a:	6093      	str	r3, [r2, #8]
 800530c:	e098      	b.n	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 8093 	bne.w	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	4a4b      	ldr	r2, [pc, #300]	@ (800544c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d90f      	bls.n	8005342 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00a      	beq.n	8005342 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005338:	461a      	mov	r2, r3
 800533a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533e:	6093      	str	r3, [r2, #8]
 8005340:	e07e      	b.n	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	4613      	mov	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1a      	ldr	r2, [r3, #32]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	0159      	lsls	r1, r3, #5
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	440b      	add	r3, r1
 8005364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d114      	bne.n	80053a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800538c:	461a      	mov	r2, r3
 800538e:	2101      	movs	r1, #1
 8005390:	f003 fcaa 	bl	8008ce8 <USB_EP0_OutStart>
 8005394:	e006      	b.n	80053a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f008 fd2c 	bl	800de08 <HAL_PCD_DataOutStageCallback>
 80053b0:	e046      	b.n	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	4a26      	ldr	r2, [pc, #152]	@ (8005450 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d124      	bne.n	8005404 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d0:	461a      	mov	r2, r3
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	6093      	str	r3, [r2, #8]
 80053d8:	e032      	b.n	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053f0:	461a      	mov	r2, r3
 80053f2:	2320      	movs	r3, #32
 80053f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f008 fd03 	bl	800de08 <HAL_PCD_DataOutStageCallback>
 8005402:	e01d      	b.n	8005440 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d114      	bne.n	8005434 <PCD_EP_OutXfrComplete_int+0x1b0>
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d108      	bne.n	8005434 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800542c:	461a      	mov	r2, r3
 800542e:	2100      	movs	r1, #0
 8005430:	f003 fc5a 	bl	8008ce8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f008 fce4 	bl	800de08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	4f54300a 	.word	0x4f54300a
 8005450:	4f54310a 	.word	0x4f54310a

08005454 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	333c      	adds	r3, #60	@ 0x3c
 800546c:	3304      	adds	r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	015a      	lsls	r2, r3, #5
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4413      	add	r3, r2
 800547a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4a15      	ldr	r2, [pc, #84]	@ (80054dc <PCD_EP_OutSetupPacket_int+0x88>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d90e      	bls.n	80054a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005490:	2b00      	cmp	r3, #0
 8005492:	d009      	beq.n	80054a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a0:	461a      	mov	r2, r3
 80054a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f008 fc9b 	bl	800dde4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <PCD_EP_OutSetupPacket_int+0x88>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d90c      	bls.n	80054d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	799b      	ldrb	r3, [r3, #6]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d108      	bne.n	80054d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054c8:	461a      	mov	r2, r3
 80054ca:	2101      	movs	r1, #1
 80054cc:	f003 fc0c 	bl	8008ce8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	4f54300a 	.word	0x4f54300a

080054e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
 80054ec:	4613      	mov	r3, r2
 80054ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80054fe:	883b      	ldrh	r3, [r7, #0]
 8005500:	0419      	lsls	r1, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	430a      	orrs	r2, r1
 800550a:	629a      	str	r2, [r3, #40]	@ 0x28
 800550c:	e028      	b.n	8005560 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	0c1b      	lsrs	r3, r3, #16
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	4413      	add	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800551c:	2300      	movs	r3, #0
 800551e:	73fb      	strb	r3, [r7, #15]
 8005520:	e00d      	b.n	800553e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	3340      	adds	r3, #64	@ 0x40
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	4413      	add	r3, r2
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4413      	add	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	3301      	adds	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
 800553e:	7bfa      	ldrb	r2, [r7, #15]
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	3b01      	subs	r3, #1
 8005544:	429a      	cmp	r2, r3
 8005546:	d3ec      	bcc.n	8005522 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005548:	883b      	ldrh	r3, [r7, #0]
 800554a:	0418      	lsls	r0, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6819      	ldr	r1, [r3, #0]
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	3b01      	subs	r3, #1
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	4302      	orrs	r2, r0
 8005558:	3340      	adds	r3, #64	@ 0x40
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e267      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d075      	beq.n	80056b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055c6:	4b88      	ldr	r3, [pc, #544]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d00c      	beq.n	80055ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055d2:	4b85      	ldr	r3, [pc, #532]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d112      	bne.n	8005604 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055de:	4b82      	ldr	r3, [pc, #520]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ea:	d10b      	bne.n	8005604 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	4b7e      	ldr	r3, [pc, #504]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d05b      	beq.n	80056b0 <HAL_RCC_OscConfig+0x108>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d157      	bne.n	80056b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e242      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800560c:	d106      	bne.n	800561c <HAL_RCC_OscConfig+0x74>
 800560e:	4b76      	ldr	r3, [pc, #472]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a75      	ldr	r2, [pc, #468]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e01d      	b.n	8005658 <HAL_RCC_OscConfig+0xb0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0x98>
 8005626:	4b70      	ldr	r3, [pc, #448]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6f      	ldr	r2, [pc, #444]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 800562c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b6d      	ldr	r3, [pc, #436]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6c      	ldr	r2, [pc, #432]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e00b      	b.n	8005658 <HAL_RCC_OscConfig+0xb0>
 8005640:	4b69      	ldr	r3, [pc, #420]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a68      	ldr	r2, [pc, #416]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005646:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b66      	ldr	r3, [pc, #408]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a65      	ldr	r2, [pc, #404]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005652:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fd fb4a 	bl	8002cf8 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fd fb46 	bl	8002cf8 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	@ 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e207      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b5b      	ldr	r3, [pc, #364]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0xc0>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005688:	f7fd fb36 	bl	8002cf8 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fd fb32 	bl	8002cf8 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	@ 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e1f3      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	4b51      	ldr	r3, [pc, #324]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0xe8>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d063      	beq.n	8005786 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056be:	4b4a      	ldr	r3, [pc, #296]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ca:	4b47      	ldr	r3, [pc, #284]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d11c      	bne.n	8005710 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d6:	4b44      	ldr	r3, [pc, #272]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	4b41      	ldr	r3, [pc, #260]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_RCC_OscConfig+0x152>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e1c7      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fa:	4b3b      	ldr	r3, [pc, #236]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4937      	ldr	r1, [pc, #220]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570e:	e03a      	b.n	8005786 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d020      	beq.n	800575a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005718:	4b34      	ldr	r3, [pc, #208]	@ (80057ec <HAL_RCC_OscConfig+0x244>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571e:	f7fd faeb 	bl	8002cf8 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005726:	f7fd fae7 	bl	8002cf8 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1a8      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	4b2b      	ldr	r3, [pc, #172]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005744:	4b28      	ldr	r3, [pc, #160]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4925      	ldr	r1, [pc, #148]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 8005754:	4313      	orrs	r3, r2
 8005756:	600b      	str	r3, [r1, #0]
 8005758:	e015      	b.n	8005786 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575a:	4b24      	ldr	r3, [pc, #144]	@ (80057ec <HAL_RCC_OscConfig+0x244>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fd faca 	bl	8002cf8 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005768:	f7fd fac6 	bl	8002cf8 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e187      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	4b1b      	ldr	r3, [pc, #108]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d036      	beq.n	8005800 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d016      	beq.n	80057c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579a:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <HAL_RCC_OscConfig+0x248>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a0:	f7fd faaa 	bl	8002cf8 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a8:	f7fd faa6 	bl	8002cf8 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e167      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <HAL_RCC_OscConfig+0x240>)
 80057bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x200>
 80057c6:	e01b      	b.n	8005800 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c8:	4b09      	ldr	r3, [pc, #36]	@ (80057f0 <HAL_RCC_OscConfig+0x248>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057ce:	f7fd fa93 	bl	8002cf8 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d4:	e00e      	b.n	80057f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057d6:	f7fd fa8f 	bl	8002cf8 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d907      	bls.n	80057f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e150      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
 80057e8:	40023800 	.word	0x40023800
 80057ec:	42470000 	.word	0x42470000
 80057f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f4:	4b88      	ldr	r3, [pc, #544]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f8:	f003 0302 	and.w	r3, r3, #2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1ea      	bne.n	80057d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8097 	beq.w	800593c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800580e:	2300      	movs	r3, #0
 8005810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005812:	4b81      	ldr	r3, [pc, #516]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10f      	bne.n	800583e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
 8005822:	4b7d      	ldr	r3, [pc, #500]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005826:	4a7c      	ldr	r2, [pc, #496]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800582c:	6413      	str	r3, [r2, #64]	@ 0x40
 800582e:	4b7a      	ldr	r3, [pc, #488]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800583e:	4b77      	ldr	r3, [pc, #476]	@ (8005a1c <HAL_RCC_OscConfig+0x474>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d118      	bne.n	800587c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584a:	4b74      	ldr	r3, [pc, #464]	@ (8005a1c <HAL_RCC_OscConfig+0x474>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a73      	ldr	r2, [pc, #460]	@ (8005a1c <HAL_RCC_OscConfig+0x474>)
 8005850:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005856:	f7fd fa4f 	bl	8002cf8 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585c:	e008      	b.n	8005870 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800585e:	f7fd fa4b 	bl	8002cf8 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	2b02      	cmp	r3, #2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e10c      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	4b6a      	ldr	r3, [pc, #424]	@ (8005a1c <HAL_RCC_OscConfig+0x474>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0f0      	beq.n	800585e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d106      	bne.n	8005892 <HAL_RCC_OscConfig+0x2ea>
 8005884:	4b64      	ldr	r3, [pc, #400]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005888:	4a63      	ldr	r2, [pc, #396]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005890:	e01c      	b.n	80058cc <HAL_RCC_OscConfig+0x324>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b05      	cmp	r3, #5
 8005898:	d10c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x30c>
 800589a:	4b5f      	ldr	r3, [pc, #380]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589e:	4a5e      	ldr	r2, [pc, #376]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058a0:	f043 0304 	orr.w	r3, r3, #4
 80058a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80058a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b2:	e00b      	b.n	80058cc <HAL_RCC_OscConfig+0x324>
 80058b4:	4b58      	ldr	r3, [pc, #352]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b8:	4a57      	ldr	r2, [pc, #348]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	6713      	str	r3, [r2, #112]	@ 0x70
 80058c0:	4b55      	ldr	r3, [pc, #340]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c4:	4a54      	ldr	r2, [pc, #336]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058c6:	f023 0304 	bic.w	r3, r3, #4
 80058ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d015      	beq.n	8005900 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d4:	f7fd fa10 	bl	8002cf8 <HAL_GetTick>
 80058d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058da:	e00a      	b.n	80058f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058dc:	f7fd fa0c 	bl	8002cf8 <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e0cb      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f2:	4b49      	ldr	r3, [pc, #292]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0ee      	beq.n	80058dc <HAL_RCC_OscConfig+0x334>
 80058fe:	e014      	b.n	800592a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005900:	f7fd f9fa 	bl	8002cf8 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005906:	e00a      	b.n	800591e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005908:	f7fd f9f6 	bl	8002cf8 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005916:	4293      	cmp	r3, r2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e0b5      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1ee      	bne.n	8005908 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800592a:	7dfb      	ldrb	r3, [r7, #23]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d105      	bne.n	800593c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005930:	4b39      	ldr	r3, [pc, #228]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005934:	4a38      	ldr	r2, [pc, #224]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005936:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800593a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80a1 	beq.w	8005a88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005946:	4b34      	ldr	r3, [pc, #208]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b08      	cmp	r3, #8
 8005950:	d05c      	beq.n	8005a0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d141      	bne.n	80059de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800595a:	4b31      	ldr	r3, [pc, #196]	@ (8005a20 <HAL_RCC_OscConfig+0x478>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005960:	f7fd f9ca 	bl	8002cf8 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005968:	f7fd f9c6 	bl	8002cf8 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e087      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1f0      	bne.n	8005968 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69da      	ldr	r2, [r3, #28]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	019b      	lsls	r3, r3, #6
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	3b01      	subs	r3, #1
 80059a0:	041b      	lsls	r3, r3, #16
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	061b      	lsls	r3, r3, #24
 80059aa:	491b      	ldr	r1, [pc, #108]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a20 <HAL_RCC_OscConfig+0x478>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059b6:	f7fd f99f 	bl	8002cf8 <HAL_GetTick>
 80059ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059be:	f7fd f99b 	bl	8002cf8 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e05c      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d0:	4b11      	ldr	r3, [pc, #68]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0f0      	beq.n	80059be <HAL_RCC_OscConfig+0x416>
 80059dc:	e054      	b.n	8005a88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059de:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <HAL_RCC_OscConfig+0x478>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e4:	f7fd f988 	bl	8002cf8 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fd f984 	bl	8002cf8 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e045      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fe:	4b06      	ldr	r3, [pc, #24]	@ (8005a18 <HAL_RCC_OscConfig+0x470>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f0      	bne.n	80059ec <HAL_RCC_OscConfig+0x444>
 8005a0a:	e03d      	b.n	8005a88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d107      	bne.n	8005a24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e038      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
 8005a18:	40023800 	.word	0x40023800
 8005a1c:	40007000 	.word	0x40007000
 8005a20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a24:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <HAL_RCC_OscConfig+0x4ec>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d028      	beq.n	8005a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d121      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d11a      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a54:	4013      	ands	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d111      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3718      	adds	r7, #24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	40023800 	.word	0x40023800

08005a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0cc      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b68      	ldr	r3, [pc, #416]	@ (8005c50 <HAL_RCC_ClockConfig+0x1b8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d90c      	bls.n	8005ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b65      	ldr	r3, [pc, #404]	@ (8005c50 <HAL_RCC_ClockConfig+0x1b8>)
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac2:	4b63      	ldr	r3, [pc, #396]	@ (8005c50 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e0b8      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d020      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005aec:	4b59      	ldr	r3, [pc, #356]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a58      	ldr	r2, [pc, #352]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005af6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d005      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b04:	4b53      	ldr	r3, [pc, #332]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	4a52      	ldr	r2, [pc, #328]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b10:	4b50      	ldr	r3, [pc, #320]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	494d      	ldr	r1, [pc, #308]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d044      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d107      	bne.n	8005b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b36:	4b47      	ldr	r3, [pc, #284]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d119      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e07f      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d003      	beq.n	8005b56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d107      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b56:	4b3f      	ldr	r3, [pc, #252]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e06f      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b66:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e067      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b76:	4b37      	ldr	r3, [pc, #220]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f023 0203 	bic.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4934      	ldr	r1, [pc, #208]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b88:	f7fd f8b6 	bl	8002cf8 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f7fd f8b2 	bl	8002cf8 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e04f      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 020c 	and.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1eb      	bne.n	8005b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b25      	ldr	r3, [pc, #148]	@ (8005c50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 030f 	and.w	r3, r3, #15
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d20c      	bcs.n	8005be0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b22      	ldr	r3, [pc, #136]	@ (8005c50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bce:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d001      	beq.n	8005be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e032      	b.n	8005c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bec:	4b19      	ldr	r3, [pc, #100]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	4916      	ldr	r1, [pc, #88]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c0a:	4b12      	ldr	r3, [pc, #72]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	490e      	ldr	r1, [pc, #56]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c1e:	f000 f821 	bl	8005c64 <HAL_RCC_GetSysClockFreq>
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	490a      	ldr	r1, [pc, #40]	@ (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005c30:	5ccb      	ldrb	r3, [r1, r3]
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
 8005c36:	4a09      	ldr	r2, [pc, #36]	@ (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c3a:	4b09      	ldr	r3, [pc, #36]	@ (8005c60 <HAL_RCC_ClockConfig+0x1c8>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fb fa68 	bl	8001114 <HAL_InitTick>

  return HAL_OK;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023c00 	.word	0x40023c00
 8005c54:	40023800 	.word	0x40023800
 8005c58:	0800ed8c 	.word	0x0800ed8c
 8005c5c:	20000000 	.word	0x20000000
 8005c60:	20000080 	.word	0x20000080

08005c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c68:	b094      	sub	sp, #80	@ 0x50
 8005c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c7c:	4b79      	ldr	r3, [pc, #484]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 030c 	and.w	r3, r3, #12
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d00d      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	f200 80e1 	bhi.w	8005e50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x34>
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d003      	beq.n	8005c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c96:	e0db      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c98:	4b73      	ldr	r3, [pc, #460]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c9c:	e0db      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c9e:	4b73      	ldr	r3, [pc, #460]	@ (8005e6c <HAL_RCC_GetSysClockFreq+0x208>)
 8005ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ca2:	e0d8      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cae:	4b6d      	ldr	r3, [pc, #436]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d063      	beq.n	8005d82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cba:	4b6a      	ldr	r3, [pc, #424]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	099b      	lsrs	r3, r3, #6
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cc4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cce:	2300      	movs	r3, #0
 8005cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005cd6:	4622      	mov	r2, r4
 8005cd8:	462b      	mov	r3, r5
 8005cda:	f04f 0000 	mov.w	r0, #0
 8005cde:	f04f 0100 	mov.w	r1, #0
 8005ce2:	0159      	lsls	r1, r3, #5
 8005ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ce8:	0150      	lsls	r0, r2, #5
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4621      	mov	r1, r4
 8005cf0:	1a51      	subs	r1, r2, r1
 8005cf2:	6139      	str	r1, [r7, #16]
 8005cf4:	4629      	mov	r1, r5
 8005cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d08:	4659      	mov	r1, fp
 8005d0a:	018b      	lsls	r3, r1, #6
 8005d0c:	4651      	mov	r1, sl
 8005d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d12:	4651      	mov	r1, sl
 8005d14:	018a      	lsls	r2, r1, #6
 8005d16:	4651      	mov	r1, sl
 8005d18:	ebb2 0801 	subs.w	r8, r2, r1
 8005d1c:	4659      	mov	r1, fp
 8005d1e:	eb63 0901 	sbc.w	r9, r3, r1
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d36:	4690      	mov	r8, r2
 8005d38:	4699      	mov	r9, r3
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	eb18 0303 	adds.w	r3, r8, r3
 8005d40:	60bb      	str	r3, [r7, #8]
 8005d42:	462b      	mov	r3, r5
 8005d44:	eb49 0303 	adc.w	r3, r9, r3
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	f04f 0200 	mov.w	r2, #0
 8005d4e:	f04f 0300 	mov.w	r3, #0
 8005d52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d56:	4629      	mov	r1, r5
 8005d58:	024b      	lsls	r3, r1, #9
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d60:	4621      	mov	r1, r4
 8005d62:	024a      	lsls	r2, r1, #9
 8005d64:	4610      	mov	r0, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d74:	f7fa fdc2 	bl	80008fc <__aeabi_uldivmod>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d80:	e058      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d82:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	099b      	lsrs	r3, r3, #6
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d92:	623b      	str	r3, [r7, #32]
 8005d94:	2300      	movs	r3, #0
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	f04f 0000 	mov.w	r0, #0
 8005da4:	f04f 0100 	mov.w	r1, #0
 8005da8:	0159      	lsls	r1, r3, #5
 8005daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dae:	0150      	lsls	r0, r2, #5
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4641      	mov	r1, r8
 8005db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dba:	4649      	mov	r1, r9
 8005dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dc0:	f04f 0200 	mov.w	r2, #0
 8005dc4:	f04f 0300 	mov.w	r3, #0
 8005dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8005dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	00eb      	lsls	r3, r5, #3
 8005de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dea:	00e2      	lsls	r2, r4, #3
 8005dec:	4614      	mov	r4, r2
 8005dee:	461d      	mov	r5, r3
 8005df0:	4643      	mov	r3, r8
 8005df2:	18e3      	adds	r3, r4, r3
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	464b      	mov	r3, r9
 8005df8:	eb45 0303 	adc.w	r3, r5, r3
 8005dfc:	607b      	str	r3, [r7, #4]
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	028b      	lsls	r3, r1, #10
 8005e0e:	4621      	mov	r1, r4
 8005e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e14:	4621      	mov	r1, r4
 8005e16:	028a      	lsls	r2, r1, #10
 8005e18:	4610      	mov	r0, r2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e1e:	2200      	movs	r2, #0
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	61fa      	str	r2, [r7, #28]
 8005e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e28:	f7fa fd68 	bl	80008fc <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4613      	mov	r3, r2
 8005e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e34:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	0c1b      	lsrs	r3, r3, #16
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	005b      	lsls	r3, r3, #1
 8005e42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e4e:	e002      	b.n	8005e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3750      	adds	r7, #80	@ 0x50
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e62:	bf00      	nop
 8005e64:	40023800 	.word	0x40023800
 8005e68:	00f42400 	.word	0x00f42400
 8005e6c:	007a1200 	.word	0x007a1200

08005e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e74:	4b03      	ldr	r3, [pc, #12]	@ (8005e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e76:	681b      	ldr	r3, [r3, #0]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	20000000 	.word	0x20000000

08005e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e8c:	f7ff fff0 	bl	8005e70 <HAL_RCC_GetHCLKFreq>
 8005e90:	4602      	mov	r2, r0
 8005e92:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	0a9b      	lsrs	r3, r3, #10
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	4903      	ldr	r1, [pc, #12]	@ (8005eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	0800ed9c 	.word	0x0800ed9c

08005eb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	220f      	movs	r2, #15
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ec0:	4b12      	ldr	r3, [pc, #72]	@ (8005f0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8005f0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8005f0c <HAL_RCC_GetClockConfig+0x5c>)
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005ee4:	4b09      	ldr	r3, [pc, #36]	@ (8005f0c <HAL_RCC_GetClockConfig+0x5c>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ef2:	4b07      	ldr	r3, [pc, #28]	@ (8005f10 <HAL_RCC_GetClockConfig+0x60>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 020f 	and.w	r2, r3, #15
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	601a      	str	r2, [r3, #0]
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800
 8005f10:	40023c00 	.word	0x40023c00

08005f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d10b      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d075      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f48:	4b91      	ldr	r3, [pc, #580]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f4e:	f7fc fed3 	bl	8002cf8 <HAL_GetTick>
 8005f52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f54:	e008      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f56:	f7fc fecf 	bl	8002cf8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e189      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f68:	4b8a      	ldr	r3, [pc, #552]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f0      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d009      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	019a      	lsls	r2, r3, #6
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	071b      	lsls	r3, r3, #28
 8005f8c:	4981      	ldr	r1, [pc, #516]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01f      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fa6:	0f1b      	lsrs	r3, r3, #28
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	019a      	lsls	r2, r3, #6
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	061b      	lsls	r3, r3, #24
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	071b      	lsls	r3, r3, #28
 8005fc0:	4974      	ldr	r1, [pc, #464]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fc8:	4b72      	ldr	r3, [pc, #456]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fce:	f023 021f 	bic.w	r2, r3, #31
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	3b01      	subs	r3, #1
 8005fd8:	496e      	ldr	r1, [pc, #440]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	019a      	lsls	r2, r3, #6
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	061b      	lsls	r3, r3, #24
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	071b      	lsls	r3, r3, #28
 8006000:	4964      	ldr	r1, [pc, #400]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006008:	4b61      	ldr	r3, [pc, #388]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800600a:	2201      	movs	r2, #1
 800600c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800600e:	f7fc fe73 	bl	8002cf8 <HAL_GetTick>
 8006012:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006014:	e008      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006016:	f7fc fe6f 	bl	8002cf8 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e129      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006028:	4b5a      	ldr	r3, [pc, #360]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d105      	bne.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006048:	2b00      	cmp	r3, #0
 800604a:	d079      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800604c:	4b52      	ldr	r3, [pc, #328]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006052:	f7fc fe51 	bl	8002cf8 <HAL_GetTick>
 8006056:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006058:	e008      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800605a:	f7fc fe4d 	bl	8002cf8 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e107      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800606c:	4b49      	ldr	r3, [pc, #292]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006074:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006078:	d0ef      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d020      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006086:	4b43      	ldr	r3, [pc, #268]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608c:	0f1b      	lsrs	r3, r3, #28
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	019a      	lsls	r2, r3, #6
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	431a      	orrs	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	071b      	lsls	r3, r3, #28
 80060a6:	493b      	ldr	r1, [pc, #236]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060ae:	4b39      	ldr	r3, [pc, #228]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	3b01      	subs	r3, #1
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	4934      	ldr	r1, [pc, #208]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0308 	and.w	r3, r3, #8
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01e      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80060d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060da:	0e1b      	lsrs	r3, r3, #24
 80060dc:	f003 030f 	and.w	r3, r3, #15
 80060e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	019a      	lsls	r2, r3, #6
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	061b      	lsls	r3, r3, #24
 80060ec:	431a      	orrs	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	071b      	lsls	r3, r3, #28
 80060f4:	4927      	ldr	r1, [pc, #156]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80060fc:	4b25      	ldr	r3, [pc, #148]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006102:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610a:	4922      	ldr	r1, [pc, #136]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006112:	4b21      	ldr	r3, [pc, #132]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006118:	f7fc fdee 	bl	8002cf8 <HAL_GetTick>
 800611c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006120:	f7fc fdea 	bl	8002cf8 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d901      	bls.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e0a4      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006132:	4b18      	ldr	r3, [pc, #96]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800613a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800613e:	d1ef      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 808b 	beq.w	8006264 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800614e:	2300      	movs	r3, #0
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	4b10      	ldr	r3, [pc, #64]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	4a0f      	ldr	r2, [pc, #60]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800615c:	6413      	str	r3, [r2, #64]	@ 0x40
 800615e:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800616a:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006174:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006176:	f7fc fdbf 	bl	8002cf8 <HAL_GetTick>
 800617a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800617c:	e010      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617e:	f7fc fdbb 	bl	8002cf8 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d909      	bls.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e075      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006190:	42470068 	.word	0x42470068
 8006194:	40023800 	.word	0x40023800
 8006198:	42470070 	.word	0x42470070
 800619c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80061a0:	4b38      	ldr	r3, [pc, #224]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0e8      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061ac:	4b36      	ldr	r3, [pc, #216]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d02f      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d028      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061d4:	4b2d      	ldr	r3, [pc, #180]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80061da:	4b2c      	ldr	r3, [pc, #176]	@ (800628c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80061e0:	4a29      	ldr	r2, [pc, #164]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061e6:	4b28      	ldr	r3, [pc, #160]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d114      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061f2:	f7fc fd81 	bl	8002cf8 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f8:	e00a      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061fa:	f7fc fd7d 	bl	8002cf8 <HAL_GetTick>
 80061fe:	4602      	mov	r2, r0
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006208:	4293      	cmp	r3, r2
 800620a:	d901      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e035      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006210:	4b1d      	ldr	r3, [pc, #116]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006214:	f003 0302 	and.w	r3, r3, #2
 8006218:	2b00      	cmp	r3, #0
 800621a:	d0ee      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006228:	d10d      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800622a:	4b17      	ldr	r3, [pc, #92]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006236:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800623a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800623e:	4912      	ldr	r1, [pc, #72]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006240:	4313      	orrs	r3, r2
 8006242:	608b      	str	r3, [r1, #8]
 8006244:	e005      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006246:	4b10      	ldr	r3, [pc, #64]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	4a0f      	ldr	r2, [pc, #60]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800624c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006250:	6093      	str	r3, [r2, #8]
 8006252:	4b0d      	ldr	r3, [pc, #52]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006254:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800625e:	490a      	ldr	r1, [pc, #40]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006260:	4313      	orrs	r3, r2
 8006262:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b00      	cmp	r3, #0
 800626e:	d004      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006276:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006278:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3718      	adds	r7, #24
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40007000 	.word	0x40007000
 8006288:	40023800 	.word	0x40023800
 800628c:	42470e40 	.word	0x42470e40
 8006290:	424711e0 	.word	0x424711e0

08006294 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e025      	b.n	80062f4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d106      	bne.n	80062c2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f81d 	bl	80062fc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2202      	movs	r2, #2
 80062c6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4619      	mov	r1, r3
 80062d4:	4610      	mov	r0, r2
 80062d6:	f001 f935 	bl	8007544 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	461a      	mov	r2, r3
 80062e4:	6839      	ldr	r1, [r7, #0]
 80062e6:	f001 f98a 	bl	80075fe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006322:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d101      	bne.n	800632e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800632a:	2302      	movs	r3, #2
 800632c:	e021      	b.n	8006372 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d002      	beq.n	800633a <HAL_SDRAM_SendCommand+0x2a>
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	2b05      	cmp	r3, #5
 8006338:	d118      	bne.n	800636c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	4618      	mov	r0, r3
 800634c:	f001 f9c0 	bl	80076d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d104      	bne.n	8006362 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2205      	movs	r2, #5
 800635c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006360:	e006      	b.n	8006370 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800636a:	e001      	b.n	8006370 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d101      	bne.n	8006394 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006390:	2302      	movs	r3, #2
 8006392:	e016      	b.n	80063c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b01      	cmp	r3, #1
 800639e:	d10f      	bne.n	80063c0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6839      	ldr	r1, [r7, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f001 f9cb 	bl	800774a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	e000      	b.n	80063c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e07b      	b.n	80064d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d108      	bne.n	80063f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063ec:	d009      	beq.n	8006402 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	61da      	str	r2, [r3, #28]
 80063f4:	e005      	b.n	8006402 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f885 	bl	800652c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006438:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006454:	431a      	orrs	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006486:	ea42 0103 	orr.w	r1, r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	430a      	orrs	r2, r1
 8006498:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	0c1b      	lsrs	r3, r3, #16
 80064a0:	f003 0104 	and.w	r1, r3, #4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	f003 0210 	and.w	r2, r3, #16
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	69da      	ldr	r2, [r3, #28]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e01a      	b.n	8006524 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006504:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f81a 	bl	8006540 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006534:	bf00      	nop
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	4613      	mov	r3, r2
 8006562:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006564:	f7fc fbc8 	bl	8002cf8 <HAL_GetTick>
 8006568:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800656a:	88fb      	ldrh	r3, [r7, #6]
 800656c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b01      	cmp	r3, #1
 8006578:	d001      	beq.n	800657e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800657a:	2302      	movs	r3, #2
 800657c:	e12a      	b.n	80067d4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <HAL_SPI_Transmit+0x36>
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e122      	b.n	80067d4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006594:	2b01      	cmp	r3, #1
 8006596:	d101      	bne.n	800659c <HAL_SPI_Transmit+0x48>
 8006598:	2302      	movs	r3, #2
 800659a:	e11b      	b.n	80067d4 <HAL_SPI_Transmit+0x280>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2203      	movs	r2, #3
 80065a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	88fa      	ldrh	r2, [r7, #6]
 80065bc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065ea:	d10f      	bne.n	800660c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800660a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	d007      	beq.n	800662a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006632:	d152      	bne.n	80066da <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_SPI_Transmit+0xee>
 800663c:	8b7b      	ldrh	r3, [r7, #26]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d145      	bne.n	80066ce <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	1c9a      	adds	r2, r3, #2
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006666:	e032      	b.n	80066ce <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d112      	bne.n	800669c <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667a:	881a      	ldrh	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006686:	1c9a      	adds	r2, r3, #2
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	86da      	strh	r2, [r3, #54]	@ 0x36
 800669a:	e018      	b.n	80066ce <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669c:	f7fc fb2c 	bl	8002cf8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d803      	bhi.n	80066b4 <HAL_SPI_Transmit+0x160>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b2:	d102      	bne.n	80066ba <HAL_SPI_Transmit+0x166>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e082      	b.n	80067d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1c7      	bne.n	8006668 <HAL_SPI_Transmit+0x114>
 80066d8:	e053      	b.n	8006782 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d002      	beq.n	80066e8 <HAL_SPI_Transmit+0x194>
 80066e2:	8b7b      	ldrh	r3, [r7, #26]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d147      	bne.n	8006778 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006704:	b29b      	uxth	r3, r3
 8006706:	3b01      	subs	r3, #1
 8006708:	b29a      	uxth	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800670e:	e033      	b.n	8006778 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b02      	cmp	r3, #2
 800671c:	d113      	bne.n	8006746 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	330c      	adds	r3, #12
 8006728:	7812      	ldrb	r2, [r2, #0]
 800672a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800673a:	b29b      	uxth	r3, r3
 800673c:	3b01      	subs	r3, #1
 800673e:	b29a      	uxth	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006744:	e018      	b.n	8006778 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006746:	f7fc fad7 	bl	8002cf8 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d803      	bhi.n	800675e <HAL_SPI_Transmit+0x20a>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d102      	bne.n	8006764 <HAL_SPI_Transmit+0x210>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d109      	bne.n	8006778 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e02d      	b.n	80067d4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1c6      	bne.n	8006710 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fbe6 	bl	8006f58 <SPI_EndRxTxTransaction>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2220      	movs	r2, #32
 8006796:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d001      	beq.n	80067d2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e000      	b.n	80067d4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
  }
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af02      	add	r7, sp, #8
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d001      	beq.n	80067fc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80067f8:	2302      	movs	r3, #2
 80067fa:	e104      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006804:	d112      	bne.n	800682c <HAL_SPI_Receive+0x50>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10e      	bne.n	800682c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2204      	movs	r2, #4
 8006812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006816:	88fa      	ldrh	r2, [r7, #6]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f8f3 	bl	8006a0e <HAL_SPI_TransmitReceive>
 8006828:	4603      	mov	r3, r0
 800682a:	e0ec      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800682c:	f7fc fa64 	bl	8002cf8 <HAL_GetTick>
 8006830:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <HAL_SPI_Receive+0x62>
 8006838:	88fb      	ldrh	r3, [r7, #6]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0e1      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006848:	2b01      	cmp	r3, #1
 800684a:	d101      	bne.n	8006850 <HAL_SPI_Receive+0x74>
 800684c:	2302      	movs	r3, #2
 800684e:	e0da      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2204      	movs	r2, #4
 800685c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	88fa      	ldrh	r2, [r7, #6]
 8006870:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	88fa      	ldrh	r2, [r7, #6]
 8006876:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800689e:	d10f      	bne.n	80068c0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ca:	2b40      	cmp	r3, #64	@ 0x40
 80068cc:	d007      	beq.n	80068de <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068dc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d170      	bne.n	80069c8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80068e6:	e035      	b.n	8006954 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d115      	bne.n	8006922 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f103 020c 	add.w	r2, r3, #12
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006902:	7812      	ldrb	r2, [r2, #0]
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006920:	e018      	b.n	8006954 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006922:	f7fc f9e9 	bl	8002cf8 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d803      	bhi.n	800693a <HAL_SPI_Receive+0x15e>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006938:	d102      	bne.n	8006940 <HAL_SPI_Receive+0x164>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006950:	2303      	movs	r3, #3
 8006952:	e058      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006958:	b29b      	uxth	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1c4      	bne.n	80068e8 <HAL_SPI_Receive+0x10c>
 800695e:	e038      	b.n	80069d2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b01      	cmp	r3, #1
 800696c:	d113      	bne.n	8006996 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006978:	b292      	uxth	r2, r2
 800697a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006980:	1c9a      	adds	r2, r3, #2
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006994:	e018      	b.n	80069c8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006996:	f7fc f9af 	bl	8002cf8 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d803      	bhi.n	80069ae <HAL_SPI_Receive+0x1d2>
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ac:	d102      	bne.n	80069b4 <HAL_SPI_Receive+0x1d8>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e01e      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1c6      	bne.n	8006960 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa58 	bl	8006e8c <SPI_EndRxTransaction>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e000      	b.n	8006a06 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006a04:	2300      	movs	r3, #0
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b08a      	sub	sp, #40	@ 0x28
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	607a      	str	r2, [r7, #4]
 8006a1a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a20:	f7fc f96a 	bl	8002cf8 <HAL_GetTick>
 8006a24:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a2c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006a34:	887b      	ldrh	r3, [r7, #2]
 8006a36:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a38:	7ffb      	ldrb	r3, [r7, #31]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d00c      	beq.n	8006a58 <HAL_SPI_TransmitReceive+0x4a>
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a44:	d106      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <HAL_SPI_TransmitReceive+0x46>
 8006a4e:	7ffb      	ldrb	r3, [r7, #31]
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d001      	beq.n	8006a58 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
 8006a56:	e17f      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d005      	beq.n	8006a6a <HAL_SPI_TransmitReceive+0x5c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_SPI_TransmitReceive+0x5c>
 8006a64:	887b      	ldrh	r3, [r7, #2]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e174      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_SPI_TransmitReceive+0x6e>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e16d      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d003      	beq.n	8006a98 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2205      	movs	r2, #5
 8006a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	887a      	ldrh	r2, [r7, #2]
 8006aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	887a      	ldrh	r2, [r7, #2]
 8006aae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	887a      	ldrh	r2, [r7, #2]
 8006aba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	887a      	ldrh	r2, [r7, #2]
 8006ac0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	2b40      	cmp	r3, #64	@ 0x40
 8006ada:	d007      	beq.n	8006aec <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006af4:	d17e      	bne.n	8006bf4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_SPI_TransmitReceive+0xf6>
 8006afe:	8afb      	ldrh	r3, [r7, #22]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d16c      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b08:	881a      	ldrh	r2, [r3, #0]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b14:	1c9a      	adds	r2, r3, #2
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b28:	e059      	b.n	8006bde <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d11b      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x162>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d016      	beq.n	8006b70 <HAL_SPI_TransmitReceive+0x162>
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d113      	bne.n	8006b70 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b4c:	881a      	ldrh	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b58:	1c9a      	adds	r2, r3, #2
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d119      	bne.n	8006bb2 <HAL_SPI_TransmitReceive+0x1a4>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d014      	beq.n	8006bb2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b92:	b292      	uxth	r2, r2
 8006b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9a:	1c9a      	adds	r2, r3, #2
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006bb2:	f7fc f8a1 	bl	8002cf8 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d80d      	bhi.n	8006bde <HAL_SPI_TransmitReceive+0x1d0>
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc8:	d009      	beq.n	8006bde <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0bc      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1a0      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x11c>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d19b      	bne.n	8006b2a <HAL_SPI_TransmitReceive+0x11c>
 8006bf2:	e082      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0x1f4>
 8006bfc:	8afb      	ldrh	r3, [r7, #22]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d171      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	7812      	ldrb	r2, [r2, #0]
 8006c0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c28:	e05d      	b.n	8006ce6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d11c      	bne.n	8006c72 <HAL_SPI_TransmitReceive+0x264>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d017      	beq.n	8006c72 <HAL_SPI_TransmitReceive+0x264>
 8006c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d114      	bne.n	8006c72 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	330c      	adds	r3, #12
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d119      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x2a6>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d014      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cb4:	f7fc f820 	bl	8002cf8 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d803      	bhi.n	8006ccc <HAL_SPI_TransmitReceive+0x2be>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d102      	bne.n	8006cd2 <HAL_SPI_TransmitReceive+0x2c4>
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e038      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d19c      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x21c>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d197      	bne.n	8006c2a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cfa:	6a3a      	ldr	r2, [r7, #32]
 8006cfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 f92a 	bl	8006f58 <SPI_EndRxTxTransaction>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d008      	beq.n	8006d1c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e01d      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10a      	bne.n	8006d3a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	613b      	str	r3, [r7, #16]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006d56:	2300      	movs	r3, #0
  }
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	@ 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d6e:	b2db      	uxtb	r3, r3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d8c:	f7fb ffb4 	bl	8002cf8 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	4413      	add	r3, r2
 8006d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d9c:	f7fb ffac 	bl	8002cf8 <HAL_GetTick>
 8006da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006da2:	4b39      	ldr	r3, [pc, #228]	@ (8006e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	015b      	lsls	r3, r3, #5
 8006da8:	0d1b      	lsrs	r3, r3, #20
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	fb02 f303 	mul.w	r3, r2, r3
 8006db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006db2:	e054      	b.n	8006e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dba:	d050      	beq.n	8006e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dbc:	f7fb ff9c 	bl	8002cf8 <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d902      	bls.n	8006dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d13d      	bne.n	8006e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dea:	d111      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006df4:	d004      	beq.n	8006e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dfe:	d107      	bne.n	8006e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e18:	d10f      	bne.n	8006e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e017      	b.n	8006e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d19b      	bne.n	8006db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000000 	.word	0x20000000

08006e8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af02      	add	r7, sp, #8
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ea0:	d111      	bne.n	8006ec6 <SPI_EndRxTransaction+0x3a>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eaa:	d004      	beq.n	8006eb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eb4:	d107      	bne.n	8006ec6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ec4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ece:	d12a      	bne.n	8006f26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed8:	d012      	beq.n	8006f00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2180      	movs	r1, #128	@ 0x80
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff ff49 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 8006eea:	4603      	mov	r3, r0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d02d      	beq.n	8006f4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef4:	f043 0220 	orr.w	r2, r3, #32
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e026      	b.n	8006f4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2200      	movs	r2, #0
 8006f08:	2101      	movs	r1, #1
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f7ff ff36 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01a      	beq.n	8006f4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1a:	f043 0220 	orr.w	r2, r3, #32
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e013      	b.n	8006f4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	9300      	str	r3, [sp, #0]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2101      	movs	r1, #1
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff ff23 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d007      	beq.n	8006f4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f40:	f043 0220 	orr.w	r2, r3, #32
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e000      	b.n	8006f4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
	...

08006f58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af02      	add	r7, sp, #8
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	2102      	movs	r1, #2
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff ff04 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7e:	f043 0220 	orr.w	r2, r3, #32
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e032      	b.n	8006ff0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff8 <SPI_EndRxTxTransaction+0xa0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8006ffc <SPI_EndRxTxTransaction+0xa4>)
 8006f90:	fba2 2303 	umull	r2, r3, r2, r3
 8006f94:	0d5b      	lsrs	r3, r3, #21
 8006f96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006f9a:	fb02 f303 	mul.w	r3, r2, r3
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fa8:	d112      	bne.n	8006fd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2180      	movs	r1, #128	@ 0x80
 8006fb4:	68f8      	ldr	r0, [r7, #12]
 8006fb6:	f7ff fee1 	bl	8006d7c <SPI_WaitFlagStateUntilTimeout>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d016      	beq.n	8006fee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e00f      	b.n	8006ff0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe6:	2b80      	cmp	r3, #128	@ 0x80
 8006fe8:	d0f2      	beq.n	8006fd0 <SPI_EndRxTxTransaction+0x78>
 8006fea:	e000      	b.n	8006fee <SPI_EndRxTxTransaction+0x96>
        break;
 8006fec:	bf00      	nop
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000000 	.word	0x20000000
 8006ffc:	165e9f81 	.word	0x165e9f81

08007000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e041      	b.n	8007096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d106      	bne.n	800702c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f839 	bl	800709e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3304      	adds	r3, #4
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f000 f9c0 	bl	80073c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d001      	beq.n	80070cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e04e      	b.n	800716a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2202      	movs	r2, #2
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68da      	ldr	r2, [r3, #12]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a23      	ldr	r2, [pc, #140]	@ (8007178 <HAL_TIM_Base_Start_IT+0xc4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d022      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f6:	d01d      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a1f      	ldr	r2, [pc, #124]	@ (800717c <HAL_TIM_Base_Start_IT+0xc8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a1e      	ldr	r2, [pc, #120]	@ (8007180 <HAL_TIM_Base_Start_IT+0xcc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d013      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1c      	ldr	r2, [pc, #112]	@ (8007184 <HAL_TIM_Base_Start_IT+0xd0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1b      	ldr	r2, [pc, #108]	@ (8007188 <HAL_TIM_Base_Start_IT+0xd4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a19      	ldr	r2, [pc, #100]	@ (800718c <HAL_TIM_Base_Start_IT+0xd8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x80>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a18      	ldr	r2, [pc, #96]	@ (8007190 <HAL_TIM_Base_Start_IT+0xdc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d111      	bne.n	8007158 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b06      	cmp	r3, #6
 8007144:	d010      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f042 0201 	orr.w	r2, r2, #1
 8007154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007156:	e007      	b.n	8007168 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f042 0201 	orr.w	r2, r2, #1
 8007166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40010000 	.word	0x40010000
 800717c:	40000400 	.word	0x40000400
 8007180:	40000800 	.word	0x40000800
 8007184:	40000c00 	.word	0x40000c00
 8007188:	40010400 	.word	0x40010400
 800718c:	40014000 	.word	0x40014000
 8007190:	40001800 	.word	0x40001800

08007194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d020      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d01b      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0202 	mvn.w	r2, #2
 80071c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699b      	ldr	r3, [r3, #24]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f8d2 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 80071e4:	e005      	b.n	80071f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 f8c4 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f8d5 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 0304 	and.w	r3, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d020      	beq.n	8007244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01b      	beq.n	8007244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0204 	mvn.w	r2, #4
 8007214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2202      	movs	r2, #2
 800721a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f8ac 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 8007230:	e005      	b.n	800723e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f89e 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f8af 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	f003 0308 	and.w	r3, r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	d020      	beq.n	8007290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01b      	beq.n	8007290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f06f 0208 	mvn.w	r2, #8
 8007260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2204      	movs	r2, #4
 8007266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f886 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 800727c:	e005      	b.n	800728a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f878 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f889 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	d020      	beq.n	80072dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01b      	beq.n	80072dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f06f 0210 	mvn.w	r2, #16
 80072ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2208      	movs	r2, #8
 80072b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f860 	bl	8007388 <HAL_TIM_IC_CaptureCallback>
 80072c8:	e005      	b.n	80072d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f852 	bl	8007374 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f863 	bl	800739c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 0301 	and.w	r3, r3, #1
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00c      	beq.n	8007300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d007      	beq.n	8007300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0201 	mvn.w	r2, #1
 80072f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7f9 fec6 	bl	800108c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00c      	beq.n	8007324 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007310:	2b00      	cmp	r3, #0
 8007312:	d007      	beq.n	8007324 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f906 	bl	8007530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00c      	beq.n	8007348 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f834 	bl	80073b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	f003 0320 	and.w	r3, r3, #32
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00c      	beq.n	800736c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d007      	beq.n	800736c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0220 	mvn.w	r2, #32
 8007364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f8d8 	bl	800751c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800736c:	bf00      	nop
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073a4:	bf00      	nop
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a46      	ldr	r2, [pc, #280]	@ (80074f0 <TIM_Base_SetConfig+0x12c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073e2:	d00f      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a43      	ldr	r2, [pc, #268]	@ (80074f4 <TIM_Base_SetConfig+0x130>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00b      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a42      	ldr	r2, [pc, #264]	@ (80074f8 <TIM_Base_SetConfig+0x134>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d007      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a41      	ldr	r2, [pc, #260]	@ (80074fc <TIM_Base_SetConfig+0x138>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_Base_SetConfig+0x40>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a40      	ldr	r2, [pc, #256]	@ (8007500 <TIM_Base_SetConfig+0x13c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d108      	bne.n	8007416 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800740a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a35      	ldr	r2, [pc, #212]	@ (80074f0 <TIM_Base_SetConfig+0x12c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d02b      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007424:	d027      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a32      	ldr	r2, [pc, #200]	@ (80074f4 <TIM_Base_SetConfig+0x130>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d023      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a31      	ldr	r2, [pc, #196]	@ (80074f8 <TIM_Base_SetConfig+0x134>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d01f      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a30      	ldr	r2, [pc, #192]	@ (80074fc <TIM_Base_SetConfig+0x138>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d01b      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a2f      	ldr	r2, [pc, #188]	@ (8007500 <TIM_Base_SetConfig+0x13c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d017      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a2e      	ldr	r2, [pc, #184]	@ (8007504 <TIM_Base_SetConfig+0x140>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d013      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a2d      	ldr	r2, [pc, #180]	@ (8007508 <TIM_Base_SetConfig+0x144>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00f      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a2c      	ldr	r2, [pc, #176]	@ (800750c <TIM_Base_SetConfig+0x148>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d00b      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a2b      	ldr	r2, [pc, #172]	@ (8007510 <TIM_Base_SetConfig+0x14c>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d007      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a2a      	ldr	r2, [pc, #168]	@ (8007514 <TIM_Base_SetConfig+0x150>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d003      	beq.n	8007476 <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a29      	ldr	r2, [pc, #164]	@ (8007518 <TIM_Base_SetConfig+0x154>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d108      	bne.n	8007488 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800747c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4313      	orrs	r3, r2
 8007486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	4313      	orrs	r3, r2
 8007494:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	689a      	ldr	r2, [r3, #8]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a10      	ldr	r2, [pc, #64]	@ (80074f0 <TIM_Base_SetConfig+0x12c>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_Base_SetConfig+0xf8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a12      	ldr	r2, [pc, #72]	@ (8007500 <TIM_Base_SetConfig+0x13c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d103      	bne.n	80074c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	691a      	ldr	r2, [r3, #16]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d105      	bne.n	80074e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f023 0201 	bic.w	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	611a      	str	r2, [r3, #16]
  }
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40010000 	.word	0x40010000
 80074f4:	40000400 	.word	0x40000400
 80074f8:	40000800 	.word	0x40000800
 80074fc:	40000c00 	.word	0x40000c00
 8007500:	40010400 	.word	0x40010400
 8007504:	40014000 	.word	0x40014000
 8007508:	40014400 	.word	0x40014400
 800750c:	40014800 	.word	0x40014800
 8007510:	40001800 	.word	0x40001800
 8007514:	40001c00 	.word	0x40001c00
 8007518:	40002000 	.word	0x40002000

0800751c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d123      	bne.n	800759e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800755e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	6851      	ldr	r1, [r2, #4]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	6892      	ldr	r2, [r2, #8]
 800756a:	4311      	orrs	r1, r2
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	68d2      	ldr	r2, [r2, #12]
 8007570:	4311      	orrs	r1, r2
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	6912      	ldr	r2, [r2, #16]
 8007576:	4311      	orrs	r1, r2
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	6952      	ldr	r2, [r2, #20]
 800757c:	4311      	orrs	r1, r2
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	6992      	ldr	r2, [r2, #24]
 8007582:	4311      	orrs	r1, r2
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	69d2      	ldr	r2, [r2, #28]
 8007588:	4311      	orrs	r1, r2
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	6a12      	ldr	r2, [r2, #32]
 800758e:	4311      	orrs	r1, r2
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007594:	430a      	orrs	r2, r1
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
 800759c:	e028      	b.n	80075f0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	69d9      	ldr	r1, [r3, #28]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	4319      	orrs	r1, r3
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b4:	430b      	orrs	r3, r1
 80075b6:	431a      	orrs	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80075c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	6851      	ldr	r1, [r2, #4]
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	6892      	ldr	r2, [r2, #8]
 80075d0:	4311      	orrs	r1, r2
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	68d2      	ldr	r2, [r2, #12]
 80075d6:	4311      	orrs	r1, r2
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	6912      	ldr	r2, [r2, #16]
 80075dc:	4311      	orrs	r1, r2
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	6952      	ldr	r2, [r2, #20]
 80075e2:	4311      	orrs	r1, r2
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	6992      	ldr	r2, [r2, #24]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d128      	bne.n	8007662 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	1e59      	subs	r1, r3, #1
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	3b01      	subs	r3, #1
 8007624:	011b      	lsls	r3, r3, #4
 8007626:	4319      	orrs	r1, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	3b01      	subs	r3, #1
 800762e:	021b      	lsls	r3, r3, #8
 8007630:	4319      	orrs	r1, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	3b01      	subs	r3, #1
 8007638:	031b      	lsls	r3, r3, #12
 800763a:	4319      	orrs	r1, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	3b01      	subs	r3, #1
 8007642:	041b      	lsls	r3, r3, #16
 8007644:	4319      	orrs	r1, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	695b      	ldr	r3, [r3, #20]
 800764a:	3b01      	subs	r3, #1
 800764c:	051b      	lsls	r3, r3, #20
 800764e:	4319      	orrs	r1, r3
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	3b01      	subs	r3, #1
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	430b      	orrs	r3, r1
 800765a:	431a      	orrs	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	609a      	str	r2, [r3, #8]
 8007660:	e02f      	b.n	80076c2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800766a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	68d2      	ldr	r2, [r2, #12]
 8007672:	3a01      	subs	r2, #1
 8007674:	0311      	lsls	r1, r2, #12
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	6952      	ldr	r2, [r2, #20]
 800767a:	3a01      	subs	r2, #1
 800767c:	0512      	lsls	r2, r2, #20
 800767e:	430a      	orrs	r2, r1
 8007680:	431a      	orrs	r2, r3
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	1e59      	subs	r1, r3, #1
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	3b01      	subs	r3, #1
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	4319      	orrs	r1, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	4319      	orrs	r1, r3
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	3b01      	subs	r3, #1
 80076ae:	041b      	lsls	r3, r3, #16
 80076b0:	4319      	orrs	r1, r3
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	061b      	lsls	r3, r3, #24
 80076ba:	430b      	orrs	r3, r1
 80076bc:	431a      	orrs	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	0d9b      	lsrs	r3, r3, #22
 80076e6:	059b      	lsls	r3, r3, #22
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	6811      	ldr	r1, [r2, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	6852      	ldr	r2, [r2, #4]
 80076f0:	4311      	orrs	r1, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	6892      	ldr	r2, [r2, #8]
 80076f6:	3a01      	subs	r2, #1
 80076f8:	0152      	lsls	r2, r2, #5
 80076fa:	4311      	orrs	r1, r2
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	68d2      	ldr	r2, [r2, #12]
 8007700:	0252      	lsls	r2, r2, #9
 8007702:	430a      	orrs	r2, r1
 8007704:	431a      	orrs	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800770a:	f7fb faf5 	bl	8002cf8 <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007710:	e010      	b.n	8007734 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007718:	d00c      	beq.n	8007734 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <FMC_SDRAM_SendCommand+0x60>
 8007720:	f7fb faea 	bl	8002cf8 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	d201      	bcs.n	8007734 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e006      	b.n	8007742 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b20      	cmp	r3, #32
 800773e:	d0e8      	beq.n	8007712 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800775c:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	0052      	lsls	r2, r2, #1
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007778:	b084      	sub	sp, #16
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	f107 001c 	add.w	r0, r7, #28
 8007786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800778a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800778e:	2b01      	cmp	r3, #1
 8007790:	d123      	bne.n	80077da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80077a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d105      	bne.n	80077ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 fae8 	bl	8008da4 <USB_CoreReset>
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]
 80077d8:	e01b      	b.n	8007812 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f001 fadc 	bl	8008da4 <USB_CoreReset>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80077f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d106      	bne.n	8007806 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	639a      	str	r2, [r3, #56]	@ 0x38
 8007804:	e005      	b.n	8007812 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800780a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007812:	7fbb      	ldrb	r3, [r7, #30]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d10b      	bne.n	8007830 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f043 0206 	orr.w	r2, r3, #6
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f043 0220 	orr.w	r2, r3, #32
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr

08007840 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	4613      	mov	r3, r2
 800784c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d165      	bne.n	8007920 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4a41      	ldr	r2, [pc, #260]	@ (800795c <USB_SetTurnaroundTime+0x11c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d906      	bls.n	800786a <USB_SetTurnaroundTime+0x2a>
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4a40      	ldr	r2, [pc, #256]	@ (8007960 <USB_SetTurnaroundTime+0x120>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d202      	bcs.n	800786a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007864:	230f      	movs	r3, #15
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	e062      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	4a3c      	ldr	r2, [pc, #240]	@ (8007960 <USB_SetTurnaroundTime+0x120>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d306      	bcc.n	8007880 <USB_SetTurnaroundTime+0x40>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4a3b      	ldr	r2, [pc, #236]	@ (8007964 <USB_SetTurnaroundTime+0x124>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d202      	bcs.n	8007880 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800787a:	230e      	movs	r3, #14
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	e057      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	4a38      	ldr	r2, [pc, #224]	@ (8007964 <USB_SetTurnaroundTime+0x124>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d306      	bcc.n	8007896 <USB_SetTurnaroundTime+0x56>
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	4a37      	ldr	r2, [pc, #220]	@ (8007968 <USB_SetTurnaroundTime+0x128>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d202      	bcs.n	8007896 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007890:	230d      	movs	r3, #13
 8007892:	617b      	str	r3, [r7, #20]
 8007894:	e04c      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	4a33      	ldr	r2, [pc, #204]	@ (8007968 <USB_SetTurnaroundTime+0x128>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d306      	bcc.n	80078ac <USB_SetTurnaroundTime+0x6c>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	4a32      	ldr	r2, [pc, #200]	@ (800796c <USB_SetTurnaroundTime+0x12c>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d802      	bhi.n	80078ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80078a6:	230c      	movs	r3, #12
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e041      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	4a2f      	ldr	r2, [pc, #188]	@ (800796c <USB_SetTurnaroundTime+0x12c>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d906      	bls.n	80078c2 <USB_SetTurnaroundTime+0x82>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007970 <USB_SetTurnaroundTime+0x130>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d802      	bhi.n	80078c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80078bc:	230b      	movs	r3, #11
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e036      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4a2a      	ldr	r2, [pc, #168]	@ (8007970 <USB_SetTurnaroundTime+0x130>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d906      	bls.n	80078d8 <USB_SetTurnaroundTime+0x98>
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4a29      	ldr	r2, [pc, #164]	@ (8007974 <USB_SetTurnaroundTime+0x134>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d802      	bhi.n	80078d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80078d2:	230a      	movs	r3, #10
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e02b      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	4a26      	ldr	r2, [pc, #152]	@ (8007974 <USB_SetTurnaroundTime+0x134>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d906      	bls.n	80078ee <USB_SetTurnaroundTime+0xae>
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	4a25      	ldr	r2, [pc, #148]	@ (8007978 <USB_SetTurnaroundTime+0x138>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d202      	bcs.n	80078ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80078e8:	2309      	movs	r3, #9
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	e020      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	4a21      	ldr	r2, [pc, #132]	@ (8007978 <USB_SetTurnaroundTime+0x138>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d306      	bcc.n	8007904 <USB_SetTurnaroundTime+0xc4>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4a20      	ldr	r2, [pc, #128]	@ (800797c <USB_SetTurnaroundTime+0x13c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d802      	bhi.n	8007904 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80078fe:	2308      	movs	r3, #8
 8007900:	617b      	str	r3, [r7, #20]
 8007902:	e015      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	4a1d      	ldr	r2, [pc, #116]	@ (800797c <USB_SetTurnaroundTime+0x13c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d906      	bls.n	800791a <USB_SetTurnaroundTime+0xda>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4a1c      	ldr	r2, [pc, #112]	@ (8007980 <USB_SetTurnaroundTime+0x140>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d202      	bcs.n	800791a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007914:	2307      	movs	r3, #7
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	e00a      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800791a:	2306      	movs	r3, #6
 800791c:	617b      	str	r3, [r7, #20]
 800791e:	e007      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007920:	79fb      	ldrb	r3, [r7, #7]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d102      	bne.n	800792c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007926:	2309      	movs	r3, #9
 8007928:	617b      	str	r3, [r7, #20]
 800792a:	e001      	b.n	8007930 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800792c:	2309      	movs	r3, #9
 800792e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	029b      	lsls	r3, r3, #10
 8007944:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007948:	431a      	orrs	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	371c      	adds	r7, #28
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr
 800795c:	00d8acbf 	.word	0x00d8acbf
 8007960:	00e4e1c0 	.word	0x00e4e1c0
 8007964:	00f42400 	.word	0x00f42400
 8007968:	01067380 	.word	0x01067380
 800796c:	011a499f 	.word	0x011a499f
 8007970:	01312cff 	.word	0x01312cff
 8007974:	014ca43f 	.word	0x014ca43f
 8007978:	016e3600 	.word	0x016e3600
 800797c:	01a6ab1f 	.word	0x01a6ab1f
 8007980:	01e84800 	.word	0x01e84800

08007984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	f043 0201 	orr.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f023 0201 	bic.w	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d115      	bne.n	8007a16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079f6:	200a      	movs	r0, #10
 80079f8:	f7fb f98a 	bl	8002d10 <HAL_Delay>
      ms += 10U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	330a      	adds	r3, #10
 8007a00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f93f 	bl	8008c86 <USB_GetMode>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d01e      	beq.n	8007a4c <USB_SetCurrentMode+0x84>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a12:	d9f0      	bls.n	80079f6 <USB_SetCurrentMode+0x2e>
 8007a14:	e01a      	b.n	8007a4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d115      	bne.n	8007a48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007a28:	200a      	movs	r0, #10
 8007a2a:	f7fb f971 	bl	8002d10 <HAL_Delay>
      ms += 10U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	330a      	adds	r3, #10
 8007a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f926 	bl	8008c86 <USB_GetMode>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d005      	beq.n	8007a4c <USB_SetCurrentMode+0x84>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2bc7      	cmp	r3, #199	@ 0xc7
 8007a44:	d9f0      	bls.n	8007a28 <USB_SetCurrentMode+0x60>
 8007a46:	e001      	b.n	8007a4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e005      	b.n	8007a58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2bc8      	cmp	r3, #200	@ 0xc8
 8007a50:	d101      	bne.n	8007a56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e000      	b.n	8007a58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a60:	b084      	sub	sp, #16
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
 8007a7e:	e009      	b.n	8007a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3340      	adds	r3, #64	@ 0x40
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	3301      	adds	r3, #1
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b0e      	cmp	r3, #14
 8007a98:	d9f2      	bls.n	8007a80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d11c      	bne.n	8007adc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ada:	e00b      	b.n	8007af4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007afa:	461a      	mov	r2, r3
 8007afc:	2300      	movs	r3, #0
 8007afe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d10d      	bne.n	8007b24 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f968 	bl	8007de8 <USB_SetDevSpeed>
 8007b18:	e008      	b.n	8007b2c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f963 	bl	8007de8 <USB_SetDevSpeed>
 8007b22:	e003      	b.n	8007b2c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007b24:	2103      	movs	r1, #3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f95e 	bl	8007de8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b2c:	2110      	movs	r1, #16
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8fa 	bl	8007d28 <USB_FlushTxFifo>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f924 	bl	8007d8c <USB_FlushRxFifo>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	461a      	mov	r2, r3
 8007b56:	2300      	movs	r3, #0
 8007b58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b60:	461a      	mov	r2, r3
 8007b62:	2300      	movs	r3, #0
 8007b64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
 8007b76:	e043      	b.n	8007c00 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	015a      	lsls	r2, r3, #5
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	4413      	add	r3, r2
 8007b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b8e:	d118      	bne.n	8007bc2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10a      	bne.n	8007bac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	e013      	b.n	8007bd4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	e008      	b.n	8007bd4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bce:	461a      	mov	r2, r3
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be0:	461a      	mov	r2, r3
 8007be2:	2300      	movs	r3, #0
 8007be4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007bf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	613b      	str	r3, [r7, #16]
 8007c00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c04:	461a      	mov	r2, r3
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d3b5      	bcc.n	8007b78 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e043      	b.n	8007c9a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	015a      	lsls	r2, r3, #5
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	4413      	add	r3, r2
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c28:	d118      	bne.n	8007c5c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10a      	bne.n	8007c46 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	e013      	b.n	8007c6e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c52:	461a      	mov	r2, r3
 8007c54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e008      	b.n	8007c6e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c68:	461a      	mov	r2, r3
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	015a      	lsls	r2, r3, #5
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4413      	add	r3, r2
 8007c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	3301      	adds	r3, #1
 8007c98:	613b      	str	r3, [r7, #16]
 8007c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d3b5      	bcc.n	8007c12 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007cc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d105      	bne.n	8007cdc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f043 0210 	orr.w	r2, r3, #16
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	4b10      	ldr	r3, [pc, #64]	@ (8007d24 <USB_DevInit+0x2c4>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ce8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	f043 0208 	orr.w	r2, r3, #8
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d107      	bne.n	8007d14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d0c:	f043 0304 	orr.w	r3, r3, #4
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d20:	b004      	add	sp, #16
 8007d22:	4770      	bx	lr
 8007d24:	803c3800 	.word	0x803c3800

08007d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d42:	d901      	bls.n	8007d48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e01b      	b.n	8007d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	daf2      	bge.n	8007d36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	019b      	lsls	r3, r3, #6
 8007d58:	f043 0220 	orr.w	r2, r3, #32
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3301      	adds	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d6c:	d901      	bls.n	8007d72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e006      	b.n	8007d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f003 0320 	and.w	r3, r3, #32
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d0f0      	beq.n	8007d60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007da4:	d901      	bls.n	8007daa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e018      	b.n	8007ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	daf2      	bge.n	8007d98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2210      	movs	r2, #16
 8007dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dc8:	d901      	bls.n	8007dce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e006      	b.n	8007ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d0f0      	beq.n	8007dbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	68f9      	ldr	r1, [r7, #12]
 8007e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b087      	sub	sp, #28
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f003 0306 	and.w	r3, r3, #6
 8007e32:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	75fb      	strb	r3, [r7, #23]
 8007e3e:	e00a      	b.n	8007e56 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d002      	beq.n	8007e4c <USB_GetDevSpeed+0x32>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d102      	bne.n	8007e52 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	75fb      	strb	r3, [r7, #23]
 8007e50:	e001      	b.n	8007e56 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007e52:	230f      	movs	r3, #15
 8007e54:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	785b      	ldrb	r3, [r3, #1]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d13a      	bne.n	8007ef6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	2101      	movs	r1, #1
 8007e92:	fa01 f303 	lsl.w	r3, r1, r3
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	68f9      	ldr	r1, [r7, #12]
 8007e9a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	015a      	lsls	r2, r3, #5
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d155      	bne.n	8007f64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	791b      	ldrb	r3, [r3, #4]
 8007ed2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ed4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	059b      	lsls	r3, r3, #22
 8007eda:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007edc:	4313      	orrs	r3, r2
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	e036      	b.n	8007f64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007efc:	69da      	ldr	r2, [r3, #28]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	2101      	movs	r1, #1
 8007f08:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0c:	041b      	lsls	r3, r3, #16
 8007f0e:	68f9      	ldr	r1, [r7, #12]
 8007f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	015a      	lsls	r2, r3, #5
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4413      	add	r3, r2
 8007f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d11a      	bne.n	8007f64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	791b      	ldrb	r3, [r3, #4]
 8007f48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007f4a:	430b      	orrs	r3, r1
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	0151      	lsls	r1, r2, #5
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	440a      	add	r2, r1
 8007f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
	...

08007f74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d161      	bne.n	8008054 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fa6:	d11f      	bne.n	8007fe8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fc6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fe2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 030f 	and.w	r3, r3, #15
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	43db      	mvns	r3, r3
 8008002:	68f9      	ldr	r1, [r7, #12]
 8008004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008008:	4013      	ands	r3, r2
 800800a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	f003 030f 	and.w	r3, r3, #15
 800801c:	2101      	movs	r1, #1
 800801e:	fa01 f303 	lsl.w	r3, r1, r3
 8008022:	b29b      	uxth	r3, r3
 8008024:	43db      	mvns	r3, r3
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800802c:	4013      	ands	r3, r2
 800802e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	015a      	lsls	r2, r3, #5
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	0159      	lsls	r1, r3, #5
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	440b      	add	r3, r1
 8008046:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800804a:	4619      	mov	r1, r3
 800804c:	4b35      	ldr	r3, [pc, #212]	@ (8008124 <USB_DeactivateEndpoint+0x1b0>)
 800804e:	4013      	ands	r3, r2
 8008050:	600b      	str	r3, [r1, #0]
 8008052:	e060      	b.n	8008116 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008066:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800806a:	d11f      	bne.n	80080ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	440a      	add	r2, r1
 8008082:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008086:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800808a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 030f 	and.w	r3, r3, #15
 80080bc:	2101      	movs	r1, #1
 80080be:	fa01 f303 	lsl.w	r3, r1, r3
 80080c2:	041b      	lsls	r3, r3, #16
 80080c4:	43db      	mvns	r3, r3
 80080c6:	68f9      	ldr	r1, [r7, #12]
 80080c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080cc:	4013      	ands	r3, r2
 80080ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d6:	69da      	ldr	r2, [r3, #28]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	2101      	movs	r1, #1
 80080e2:	fa01 f303 	lsl.w	r3, r1, r3
 80080e6:	041b      	lsls	r3, r3, #16
 80080e8:	43db      	mvns	r3, r3
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080f0:	4013      	ands	r3, r2
 80080f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	0159      	lsls	r1, r3, #5
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	440b      	add	r3, r1
 800810a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800810e:	4619      	mov	r1, r3
 8008110:	4b05      	ldr	r3, [pc, #20]	@ (8008128 <USB_DeactivateEndpoint+0x1b4>)
 8008112:	4013      	ands	r3, r2
 8008114:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	ec337800 	.word	0xec337800
 8008128:	eff37800 	.word	0xeff37800

0800812c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	785b      	ldrb	r3, [r3, #1]
 8008148:	2b01      	cmp	r3, #1
 800814a:	f040 817f 	bne.w	800844c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d132      	bne.n	80081bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	0151      	lsls	r1, r2, #5
 8008168:	69fa      	ldr	r2, [r7, #28]
 800816a:	440a      	add	r2, r1
 800816c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008170:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008174:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	69fa      	ldr	r2, [r7, #28]
 800818e:	440a      	add	r2, r1
 8008190:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008194:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b4:	0cdb      	lsrs	r3, r3, #19
 80081b6:	04db      	lsls	r3, r3, #19
 80081b8:	6113      	str	r3, [r2, #16]
 80081ba:	e097      	b.n	80082ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	015a      	lsls	r2, r3, #5
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	4413      	add	r3, r2
 80081c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	69ba      	ldr	r2, [r7, #24]
 80081cc:	0151      	lsls	r1, r2, #5
 80081ce:	69fa      	ldr	r2, [r7, #28]
 80081d0:	440a      	add	r2, r1
 80081d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d6:	0cdb      	lsrs	r3, r3, #19
 80081d8:	04db      	lsls	r3, r3, #19
 80081da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80081fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80081fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d11a      	bne.n	800823c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	429a      	cmp	r2, r3
 8008210:	d903      	bls.n	800821a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	689a      	ldr	r2, [r3, #8]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	0151      	lsls	r1, r2, #5
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	440a      	add	r2, r1
 8008230:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008234:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008238:	6113      	str	r3, [r2, #16]
 800823a:	e044      	b.n	80082c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	4413      	add	r3, r2
 8008246:	1e5a      	subs	r2, r3, #1
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008250:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	691a      	ldr	r2, [r3, #16]
 8008260:	8afb      	ldrh	r3, [r7, #22]
 8008262:	04d9      	lsls	r1, r3, #19
 8008264:	4ba4      	ldr	r3, [pc, #656]	@ (80084f8 <USB_EPStartXfer+0x3cc>)
 8008266:	400b      	ands	r3, r1
 8008268:	69b9      	ldr	r1, [r7, #24]
 800826a:	0148      	lsls	r0, r1, #5
 800826c:	69f9      	ldr	r1, [r7, #28]
 800826e:	4401      	add	r1, r0
 8008270:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008274:	4313      	orrs	r3, r2
 8008276:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	791b      	ldrb	r3, [r3, #4]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d122      	bne.n	80082c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	0151      	lsls	r1, r2, #5
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	440a      	add	r2, r1
 8008296:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800829a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800829e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ac:	691a      	ldr	r2, [r3, #16]
 80082ae:	8afb      	ldrh	r3, [r7, #22]
 80082b0:	075b      	lsls	r3, r3, #29
 80082b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80082b6:	69b9      	ldr	r1, [r7, #24]
 80082b8:	0148      	lsls	r0, r1, #5
 80082ba:	69f9      	ldr	r1, [r7, #28]
 80082bc:	4401      	add	r1, r0
 80082be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082c2:	4313      	orrs	r3, r2
 80082c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082dc:	69b9      	ldr	r1, [r7, #24]
 80082de:	0148      	lsls	r0, r1, #5
 80082e0:	69f9      	ldr	r1, [r7, #28]
 80082e2:	4401      	add	r1, r0
 80082e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80082e8:	4313      	orrs	r3, r2
 80082ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082ec:	79fb      	ldrb	r3, [r7, #7]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d14b      	bne.n	800838a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d009      	beq.n	800830e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	4413      	add	r3, r2
 8008302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008306:	461a      	mov	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	791b      	ldrb	r3, [r3, #4]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d128      	bne.n	8008368 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d110      	bne.n	8008348 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008340:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	e00f      	b.n	8008368 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	69ba      	ldr	r2, [r7, #24]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008362:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008366:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	69fb      	ldr	r3, [r7, #28]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	69fa      	ldr	r2, [r7, #28]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008382:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	e166      	b.n	8008658 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	015a      	lsls	r2, r3, #5
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	4413      	add	r3, r2
 8008392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	0151      	lsls	r1, r2, #5
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	440a      	add	r2, r1
 80083a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80083a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	791b      	ldrb	r3, [r3, #4]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d015      	beq.n	80083de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 814e 	beq.w	8008658 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 030f 	and.w	r3, r3, #15
 80083cc:	2101      	movs	r1, #1
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	69f9      	ldr	r1, [r7, #28]
 80083d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083d8:	4313      	orrs	r3, r2
 80083da:	634b      	str	r3, [r1, #52]	@ 0x34
 80083dc:	e13c      	b.n	8008658 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d110      	bne.n	8008410 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	0151      	lsls	r1, r2, #5
 8008400:	69fa      	ldr	r2, [r7, #28]
 8008402:	440a      	add	r2, r1
 8008404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008408:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e00f      	b.n	8008430 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	0151      	lsls	r1, r2, #5
 8008422:	69fa      	ldr	r2, [r7, #28]
 8008424:	440a      	add	r2, r1
 8008426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800842a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800842e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68d9      	ldr	r1, [r3, #12]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	781a      	ldrb	r2, [r3, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	b298      	uxth	r0, r3
 800843e:	79fb      	ldrb	r3, [r7, #7]
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4603      	mov	r3, r0
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f9b9 	bl	80087bc <USB_WritePacket>
 800844a:	e105      	b.n	8008658 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	440a      	add	r2, r1
 8008462:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008466:	0cdb      	lsrs	r3, r3, #19
 8008468:	04db      	lsls	r3, r3, #19
 800846a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008486:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800848a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800848e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d132      	bne.n	80084fc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	689a      	ldr	r2, [r3, #8]
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	6a1b      	ldr	r3, [r3, #32]
 80084c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c4:	69b9      	ldr	r1, [r7, #24]
 80084c6:	0148      	lsls	r0, r1, #5
 80084c8:	69f9      	ldr	r1, [r7, #28]
 80084ca:	4401      	add	r1, r0
 80084cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084d0:	4313      	orrs	r3, r2
 80084d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	69ba      	ldr	r2, [r7, #24]
 80084e4:	0151      	lsls	r1, r2, #5
 80084e6:	69fa      	ldr	r2, [r7, #28]
 80084e8:	440a      	add	r2, r1
 80084ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084f2:	6113      	str	r3, [r2, #16]
 80084f4:	e062      	b.n	80085bc <USB_EPStartXfer+0x490>
 80084f6:	bf00      	nop
 80084f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d123      	bne.n	800854c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	691a      	ldr	r2, [r3, #16]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800851a:	69b9      	ldr	r1, [r7, #24]
 800851c:	0148      	lsls	r0, r1, #5
 800851e:	69f9      	ldr	r1, [r7, #28]
 8008520:	4401      	add	r1, r0
 8008522:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008526:	4313      	orrs	r3, r2
 8008528:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	015a      	lsls	r2, r3, #5
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	0151      	lsls	r1, r2, #5
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	440a      	add	r2, r1
 8008540:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008544:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008548:	6113      	str	r3, [r2, #16]
 800854a:	e037      	b.n	80085bc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	691a      	ldr	r2, [r3, #16]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	4413      	add	r3, r2
 8008556:	1e5a      	subs	r2, r3, #1
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008560:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	8afa      	ldrh	r2, [r7, #22]
 8008568:	fb03 f202 	mul.w	r2, r3, r2
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857c:	691a      	ldr	r2, [r3, #16]
 800857e:	8afb      	ldrh	r3, [r7, #22]
 8008580:	04d9      	lsls	r1, r3, #19
 8008582:	4b38      	ldr	r3, [pc, #224]	@ (8008664 <USB_EPStartXfer+0x538>)
 8008584:	400b      	ands	r3, r1
 8008586:	69b9      	ldr	r1, [r7, #24]
 8008588:	0148      	lsls	r0, r1, #5
 800858a:	69f9      	ldr	r1, [r7, #28]
 800858c:	4401      	add	r1, r0
 800858e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008592:	4313      	orrs	r3, r2
 8008594:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085a2:	691a      	ldr	r2, [r3, #16]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ac:	69b9      	ldr	r1, [r7, #24]
 80085ae:	0148      	lsls	r0, r1, #5
 80085b0:	69f9      	ldr	r1, [r7, #28]
 80085b2:	4401      	add	r1, r0
 80085b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085b8:	4313      	orrs	r3, r2
 80085ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80085bc:	79fb      	ldrb	r3, [r7, #7]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d10d      	bne.n	80085de <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	68d9      	ldr	r1, [r3, #12]
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	015a      	lsls	r2, r3, #5
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085da:	460a      	mov	r2, r1
 80085dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	791b      	ldrb	r3, [r3, #4]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d128      	bne.n	8008638 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d110      	bne.n	8008618 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	69fa      	ldr	r2, [r7, #28]
 800860a:	440a      	add	r2, r1
 800860c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008610:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	e00f      	b.n	8008638 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	0151      	lsls	r1, r2, #5
 800862a:	69fa      	ldr	r2, [r7, #28]
 800862c:	440a      	add	r2, r1
 800862e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008636:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008638:	69bb      	ldr	r3, [r7, #24]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	4413      	add	r3, r2
 8008640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	440a      	add	r2, r1
 800864e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008652:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008656:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3720      	adds	r7, #32
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	1ff80000 	.word	0x1ff80000

08008668 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d14a      	bne.n	800871c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	015a      	lsls	r2, r3, #5
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4413      	add	r3, r2
 8008690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800869a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800869e:	f040 8086 	bne.w	80087ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	015a      	lsls	r2, r3, #5
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	7812      	ldrb	r2, [r2, #0]
 80086b6:	0151      	lsls	r1, r2, #5
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	440a      	add	r2, r1
 80086bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	7812      	ldrb	r2, [r2, #0]
 80086da:	0151      	lsls	r1, r2, #5
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	440a      	add	r2, r1
 80086e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3301      	adds	r3, #1
 80086ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d902      	bls.n	8008700 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	75fb      	strb	r3, [r7, #23]
          break;
 80086fe:	e056      	b.n	80087ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	4413      	add	r3, r2
 800870a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008718:	d0e7      	beq.n	80086ea <USB_EPStopXfer+0x82>
 800871a:	e048      	b.n	80087ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	4413      	add	r3, r2
 8008726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008730:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008734:	d13b      	bne.n	80087ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	7812      	ldrb	r2, [r2, #0]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008754:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008758:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	440a      	add	r2, r1
 8008774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008778:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800877c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	3301      	adds	r3, #1
 8008782:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f242 7210 	movw	r2, #10000	@ 0x2710
 800878a:	4293      	cmp	r3, r2
 800878c:	d902      	bls.n	8008794 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	75fb      	strb	r3, [r7, #23]
          break;
 8008792:	e00c      	b.n	80087ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ac:	d0e7      	beq.n	800877e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	371c      	adds	r7, #28
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80087bc:	b480      	push	{r7}
 80087be:	b089      	sub	sp, #36	@ 0x24
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4611      	mov	r1, r2
 80087c8:	461a      	mov	r2, r3
 80087ca:	460b      	mov	r3, r1
 80087cc:	71fb      	strb	r3, [r7, #7]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80087da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d123      	bne.n	800882a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80087e2:	88bb      	ldrh	r3, [r7, #4]
 80087e4:	3303      	adds	r3, #3
 80087e6:	089b      	lsrs	r3, r3, #2
 80087e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	61bb      	str	r3, [r7, #24]
 80087ee:	e018      	b.n	8008822 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	031a      	lsls	r2, r3, #12
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087fc:	461a      	mov	r2, r3
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	3301      	adds	r3, #1
 8008808:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	3301      	adds	r3, #1
 800880e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	3301      	adds	r3, #1
 8008814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	3301      	adds	r3, #1
 800881a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	3301      	adds	r3, #1
 8008820:	61bb      	str	r3, [r7, #24]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	429a      	cmp	r2, r3
 8008828:	d3e2      	bcc.n	80087f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3724      	adds	r7, #36	@ 0x24
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008838:	b480      	push	{r7}
 800883a:	b08b      	sub	sp, #44	@ 0x2c
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800884e:	88fb      	ldrh	r3, [r7, #6]
 8008850:	089b      	lsrs	r3, r3, #2
 8008852:	b29b      	uxth	r3, r3
 8008854:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800885e:	2300      	movs	r3, #0
 8008860:	623b      	str	r3, [r7, #32]
 8008862:	e014      	b.n	800888e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800886e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	3301      	adds	r3, #1
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	3301      	adds	r3, #1
 800887a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	3301      	adds	r3, #1
 8008880:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	3301      	adds	r3, #1
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008888:	6a3b      	ldr	r3, [r7, #32]
 800888a:	3301      	adds	r3, #1
 800888c:	623b      	str	r3, [r7, #32]
 800888e:	6a3a      	ldr	r2, [r7, #32]
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	429a      	cmp	r2, r3
 8008894:	d3e6      	bcc.n	8008864 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008896:	8bfb      	ldrh	r3, [r7, #30]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01e      	beq.n	80088da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800889c:	2300      	movs	r3, #0
 800889e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088a6:	461a      	mov	r2, r3
 80088a8:	f107 0310 	add.w	r3, r7, #16
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80088b0:	693a      	ldr	r2, [r7, #16]
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	fa22 f303 	lsr.w	r3, r2, r3
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c0:	701a      	strb	r2, [r3, #0]
      i++;
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	3301      	adds	r3, #1
 80088c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	3301      	adds	r3, #1
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80088ce:	8bfb      	ldrh	r3, [r7, #30]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088d4:	8bfb      	ldrh	r3, [r7, #30]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1ea      	bne.n	80088b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80088dc:	4618      	mov	r0, r3
 80088de:	372c      	adds	r7, #44	@ 0x2c
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	785b      	ldrb	r3, [r3, #1]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d12c      	bne.n	800895e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	db12      	blt.n	800893c <USB_EPSetStall+0x54>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00f      	beq.n	800893c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	0151      	lsls	r1, r2, #5
 800892e:	68fa      	ldr	r2, [r7, #12]
 8008930:	440a      	add	r2, r1
 8008932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008936:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800893a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	0151      	lsls	r1, r2, #5
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	440a      	add	r2, r1
 8008952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008956:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800895a:	6013      	str	r3, [r2, #0]
 800895c:	e02b      	b.n	80089b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	db12      	blt.n	8008996 <USB_EPSetStall+0xae>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00f      	beq.n	8008996 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008990:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008994:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80089b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d128      	bne.n	8008a32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	0151      	lsls	r1, r2, #5
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	440a      	add	r2, r1
 80089f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	791b      	ldrb	r3, [r3, #4]
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d003      	beq.n	8008a10 <USB_EPClearStall+0x4c>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	791b      	ldrb	r3, [r3, #4]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d138      	bne.n	8008a82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	0151      	lsls	r1, r2, #5
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	440a      	add	r2, r1
 8008a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a2e:	6013      	str	r3, [r2, #0]
 8008a30:	e027      	b.n	8008a82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	015a      	lsls	r2, r3, #5
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	4413      	add	r3, r2
 8008a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68ba      	ldr	r2, [r7, #8]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008a50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	791b      	ldrb	r3, [r3, #4]
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d003      	beq.n	8008a62 <USB_EPClearStall+0x9e>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	791b      	ldrb	r3, [r3, #4]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d10f      	bne.n	8008a82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a82:	2300      	movs	r3, #0
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3714      	adds	r7, #20
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008aae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008ab2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	78fb      	ldrb	r3, [r7, #3]
 8008abe:	011b      	lsls	r3, r3, #4
 8008ac0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008ac4:	68f9      	ldr	r1, [r7, #12]
 8008ac6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008aca:	4313      	orrs	r3, r2
 8008acc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b0a:	f023 0302 	bic.w	r3, r3, #2
 8008b0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b4c:	f043 0302 	orr.w	r3, r3, #2
 8008b50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4013      	ands	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b78:	68fb      	ldr	r3, [r7, #12]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	68ba      	ldr	r2, [r7, #8]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	0c1b      	lsrs	r3, r3, #16
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	b29b      	uxth	r3, r3
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bee:	b480      	push	{r7}
 8008bf0:	b085      	sub	sp, #20
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b087      	sub	sp, #28
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	f003 030f 	and.w	r3, r3, #15
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	fa22 f303 	lsr.w	r3, r2, r3
 8008c5a:	01db      	lsls	r3, r3, #7
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	693a      	ldr	r2, [r7, #16]
 8008c74:	4013      	ands	r3, r2
 8008c76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c78:	68bb      	ldr	r3, [r7, #8]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f003 0301 	and.w	r3, r3, #1
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cbc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008cc0:	f023 0307 	bic.w	r3, r3, #7
 8008cc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008cd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	333c      	adds	r3, #60	@ 0x3c
 8008cfe:	3304      	adds	r3, #4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4a26      	ldr	r2, [pc, #152]	@ (8008da0 <USB_EP0_OutStart+0xb8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d90a      	bls.n	8008d22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d1c:	d101      	bne.n	8008d22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e037      	b.n	8008d92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d28:	461a      	mov	r2, r3
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d50:	f043 0318 	orr.w	r3, r3, #24
 8008d54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008d68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008d6a:	7afb      	ldrb	r3, [r7, #11]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d10f      	bne.n	8008d90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d76:	461a      	mov	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d8a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008d8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	371c      	adds	r7, #28
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	4f54300a 	.word	0x4f54300a

08008da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3301      	adds	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008dbc:	d901      	bls.n	8008dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e01b      	b.n	8008dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	daf2      	bge.n	8008db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f043 0201 	orr.w	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008de6:	d901      	bls.n	8008dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e006      	b.n	8008dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d0f0      	beq.n	8008dda <USB_CoreReset+0x36>

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
	...

08008e08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008e14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008e18:	f005 fa66 	bl	800e2e8 <USBD_static_malloc>
 8008e1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d109      	bne.n	8008e38 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	32b0      	adds	r2, #176	@ 0xb0
 8008e2e:	2100      	movs	r1, #0
 8008e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008e34:	2302      	movs	r3, #2
 8008e36:	e0d4      	b.n	8008fe2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008e38:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f005 fab6 	bl	800e3b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	32b0      	adds	r2, #176	@ 0xb0
 8008e4e:	68f9      	ldr	r1, [r7, #12]
 8008e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32b0      	adds	r2, #176	@ 0xb0
 8008e5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	7c1b      	ldrb	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d138      	bne.n	8008ee2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e70:	4b5e      	ldr	r3, [pc, #376]	@ (8008fec <USBD_CDC_Init+0x1e4>)
 8008e72:	7819      	ldrb	r1, [r3, #0]
 8008e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e78:	2202      	movs	r2, #2
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f005 f911 	bl	800e0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e80:	4b5a      	ldr	r3, [pc, #360]	@ (8008fec <USBD_CDC_Init+0x1e4>)
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	f003 020f 	and.w	r2, r3, #15
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	3324      	adds	r3, #36	@ 0x24
 8008e96:	2201      	movs	r2, #1
 8008e98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e9a:	4b55      	ldr	r3, [pc, #340]	@ (8008ff0 <USBD_CDC_Init+0x1e8>)
 8008e9c:	7819      	ldrb	r1, [r3, #0]
 8008e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ea2:	2202      	movs	r2, #2
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f005 f8fc 	bl	800e0a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008eaa:	4b51      	ldr	r3, [pc, #324]	@ (8008ff0 <USBD_CDC_Init+0x1e8>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 020f 	and.w	r2, r3, #15
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	440b      	add	r3, r1
 8008ebe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff4 <USBD_CDC_Init+0x1ec>)
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	f003 020f 	and.w	r2, r3, #15
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	4413      	add	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	3326      	adds	r3, #38	@ 0x26
 8008edc:	2210      	movs	r2, #16
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	e035      	b.n	8008f4e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008ee2:	4b42      	ldr	r3, [pc, #264]	@ (8008fec <USBD_CDC_Init+0x1e4>)
 8008ee4:	7819      	ldrb	r1, [r3, #0]
 8008ee6:	2340      	movs	r3, #64	@ 0x40
 8008ee8:	2202      	movs	r2, #2
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f005 f8d9 	bl	800e0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8008fec <USBD_CDC_Init+0x1e4>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	f003 020f 	and.w	r2, r3, #15
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	4613      	mov	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	440b      	add	r3, r1
 8008f04:	3324      	adds	r3, #36	@ 0x24
 8008f06:	2201      	movs	r2, #1
 8008f08:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008f0a:	4b39      	ldr	r3, [pc, #228]	@ (8008ff0 <USBD_CDC_Init+0x1e8>)
 8008f0c:	7819      	ldrb	r1, [r3, #0]
 8008f0e:	2340      	movs	r3, #64	@ 0x40
 8008f10:	2202      	movs	r2, #2
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f005 f8c5 	bl	800e0a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008f18:	4b35      	ldr	r3, [pc, #212]	@ (8008ff0 <USBD_CDC_Init+0x1e8>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 020f 	and.w	r2, r3, #15
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f30:	2201      	movs	r2, #1
 8008f32:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008f34:	4b2f      	ldr	r3, [pc, #188]	@ (8008ff4 <USBD_CDC_Init+0x1ec>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	f003 020f 	and.w	r2, r3, #15
 8008f3c:	6879      	ldr	r1, [r7, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	440b      	add	r3, r1
 8008f48:	3326      	adds	r3, #38	@ 0x26
 8008f4a:	2210      	movs	r2, #16
 8008f4c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f4e:	4b29      	ldr	r3, [pc, #164]	@ (8008ff4 <USBD_CDC_Init+0x1ec>)
 8008f50:	7819      	ldrb	r1, [r3, #0]
 8008f52:	2308      	movs	r3, #8
 8008f54:	2203      	movs	r2, #3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f005 f8a3 	bl	800e0a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008f5c:	4b25      	ldr	r3, [pc, #148]	@ (8008ff4 <USBD_CDC_Init+0x1ec>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	f003 020f 	and.w	r2, r3, #15
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	3324      	adds	r3, #36	@ 0x24
 8008f72:	2201      	movs	r2, #1
 8008f74:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	33b0      	adds	r3, #176	@ 0xb0
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008fac:	2302      	movs	r3, #2
 8008fae:	e018      	b.n	8008fe2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	7c1b      	ldrb	r3, [r3, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <USBD_CDC_Init+0x1e8>)
 8008fba:	7819      	ldrb	r1, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008fc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f005 f95a 	bl	800e280 <USBD_LL_PrepareReceive>
 8008fcc:	e008      	b.n	8008fe0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008fce:	4b08      	ldr	r3, [pc, #32]	@ (8008ff0 <USBD_CDC_Init+0x1e8>)
 8008fd0:	7819      	ldrb	r1, [r3, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008fd8:	2340      	movs	r3, #64	@ 0x40
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f005 f950 	bl	800e280 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	2000010f 	.word	0x2000010f
 8008ff0:	20000110 	.word	0x20000110
 8008ff4:	20000111 	.word	0x20000111

08008ff8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009004:	4b3a      	ldr	r3, [pc, #232]	@ (80090f0 <USBD_CDC_DeInit+0xf8>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	4619      	mov	r1, r3
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f005 f86f 	bl	800e0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009010:	4b37      	ldr	r3, [pc, #220]	@ (80090f0 <USBD_CDC_DeInit+0xf8>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 020f 	and.w	r2, r3, #15
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	4413      	add	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	3324      	adds	r3, #36	@ 0x24
 8009026:	2200      	movs	r2, #0
 8009028:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800902a:	4b32      	ldr	r3, [pc, #200]	@ (80090f4 <USBD_CDC_DeInit+0xfc>)
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	4619      	mov	r1, r3
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f005 f85c 	bl	800e0ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009036:	4b2f      	ldr	r3, [pc, #188]	@ (80090f4 <USBD_CDC_DeInit+0xfc>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	6879      	ldr	r1, [r7, #4]
 8009040:	4613      	mov	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4413      	add	r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800904e:	2200      	movs	r2, #0
 8009050:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009052:	4b29      	ldr	r3, [pc, #164]	@ (80090f8 <USBD_CDC_DeInit+0x100>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f005 f848 	bl	800e0ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800905e:	4b26      	ldr	r3, [pc, #152]	@ (80090f8 <USBD_CDC_DeInit+0x100>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f003 020f 	and.w	r2, r3, #15
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	4613      	mov	r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	440b      	add	r3, r1
 8009072:	3324      	adds	r3, #36	@ 0x24
 8009074:	2200      	movs	r2, #0
 8009076:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009078:	4b1f      	ldr	r3, [pc, #124]	@ (80090f8 <USBD_CDC_DeInit+0x100>)
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	f003 020f 	and.w	r2, r3, #15
 8009080:	6879      	ldr	r1, [r7, #4]
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	440b      	add	r3, r1
 800908c:	3326      	adds	r3, #38	@ 0x26
 800908e:	2200      	movs	r2, #0
 8009090:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32b0      	adds	r2, #176	@ 0xb0
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01f      	beq.n	80090e4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	33b0      	adds	r3, #176	@ 0xb0
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	32b0      	adds	r2, #176	@ 0xb0
 80090c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f005 f91c 	bl	800e304 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	32b0      	adds	r2, #176	@ 0xb0
 80090d6:	2100      	movs	r1, #0
 80090d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	2000010f 	.word	0x2000010f
 80090f4:	20000110 	.word	0x20000110
 80090f8:	20000111 	.word	0x20000111

080090fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	32b0      	adds	r2, #176	@ 0xb0
 8009110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009114:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009128:	2303      	movs	r3, #3
 800912a:	e0bf      	b.n	80092ac <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009134:	2b00      	cmp	r3, #0
 8009136:	d050      	beq.n	80091da <USBD_CDC_Setup+0xde>
 8009138:	2b20      	cmp	r3, #32
 800913a:	f040 80af 	bne.w	800929c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d03a      	beq.n	80091bc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	b25b      	sxtb	r3, r3
 800914c:	2b00      	cmp	r3, #0
 800914e:	da1b      	bge.n	8009188 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	33b0      	adds	r3, #176	@ 0xb0
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	4413      	add	r3, r2
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009166:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	88d2      	ldrh	r2, [r2, #6]
 800916c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	88db      	ldrh	r3, [r3, #6]
 8009172:	2b07      	cmp	r3, #7
 8009174:	bf28      	it	cs
 8009176:	2307      	movcs	r3, #7
 8009178:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	89fa      	ldrh	r2, [r7, #14]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f001 fd93 	bl	800acac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009186:	e090      	b.n	80092aa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	785a      	ldrb	r2, [r3, #1]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	88db      	ldrh	r3, [r3, #6]
 8009196:	2b3f      	cmp	r3, #63	@ 0x3f
 8009198:	d803      	bhi.n	80091a2 <USBD_CDC_Setup+0xa6>
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88db      	ldrh	r3, [r3, #6]
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	e000      	b.n	80091a4 <USBD_CDC_Setup+0xa8>
 80091a2:	2240      	movs	r2, #64	@ 0x40
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80091aa:	6939      	ldr	r1, [r7, #16]
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80091b2:	461a      	mov	r2, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 fda5 	bl	800ad04 <USBD_CtlPrepareRx>
      break;
 80091ba:	e076      	b.n	80092aa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	33b0      	adds	r3, #176	@ 0xb0
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	7850      	ldrb	r0, [r2, #1]
 80091d2:	2200      	movs	r2, #0
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	4798      	blx	r3
      break;
 80091d8:	e067      	b.n	80092aa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	2b0b      	cmp	r3, #11
 80091e0:	d851      	bhi.n	8009286 <USBD_CDC_Setup+0x18a>
 80091e2:	a201      	add	r2, pc, #4	@ (adr r2, 80091e8 <USBD_CDC_Setup+0xec>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	08009219 	.word	0x08009219
 80091ec:	08009295 	.word	0x08009295
 80091f0:	08009287 	.word	0x08009287
 80091f4:	08009287 	.word	0x08009287
 80091f8:	08009287 	.word	0x08009287
 80091fc:	08009287 	.word	0x08009287
 8009200:	08009287 	.word	0x08009287
 8009204:	08009287 	.word	0x08009287
 8009208:	08009287 	.word	0x08009287
 800920c:	08009287 	.word	0x08009287
 8009210:	08009243 	.word	0x08009243
 8009214:	0800926d 	.word	0x0800926d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b03      	cmp	r3, #3
 8009222:	d107      	bne.n	8009234 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009224:	f107 030a 	add.w	r3, r7, #10
 8009228:	2202      	movs	r2, #2
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 fd3d 	bl	800acac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009232:	e032      	b.n	800929a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009234:	6839      	ldr	r1, [r7, #0]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f001 fcbb 	bl	800abb2 <USBD_CtlError>
            ret = USBD_FAIL;
 800923c:	2303      	movs	r3, #3
 800923e:	75fb      	strb	r3, [r7, #23]
          break;
 8009240:	e02b      	b.n	800929a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b03      	cmp	r3, #3
 800924c:	d107      	bne.n	800925e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800924e:	f107 030d 	add.w	r3, r7, #13
 8009252:	2201      	movs	r2, #1
 8009254:	4619      	mov	r1, r3
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 fd28 	bl	800acac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800925c:	e01d      	b.n	800929a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f001 fca6 	bl	800abb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	75fb      	strb	r3, [r7, #23]
          break;
 800926a:	e016      	b.n	800929a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009272:	b2db      	uxtb	r3, r3
 8009274:	2b03      	cmp	r3, #3
 8009276:	d00f      	beq.n	8009298 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 fc99 	bl	800abb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009280:	2303      	movs	r3, #3
 8009282:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009284:	e008      	b.n	8009298 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fc92 	bl	800abb2 <USBD_CtlError>
          ret = USBD_FAIL;
 800928e:	2303      	movs	r3, #3
 8009290:	75fb      	strb	r3, [r7, #23]
          break;
 8009292:	e002      	b.n	800929a <USBD_CDC_Setup+0x19e>
          break;
 8009294:	bf00      	nop
 8009296:	e008      	b.n	80092aa <USBD_CDC_Setup+0x1ae>
          break;
 8009298:	bf00      	nop
      }
      break;
 800929a:	e006      	b.n	80092aa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 fc87 	bl	800abb2 <USBD_CtlError>
      ret = USBD_FAIL;
 80092a4:	2303      	movs	r3, #3
 80092a6:	75fb      	strb	r3, [r7, #23]
      break;
 80092a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80092aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3718      	adds	r7, #24
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	32b0      	adds	r2, #176	@ 0xb0
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80092da:	2303      	movs	r3, #3
 80092dc:	e065      	b.n	80093aa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	32b0      	adds	r2, #176	@ 0xb0
 80092e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	f003 020f 	and.w	r2, r3, #15
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	4413      	add	r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	3318      	adds	r3, #24
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d02f      	beq.n	8009368 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	f003 020f 	and.w	r2, r3, #15
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	440b      	add	r3, r1
 800931a:	3318      	adds	r3, #24
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	f003 010f 	and.w	r1, r3, #15
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	460b      	mov	r3, r1
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	440b      	add	r3, r1
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4403      	add	r3, r0
 8009330:	331c      	adds	r3, #28
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	fbb2 f1f3 	udiv	r1, r2, r3
 8009338:	fb01 f303 	mul.w	r3, r1, r3
 800933c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800933e:	2b00      	cmp	r3, #0
 8009340:	d112      	bne.n	8009368 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009342:	78fb      	ldrb	r3, [r7, #3]
 8009344:	f003 020f 	and.w	r2, r3, #15
 8009348:	6879      	ldr	r1, [r7, #4]
 800934a:	4613      	mov	r3, r2
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	4413      	add	r3, r2
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	440b      	add	r3, r1
 8009354:	3318      	adds	r3, #24
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800935a:	78f9      	ldrb	r1, [r7, #3]
 800935c:	2300      	movs	r3, #0
 800935e:	2200      	movs	r2, #0
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f004 ff6c 	bl	800e23e <USBD_LL_Transmit>
 8009366:	e01f      	b.n	80093a8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	2200      	movs	r2, #0
 800936c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	33b0      	adds	r3, #176	@ 0xb0
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d010      	beq.n	80093a8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	33b0      	adds	r3, #176	@ 0xb0
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4413      	add	r3, r2
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	691b      	ldr	r3, [r3, #16]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800939e:	68ba      	ldr	r2, [r7, #8]
 80093a0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80093a4:	78fa      	ldrb	r2, [r7, #3]
 80093a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	32b0      	adds	r2, #176	@ 0xb0
 80093c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	32b0      	adds	r2, #176	@ 0xb0
 80093d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d101      	bne.n	80093e4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e01a      	b.n	800941a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f004 ff6a 	bl	800e2c2 <USBD_LL_GetRxDataSize>
 80093ee:	4602      	mov	r2, r0
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	33b0      	adds	r3, #176	@ 0xb0
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009414:	4611      	mov	r1, r2
 8009416:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	32b0      	adds	r2, #176	@ 0xb0
 8009434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009438:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d101      	bne.n	8009444 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009440:	2303      	movs	r3, #3
 8009442:	e024      	b.n	800948e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	33b0      	adds	r3, #176	@ 0xb0
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d019      	beq.n	800948c <USBD_CDC_EP0_RxReady+0x6a>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800945e:	2bff      	cmp	r3, #255	@ 0xff
 8009460:	d014      	beq.n	800948c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	33b0      	adds	r3, #176	@ 0xb0
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800947a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009482:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	22ff      	movs	r2, #255	@ 0xff
 8009488:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80094a0:	2182      	movs	r1, #130	@ 0x82
 80094a2:	4818      	ldr	r0, [pc, #96]	@ (8009504 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80094a4:	f000 fd4f 	bl	8009f46 <USBD_GetEpDesc>
 80094a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094aa:	2101      	movs	r1, #1
 80094ac:	4815      	ldr	r0, [pc, #84]	@ (8009504 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80094ae:	f000 fd4a 	bl	8009f46 <USBD_GetEpDesc>
 80094b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094b4:	2181      	movs	r1, #129	@ 0x81
 80094b6:	4813      	ldr	r0, [pc, #76]	@ (8009504 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80094b8:	f000 fd45 	bl	8009f46 <USBD_GetEpDesc>
 80094bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	2210      	movs	r2, #16
 80094c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d006      	beq.n	80094de <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094d8:	711a      	strb	r2, [r3, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d006      	beq.n	80094f2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094ec:	711a      	strb	r2, [r3, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2243      	movs	r2, #67	@ 0x43
 80094f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094f8:	4b02      	ldr	r3, [pc, #8]	@ (8009504 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3718      	adds	r7, #24
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	200000cc 	.word	0x200000cc

08009508 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b086      	sub	sp, #24
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009510:	2182      	movs	r1, #130	@ 0x82
 8009512:	4818      	ldr	r0, [pc, #96]	@ (8009574 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009514:	f000 fd17 	bl	8009f46 <USBD_GetEpDesc>
 8009518:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800951a:	2101      	movs	r1, #1
 800951c:	4815      	ldr	r0, [pc, #84]	@ (8009574 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800951e:	f000 fd12 	bl	8009f46 <USBD_GetEpDesc>
 8009522:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009524:	2181      	movs	r1, #129	@ 0x81
 8009526:	4813      	ldr	r0, [pc, #76]	@ (8009574 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009528:	f000 fd0d 	bl	8009f46 <USBD_GetEpDesc>
 800952c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	2210      	movs	r2, #16
 8009538:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d006      	beq.n	800954e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2200      	movs	r2, #0
 8009544:	711a      	strb	r2, [r3, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f042 0202 	orr.w	r2, r2, #2
 800954c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d006      	beq.n	8009562 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2200      	movs	r2, #0
 8009558:	711a      	strb	r2, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	f042 0202 	orr.w	r2, r2, #2
 8009560:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2243      	movs	r2, #67	@ 0x43
 8009566:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009568:	4b02      	ldr	r3, [pc, #8]	@ (8009574 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800956a:	4618      	mov	r0, r3
 800956c:	3718      	adds	r7, #24
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	200000cc 	.word	0x200000cc

08009578 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009580:	2182      	movs	r1, #130	@ 0x82
 8009582:	4818      	ldr	r0, [pc, #96]	@ (80095e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009584:	f000 fcdf 	bl	8009f46 <USBD_GetEpDesc>
 8009588:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800958a:	2101      	movs	r1, #1
 800958c:	4815      	ldr	r0, [pc, #84]	@ (80095e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800958e:	f000 fcda 	bl	8009f46 <USBD_GetEpDesc>
 8009592:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009594:	2181      	movs	r1, #129	@ 0x81
 8009596:	4813      	ldr	r0, [pc, #76]	@ (80095e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009598:	f000 fcd5 	bl	8009f46 <USBD_GetEpDesc>
 800959c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2210      	movs	r2, #16
 80095a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d006      	beq.n	80095be <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095b8:	711a      	strb	r2, [r3, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d006      	beq.n	80095d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80095cc:	711a      	strb	r2, [r3, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2243      	movs	r2, #67	@ 0x43
 80095d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80095d8:	4b02      	ldr	r3, [pc, #8]	@ (80095e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	200000cc 	.word	0x200000cc

080095e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	220a      	movs	r2, #10
 80095f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80095f6:	4b03      	ldr	r3, [pc, #12]	@ (8009604 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	20000088 	.word	0x20000088

08009608 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d101      	bne.n	800961c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009618:	2303      	movs	r3, #3
 800961a:	e009      	b.n	8009630 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	33b0      	adds	r3, #176	@ 0xb0
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	32b0      	adds	r2, #176	@ 0xb0
 8009652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009656:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d101      	bne.n	8009662 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800965e:	2303      	movs	r3, #3
 8009660:	e008      	b.n	8009674 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	371c      	adds	r7, #28
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	32b0      	adds	r2, #176	@ 0xb0
 8009694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009698:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d101      	bne.n	80096a4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e004      	b.n	80096ae <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	32b0      	adds	r2, #176	@ 0xb0
 80096ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80096d4:	2301      	movs	r3, #1
 80096d6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80096de:	2303      	movs	r3, #3
 80096e0:	e025      	b.n	800972e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d11f      	bne.n	800972c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80096f4:	4b10      	ldr	r3, [pc, #64]	@ (8009738 <USBD_CDC_TransmitPacket+0x7c>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f003 020f 	and.w	r2, r3, #15
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4403      	add	r3, r0
 800970e:	3318      	adds	r3, #24
 8009710:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009712:	4b09      	ldr	r3, [pc, #36]	@ (8009738 <USBD_CDC_TransmitPacket+0x7c>)
 8009714:	7819      	ldrb	r1, [r3, #0]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f004 fd8b 	bl	800e23e <USBD_LL_Transmit>

    ret = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	2000010f 	.word	0x2000010f

0800973c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	32b0      	adds	r2, #176	@ 0xb0
 800974e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009752:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	32b0      	adds	r2, #176	@ 0xb0
 800975e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009766:	2303      	movs	r3, #3
 8009768:	e018      	b.n	800979c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	7c1b      	ldrb	r3, [r3, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009772:	4b0c      	ldr	r3, [pc, #48]	@ (80097a4 <USBD_CDC_ReceivePacket+0x68>)
 8009774:	7819      	ldrb	r1, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800977c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f004 fd7d 	bl	800e280 <USBD_LL_PrepareReceive>
 8009786:	e008      	b.n	800979a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009788:	4b06      	ldr	r3, [pc, #24]	@ (80097a4 <USBD_CDC_ReceivePacket+0x68>)
 800978a:	7819      	ldrb	r1, [r3, #0]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009792:	2340      	movs	r3, #64	@ 0x40
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f004 fd73 	bl	800e280 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3710      	adds	r7, #16
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000110 	.word	0x20000110

080097a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	4613      	mov	r3, r2
 80097b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	e01f      	b.n	8009800 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f004 fbe7 	bl	800dfc8 <USBD_LL_Init>
 80097fa:	4603      	mov	r3, r0
 80097fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3718      	adds	r7, #24
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009812:	2300      	movs	r3, #0
 8009814:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d101      	bne.n	8009820 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800981c:	2303      	movs	r3, #3
 800981e:	e025      	b.n	800986c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	32ae      	adds	r2, #174	@ 0xae
 8009832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00f      	beq.n	800985c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	32ae      	adds	r2, #174	@ 0xae
 8009846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800984a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984c:	f107 020e 	add.w	r2, r7, #14
 8009850:	4610      	mov	r0, r2
 8009852:	4798      	blx	r3
 8009854:	4602      	mov	r2, r0
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f004 fbf5 	bl	800e06c <USBD_LL_Start>
 8009882:	4603      	mov	r3, r0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009894:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
 80098aa:	460b      	mov	r3, r1
 80098ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d009      	beq.n	80098d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	78fa      	ldrb	r2, [r7, #3]
 80098c6:	4611      	mov	r1, r2
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	4798      	blx	r3
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b084      	sub	sp, #16
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80098e6:	2300      	movs	r3, #0
 80098e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	78fa      	ldrb	r2, [r7, #3]
 80098f4:	4611      	mov	r1, r2
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009900:	2303      	movs	r3, #3
 8009902:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f001 f90c 	bl	800ab3e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009934:	461a      	mov	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009942:	f003 031f 	and.w	r3, r3, #31
 8009946:	2b02      	cmp	r3, #2
 8009948:	d01a      	beq.n	8009980 <USBD_LL_SetupStage+0x72>
 800994a:	2b02      	cmp	r3, #2
 800994c:	d822      	bhi.n	8009994 <USBD_LL_SetupStage+0x86>
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <USBD_LL_SetupStage+0x4a>
 8009952:	2b01      	cmp	r3, #1
 8009954:	d00a      	beq.n	800996c <USBD_LL_SetupStage+0x5e>
 8009956:	e01d      	b.n	8009994 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800995e:	4619      	mov	r1, r3
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 fb63 	bl	800a02c <USBD_StdDevReq>
 8009966:	4603      	mov	r3, r0
 8009968:	73fb      	strb	r3, [r7, #15]
      break;
 800996a:	e020      	b.n	80099ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009972:	4619      	mov	r1, r3
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fbcb 	bl	800a110 <USBD_StdItfReq>
 800997a:	4603      	mov	r3, r0
 800997c:	73fb      	strb	r3, [r7, #15]
      break;
 800997e:	e016      	b.n	80099ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fc2d 	bl	800a1e8 <USBD_StdEPReq>
 800998e:	4603      	mov	r3, r0
 8009990:	73fb      	strb	r3, [r7, #15]
      break;
 8009992:	e00c      	b.n	80099ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800999a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f004 fbc2 	bl	800e12c <USBD_LL_StallEP>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
      break;
 80099ac:	bf00      	nop
  }

  return ret;
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	460b      	mov	r3, r1
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80099c6:	2300      	movs	r3, #0
 80099c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80099ca:	7afb      	ldrb	r3, [r7, #11]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d16e      	bne.n	8009aae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80099d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099de:	2b03      	cmp	r3, #3
 80099e0:	f040 8098 	bne.w	8009b14 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d913      	bls.n	8009a18 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	689a      	ldr	r2, [r3, #8]
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	1ad2      	subs	r2, r2, r3
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	4293      	cmp	r3, r2
 8009a08:	bf28      	it	cs
 8009a0a:	4613      	movcs	r3, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f001 f994 	bl	800ad3e <USBD_CtlContinueRx>
 8009a16:	e07d      	b.n	8009b14 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009a1e:	f003 031f 	and.w	r3, r3, #31
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d014      	beq.n	8009a50 <USBD_LL_DataOutStage+0x98>
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d81d      	bhi.n	8009a66 <USBD_LL_DataOutStage+0xae>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d002      	beq.n	8009a34 <USBD_LL_DataOutStage+0x7c>
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d003      	beq.n	8009a3a <USBD_LL_DataOutStage+0x82>
 8009a32:	e018      	b.n	8009a66 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75bb      	strb	r3, [r7, #22]
            break;
 8009a38:	e018      	b.n	8009a6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	4619      	mov	r1, r3
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fa64 	bl	8009f12 <USBD_CoreFindIF>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	75bb      	strb	r3, [r7, #22]
            break;
 8009a4e:	e00d      	b.n	8009a6c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	4619      	mov	r1, r3
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 fa66 	bl	8009f2c <USBD_CoreFindEP>
 8009a60:	4603      	mov	r3, r0
 8009a62:	75bb      	strb	r3, [r7, #22]
            break;
 8009a64:	e002      	b.n	8009a6c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009a66:	2300      	movs	r3, #0
 8009a68:	75bb      	strb	r3, [r7, #22]
            break;
 8009a6a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009a6c:	7dbb      	ldrb	r3, [r7, #22]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d119      	bne.n	8009aa6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d113      	bne.n	8009aa6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009a7e:	7dba      	ldrb	r2, [r7, #22]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	32ae      	adds	r2, #174	@ 0xae
 8009a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00b      	beq.n	8009aa6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009a8e:	7dba      	ldrb	r2, [r7, #22]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009a96:	7dba      	ldrb	r2, [r7, #22]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	32ae      	adds	r2, #174	@ 0xae
 8009a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	68f8      	ldr	r0, [r7, #12]
 8009aa4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f001 f95a 	bl	800ad60 <USBD_CtlSendStatus>
 8009aac:	e032      	b.n	8009b14 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009aae:	7afb      	ldrb	r3, [r7, #11]
 8009ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fa37 	bl	8009f2c <USBD_CoreFindEP>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ac2:	7dbb      	ldrb	r3, [r7, #22]
 8009ac4:	2bff      	cmp	r3, #255	@ 0xff
 8009ac6:	d025      	beq.n	8009b14 <USBD_LL_DataOutStage+0x15c>
 8009ac8:	7dbb      	ldrb	r3, [r7, #22]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d122      	bne.n	8009b14 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d117      	bne.n	8009b0a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009ada:	7dba      	ldrb	r2, [r7, #22]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	32ae      	adds	r2, #174	@ 0xae
 8009ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00f      	beq.n	8009b0a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009aea:	7dba      	ldrb	r2, [r7, #22]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009af2:	7dba      	ldrb	r2, [r7, #22]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	32ae      	adds	r2, #174	@ 0xae
 8009af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	7afa      	ldrb	r2, [r7, #11]
 8009b00:	4611      	mov	r1, r2
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	4798      	blx	r3
 8009b06:	4603      	mov	r3, r0
 8009b08:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	e000      	b.n	8009b16 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b086      	sub	sp, #24
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	460b      	mov	r3, r1
 8009b28:	607a      	str	r2, [r7, #4]
 8009b2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d16f      	bne.n	8009c12 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	3314      	adds	r3, #20
 8009b36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	d15a      	bne.n	8009bf8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d914      	bls.n	8009b78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	689a      	ldr	r2, [r3, #8]
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	1ad2      	subs	r2, r2, r3
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	461a      	mov	r2, r3
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f001 f8bc 	bl	800ace2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f004 fb85 	bl	800e280 <USBD_LL_PrepareReceive>
 8009b76:	e03f      	b.n	8009bf8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	68da      	ldr	r2, [r3, #12]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d11c      	bne.n	8009bbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d316      	bcc.n	8009bbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	685a      	ldr	r2, [r3, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d20f      	bcs.n	8009bbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f001 f89d 	bl	800ace2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f004 fb62 	bl	800e280 <USBD_LL_PrepareReceive>
 8009bbc:	e01c      	b.n	8009bf8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d10f      	bne.n	8009bea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d009      	beq.n	8009bea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bea:	2180      	movs	r1, #128	@ 0x80
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f004 fa9d 	bl	800e12c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f001 f8c7 	bl	800ad86 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d03a      	beq.n	8009c78 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f7ff fe42 	bl	800988c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009c10:	e032      	b.n	8009c78 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f000 f985 	bl	8009f2c <USBD_CoreFindEP>
 8009c22:	4603      	mov	r3, r0
 8009c24:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c26:	7dfb      	ldrb	r3, [r7, #23]
 8009c28:	2bff      	cmp	r3, #255	@ 0xff
 8009c2a:	d025      	beq.n	8009c78 <USBD_LL_DataInStage+0x15a>
 8009c2c:	7dfb      	ldrb	r3, [r7, #23]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d122      	bne.n	8009c78 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b03      	cmp	r3, #3
 8009c3c:	d11c      	bne.n	8009c78 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009c3e:	7dfa      	ldrb	r2, [r7, #23]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	32ae      	adds	r2, #174	@ 0xae
 8009c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d014      	beq.n	8009c78 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009c4e:	7dfa      	ldrb	r2, [r7, #23]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009c56:	7dfa      	ldrb	r2, [r7, #23]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	32ae      	adds	r2, #174	@ 0xae
 8009c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	7afa      	ldrb	r2, [r7, #11]
 8009c64:	4611      	mov	r1, r2
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	4798      	blx	r3
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009c6e:	7dbb      	ldrb	r3, [r7, #22]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009c74:	7dbb      	ldrb	r3, [r7, #22]
 8009c76:	e000      	b.n	8009c7a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d014      	beq.n	8009ce8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00e      	beq.n	8009ce8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	6852      	ldr	r2, [r2, #4]
 8009cd6:	b2d2      	uxtb	r2, r2
 8009cd8:	4611      	mov	r1, r2
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	4798      	blx	r3
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d001      	beq.n	8009ce8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009ce4:	2303      	movs	r3, #3
 8009ce6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ce8:	2340      	movs	r3, #64	@ 0x40
 8009cea:	2200      	movs	r2, #0
 8009cec:	2100      	movs	r1, #0
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f004 f9d7 	bl	800e0a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2240      	movs	r2, #64	@ 0x40
 8009d00:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009d04:	2340      	movs	r3, #64	@ 0x40
 8009d06:	2200      	movs	r2, #0
 8009d08:	2180      	movs	r1, #128	@ 0x80
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f004 f9c9 	bl	800e0a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2240      	movs	r2, #64	@ 0x40
 8009d1a:	621a      	str	r2, [r3, #32]

  return ret;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	460b      	mov	r3, r1
 8009d30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	d006      	beq.n	8009d68 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2204      	movs	r2, #4
 8009d6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	370c      	adds	r7, #12
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b083      	sub	sp, #12
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b04      	cmp	r3, #4
 8009d90:	d106      	bne.n	8009da0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b03      	cmp	r3, #3
 8009dc0:	d110      	bne.n	8009de4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d00b      	beq.n	8009de4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dd2:	69db      	ldr	r3, [r3, #28]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d005      	beq.n	8009de4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	460b      	mov	r3, r1
 8009df8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	32ae      	adds	r2, #174	@ 0xae
 8009e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e01c      	b.n	8009e4a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b03      	cmp	r3, #3
 8009e1a:	d115      	bne.n	8009e48 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32ae      	adds	r2, #174	@ 0xae
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00b      	beq.n	8009e48 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32ae      	adds	r2, #174	@ 0xae
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	4611      	mov	r1, r2
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b082      	sub	sp, #8
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	32ae      	adds	r2, #174	@ 0xae
 8009e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e01c      	b.n	8009eae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d115      	bne.n	8009eac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	32ae      	adds	r2, #174	@ 0xae
 8009e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	32ae      	adds	r2, #174	@ 0xae
 8009e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	78fa      	ldrb	r2, [r7, #3]
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00e      	beq.n	8009f08 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6852      	ldr	r2, [r2, #4]
 8009ef6:	b2d2      	uxtb	r2, r2
 8009ef8:	4611      	mov	r1, r2
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	4798      	blx	r3
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d001      	beq.n	8009f08 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009f04:	2303      	movs	r3, #3
 8009f06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3710      	adds	r7, #16
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f12:	b480      	push	{r7}
 8009f14:	b083      	sub	sp, #12
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f1e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009f38:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	370c      	adds	r7, #12
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr

08009f46 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b086      	sub	sp, #24
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	885b      	ldrh	r3, [r3, #2]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d91f      	bls.n	8009fac <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009f72:	e013      	b.n	8009f9c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f74:	f107 030a 	add.w	r3, r7, #10
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6978      	ldr	r0, [r7, #20]
 8009f7c:	f000 f81b 	bl	8009fb6 <USBD_GetNextDesc>
 8009f80:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b05      	cmp	r3, #5
 8009f88:	d108      	bne.n	8009f9c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	789b      	ldrb	r3, [r3, #2]
 8009f92:	78fa      	ldrb	r2, [r7, #3]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d008      	beq.n	8009faa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	885b      	ldrh	r3, [r3, #2]
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	897b      	ldrh	r3, [r7, #10]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d8e5      	bhi.n	8009f74 <USBD_GetEpDesc+0x2e>
 8009fa8:	e000      	b.n	8009fac <USBD_GetEpDesc+0x66>
          break;
 8009faa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009fac:	693b      	ldr	r3, [r7, #16]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3718      	adds	r7, #24
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	881b      	ldrh	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	7812      	ldrb	r2, [r2, #0]
 8009fcc:	4413      	add	r3, r2
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4413      	add	r3, r2
 8009fde:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b087      	sub	sp, #28
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	3301      	adds	r3, #1
 800a004:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a00c:	8a3b      	ldrh	r3, [r7, #16]
 800a00e:	021b      	lsls	r3, r3, #8
 800a010:	b21a      	sxth	r2, r3
 800a012:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a016:	4313      	orrs	r3, r2
 800a018:	b21b      	sxth	r3, r3
 800a01a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a01c:	89fb      	ldrh	r3, [r7, #14]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	371c      	adds	r7, #28
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
	...

0800a02c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a042:	2b40      	cmp	r3, #64	@ 0x40
 800a044:	d005      	beq.n	800a052 <USBD_StdDevReq+0x26>
 800a046:	2b40      	cmp	r3, #64	@ 0x40
 800a048:	d857      	bhi.n	800a0fa <USBD_StdDevReq+0xce>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00f      	beq.n	800a06e <USBD_StdDevReq+0x42>
 800a04e:	2b20      	cmp	r3, #32
 800a050:	d153      	bne.n	800a0fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	32ae      	adds	r2, #174	@ 0xae
 800a05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
      break;
 800a06c:	e04a      	b.n	800a104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	785b      	ldrb	r3, [r3, #1]
 800a072:	2b09      	cmp	r3, #9
 800a074:	d83b      	bhi.n	800a0ee <USBD_StdDevReq+0xc2>
 800a076:	a201      	add	r2, pc, #4	@ (adr r2, 800a07c <USBD_StdDevReq+0x50>)
 800a078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07c:	0800a0d1 	.word	0x0800a0d1
 800a080:	0800a0e5 	.word	0x0800a0e5
 800a084:	0800a0ef 	.word	0x0800a0ef
 800a088:	0800a0db 	.word	0x0800a0db
 800a08c:	0800a0ef 	.word	0x0800a0ef
 800a090:	0800a0af 	.word	0x0800a0af
 800a094:	0800a0a5 	.word	0x0800a0a5
 800a098:	0800a0ef 	.word	0x0800a0ef
 800a09c:	0800a0c7 	.word	0x0800a0c7
 800a0a0:	0800a0b9 	.word	0x0800a0b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a0a4:	6839      	ldr	r1, [r7, #0]
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fa3c 	bl	800a524 <USBD_GetDescriptor>
          break;
 800a0ac:	e024      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a0ae:	6839      	ldr	r1, [r7, #0]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fba1 	bl	800a7f8 <USBD_SetAddress>
          break;
 800a0b6:	e01f      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fbe0 	bl	800a880 <USBD_SetConfig>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]
          break;
 800a0c4:	e018      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a0c6:	6839      	ldr	r1, [r7, #0]
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fc83 	bl	800a9d4 <USBD_GetConfig>
          break;
 800a0ce:	e013      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fcb4 	bl	800aa40 <USBD_GetStatus>
          break;
 800a0d8:	e00e      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a0da:	6839      	ldr	r1, [r7, #0]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fce3 	bl	800aaa8 <USBD_SetFeature>
          break;
 800a0e2:	e009      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fd07 	bl	800aafa <USBD_ClrFeature>
          break;
 800a0ec:	e004      	b.n	800a0f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fd5e 	bl	800abb2 <USBD_CtlError>
          break;
 800a0f6:	bf00      	nop
      }
      break;
 800a0f8:	e004      	b.n	800a104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 fd58 	bl	800abb2 <USBD_CtlError>
      break;
 800a102:	bf00      	nop
  }

  return ret;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop

0800a110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a126:	2b40      	cmp	r3, #64	@ 0x40
 800a128:	d005      	beq.n	800a136 <USBD_StdItfReq+0x26>
 800a12a:	2b40      	cmp	r3, #64	@ 0x40
 800a12c:	d852      	bhi.n	800a1d4 <USBD_StdItfReq+0xc4>
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <USBD_StdItfReq+0x26>
 800a132:	2b20      	cmp	r3, #32
 800a134:	d14e      	bne.n	800a1d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	2b02      	cmp	r3, #2
 800a142:	d840      	bhi.n	800a1c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	889b      	ldrh	r3, [r3, #4]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d836      	bhi.n	800a1bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	889b      	ldrh	r3, [r3, #4]
 800a152:	b2db      	uxtb	r3, r3
 800a154:	4619      	mov	r1, r3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff fedb 	bl	8009f12 <USBD_CoreFindIF>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	2bff      	cmp	r3, #255	@ 0xff
 800a164:	d01d      	beq.n	800a1a2 <USBD_StdItfReq+0x92>
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d11a      	bne.n	800a1a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a16c:	7bba      	ldrb	r2, [r7, #14]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	32ae      	adds	r2, #174	@ 0xae
 800a172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00f      	beq.n	800a19c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a17c:	7bba      	ldrb	r2, [r7, #14]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a184:	7bba      	ldrb	r2, [r7, #14]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	32ae      	adds	r2, #174	@ 0xae
 800a18a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	6839      	ldr	r1, [r7, #0]
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	4798      	blx	r3
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a19a:	e004      	b.n	800a1a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a19c:	2303      	movs	r3, #3
 800a19e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a1a0:	e001      	b.n	800a1a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	88db      	ldrh	r3, [r3, #6]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d110      	bne.n	800a1d0 <USBD_StdItfReq+0xc0>
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10d      	bne.n	800a1d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fdd3 	bl	800ad60 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a1ba:	e009      	b.n	800a1d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a1bc:	6839      	ldr	r1, [r7, #0]
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fcf7 	bl	800abb2 <USBD_CtlError>
          break;
 800a1c4:	e004      	b.n	800a1d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fcf2 	bl	800abb2 <USBD_CtlError>
          break;
 800a1ce:	e000      	b.n	800a1d2 <USBD_StdItfReq+0xc2>
          break;
 800a1d0:	bf00      	nop
      }
      break;
 800a1d2:	e004      	b.n	800a1de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a1d4:	6839      	ldr	r1, [r7, #0]
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 fceb 	bl	800abb2 <USBD_CtlError>
      break;
 800a1dc:	bf00      	nop
  }

  return ret;
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	889b      	ldrh	r3, [r3, #4]
 800a1fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a204:	2b40      	cmp	r3, #64	@ 0x40
 800a206:	d007      	beq.n	800a218 <USBD_StdEPReq+0x30>
 800a208:	2b40      	cmp	r3, #64	@ 0x40
 800a20a:	f200 817f 	bhi.w	800a50c <USBD_StdEPReq+0x324>
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d02a      	beq.n	800a268 <USBD_StdEPReq+0x80>
 800a212:	2b20      	cmp	r3, #32
 800a214:	f040 817a 	bne.w	800a50c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a218:	7bbb      	ldrb	r3, [r7, #14]
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff fe85 	bl	8009f2c <USBD_CoreFindEP>
 800a222:	4603      	mov	r3, r0
 800a224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a226:	7b7b      	ldrb	r3, [r7, #13]
 800a228:	2bff      	cmp	r3, #255	@ 0xff
 800a22a:	f000 8174 	beq.w	800a516 <USBD_StdEPReq+0x32e>
 800a22e:	7b7b      	ldrb	r3, [r7, #13]
 800a230:	2b00      	cmp	r3, #0
 800a232:	f040 8170 	bne.w	800a516 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a236:	7b7a      	ldrb	r2, [r7, #13]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a23e:	7b7a      	ldrb	r2, [r7, #13]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	32ae      	adds	r2, #174	@ 0xae
 800a244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 8163 	beq.w	800a516 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a250:	7b7a      	ldrb	r2, [r7, #13]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	32ae      	adds	r2, #174	@ 0xae
 800a256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	4798      	blx	r3
 800a262:	4603      	mov	r3, r0
 800a264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a266:	e156      	b.n	800a516 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d008      	beq.n	800a282 <USBD_StdEPReq+0x9a>
 800a270:	2b03      	cmp	r3, #3
 800a272:	f300 8145 	bgt.w	800a500 <USBD_StdEPReq+0x318>
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 809b 	beq.w	800a3b2 <USBD_StdEPReq+0x1ca>
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d03c      	beq.n	800a2fa <USBD_StdEPReq+0x112>
 800a280:	e13e      	b.n	800a500 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a288:	b2db      	uxtb	r3, r3
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d002      	beq.n	800a294 <USBD_StdEPReq+0xac>
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d016      	beq.n	800a2c0 <USBD_StdEPReq+0xd8>
 800a292:	e02c      	b.n	800a2ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00d      	beq.n	800a2b6 <USBD_StdEPReq+0xce>
 800a29a:	7bbb      	ldrb	r3, [r7, #14]
 800a29c:	2b80      	cmp	r3, #128	@ 0x80
 800a29e:	d00a      	beq.n	800a2b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2a0:	7bbb      	ldrb	r3, [r7, #14]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f003 ff41 	bl	800e12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2aa:	2180      	movs	r1, #128	@ 0x80
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f003 ff3d 	bl	800e12c <USBD_LL_StallEP>
 800a2b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2b4:	e020      	b.n	800a2f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a2b6:	6839      	ldr	r1, [r7, #0]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fc7a 	bl	800abb2 <USBD_CtlError>
              break;
 800a2be:	e01b      	b.n	800a2f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	885b      	ldrh	r3, [r3, #2]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10e      	bne.n	800a2e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2c8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00b      	beq.n	800a2e6 <USBD_StdEPReq+0xfe>
 800a2ce:	7bbb      	ldrb	r3, [r7, #14]
 800a2d0:	2b80      	cmp	r3, #128	@ 0x80
 800a2d2:	d008      	beq.n	800a2e6 <USBD_StdEPReq+0xfe>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	88db      	ldrh	r3, [r3, #6]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d104      	bne.n	800a2e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2dc:	7bbb      	ldrb	r3, [r7, #14]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f003 ff23 	bl	800e12c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fd3a 	bl	800ad60 <USBD_CtlSendStatus>

              break;
 800a2ec:	e004      	b.n	800a2f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 fc5e 	bl	800abb2 <USBD_CtlError>
              break;
 800a2f6:	bf00      	nop
          }
          break;
 800a2f8:	e107      	b.n	800a50a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b02      	cmp	r3, #2
 800a304:	d002      	beq.n	800a30c <USBD_StdEPReq+0x124>
 800a306:	2b03      	cmp	r3, #3
 800a308:	d016      	beq.n	800a338 <USBD_StdEPReq+0x150>
 800a30a:	e04b      	b.n	800a3a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00d      	beq.n	800a32e <USBD_StdEPReq+0x146>
 800a312:	7bbb      	ldrb	r3, [r7, #14]
 800a314:	2b80      	cmp	r3, #128	@ 0x80
 800a316:	d00a      	beq.n	800a32e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f003 ff05 	bl	800e12c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a322:	2180      	movs	r1, #128	@ 0x80
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f003 ff01 	bl	800e12c <USBD_LL_StallEP>
 800a32a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a32c:	e040      	b.n	800a3b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f000 fc3e 	bl	800abb2 <USBD_CtlError>
              break;
 800a336:	e03b      	b.n	800a3b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	885b      	ldrh	r3, [r3, #2]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d136      	bne.n	800a3ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a346:	2b00      	cmp	r3, #0
 800a348:	d004      	beq.n	800a354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
 800a34c:	4619      	mov	r1, r3
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f003 ff0b 	bl	800e16a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fd03 	bl	800ad60 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	4619      	mov	r1, r3
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f7ff fde4 	bl	8009f2c <USBD_CoreFindEP>
 800a364:	4603      	mov	r3, r0
 800a366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a368:	7b7b      	ldrb	r3, [r7, #13]
 800a36a:	2bff      	cmp	r3, #255	@ 0xff
 800a36c:	d01f      	beq.n	800a3ae <USBD_StdEPReq+0x1c6>
 800a36e:	7b7b      	ldrb	r3, [r7, #13]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d11c      	bne.n	800a3ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a374:	7b7a      	ldrb	r2, [r7, #13]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a37c:	7b7a      	ldrb	r2, [r7, #13]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	32ae      	adds	r2, #174	@ 0xae
 800a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d010      	beq.n	800a3ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a38c:	7b7a      	ldrb	r2, [r7, #13]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	32ae      	adds	r2, #174	@ 0xae
 800a392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	4798      	blx	r3
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a3a2:	e004      	b.n	800a3ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a3a4:	6839      	ldr	r1, [r7, #0]
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fc03 	bl	800abb2 <USBD_CtlError>
              break;
 800a3ac:	e000      	b.n	800a3b0 <USBD_StdEPReq+0x1c8>
              break;
 800a3ae:	bf00      	nop
          }
          break;
 800a3b0:	e0ab      	b.n	800a50a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d002      	beq.n	800a3c4 <USBD_StdEPReq+0x1dc>
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d032      	beq.n	800a428 <USBD_StdEPReq+0x240>
 800a3c2:	e097      	b.n	800a4f4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d007      	beq.n	800a3da <USBD_StdEPReq+0x1f2>
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
 800a3cc:	2b80      	cmp	r3, #128	@ 0x80
 800a3ce:	d004      	beq.n	800a3da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fbed 	bl	800abb2 <USBD_CtlError>
                break;
 800a3d8:	e091      	b.n	800a4fe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	da0b      	bge.n	800a3fa <USBD_StdEPReq+0x212>
 800a3e2:	7bbb      	ldrb	r3, [r7, #14]
 800a3e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	3310      	adds	r3, #16
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	3304      	adds	r3, #4
 800a3f8:	e00b      	b.n	800a412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	4413      	add	r3, r2
 800a410:	3304      	adds	r3, #4
 800a412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2202      	movs	r2, #2
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fc43 	bl	800acac <USBD_CtlSendData>
              break;
 800a426:	e06a      	b.n	800a4fe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da11      	bge.n	800a454 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	f003 020f 	and.w	r2, r3, #15
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	4613      	mov	r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	4413      	add	r3, r2
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	440b      	add	r3, r1
 800a442:	3324      	adds	r3, #36	@ 0x24
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d117      	bne.n	800a47a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fbb0 	bl	800abb2 <USBD_CtlError>
                  break;
 800a452:	e054      	b.n	800a4fe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	f003 020f 	and.w	r2, r3, #15
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	4613      	mov	r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	4413      	add	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	440b      	add	r3, r1
 800a466:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fb9d 	bl	800abb2 <USBD_CtlError>
                  break;
 800a478:	e041      	b.n	800a4fe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a47a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	da0b      	bge.n	800a49a <USBD_StdEPReq+0x2b2>
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	3310      	adds	r3, #16
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	4413      	add	r3, r2
 800a496:	3304      	adds	r3, #4
 800a498:	e00b      	b.n	800a4b2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	4413      	add	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	3304      	adds	r3, #4
 800a4b2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d002      	beq.n	800a4c0 <USBD_StdEPReq+0x2d8>
 800a4ba:	7bbb      	ldrb	r3, [r7, #14]
 800a4bc:	2b80      	cmp	r3, #128	@ 0x80
 800a4be:	d103      	bne.n	800a4c8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	e00e      	b.n	800a4e6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a4c8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f003 fe6b 	bl	800e1a8 <USBD_LL_IsStallEP>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d003      	beq.n	800a4e0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e002      	b.n	800a4e6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2202      	movs	r2, #2
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 fbdd 	bl	800acac <USBD_CtlSendData>
              break;
 800a4f2:	e004      	b.n	800a4fe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a4f4:	6839      	ldr	r1, [r7, #0]
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fb5b 	bl	800abb2 <USBD_CtlError>
              break;
 800a4fc:	bf00      	nop
          }
          break;
 800a4fe:	e004      	b.n	800a50a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fb55 	bl	800abb2 <USBD_CtlError>
          break;
 800a508:	bf00      	nop
      }
      break;
 800a50a:	e005      	b.n	800a518 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fb4f 	bl	800abb2 <USBD_CtlError>
      break;
 800a514:	e000      	b.n	800a518 <USBD_StdEPReq+0x330>
      break;
 800a516:	bf00      	nop
  }

  return ret;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a536:	2300      	movs	r3, #0
 800a538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	885b      	ldrh	r3, [r3, #2]
 800a53e:	0a1b      	lsrs	r3, r3, #8
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b01      	subs	r3, #1
 800a544:	2b06      	cmp	r3, #6
 800a546:	f200 8128 	bhi.w	800a79a <USBD_GetDescriptor+0x276>
 800a54a:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <USBD_GetDescriptor+0x2c>)
 800a54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a550:	0800a56d 	.word	0x0800a56d
 800a554:	0800a585 	.word	0x0800a585
 800a558:	0800a5c5 	.word	0x0800a5c5
 800a55c:	0800a79b 	.word	0x0800a79b
 800a560:	0800a79b 	.word	0x0800a79b
 800a564:	0800a73b 	.word	0x0800a73b
 800a568:	0800a767 	.word	0x0800a767
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	7c12      	ldrb	r2, [r2, #16]
 800a578:	f107 0108 	add.w	r1, r7, #8
 800a57c:	4610      	mov	r0, r2
 800a57e:	4798      	blx	r3
 800a580:	60f8      	str	r0, [r7, #12]
      break;
 800a582:	e112      	b.n	800a7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	7c1b      	ldrb	r3, [r3, #16]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10d      	bne.n	800a5a8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a594:	f107 0208 	add.w	r2, r7, #8
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	2202      	movs	r2, #2
 800a5a4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a5a6:	e100      	b.n	800a7aa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b0:	f107 0208 	add.w	r2, r7, #8
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
 800a5b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	2202      	movs	r2, #2
 800a5c0:	701a      	strb	r2, [r3, #0]
      break;
 800a5c2:	e0f2      	b.n	800a7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	885b      	ldrh	r3, [r3, #2]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b05      	cmp	r3, #5
 800a5cc:	f200 80ac 	bhi.w	800a728 <USBD_GetDescriptor+0x204>
 800a5d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5d8 <USBD_GetDescriptor+0xb4>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a5f1 	.word	0x0800a5f1
 800a5dc:	0800a625 	.word	0x0800a625
 800a5e0:	0800a659 	.word	0x0800a659
 800a5e4:	0800a68d 	.word	0x0800a68d
 800a5e8:	0800a6c1 	.word	0x0800a6c1
 800a5ec:	0800a6f5 	.word	0x0800a6f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00b      	beq.n	800a614 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	7c12      	ldrb	r2, [r2, #16]
 800a608:	f107 0108 	add.w	r1, r7, #8
 800a60c:	4610      	mov	r0, r2
 800a60e:	4798      	blx	r3
 800a610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a612:	e091      	b.n	800a738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 facb 	bl	800abb2 <USBD_CtlError>
            err++;
 800a61c:	7afb      	ldrb	r3, [r7, #11]
 800a61e:	3301      	adds	r3, #1
 800a620:	72fb      	strb	r3, [r7, #11]
          break;
 800a622:	e089      	b.n	800a738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00b      	beq.n	800a648 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	7c12      	ldrb	r2, [r2, #16]
 800a63c:	f107 0108 	add.w	r1, r7, #8
 800a640:	4610      	mov	r0, r2
 800a642:	4798      	blx	r3
 800a644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a646:	e077      	b.n	800a738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a648:	6839      	ldr	r1, [r7, #0]
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f000 fab1 	bl	800abb2 <USBD_CtlError>
            err++;
 800a650:	7afb      	ldrb	r3, [r7, #11]
 800a652:	3301      	adds	r3, #1
 800a654:	72fb      	strb	r3, [r7, #11]
          break;
 800a656:	e06f      	b.n	800a738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00b      	beq.n	800a67c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	7c12      	ldrb	r2, [r2, #16]
 800a670:	f107 0108 	add.w	r1, r7, #8
 800a674:	4610      	mov	r0, r2
 800a676:	4798      	blx	r3
 800a678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a67a:	e05d      	b.n	800a738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fa97 	bl	800abb2 <USBD_CtlError>
            err++;
 800a684:	7afb      	ldrb	r3, [r7, #11]
 800a686:	3301      	adds	r3, #1
 800a688:	72fb      	strb	r3, [r7, #11]
          break;
 800a68a:	e055      	b.n	800a738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00b      	beq.n	800a6b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a69e:	691b      	ldr	r3, [r3, #16]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	7c12      	ldrb	r2, [r2, #16]
 800a6a4:	f107 0108 	add.w	r1, r7, #8
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	4798      	blx	r3
 800a6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ae:	e043      	b.n	800a738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 fa7d 	bl	800abb2 <USBD_CtlError>
            err++;
 800a6b8:	7afb      	ldrb	r3, [r7, #11]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a6be:	e03b      	b.n	800a738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6c6:	695b      	ldr	r3, [r3, #20]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00b      	beq.n	800a6e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	7c12      	ldrb	r2, [r2, #16]
 800a6d8:	f107 0108 	add.w	r1, r7, #8
 800a6dc:	4610      	mov	r0, r2
 800a6de:	4798      	blx	r3
 800a6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6e2:	e029      	b.n	800a738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6e4:	6839      	ldr	r1, [r7, #0]
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 fa63 	bl	800abb2 <USBD_CtlError>
            err++;
 800a6ec:	7afb      	ldrb	r3, [r7, #11]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6f2:	e021      	b.n	800a738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00b      	beq.n	800a718 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	7c12      	ldrb	r2, [r2, #16]
 800a70c:	f107 0108 	add.w	r1, r7, #8
 800a710:	4610      	mov	r0, r2
 800a712:	4798      	blx	r3
 800a714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a716:	e00f      	b.n	800a738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa49 	bl	800abb2 <USBD_CtlError>
            err++;
 800a720:	7afb      	ldrb	r3, [r7, #11]
 800a722:	3301      	adds	r3, #1
 800a724:	72fb      	strb	r3, [r7, #11]
          break;
 800a726:	e007      	b.n	800a738 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fa41 	bl	800abb2 <USBD_CtlError>
          err++;
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	3301      	adds	r3, #1
 800a734:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a736:	bf00      	nop
      }
      break;
 800a738:	e037      	b.n	800a7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	7c1b      	ldrb	r3, [r3, #16]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d109      	bne.n	800a756 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a74a:	f107 0208 	add.w	r2, r7, #8
 800a74e:	4610      	mov	r0, r2
 800a750:	4798      	blx	r3
 800a752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a754:	e029      	b.n	800a7aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 fa2a 	bl	800abb2 <USBD_CtlError>
        err++;
 800a75e:	7afb      	ldrb	r3, [r7, #11]
 800a760:	3301      	adds	r3, #1
 800a762:	72fb      	strb	r3, [r7, #11]
      break;
 800a764:	e021      	b.n	800a7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	7c1b      	ldrb	r3, [r3, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10d      	bne.n	800a78a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a776:	f107 0208 	add.w	r2, r7, #8
 800a77a:	4610      	mov	r0, r2
 800a77c:	4798      	blx	r3
 800a77e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3301      	adds	r3, #1
 800a784:	2207      	movs	r2, #7
 800a786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a788:	e00f      	b.n	800a7aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fa10 	bl	800abb2 <USBD_CtlError>
        err++;
 800a792:	7afb      	ldrb	r3, [r7, #11]
 800a794:	3301      	adds	r3, #1
 800a796:	72fb      	strb	r3, [r7, #11]
      break;
 800a798:	e007      	b.n	800a7aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a79a:	6839      	ldr	r1, [r7, #0]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f000 fa08 	bl	800abb2 <USBD_CtlError>
      err++;
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a7a8:	bf00      	nop
  }

  if (err != 0U)
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d11e      	bne.n	800a7ee <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	88db      	ldrh	r3, [r3, #6]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d016      	beq.n	800a7e6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a7b8:	893b      	ldrh	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00e      	beq.n	800a7dc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	88da      	ldrh	r2, [r3, #6]
 800a7c2:	893b      	ldrh	r3, [r7, #8]
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	bf28      	it	cs
 800a7c8:	4613      	movcs	r3, r2
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7ce:	893b      	ldrh	r3, [r7, #8]
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	68f9      	ldr	r1, [r7, #12]
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fa69 	bl	800acac <USBD_CtlSendData>
 800a7da:	e009      	b.n	800a7f0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f9e7 	bl	800abb2 <USBD_CtlError>
 800a7e4:	e004      	b.n	800a7f0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 faba 	bl	800ad60 <USBD_CtlSendStatus>
 800a7ec:	e000      	b.n	800a7f0 <USBD_GetDescriptor+0x2cc>
    return;
 800a7ee:	bf00      	nop
  }
}
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop

0800a7f8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	889b      	ldrh	r3, [r3, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d131      	bne.n	800a86e <USBD_SetAddress+0x76>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	88db      	ldrh	r3, [r3, #6]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d12d      	bne.n	800a86e <USBD_SetAddress+0x76>
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	885b      	ldrh	r3, [r3, #2]
 800a816:	2b7f      	cmp	r3, #127	@ 0x7f
 800a818:	d829      	bhi.n	800a86e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	885b      	ldrh	r3, [r3, #2]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a824:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	2b03      	cmp	r3, #3
 800a830:	d104      	bne.n	800a83c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f9bc 	bl	800abb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a83a:	e01d      	b.n	800a878 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	7bfa      	ldrb	r2, [r7, #15]
 800a840:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	4619      	mov	r1, r3
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f003 fcd9 	bl	800e200 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa86 	bl	800ad60 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a854:	7bfb      	ldrb	r3, [r7, #15]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2202      	movs	r2, #2
 800a85e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a862:	e009      	b.n	800a878 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a86c:	e004      	b.n	800a878 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f99e 	bl	800abb2 <USBD_CtlError>
  }
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	3710      	adds	r7, #16
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	885b      	ldrh	r3, [r3, #2]
 800a892:	b2da      	uxtb	r2, r3
 800a894:	4b4e      	ldr	r3, [pc, #312]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a896:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a898:	4b4d      	ldr	r3, [pc, #308]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d905      	bls.n	800a8ac <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f985 	bl	800abb2 <USBD_CtlError>
    return USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e08c      	b.n	800a9c6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d002      	beq.n	800a8be <USBD_SetConfig+0x3e>
 800a8b8:	2b03      	cmp	r3, #3
 800a8ba:	d029      	beq.n	800a910 <USBD_SetConfig+0x90>
 800a8bc:	e075      	b.n	800a9aa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a8be:	4b44      	ldr	r3, [pc, #272]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d020      	beq.n	800a908 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a8c6:	4b42      	ldr	r3, [pc, #264]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8d0:	4b3f      	ldr	r3, [pc, #252]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7fe ffe3 	bl	80098a2 <USBD_SetClassConfig>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d008      	beq.n	800a8f8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f962 	bl	800abb2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2202      	movs	r2, #2
 800a8f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8f6:	e065      	b.n	800a9c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f000 fa31 	bl	800ad60 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2203      	movs	r2, #3
 800a902:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a906:	e05d      	b.n	800a9c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fa29 	bl	800ad60 <USBD_CtlSendStatus>
      break;
 800a90e:	e059      	b.n	800a9c4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a910:	4b2f      	ldr	r3, [pc, #188]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d112      	bne.n	800a93e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a920:	4b2b      	ldr	r3, [pc, #172]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	461a      	mov	r2, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a92a:	4b29      	ldr	r3, [pc, #164]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7fe ffd2 	bl	80098da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa12 	bl	800ad60 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a93c:	e042      	b.n	800a9c4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a93e:	4b24      	ldr	r3, [pc, #144]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	461a      	mov	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d02a      	beq.n	800a9a2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7fe ffc0 	bl	80098da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a95a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a964:	4b1a      	ldr	r3, [pc, #104]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	4619      	mov	r1, r3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7fe ff99 	bl	80098a2 <USBD_SetClassConfig>
 800a970:	4603      	mov	r3, r0
 800a972:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00f      	beq.n	800a99a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a97a:	6839      	ldr	r1, [r7, #0]
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f918 	bl	800abb2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f7fe ffa5 	bl	80098da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2202      	movs	r2, #2
 800a994:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a998:	e014      	b.n	800a9c4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f9e0 	bl	800ad60 <USBD_CtlSendStatus>
      break;
 800a9a0:	e010      	b.n	800a9c4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f9dc 	bl	800ad60 <USBD_CtlSendStatus>
      break;
 800a9a8:	e00c      	b.n	800a9c4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a9aa:	6839      	ldr	r1, [r7, #0]
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f900 	bl	800abb2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a9b2:	4b07      	ldr	r3, [pc, #28]	@ (800a9d0 <USBD_SetConfig+0x150>)
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7fe ff8e 	bl	80098da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9c2:	bf00      	nop
  }

  return ret;
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3710      	adds	r7, #16
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	200004d8 	.word	0x200004d8

0800a9d4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	88db      	ldrh	r3, [r3, #6]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d004      	beq.n	800a9f0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 f8e2 	bl	800abb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a9ee:	e023      	b.n	800aa38 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	dc02      	bgt.n	800aa02 <USBD_GetConfig+0x2e>
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dc03      	bgt.n	800aa08 <USBD_GetConfig+0x34>
 800aa00:	e015      	b.n	800aa2e <USBD_GetConfig+0x5a>
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d00b      	beq.n	800aa1e <USBD_GetConfig+0x4a>
 800aa06:	e012      	b.n	800aa2e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3308      	adds	r3, #8
 800aa12:	2201      	movs	r2, #1
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f948 	bl	800acac <USBD_CtlSendData>
        break;
 800aa1c:	e00c      	b.n	800aa38 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3304      	adds	r3, #4
 800aa22:	2201      	movs	r2, #1
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f940 	bl	800acac <USBD_CtlSendData>
        break;
 800aa2c:	e004      	b.n	800aa38 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aa2e:	6839      	ldr	r1, [r7, #0]
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f8be 	bl	800abb2 <USBD_CtlError>
        break;
 800aa36:	bf00      	nop
}
 800aa38:	bf00      	nop
 800aa3a:	3708      	adds	r7, #8
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	3b01      	subs	r3, #1
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d81e      	bhi.n	800aa96 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	88db      	ldrh	r3, [r3, #6]
 800aa5c:	2b02      	cmp	r3, #2
 800aa5e:	d004      	beq.n	800aa6a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aa60:	6839      	ldr	r1, [r7, #0]
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f8a5 	bl	800abb2 <USBD_CtlError>
        break;
 800aa68:	e01a      	b.n	800aaa0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d005      	beq.n	800aa86 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68db      	ldr	r3, [r3, #12]
 800aa7e:	f043 0202 	orr.w	r2, r3, #2
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	330c      	adds	r3, #12
 800aa8a:	2202      	movs	r2, #2
 800aa8c:	4619      	mov	r1, r3
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 f90c 	bl	800acac <USBD_CtlSendData>
      break;
 800aa94:	e004      	b.n	800aaa0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f88a 	bl	800abb2 <USBD_CtlError>
      break;
 800aa9e:	bf00      	nop
  }
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	885b      	ldrh	r3, [r3, #2]
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d107      	bne.n	800aaca <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 f94c 	bl	800ad60 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aac8:	e013      	b.n	800aaf2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	885b      	ldrh	r3, [r3, #2]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	d10b      	bne.n	800aaea <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	889b      	ldrh	r3, [r3, #4]
 800aad6:	0a1b      	lsrs	r3, r3, #8
 800aad8:	b29b      	uxth	r3, r3
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f93c 	bl	800ad60 <USBD_CtlSendStatus>
}
 800aae8:	e003      	b.n	800aaf2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f860 	bl	800abb2 <USBD_CtlError>
}
 800aaf2:	bf00      	nop
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d80b      	bhi.n	800ab2a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	885b      	ldrh	r3, [r3, #2]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d10c      	bne.n	800ab34 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f91c 	bl	800ad60 <USBD_CtlSendStatus>
      }
      break;
 800ab28:	e004      	b.n	800ab34 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 f840 	bl	800abb2 <USBD_CtlError>
      break;
 800ab32:	e000      	b.n	800ab36 <USBD_ClrFeature+0x3c>
      break;
 800ab34:	bf00      	nop
  }
}
 800ab36:	bf00      	nop
 800ab38:	3708      	adds	r7, #8
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b084      	sub	sp, #16
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	781a      	ldrb	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	3301      	adds	r3, #1
 800ab58:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	781a      	ldrb	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3301      	adds	r3, #1
 800ab66:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ab68:	68f8      	ldr	r0, [r7, #12]
 800ab6a:	f7ff fa40 	bl	8009fee <SWAPBYTE>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	461a      	mov	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab82:	68f8      	ldr	r0, [r7, #12]
 800ab84:	f7ff fa33 	bl	8009fee <SWAPBYTE>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3301      	adds	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f7ff fa26 	bl	8009fee <SWAPBYTE>
 800aba2:	4603      	mov	r3, r0
 800aba4:	461a      	mov	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	80da      	strh	r2, [r3, #6]
}
 800abaa:	bf00      	nop
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800abbc:	2180      	movs	r1, #128	@ 0x80
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f003 fab4 	bl	800e12c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800abc4:	2100      	movs	r1, #0
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f003 fab0 	bl	800e12c <USBD_LL_StallEP>
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b086      	sub	sp, #24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d042      	beq.n	800ac70 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800abee:	6938      	ldr	r0, [r7, #16]
 800abf0:	f000 f842 	bl	800ac78 <USBD_GetLen>
 800abf4:	4603      	mov	r3, r0
 800abf6:	3301      	adds	r3, #1
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abfe:	d808      	bhi.n	800ac12 <USBD_GetString+0x3e>
 800ac00:	6938      	ldr	r0, [r7, #16]
 800ac02:	f000 f839 	bl	800ac78 <USBD_GetLen>
 800ac06:	4603      	mov	r3, r0
 800ac08:	3301      	adds	r3, #1
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	005b      	lsls	r3, r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	e001      	b.n	800ac16 <USBD_GetString+0x42>
 800ac12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	4413      	add	r3, r2
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	7812      	ldrb	r2, [r2, #0]
 800ac24:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ac2c:	7dfb      	ldrb	r3, [r7, #23]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	4413      	add	r3, r2
 800ac32:	2203      	movs	r2, #3
 800ac34:	701a      	strb	r2, [r3, #0]
  idx++;
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ac3c:	e013      	b.n	800ac66 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	4413      	add	r3, r2
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	7812      	ldrb	r2, [r2, #0]
 800ac48:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	613b      	str	r3, [r7, #16]
    idx++;
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
 800ac52:	3301      	adds	r3, #1
 800ac54:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
 800ac62:	3301      	adds	r3, #1
 800ac64:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e7      	bne.n	800ac3e <USBD_GetString+0x6a>
 800ac6e:	e000      	b.n	800ac72 <USBD_GetString+0x9e>
    return;
 800ac70:	bf00      	nop
  }
}
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac88:	e005      	b.n	800ac96 <USBD_GetLen+0x1e>
  {
    len++;
 800ac8a:	7bfb      	ldrb	r3, [r7, #15]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	3301      	adds	r3, #1
 800ac94:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1f5      	bne.n	800ac8a <USBD_GetLen+0x12>
  }

  return len;
 800ac9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2202      	movs	r2, #2
 800acbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	2100      	movs	r1, #0
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f003 fab3 	bl	800e23e <USBD_LL_Transmit>

  return USBD_OK;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	60f8      	str	r0, [r7, #12]
 800acea:	60b9      	str	r1, [r7, #8]
 800acec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	2100      	movs	r1, #0
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f003 faa2 	bl	800e23e <USBD_LL_Transmit>

  return USBD_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2203      	movs	r2, #3
 800ad14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	68ba      	ldr	r2, [r7, #8]
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f003 faa6 	bl	800e280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b084      	sub	sp, #16
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68ba      	ldr	r2, [r7, #8]
 800ad4e:	2100      	movs	r1, #0
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f003 fa95 	bl	800e280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad56:	2300      	movs	r3, #0
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2204      	movs	r2, #4
 800ad6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad70:	2300      	movs	r3, #0
 800ad72:	2200      	movs	r2, #0
 800ad74:	2100      	movs	r1, #0
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f003 fa61 	bl	800e23e <USBD_LL_Transmit>

  return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b082      	sub	sp, #8
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2205      	movs	r2, #5
 800ad92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad96:	2300      	movs	r3, #0
 800ad98:	2200      	movs	r2, #0
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f003 fa6f 	bl	800e280 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <__NVIC_SetPriority>:
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	4603      	mov	r3, r0
 800adb4:	6039      	str	r1, [r7, #0]
 800adb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800adb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	db0a      	blt.n	800add6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	490c      	ldr	r1, [pc, #48]	@ (800adf8 <__NVIC_SetPriority+0x4c>)
 800adc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adca:	0112      	lsls	r2, r2, #4
 800adcc:	b2d2      	uxtb	r2, r2
 800adce:	440b      	add	r3, r1
 800add0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800add4:	e00a      	b.n	800adec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4908      	ldr	r1, [pc, #32]	@ (800adfc <__NVIC_SetPriority+0x50>)
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	f003 030f 	and.w	r3, r3, #15
 800ade2:	3b04      	subs	r3, #4
 800ade4:	0112      	lsls	r2, r2, #4
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	440b      	add	r3, r1
 800adea:	761a      	strb	r2, [r3, #24]
}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	e000e100 	.word	0xe000e100
 800adfc:	e000ed00 	.word	0xe000ed00

0800ae00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae04:	4b05      	ldr	r3, [pc, #20]	@ (800ae1c <SysTick_Handler+0x1c>)
 800ae06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae08:	f001 fd18 	bl	800c83c <xTaskGetSchedulerState>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d001      	beq.n	800ae16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae12:	f002 fb11 	bl	800d438 <xPortSysTickHandler>
  }
}
 800ae16:	bf00      	nop
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	e000e010 	.word	0xe000e010

0800ae20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae20:	b580      	push	{r7, lr}
 800ae22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae24:	2100      	movs	r1, #0
 800ae26:	f06f 0004 	mvn.w	r0, #4
 800ae2a:	f7ff ffbf 	bl	800adac <__NVIC_SetPriority>
#endif
}
 800ae2e:	bf00      	nop
 800ae30:	bd80      	pop	{r7, pc}
	...

0800ae34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae3a:	f3ef 8305 	mrs	r3, IPSR
 800ae3e:	603b      	str	r3, [r7, #0]
  return(result);
 800ae40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae46:	f06f 0305 	mvn.w	r3, #5
 800ae4a:	607b      	str	r3, [r7, #4]
 800ae4c:	e00c      	b.n	800ae68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae4e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae78 <osKernelInitialize+0x44>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d105      	bne.n	800ae62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae56:	4b08      	ldr	r3, [pc, #32]	@ (800ae78 <osKernelInitialize+0x44>)
 800ae58:	2201      	movs	r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	607b      	str	r3, [r7, #4]
 800ae60:	e002      	b.n	800ae68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae62:	f04f 33ff 	mov.w	r3, #4294967295
 800ae66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae68:	687b      	ldr	r3, [r7, #4]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	200004dc 	.word	0x200004dc

0800ae7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae82:	f3ef 8305 	mrs	r3, IPSR
 800ae86:	603b      	str	r3, [r7, #0]
  return(result);
 800ae88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae8e:	f06f 0305 	mvn.w	r3, #5
 800ae92:	607b      	str	r3, [r7, #4]
 800ae94:	e010      	b.n	800aeb8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae96:	4b0b      	ldr	r3, [pc, #44]	@ (800aec4 <osKernelStart+0x48>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d109      	bne.n	800aeb2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae9e:	f7ff ffbf 	bl	800ae20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aea2:	4b08      	ldr	r3, [pc, #32]	@ (800aec4 <osKernelStart+0x48>)
 800aea4:	2202      	movs	r2, #2
 800aea6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aea8:	f001 f87a 	bl	800bfa0 <vTaskStartScheduler>
      stat = osOK;
 800aeac:	2300      	movs	r3, #0
 800aeae:	607b      	str	r3, [r7, #4]
 800aeb0:	e002      	b.n	800aeb8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aeb2:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aeb8:	687b      	ldr	r3, [r7, #4]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	200004dc 	.word	0x200004dc

0800aec8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08e      	sub	sp, #56	@ 0x38
 800aecc:	af04      	add	r7, sp, #16
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aed4:	2300      	movs	r3, #0
 800aed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aed8:	f3ef 8305 	mrs	r3, IPSR
 800aedc:	617b      	str	r3, [r7, #20]
  return(result);
 800aede:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d17e      	bne.n	800afe2 <osThreadNew+0x11a>
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d07b      	beq.n	800afe2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aeea:	2380      	movs	r3, #128	@ 0x80
 800aeec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aeee:	2318      	movs	r3, #24
 800aef0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aef2:	2300      	movs	r3, #0
 800aef4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800aef6:	f04f 33ff 	mov.w	r3, #4294967295
 800aefa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d045      	beq.n	800af8e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d002      	beq.n	800af10 <osThreadNew+0x48>
        name = attr->name;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d008      	beq.n	800af36 <osThreadNew+0x6e>
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	2b38      	cmp	r3, #56	@ 0x38
 800af28:	d805      	bhi.n	800af36 <osThreadNew+0x6e>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <osThreadNew+0x72>
        return (NULL);
 800af36:	2300      	movs	r3, #0
 800af38:	e054      	b.n	800afe4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d003      	beq.n	800af4a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	089b      	lsrs	r3, r3, #2
 800af48:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00e      	beq.n	800af70 <osThreadNew+0xa8>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	2b5b      	cmp	r3, #91	@ 0x5b
 800af58:	d90a      	bls.n	800af70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d006      	beq.n	800af70 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <osThreadNew+0xa8>
        mem = 1;
 800af6a:	2301      	movs	r3, #1
 800af6c:	61bb      	str	r3, [r7, #24]
 800af6e:	e010      	b.n	800af92 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10c      	bne.n	800af92 <osThreadNew+0xca>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d108      	bne.n	800af92 <osThreadNew+0xca>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d104      	bne.n	800af92 <osThreadNew+0xca>
          mem = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	61bb      	str	r3, [r7, #24]
 800af8c:	e001      	b.n	800af92 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af8e:	2300      	movs	r3, #0
 800af90:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d110      	bne.n	800afba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800afa0:	9202      	str	r2, [sp, #8]
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	6a3a      	ldr	r2, [r7, #32]
 800afac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f000 fe1a 	bl	800bbe8 <xTaskCreateStatic>
 800afb4:	4603      	mov	r3, r0
 800afb6:	613b      	str	r3, [r7, #16]
 800afb8:	e013      	b.n	800afe2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d110      	bne.n	800afe2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	f107 0310 	add.w	r3, r7, #16
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 fe68 	bl	800bca8 <xTaskCreate>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d001      	beq.n	800afe2 <osThreadNew+0x11a>
            hTask = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800afe2:	693b      	ldr	r3, [r7, #16]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3728      	adds	r7, #40	@ 0x28
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aff4:	f3ef 8305 	mrs	r3, IPSR
 800aff8:	60bb      	str	r3, [r7, #8]
  return(result);
 800affa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <osDelay+0x1c>
    stat = osErrorISR;
 800b000:	f06f 0305 	mvn.w	r3, #5
 800b004:	60fb      	str	r3, [r7, #12]
 800b006:	e007      	b.n	800b018 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b008:	2300      	movs	r3, #0
 800b00a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d002      	beq.n	800b018 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 ff8e 	bl	800bf34 <vTaskDelay>
    }
  }

  return (stat);
 800b018:	68fb      	ldr	r3, [r7, #12]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
	...

0800b024 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4a07      	ldr	r2, [pc, #28]	@ (800b050 <vApplicationGetIdleTaskMemory+0x2c>)
 800b034:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	4a06      	ldr	r2, [pc, #24]	@ (800b054 <vApplicationGetIdleTaskMemory+0x30>)
 800b03a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2280      	movs	r2, #128	@ 0x80
 800b040:	601a      	str	r2, [r3, #0]
}
 800b042:	bf00      	nop
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	200004e0 	.word	0x200004e0
 800b054:	2000053c 	.word	0x2000053c

0800b058 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b058:	b480      	push	{r7}
 800b05a:	b085      	sub	sp, #20
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	4a07      	ldr	r2, [pc, #28]	@ (800b084 <vApplicationGetTimerTaskMemory+0x2c>)
 800b068:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	4a06      	ldr	r2, [pc, #24]	@ (800b088 <vApplicationGetTimerTaskMemory+0x30>)
 800b06e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b076:	601a      	str	r2, [r3, #0]
}
 800b078:	bf00      	nop
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	2000073c 	.word	0x2000073c
 800b088:	20000798 	.word	0x20000798

0800b08c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0208 	add.w	r2, r3, #8
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f103 0208 	add.w	r2, r3, #8
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f103 0208 	add.w	r2, r3, #8
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b0da:	bf00      	nop
 800b0dc:	370c      	adds	r7, #12
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr

0800b0e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b085      	sub	sp, #20
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	68fa      	ldr	r2, [r7, #12]
 800b0fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	689a      	ldr	r2, [r3, #8]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	601a      	str	r2, [r3, #0]
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b12e:	b480      	push	{r7}
 800b130:	b085      	sub	sp, #20
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b144:	d103      	bne.n	800b14e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	e00c      	b.n	800b168 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	3308      	adds	r3, #8
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e002      	b.n	800b15c <vListInsert+0x2e>
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	60fb      	str	r3, [r7, #12]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	429a      	cmp	r2, r3
 800b166:	d2f6      	bcs.n	800b156 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	68fa      	ldr	r2, [r7, #12]
 800b17c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	1c5a      	adds	r2, r3, #1
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
}
 800b194:	bf00      	nop
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	6892      	ldr	r2, [r2, #8]
 800b1b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	6852      	ldr	r2, [r2, #4]
 800b1c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d103      	bne.n	800b1d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	689a      	ldr	r2, [r3, #8]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	1e5a      	subs	r2, r3, #1
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3714      	adds	r7, #20
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10b      	bne.n	800b220 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b21a:	bf00      	nop
 800b21c:	bf00      	nop
 800b21e:	e7fd      	b.n	800b21c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b220:	f002 f87a 	bl	800d318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681a      	ldr	r2, [r3, #0]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b22c:	68f9      	ldr	r1, [r7, #12]
 800b22e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b230:	fb01 f303 	mul.w	r3, r1, r3
 800b234:	441a      	add	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b250:	3b01      	subs	r3, #1
 800b252:	68f9      	ldr	r1, [r7, #12]
 800b254:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b256:	fb01 f303 	mul.w	r3, r1, r3
 800b25a:	441a      	add	r2, r3
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	22ff      	movs	r2, #255	@ 0xff
 800b264:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	22ff      	movs	r2, #255	@ 0xff
 800b26c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d114      	bne.n	800b2a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d01a      	beq.n	800b2b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	3310      	adds	r3, #16
 800b282:	4618      	mov	r0, r3
 800b284:	f001 f91a 	bl	800c4bc <xTaskRemoveFromEventList>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d012      	beq.n	800b2b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b28e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2c4 <xQueueGenericReset+0xd0>)
 800b290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b294:	601a      	str	r2, [r3, #0]
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	e009      	b.n	800b2b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3310      	adds	r3, #16
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7ff fef1 	bl	800b08c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	3324      	adds	r3, #36	@ 0x24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7ff feec 	bl	800b08c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b2b4:	f002 f862 	bl	800d37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b2b8:	2301      	movs	r3, #1
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3710      	adds	r7, #16
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08e      	sub	sp, #56	@ 0x38
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d10b      	bne.n	800b2f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2ee:	bf00      	nop
 800b2f0:	bf00      	nop
 800b2f2:	e7fd      	b.n	800b2f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d10b      	bne.n	800b312 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fe:	f383 8811 	msr	BASEPRI, r3
 800b302:	f3bf 8f6f 	isb	sy
 800b306:	f3bf 8f4f 	dsb	sy
 800b30a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	e7fd      	b.n	800b30e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <xQueueGenericCreateStatic+0x56>
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <xQueueGenericCreateStatic+0x5a>
 800b31e:	2301      	movs	r3, #1
 800b320:	e000      	b.n	800b324 <xQueueGenericCreateStatic+0x5c>
 800b322:	2300      	movs	r3, #0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10b      	bne.n	800b340 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	623b      	str	r3, [r7, #32]
}
 800b33a:	bf00      	nop
 800b33c:	bf00      	nop
 800b33e:	e7fd      	b.n	800b33c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d102      	bne.n	800b34c <xQueueGenericCreateStatic+0x84>
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d101      	bne.n	800b350 <xQueueGenericCreateStatic+0x88>
 800b34c:	2301      	movs	r3, #1
 800b34e:	e000      	b.n	800b352 <xQueueGenericCreateStatic+0x8a>
 800b350:	2300      	movs	r3, #0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10b      	bne.n	800b36e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	61fb      	str	r3, [r7, #28]
}
 800b368:	bf00      	nop
 800b36a:	bf00      	nop
 800b36c:	e7fd      	b.n	800b36a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b36e:	2350      	movs	r3, #80	@ 0x50
 800b370:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	2b50      	cmp	r3, #80	@ 0x50
 800b376:	d00b      	beq.n	800b390 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37c:	f383 8811 	msr	BASEPRI, r3
 800b380:	f3bf 8f6f 	isb	sy
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	61bb      	str	r3, [r7, #24]
}
 800b38a:	bf00      	nop
 800b38c:	bf00      	nop
 800b38e:	e7fd      	b.n	800b38c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b390:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00d      	beq.n	800b3b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	4613      	mov	r3, r2
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	68b9      	ldr	r1, [r7, #8]
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f000 f805 	bl	800b3c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3730      	adds	r7, #48	@ 0x30
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
 800b3ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d103      	bne.n	800b3de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	e002      	b.n	800b3e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	68fa      	ldr	r2, [r7, #12]
 800b3e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b3ea:	69bb      	ldr	r3, [r7, #24]
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	69b8      	ldr	r0, [r7, #24]
 800b3f4:	f7ff fefe 	bl	800b1f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	78fa      	ldrb	r2, [r7, #3]
 800b3fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b400:	bf00      	nop
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08e      	sub	sp, #56	@ 0x38
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b416:	2300      	movs	r3, #0
 800b418:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10b      	bne.n	800b43c <xQueueGenericSend+0x34>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b436:	bf00      	nop
 800b438:	bf00      	nop
 800b43a:	e7fd      	b.n	800b438 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d103      	bne.n	800b44a <xQueueGenericSend+0x42>
 800b442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d101      	bne.n	800b44e <xQueueGenericSend+0x46>
 800b44a:	2301      	movs	r3, #1
 800b44c:	e000      	b.n	800b450 <xQueueGenericSend+0x48>
 800b44e:	2300      	movs	r3, #0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10b      	bne.n	800b46c <xQueueGenericSend+0x64>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	f383 8811 	msr	BASEPRI, r3
 800b45c:	f3bf 8f6f 	isb	sy
 800b460:	f3bf 8f4f 	dsb	sy
 800b464:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b466:	bf00      	nop
 800b468:	bf00      	nop
 800b46a:	e7fd      	b.n	800b468 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d103      	bne.n	800b47a <xQueueGenericSend+0x72>
 800b472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b476:	2b01      	cmp	r3, #1
 800b478:	d101      	bne.n	800b47e <xQueueGenericSend+0x76>
 800b47a:	2301      	movs	r3, #1
 800b47c:	e000      	b.n	800b480 <xQueueGenericSend+0x78>
 800b47e:	2300      	movs	r3, #0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d10b      	bne.n	800b49c <xQueueGenericSend+0x94>
	__asm volatile
 800b484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b488:	f383 8811 	msr	BASEPRI, r3
 800b48c:	f3bf 8f6f 	isb	sy
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	623b      	str	r3, [r7, #32]
}
 800b496:	bf00      	nop
 800b498:	bf00      	nop
 800b49a:	e7fd      	b.n	800b498 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b49c:	f001 f9ce 	bl	800c83c <xTaskGetSchedulerState>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d102      	bne.n	800b4ac <xQueueGenericSend+0xa4>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <xQueueGenericSend+0xa8>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e000      	b.n	800b4b2 <xQueueGenericSend+0xaa>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10b      	bne.n	800b4ce <xQueueGenericSend+0xc6>
	__asm volatile
 800b4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	61fb      	str	r3, [r7, #28]
}
 800b4c8:	bf00      	nop
 800b4ca:	bf00      	nop
 800b4cc:	e7fd      	b.n	800b4ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4ce:	f001 ff23 	bl	800d318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d302      	bcc.n	800b4e4 <xQueueGenericSend+0xdc>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d129      	bne.n	800b538 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4e4:	683a      	ldr	r2, [r7, #0]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4ea:	f000 fa0f 	bl	800b90c <prvCopyDataToQueue>
 800b4ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d010      	beq.n	800b51a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	3324      	adds	r3, #36	@ 0x24
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f000 ffdd 	bl	800c4bc <xTaskRemoveFromEventList>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d013      	beq.n	800b530 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b508:	4b3f      	ldr	r3, [pc, #252]	@ (800b608 <xQueueGenericSend+0x200>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	e00a      	b.n	800b530 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b51a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d007      	beq.n	800b530 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b520:	4b39      	ldr	r3, [pc, #228]	@ (800b608 <xQueueGenericSend+0x200>)
 800b522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b526:	601a      	str	r2, [r3, #0]
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b530:	f001 ff24 	bl	800d37c <vPortExitCritical>
				return pdPASS;
 800b534:	2301      	movs	r3, #1
 800b536:	e063      	b.n	800b600 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d103      	bne.n	800b546 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b53e:	f001 ff1d 	bl	800d37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b542:	2300      	movs	r3, #0
 800b544:	e05c      	b.n	800b600 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d106      	bne.n	800b55a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b54c:	f107 0314 	add.w	r3, r7, #20
 800b550:	4618      	mov	r0, r3
 800b552:	f001 f817 	bl	800c584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b55a:	f001 ff0f 	bl	800d37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b55e:	f000 fd87 	bl	800c070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b562:	f001 fed9 	bl	800d318 <vPortEnterCritical>
 800b566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b56c:	b25b      	sxtb	r3, r3
 800b56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b572:	d103      	bne.n	800b57c <xQueueGenericSend+0x174>
 800b574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b576:	2200      	movs	r2, #0
 800b578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b582:	b25b      	sxtb	r3, r3
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d103      	bne.n	800b592 <xQueueGenericSend+0x18a>
 800b58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b592:	f001 fef3 	bl	800d37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b596:	1d3a      	adds	r2, r7, #4
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f001 f806 	bl	800c5b0 <xTaskCheckForTimeOut>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d124      	bne.n	800b5f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5ac:	f000 faa6 	bl	800bafc <prvIsQueueFull>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d018      	beq.n	800b5e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b8:	3310      	adds	r3, #16
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 ff2a 	bl	800c418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5c6:	f000 fa31 	bl	800ba2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5ca:	f000 fd5f 	bl	800c08c <xTaskResumeAll>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	f47f af7c 	bne.w	800b4ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b5d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b608 <xQueueGenericSend+0x200>)
 800b5d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5dc:	601a      	str	r2, [r3, #0]
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	e772      	b.n	800b4ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5ea:	f000 fa1f 	bl	800ba2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5ee:	f000 fd4d 	bl	800c08c <xTaskResumeAll>
 800b5f2:	e76c      	b.n	800b4ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5f6:	f000 fa19 	bl	800ba2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5fa:	f000 fd47 	bl	800c08c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b600:	4618      	mov	r0, r3
 800b602:	3738      	adds	r7, #56	@ 0x38
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	e000ed04 	.word	0xe000ed04

0800b60c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b090      	sub	sp, #64	@ 0x40
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	2b00      	cmp	r3, #0
 800b622:	d10b      	bne.n	800b63c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b636:	bf00      	nop
 800b638:	bf00      	nop
 800b63a:	e7fd      	b.n	800b638 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d103      	bne.n	800b64a <xQueueGenericSendFromISR+0x3e>
 800b642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <xQueueGenericSendFromISR+0x42>
 800b64a:	2301      	movs	r3, #1
 800b64c:	e000      	b.n	800b650 <xQueueGenericSendFromISR+0x44>
 800b64e:	2300      	movs	r3, #0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10b      	bne.n	800b66c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	e7fd      	b.n	800b668 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d103      	bne.n	800b67a <xQueueGenericSendFromISR+0x6e>
 800b672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b676:	2b01      	cmp	r3, #1
 800b678:	d101      	bne.n	800b67e <xQueueGenericSendFromISR+0x72>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e000      	b.n	800b680 <xQueueGenericSendFromISR+0x74>
 800b67e:	2300      	movs	r3, #0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10b      	bne.n	800b69c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b688:	f383 8811 	msr	BASEPRI, r3
 800b68c:	f3bf 8f6f 	isb	sy
 800b690:	f3bf 8f4f 	dsb	sy
 800b694:	623b      	str	r3, [r7, #32]
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	e7fd      	b.n	800b698 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b69c:	f001 ff1c 	bl	800d4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b6a0:	f3ef 8211 	mrs	r2, BASEPRI
 800b6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a8:	f383 8811 	msr	BASEPRI, r3
 800b6ac:	f3bf 8f6f 	isb	sy
 800b6b0:	f3bf 8f4f 	dsb	sy
 800b6b4:	61fa      	str	r2, [r7, #28]
 800b6b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d302      	bcc.n	800b6ce <xQueueGenericSendFromISR+0xc2>
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d12f      	bne.n	800b72e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	68b9      	ldr	r1, [r7, #8]
 800b6e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b6e4:	f000 f912 	bl	800b90c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6f0:	d112      	bne.n	800b718 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d016      	beq.n	800b728 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fc:	3324      	adds	r3, #36	@ 0x24
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fedc 	bl	800c4bc <xTaskRemoveFromEventList>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00e      	beq.n	800b728 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00b      	beq.n	800b728 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	e007      	b.n	800b728 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b71c:	3301      	adds	r3, #1
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	b25a      	sxtb	r2, r3
 800b722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b728:	2301      	movs	r3, #1
 800b72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b72c:	e001      	b.n	800b732 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b72e:	2300      	movs	r3, #0
 800b730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b734:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b73c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b73e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b740:	4618      	mov	r0, r3
 800b742:	3740      	adds	r7, #64	@ 0x40
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b08c      	sub	sp, #48	@ 0x30
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b754:	2300      	movs	r3, #0
 800b756:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10b      	bne.n	800b77a <xQueueReceive+0x32>
	__asm volatile
 800b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b766:	f383 8811 	msr	BASEPRI, r3
 800b76a:	f3bf 8f6f 	isb	sy
 800b76e:	f3bf 8f4f 	dsb	sy
 800b772:	623b      	str	r3, [r7, #32]
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop
 800b778:	e7fd      	b.n	800b776 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d103      	bne.n	800b788 <xQueueReceive+0x40>
 800b780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <xQueueReceive+0x44>
 800b788:	2301      	movs	r3, #1
 800b78a:	e000      	b.n	800b78e <xQueueReceive+0x46>
 800b78c:	2300      	movs	r3, #0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10b      	bne.n	800b7aa <xQueueReceive+0x62>
	__asm volatile
 800b792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b796:	f383 8811 	msr	BASEPRI, r3
 800b79a:	f3bf 8f6f 	isb	sy
 800b79e:	f3bf 8f4f 	dsb	sy
 800b7a2:	61fb      	str	r3, [r7, #28]
}
 800b7a4:	bf00      	nop
 800b7a6:	bf00      	nop
 800b7a8:	e7fd      	b.n	800b7a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7aa:	f001 f847 	bl	800c83c <xTaskGetSchedulerState>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d102      	bne.n	800b7ba <xQueueReceive+0x72>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d101      	bne.n	800b7be <xQueueReceive+0x76>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <xQueueReceive+0x78>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10b      	bne.n	800b7dc <xQueueReceive+0x94>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	61bb      	str	r3, [r7, #24]
}
 800b7d6:	bf00      	nop
 800b7d8:	bf00      	nop
 800b7da:	e7fd      	b.n	800b7d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b7dc:	f001 fd9c 	bl	800d318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01f      	beq.n	800b82c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b7ec:	68b9      	ldr	r1, [r7, #8]
 800b7ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b7f0:	f000 f8f6 	bl	800b9e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7f6:	1e5a      	subs	r2, r3, #1
 800b7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00f      	beq.n	800b824 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b806:	3310      	adds	r3, #16
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fe57 	bl	800c4bc <xTaskRemoveFromEventList>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b814:	4b3c      	ldr	r3, [pc, #240]	@ (800b908 <xQueueReceive+0x1c0>)
 800b816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b81a:	601a      	str	r2, [r3, #0]
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b824:	f001 fdaa 	bl	800d37c <vPortExitCritical>
				return pdPASS;
 800b828:	2301      	movs	r3, #1
 800b82a:	e069      	b.n	800b900 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d103      	bne.n	800b83a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b832:	f001 fda3 	bl	800d37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b836:	2300      	movs	r3, #0
 800b838:	e062      	b.n	800b900 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b83a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d106      	bne.n	800b84e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b840:	f107 0310 	add.w	r3, r7, #16
 800b844:	4618      	mov	r0, r3
 800b846:	f000 fe9d 	bl	800c584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b84a:	2301      	movs	r3, #1
 800b84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b84e:	f001 fd95 	bl	800d37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b852:	f000 fc0d 	bl	800c070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b856:	f001 fd5f 	bl	800d318 <vPortEnterCritical>
 800b85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b85c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b860:	b25b      	sxtb	r3, r3
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b866:	d103      	bne.n	800b870 <xQueueReceive+0x128>
 800b868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b876:	b25b      	sxtb	r3, r3
 800b878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87c:	d103      	bne.n	800b886 <xQueueReceive+0x13e>
 800b87e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b886:	f001 fd79 	bl	800d37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b88a:	1d3a      	adds	r2, r7, #4
 800b88c:	f107 0310 	add.w	r3, r7, #16
 800b890:	4611      	mov	r1, r2
 800b892:	4618      	mov	r0, r3
 800b894:	f000 fe8c 	bl	800c5b0 <xTaskCheckForTimeOut>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d123      	bne.n	800b8e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b89e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8a0:	f000 f916 	bl	800bad0 <prvIsQueueEmpty>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d017      	beq.n	800b8da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ac:	3324      	adds	r3, #36	@ 0x24
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 fdb0 	bl	800c418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8ba:	f000 f8b7 	bl	800ba2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8be:	f000 fbe5 	bl	800c08c <xTaskResumeAll>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d189      	bne.n	800b7dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b8c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b908 <xQueueReceive+0x1c0>)
 800b8ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	e780      	b.n	800b7dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b8da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8dc:	f000 f8a6 	bl	800ba2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b8e0:	f000 fbd4 	bl	800c08c <xTaskResumeAll>
 800b8e4:	e77a      	b.n	800b7dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b8e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8e8:	f000 f8a0 	bl	800ba2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b8ec:	f000 fbce 	bl	800c08c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8f2:	f000 f8ed 	bl	800bad0 <prvIsQueueEmpty>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f43f af6f 	beq.w	800b7dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b8fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b900:	4618      	mov	r0, r3
 800b902:	3730      	adds	r7, #48	@ 0x30
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b918:	2300      	movs	r3, #0
 800b91a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10d      	bne.n	800b946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d14d      	bne.n	800b9ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	4618      	mov	r0, r3
 800b938:	f000 ff9e 	bl	800c878 <xTaskPriorityDisinherit>
 800b93c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	609a      	str	r2, [r3, #8]
 800b944:	e043      	b.n	800b9ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d119      	bne.n	800b980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6858      	ldr	r0, [r3, #4]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b954:	461a      	mov	r2, r3
 800b956:	68b9      	ldr	r1, [r7, #8]
 800b958:	f002 fd5e 	bl	800e418 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	685a      	ldr	r2, [r3, #4]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	429a      	cmp	r2, r3
 800b974:	d32b      	bcc.n	800b9ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	605a      	str	r2, [r3, #4]
 800b97e:	e026      	b.n	800b9ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	68d8      	ldr	r0, [r3, #12]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b988:	461a      	mov	r2, r3
 800b98a:	68b9      	ldr	r1, [r7, #8]
 800b98c:	f002 fd44 	bl	800e418 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	68da      	ldr	r2, [r3, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b998:	425b      	negs	r3, r3
 800b99a:	441a      	add	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68da      	ldr	r2, [r3, #12]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d207      	bcs.n	800b9bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	689a      	ldr	r2, [r3, #8]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9b4:	425b      	negs	r3, r3
 800b9b6:	441a      	add	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2b02      	cmp	r3, #2
 800b9c0:	d105      	bne.n	800b9ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	1c5a      	adds	r2, r3, #1
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b9d6:	697b      	ldr	r3, [r7, #20]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d018      	beq.n	800ba24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9fa:	441a      	add	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68da      	ldr	r2, [r3, #12]
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d303      	bcc.n	800ba14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68d9      	ldr	r1, [r3, #12]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	6838      	ldr	r0, [r7, #0]
 800ba20:	f002 fcfa 	bl	800e418 <memcpy>
	}
}
 800ba24:	bf00      	nop
 800ba26:	3708      	adds	r7, #8
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba34:	f001 fc70 	bl	800d318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba40:	e011      	b.n	800ba66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d012      	beq.n	800ba70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3324      	adds	r3, #36	@ 0x24
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f000 fd34 	bl	800c4bc <xTaskRemoveFromEventList>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba5a:	f000 fe0d 	bl	800c678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	dce9      	bgt.n	800ba42 <prvUnlockQueue+0x16>
 800ba6e:	e000      	b.n	800ba72 <prvUnlockQueue+0x46>
					break;
 800ba70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	22ff      	movs	r2, #255	@ 0xff
 800ba76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ba7a:	f001 fc7f 	bl	800d37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba7e:	f001 fc4b 	bl	800d318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba8a:	e011      	b.n	800bab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d012      	beq.n	800baba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	3310      	adds	r3, #16
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 fd0f 	bl	800c4bc <xTaskRemoveFromEventList>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800baa4:	f000 fde8 	bl	800c678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	3b01      	subs	r3, #1
 800baac:	b2db      	uxtb	r3, r3
 800baae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	dce9      	bgt.n	800ba8c <prvUnlockQueue+0x60>
 800bab8:	e000      	b.n	800babc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800baba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	22ff      	movs	r2, #255	@ 0xff
 800bac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bac4:	f001 fc5a 	bl	800d37c <vPortExitCritical>
}
 800bac8:	bf00      	nop
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bad8:	f001 fc1e 	bl	800d318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bae4:	2301      	movs	r3, #1
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	e001      	b.n	800baee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800baea:	2300      	movs	r3, #0
 800baec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baee:	f001 fc45 	bl	800d37c <vPortExitCritical>

	return xReturn;
 800baf2:	68fb      	ldr	r3, [r7, #12]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb04:	f001 fc08 	bl	800d318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d102      	bne.n	800bb1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb14:	2301      	movs	r3, #1
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	e001      	b.n	800bb1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb1e:	f001 fc2d 	bl	800d37c <vPortExitCritical>

	return xReturn;
 800bb22:	68fb      	ldr	r3, [r7, #12]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3710      	adds	r7, #16
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
 800bb3a:	e014      	b.n	800bb66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb3c:	4a0f      	ldr	r2, [pc, #60]	@ (800bb7c <vQueueAddToRegistry+0x50>)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d10b      	bne.n	800bb60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb48:	490c      	ldr	r1, [pc, #48]	@ (800bb7c <vQueueAddToRegistry+0x50>)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb52:	4a0a      	ldr	r2, [pc, #40]	@ (800bb7c <vQueueAddToRegistry+0x50>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	4413      	add	r3, r2
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb5e:	e006      	b.n	800bb6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	3301      	adds	r3, #1
 800bb64:	60fb      	str	r3, [r7, #12]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2b07      	cmp	r3, #7
 800bb6a:	d9e7      	bls.n	800bb3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb6c:	bf00      	nop
 800bb6e:	bf00      	nop
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	20000b98 	.word	0x20000b98

0800bb80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bb90:	f001 fbc2 	bl	800d318 <vPortEnterCritical>
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb9a:	b25b      	sxtb	r3, r3
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bba0:	d103      	bne.n	800bbaa <vQueueWaitForMessageRestricted+0x2a>
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbb0:	b25b      	sxtb	r3, r3
 800bbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbb6:	d103      	bne.n	800bbc0 <vQueueWaitForMessageRestricted+0x40>
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bbc0:	f001 fbdc 	bl	800d37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d106      	bne.n	800bbda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	3324      	adds	r3, #36	@ 0x24
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fc45 	bl	800c464 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bbda:	6978      	ldr	r0, [r7, #20]
 800bbdc:	f7ff ff26 	bl	800ba2c <prvUnlockQueue>
	}
 800bbe0:	bf00      	nop
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b08e      	sub	sp, #56	@ 0x38
 800bbec:	af04      	add	r7, sp, #16
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d10b      	bne.n	800bc14 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	623b      	str	r3, [r7, #32]
}
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
 800bc12:	e7fd      	b.n	800bc10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bc14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10b      	bne.n	800bc32 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc1e:	f383 8811 	msr	BASEPRI, r3
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	f3bf 8f4f 	dsb	sy
 800bc2a:	61fb      	str	r3, [r7, #28]
}
 800bc2c:	bf00      	nop
 800bc2e:	bf00      	nop
 800bc30:	e7fd      	b.n	800bc2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc32:	235c      	movs	r3, #92	@ 0x5c
 800bc34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	2b5c      	cmp	r3, #92	@ 0x5c
 800bc3a:	d00b      	beq.n	800bc54 <xTaskCreateStatic+0x6c>
	__asm volatile
 800bc3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	61bb      	str	r3, [r7, #24]
}
 800bc4e:	bf00      	nop
 800bc50:	bf00      	nop
 800bc52:	e7fd      	b.n	800bc50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d01e      	beq.n	800bc9a <xTaskCreateStatic+0xb2>
 800bc5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d01b      	beq.n	800bc9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6e:	2202      	movs	r2, #2
 800bc70:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc74:	2300      	movs	r3, #0
 800bc76:	9303      	str	r3, [sp, #12]
 800bc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7a:	9302      	str	r3, [sp, #8]
 800bc7c:	f107 0314 	add.w	r3, r7, #20
 800bc80:	9301      	str	r3, [sp, #4]
 800bc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f850 	bl	800bd32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc94:	f000 f8de 	bl	800be54 <prvAddNewTaskToReadyList>
 800bc98:	e001      	b.n	800bc9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bc9e:	697b      	ldr	r3, [r7, #20]
	}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3728      	adds	r7, #40	@ 0x28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b08c      	sub	sp, #48	@ 0x30
 800bcac:	af04      	add	r7, sp, #16
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	603b      	str	r3, [r7, #0]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 fc4d 	bl	800d55c <pvPortMalloc>
 800bcc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d00e      	beq.n	800bce8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcca:	205c      	movs	r0, #92	@ 0x5c
 800bccc:	f001 fc46 	bl	800d55c <pvPortMalloc>
 800bcd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	697a      	ldr	r2, [r7, #20]
 800bcdc:	631a      	str	r2, [r3, #48]	@ 0x30
 800bcde:	e005      	b.n	800bcec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bce0:	6978      	ldr	r0, [r7, #20]
 800bce2:	f001 fd09 	bl	800d6f8 <vPortFree>
 800bce6:	e001      	b.n	800bcec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bce8:	2300      	movs	r3, #0
 800bcea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d017      	beq.n	800bd22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bcfa:	88fa      	ldrh	r2, [r7, #6]
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	9303      	str	r3, [sp, #12]
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd06:	9301      	str	r3, [sp, #4]
 800bd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	68b9      	ldr	r1, [r7, #8]
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f000 f80e 	bl	800bd32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd16:	69f8      	ldr	r0, [r7, #28]
 800bd18:	f000 f89c 	bl	800be54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	61bb      	str	r3, [r7, #24]
 800bd20:	e002      	b.n	800bd28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd22:	f04f 33ff 	mov.w	r3, #4294967295
 800bd26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd28:	69bb      	ldr	r3, [r7, #24]
	}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b088      	sub	sp, #32
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	60f8      	str	r0, [r7, #12]
 800bd3a:	60b9      	str	r1, [r7, #8]
 800bd3c:	607a      	str	r2, [r7, #4]
 800bd3e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd42:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	461a      	mov	r2, r3
 800bd4a:	21a5      	movs	r1, #165	@ 0xa5
 800bd4c:	f002 fb30 	bl	800e3b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	f023 0307 	bic.w	r3, r3, #7
 800bd68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	f003 0307 	and.w	r3, r3, #7
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	617b      	str	r3, [r7, #20]
}
 800bd86:	bf00      	nop
 800bd88:	bf00      	nop
 800bd8a:	e7fd      	b.n	800bd88 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d01f      	beq.n	800bdd2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd92:	2300      	movs	r3, #0
 800bd94:	61fb      	str	r3, [r7, #28]
 800bd96:	e012      	b.n	800bdbe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bd98:	68ba      	ldr	r2, [r7, #8]
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	7819      	ldrb	r1, [r3, #0]
 800bda0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	4413      	add	r3, r2
 800bda6:	3334      	adds	r3, #52	@ 0x34
 800bda8:	460a      	mov	r2, r1
 800bdaa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d006      	beq.n	800bdc6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	61fb      	str	r3, [r7, #28]
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	2b0f      	cmp	r3, #15
 800bdc2:	d9e9      	bls.n	800bd98 <prvInitialiseNewTask+0x66>
 800bdc4:	e000      	b.n	800bdc8 <prvInitialiseNewTask+0x96>
			{
				break;
 800bdc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bdc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bdd0:	e003      	b.n	800bdda <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bddc:	2b37      	cmp	r3, #55	@ 0x37
 800bdde:	d901      	bls.n	800bde4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bde0:	2337      	movs	r3, #55	@ 0x37
 800bde2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bde8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7ff f966 	bl	800b0cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be02:	3318      	adds	r3, #24
 800be04:	4618      	mov	r0, r3
 800be06:	f7ff f961 	bl	800b0cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be12:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be1e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be22:	2200      	movs	r2, #0
 800be24:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	68f9      	ldr	r1, [r7, #12]
 800be32:	69b8      	ldr	r0, [r7, #24]
 800be34:	f001 f93e 	bl	800d0b4 <pxPortInitialiseStack>
 800be38:	4602      	mov	r2, r0
 800be3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be4a:	bf00      	nop
 800be4c:	3720      	adds	r7, #32
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
	...

0800be54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be5c:	f001 fa5c 	bl	800d318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800be60:	4b2d      	ldr	r3, [pc, #180]	@ (800bf18 <prvAddNewTaskToReadyList+0xc4>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	3301      	adds	r3, #1
 800be66:	4a2c      	ldr	r2, [pc, #176]	@ (800bf18 <prvAddNewTaskToReadyList+0xc4>)
 800be68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800be6a:	4b2c      	ldr	r3, [pc, #176]	@ (800bf1c <prvAddNewTaskToReadyList+0xc8>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d109      	bne.n	800be86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800be72:	4a2a      	ldr	r2, [pc, #168]	@ (800bf1c <prvAddNewTaskToReadyList+0xc8>)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800be78:	4b27      	ldr	r3, [pc, #156]	@ (800bf18 <prvAddNewTaskToReadyList+0xc4>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d110      	bne.n	800bea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be80:	f000 fc1e 	bl	800c6c0 <prvInitialiseTaskLists>
 800be84:	e00d      	b.n	800bea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be86:	4b26      	ldr	r3, [pc, #152]	@ (800bf20 <prvAddNewTaskToReadyList+0xcc>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be8e:	4b23      	ldr	r3, [pc, #140]	@ (800bf1c <prvAddNewTaskToReadyList+0xc8>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be98:	429a      	cmp	r2, r3
 800be9a:	d802      	bhi.n	800bea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be9c:	4a1f      	ldr	r2, [pc, #124]	@ (800bf1c <prvAddNewTaskToReadyList+0xc8>)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bea2:	4b20      	ldr	r3, [pc, #128]	@ (800bf24 <prvAddNewTaskToReadyList+0xd0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3301      	adds	r3, #1
 800bea8:	4a1e      	ldr	r2, [pc, #120]	@ (800bf24 <prvAddNewTaskToReadyList+0xd0>)
 800beaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800beac:	4b1d      	ldr	r3, [pc, #116]	@ (800bf24 <prvAddNewTaskToReadyList+0xd0>)
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb8:	4b1b      	ldr	r3, [pc, #108]	@ (800bf28 <prvAddNewTaskToReadyList+0xd4>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d903      	bls.n	800bec8 <prvAddNewTaskToReadyList+0x74>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec4:	4a18      	ldr	r2, [pc, #96]	@ (800bf28 <prvAddNewTaskToReadyList+0xd4>)
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800becc:	4613      	mov	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	4413      	add	r3, r2
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4a15      	ldr	r2, [pc, #84]	@ (800bf2c <prvAddNewTaskToReadyList+0xd8>)
 800bed6:	441a      	add	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3304      	adds	r3, #4
 800bedc:	4619      	mov	r1, r3
 800bede:	4610      	mov	r0, r2
 800bee0:	f7ff f901 	bl	800b0e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bee4:	f001 fa4a 	bl	800d37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bee8:	4b0d      	ldr	r3, [pc, #52]	@ (800bf20 <prvAddNewTaskToReadyList+0xcc>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00e      	beq.n	800bf0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bef0:	4b0a      	ldr	r3, [pc, #40]	@ (800bf1c <prvAddNewTaskToReadyList+0xc8>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800befa:	429a      	cmp	r2, r3
 800befc:	d207      	bcs.n	800bf0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800befe:	4b0c      	ldr	r3, [pc, #48]	@ (800bf30 <prvAddNewTaskToReadyList+0xdc>)
 800bf00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf0e:	bf00      	nop
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	200010ac 	.word	0x200010ac
 800bf1c:	20000bd8 	.word	0x20000bd8
 800bf20:	200010b8 	.word	0x200010b8
 800bf24:	200010c8 	.word	0x200010c8
 800bf28:	200010b4 	.word	0x200010b4
 800bf2c:	20000bdc 	.word	0x20000bdc
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d018      	beq.n	800bf78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf46:	4b14      	ldr	r3, [pc, #80]	@ (800bf98 <vTaskDelay+0x64>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00b      	beq.n	800bf66 <vTaskDelay+0x32>
	__asm volatile
 800bf4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf52:	f383 8811 	msr	BASEPRI, r3
 800bf56:	f3bf 8f6f 	isb	sy
 800bf5a:	f3bf 8f4f 	dsb	sy
 800bf5e:	60bb      	str	r3, [r7, #8]
}
 800bf60:	bf00      	nop
 800bf62:	bf00      	nop
 800bf64:	e7fd      	b.n	800bf62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bf66:	f000 f883 	bl	800c070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fcf3 	bl	800c958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf72:	f000 f88b 	bl	800c08c <xTaskResumeAll>
 800bf76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d107      	bne.n	800bf8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bf7e:	4b07      	ldr	r3, [pc, #28]	@ (800bf9c <vTaskDelay+0x68>)
 800bf80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	f3bf 8f4f 	dsb	sy
 800bf8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf8e:	bf00      	nop
 800bf90:	3710      	adds	r7, #16
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	200010d4 	.word	0x200010d4
 800bf9c:	e000ed04 	.word	0xe000ed04

0800bfa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08a      	sub	sp, #40	@ 0x28
 800bfa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bfae:	463a      	mov	r2, r7
 800bfb0:	1d39      	adds	r1, r7, #4
 800bfb2:	f107 0308 	add.w	r3, r7, #8
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff f834 	bl	800b024 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	9202      	str	r2, [sp, #8]
 800bfc4:	9301      	str	r3, [sp, #4]
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	9300      	str	r3, [sp, #0]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	460a      	mov	r2, r1
 800bfce:	4922      	ldr	r1, [pc, #136]	@ (800c058 <vTaskStartScheduler+0xb8>)
 800bfd0:	4822      	ldr	r0, [pc, #136]	@ (800c05c <vTaskStartScheduler+0xbc>)
 800bfd2:	f7ff fe09 	bl	800bbe8 <xTaskCreateStatic>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	4a21      	ldr	r2, [pc, #132]	@ (800c060 <vTaskStartScheduler+0xc0>)
 800bfda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfdc:	4b20      	ldr	r3, [pc, #128]	@ (800c060 <vTaskStartScheduler+0xc0>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	617b      	str	r3, [r7, #20]
 800bfe8:	e001      	b.n	800bfee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d102      	bne.n	800bffa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bff4:	f000 fd04 	bl	800ca00 <xTimerCreateTimerTask>
 800bff8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d116      	bne.n	800c02e <vTaskStartScheduler+0x8e>
	__asm volatile
 800c000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	613b      	str	r3, [r7, #16]
}
 800c012:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c014:	4b13      	ldr	r3, [pc, #76]	@ (800c064 <vTaskStartScheduler+0xc4>)
 800c016:	f04f 32ff 	mov.w	r2, #4294967295
 800c01a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c01c:	4b12      	ldr	r3, [pc, #72]	@ (800c068 <vTaskStartScheduler+0xc8>)
 800c01e:	2201      	movs	r2, #1
 800c020:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c022:	4b12      	ldr	r3, [pc, #72]	@ (800c06c <vTaskStartScheduler+0xcc>)
 800c024:	2200      	movs	r2, #0
 800c026:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c028:	f001 f8d2 	bl	800d1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c02c:	e00f      	b.n	800c04e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c034:	d10b      	bne.n	800c04e <vTaskStartScheduler+0xae>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	60fb      	str	r3, [r7, #12]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <vTaskStartScheduler+0xaa>
}
 800c04e:	bf00      	nop
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	0800ece4 	.word	0x0800ece4
 800c05c:	0800c691 	.word	0x0800c691
 800c060:	200010d0 	.word	0x200010d0
 800c064:	200010cc 	.word	0x200010cc
 800c068:	200010b8 	.word	0x200010b8
 800c06c:	200010b0 	.word	0x200010b0

0800c070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c070:	b480      	push	{r7}
 800c072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c074:	4b04      	ldr	r3, [pc, #16]	@ (800c088 <vTaskSuspendAll+0x18>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	4a03      	ldr	r2, [pc, #12]	@ (800c088 <vTaskSuspendAll+0x18>)
 800c07c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c07e:	bf00      	nop
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr
 800c088:	200010d4 	.word	0x200010d4

0800c08c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c092:	2300      	movs	r3, #0
 800c094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c096:	2300      	movs	r3, #0
 800c098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c09a:	4b42      	ldr	r3, [pc, #264]	@ (800c1a4 <xTaskResumeAll+0x118>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10b      	bne.n	800c0ba <xTaskResumeAll+0x2e>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	603b      	str	r3, [r7, #0]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0ba:	f001 f92d 	bl	800d318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0be:	4b39      	ldr	r3, [pc, #228]	@ (800c1a4 <xTaskResumeAll+0x118>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	4a37      	ldr	r2, [pc, #220]	@ (800c1a4 <xTaskResumeAll+0x118>)
 800c0c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0c8:	4b36      	ldr	r3, [pc, #216]	@ (800c1a4 <xTaskResumeAll+0x118>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d162      	bne.n	800c196 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0d0:	4b35      	ldr	r3, [pc, #212]	@ (800c1a8 <xTaskResumeAll+0x11c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d05e      	beq.n	800c196 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0d8:	e02f      	b.n	800c13a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0da:	4b34      	ldr	r3, [pc, #208]	@ (800c1ac <xTaskResumeAll+0x120>)
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3318      	adds	r3, #24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff f85a 	bl	800b1a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f7ff f855 	bl	800b1a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	4b2d      	ldr	r3, [pc, #180]	@ (800c1b0 <xTaskResumeAll+0x124>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d903      	bls.n	800c10a <xTaskResumeAll+0x7e>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c106:	4a2a      	ldr	r2, [pc, #168]	@ (800c1b0 <xTaskResumeAll+0x124>)
 800c108:	6013      	str	r3, [r2, #0]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4a27      	ldr	r2, [pc, #156]	@ (800c1b4 <xTaskResumeAll+0x128>)
 800c118:	441a      	add	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	3304      	adds	r3, #4
 800c11e:	4619      	mov	r1, r3
 800c120:	4610      	mov	r0, r2
 800c122:	f7fe ffe0 	bl	800b0e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12a:	4b23      	ldr	r3, [pc, #140]	@ (800c1b8 <xTaskResumeAll+0x12c>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c130:	429a      	cmp	r2, r3
 800c132:	d302      	bcc.n	800c13a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c134:	4b21      	ldr	r3, [pc, #132]	@ (800c1bc <xTaskResumeAll+0x130>)
 800c136:	2201      	movs	r2, #1
 800c138:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c13a:	4b1c      	ldr	r3, [pc, #112]	@ (800c1ac <xTaskResumeAll+0x120>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1cb      	bne.n	800c0da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d001      	beq.n	800c14c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c148:	f000 fb58 	bl	800c7fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c14c:	4b1c      	ldr	r3, [pc, #112]	@ (800c1c0 <xTaskResumeAll+0x134>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d010      	beq.n	800c17a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c158:	f000 f846 	bl	800c1e8 <xTaskIncrementTick>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d002      	beq.n	800c168 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c162:	4b16      	ldr	r3, [pc, #88]	@ (800c1bc <xTaskResumeAll+0x130>)
 800c164:	2201      	movs	r2, #1
 800c166:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1f1      	bne.n	800c158 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c174:	4b12      	ldr	r3, [pc, #72]	@ (800c1c0 <xTaskResumeAll+0x134>)
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c17a:	4b10      	ldr	r3, [pc, #64]	@ (800c1bc <xTaskResumeAll+0x130>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d009      	beq.n	800c196 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c182:	2301      	movs	r3, #1
 800c184:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c186:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <xTaskResumeAll+0x138>)
 800c188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c196:	f001 f8f1 	bl	800d37c <vPortExitCritical>

	return xAlreadyYielded;
 800c19a:	68bb      	ldr	r3, [r7, #8]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	200010d4 	.word	0x200010d4
 800c1a8:	200010ac 	.word	0x200010ac
 800c1ac:	2000106c 	.word	0x2000106c
 800c1b0:	200010b4 	.word	0x200010b4
 800c1b4:	20000bdc 	.word	0x20000bdc
 800c1b8:	20000bd8 	.word	0x20000bd8
 800c1bc:	200010c0 	.word	0x200010c0
 800c1c0:	200010bc 	.word	0x200010bc
 800c1c4:	e000ed04 	.word	0xe000ed04

0800c1c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b083      	sub	sp, #12
 800c1cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1ce:	4b05      	ldr	r3, [pc, #20]	@ (800c1e4 <xTaskGetTickCount+0x1c>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1d4:	687b      	ldr	r3, [r7, #4]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	370c      	adds	r7, #12
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	200010b0 	.word	0x200010b0

0800c1e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b086      	sub	sp, #24
 800c1ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1f2:	4b4f      	ldr	r3, [pc, #316]	@ (800c330 <xTaskIncrementTick+0x148>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f040 8090 	bne.w	800c31c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1fc:	4b4d      	ldr	r3, [pc, #308]	@ (800c334 <xTaskIncrementTick+0x14c>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	3301      	adds	r3, #1
 800c202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c204:	4a4b      	ldr	r2, [pc, #300]	@ (800c334 <xTaskIncrementTick+0x14c>)
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d121      	bne.n	800c254 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c210:	4b49      	ldr	r3, [pc, #292]	@ (800c338 <xTaskIncrementTick+0x150>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d00b      	beq.n	800c232 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c21e:	f383 8811 	msr	BASEPRI, r3
 800c222:	f3bf 8f6f 	isb	sy
 800c226:	f3bf 8f4f 	dsb	sy
 800c22a:	603b      	str	r3, [r7, #0]
}
 800c22c:	bf00      	nop
 800c22e:	bf00      	nop
 800c230:	e7fd      	b.n	800c22e <xTaskIncrementTick+0x46>
 800c232:	4b41      	ldr	r3, [pc, #260]	@ (800c338 <xTaskIncrementTick+0x150>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	4b40      	ldr	r3, [pc, #256]	@ (800c33c <xTaskIncrementTick+0x154>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a3e      	ldr	r2, [pc, #248]	@ (800c338 <xTaskIncrementTick+0x150>)
 800c23e:	6013      	str	r3, [r2, #0]
 800c240:	4a3e      	ldr	r2, [pc, #248]	@ (800c33c <xTaskIncrementTick+0x154>)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	4b3e      	ldr	r3, [pc, #248]	@ (800c340 <xTaskIncrementTick+0x158>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	3301      	adds	r3, #1
 800c24c:	4a3c      	ldr	r2, [pc, #240]	@ (800c340 <xTaskIncrementTick+0x158>)
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	f000 fad4 	bl	800c7fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c254:	4b3b      	ldr	r3, [pc, #236]	@ (800c344 <xTaskIncrementTick+0x15c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d349      	bcc.n	800c2f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c25e:	4b36      	ldr	r3, [pc, #216]	@ (800c338 <xTaskIncrementTick+0x150>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d104      	bne.n	800c272 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c268:	4b36      	ldr	r3, [pc, #216]	@ (800c344 <xTaskIncrementTick+0x15c>)
 800c26a:	f04f 32ff 	mov.w	r2, #4294967295
 800c26e:	601a      	str	r2, [r3, #0]
					break;
 800c270:	e03f      	b.n	800c2f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c272:	4b31      	ldr	r3, [pc, #196]	@ (800c338 <xTaskIncrementTick+0x150>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68db      	ldr	r3, [r3, #12]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	429a      	cmp	r2, r3
 800c288:	d203      	bcs.n	800c292 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c28a:	4a2e      	ldr	r2, [pc, #184]	@ (800c344 <xTaskIncrementTick+0x15c>)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c290:	e02f      	b.n	800c2f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	3304      	adds	r3, #4
 800c296:	4618      	mov	r0, r3
 800c298:	f7fe ff82 	bl	800b1a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d004      	beq.n	800c2ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	3318      	adds	r3, #24
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fe ff79 	bl	800b1a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2b2:	4b25      	ldr	r3, [pc, #148]	@ (800c348 <xTaskIncrementTick+0x160>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d903      	bls.n	800c2c2 <xTaskIncrementTick+0xda>
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2be:	4a22      	ldr	r2, [pc, #136]	@ (800c348 <xTaskIncrementTick+0x160>)
 800c2c0:	6013      	str	r3, [r2, #0]
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4413      	add	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4a1f      	ldr	r2, [pc, #124]	@ (800c34c <xTaskIncrementTick+0x164>)
 800c2d0:	441a      	add	r2, r3
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	3304      	adds	r3, #4
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	4610      	mov	r0, r2
 800c2da:	f7fe ff04 	bl	800b0e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2e2:	4b1b      	ldr	r3, [pc, #108]	@ (800c350 <xTaskIncrementTick+0x168>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d3b8      	bcc.n	800c25e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2f0:	e7b5      	b.n	800c25e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2f2:	4b17      	ldr	r3, [pc, #92]	@ (800c350 <xTaskIncrementTick+0x168>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2f8:	4914      	ldr	r1, [pc, #80]	@ (800c34c <xTaskIncrementTick+0x164>)
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d901      	bls.n	800c30e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c30a:	2301      	movs	r3, #1
 800c30c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c30e:	4b11      	ldr	r3, [pc, #68]	@ (800c354 <xTaskIncrementTick+0x16c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d007      	beq.n	800c326 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c316:	2301      	movs	r3, #1
 800c318:	617b      	str	r3, [r7, #20]
 800c31a:	e004      	b.n	800c326 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c31c:	4b0e      	ldr	r3, [pc, #56]	@ (800c358 <xTaskIncrementTick+0x170>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3301      	adds	r3, #1
 800c322:	4a0d      	ldr	r2, [pc, #52]	@ (800c358 <xTaskIncrementTick+0x170>)
 800c324:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c326:	697b      	ldr	r3, [r7, #20]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	200010d4 	.word	0x200010d4
 800c334:	200010b0 	.word	0x200010b0
 800c338:	20001064 	.word	0x20001064
 800c33c:	20001068 	.word	0x20001068
 800c340:	200010c4 	.word	0x200010c4
 800c344:	200010cc 	.word	0x200010cc
 800c348:	200010b4 	.word	0x200010b4
 800c34c:	20000bdc 	.word	0x20000bdc
 800c350:	20000bd8 	.word	0x20000bd8
 800c354:	200010c0 	.word	0x200010c0
 800c358:	200010bc 	.word	0x200010bc

0800c35c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c362:	4b28      	ldr	r3, [pc, #160]	@ (800c404 <vTaskSwitchContext+0xa8>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c36a:	4b27      	ldr	r3, [pc, #156]	@ (800c408 <vTaskSwitchContext+0xac>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c370:	e042      	b.n	800c3f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800c372:	4b25      	ldr	r3, [pc, #148]	@ (800c408 <vTaskSwitchContext+0xac>)
 800c374:	2200      	movs	r2, #0
 800c376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c378:	4b24      	ldr	r3, [pc, #144]	@ (800c40c <vTaskSwitchContext+0xb0>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	60fb      	str	r3, [r7, #12]
 800c37e:	e011      	b.n	800c3a4 <vTaskSwitchContext+0x48>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10b      	bne.n	800c39e <vTaskSwitchContext+0x42>
	__asm volatile
 800c386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38a:	f383 8811 	msr	BASEPRI, r3
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	f3bf 8f4f 	dsb	sy
 800c396:	607b      	str	r3, [r7, #4]
}
 800c398:	bf00      	nop
 800c39a:	bf00      	nop
 800c39c:	e7fd      	b.n	800c39a <vTaskSwitchContext+0x3e>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	60fb      	str	r3, [r7, #12]
 800c3a4:	491a      	ldr	r1, [pc, #104]	@ (800c410 <vTaskSwitchContext+0xb4>)
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	440b      	add	r3, r1
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d0e3      	beq.n	800c380 <vTaskSwitchContext+0x24>
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	4413      	add	r3, r2
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	4a13      	ldr	r2, [pc, #76]	@ (800c410 <vTaskSwitchContext+0xb4>)
 800c3c4:	4413      	add	r3, r2
 800c3c6:	60bb      	str	r3, [r7, #8]
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	685a      	ldr	r2, [r3, #4]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	605a      	str	r2, [r3, #4]
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	3308      	adds	r3, #8
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d104      	bne.n	800c3e8 <vTaskSwitchContext+0x8c>
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	605a      	str	r2, [r3, #4]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	4a09      	ldr	r2, [pc, #36]	@ (800c414 <vTaskSwitchContext+0xb8>)
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	4a06      	ldr	r2, [pc, #24]	@ (800c40c <vTaskSwitchContext+0xb0>)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6013      	str	r3, [r2, #0]
}
 800c3f8:	bf00      	nop
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	200010d4 	.word	0x200010d4
 800c408:	200010c0 	.word	0x200010c0
 800c40c:	200010b4 	.word	0x200010b4
 800c410:	20000bdc 	.word	0x20000bdc
 800c414:	20000bd8 	.word	0x20000bd8

0800c418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10b      	bne.n	800c440 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	60fb      	str	r3, [r7, #12]
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	e7fd      	b.n	800c43c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c440:	4b07      	ldr	r3, [pc, #28]	@ (800c460 <vTaskPlaceOnEventList+0x48>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	3318      	adds	r3, #24
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7fe fe70 	bl	800b12e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c44e:	2101      	movs	r1, #1
 800c450:	6838      	ldr	r0, [r7, #0]
 800c452:	f000 fa81 	bl	800c958 <prvAddCurrentTaskToDelayedList>
}
 800c456:	bf00      	nop
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	20000bd8 	.word	0x20000bd8

0800c464 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c464:	b580      	push	{r7, lr}
 800c466:	b086      	sub	sp, #24
 800c468:	af00      	add	r7, sp, #0
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d10b      	bne.n	800c48e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
 800c486:	617b      	str	r3, [r7, #20]
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	e7fd      	b.n	800c48a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c48e:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	3318      	adds	r3, #24
 800c494:	4619      	mov	r1, r3
 800c496:	68f8      	ldr	r0, [r7, #12]
 800c498:	f7fe fe25 	bl	800b0e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d002      	beq.n	800c4a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c4a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	68b8      	ldr	r0, [r7, #8]
 800c4ac:	f000 fa54 	bl	800c958 <prvAddCurrentTaskToDelayedList>
	}
 800c4b0:	bf00      	nop
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	20000bd8 	.word	0x20000bd8

0800c4bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b086      	sub	sp, #24
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10b      	bne.n	800c4ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c4d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d6:	f383 8811 	msr	BASEPRI, r3
 800c4da:	f3bf 8f6f 	isb	sy
 800c4de:	f3bf 8f4f 	dsb	sy
 800c4e2:	60fb      	str	r3, [r7, #12]
}
 800c4e4:	bf00      	nop
 800c4e6:	bf00      	nop
 800c4e8:	e7fd      	b.n	800c4e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	3318      	adds	r3, #24
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f7fe fe56 	bl	800b1a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4f4:	4b1d      	ldr	r3, [pc, #116]	@ (800c56c <xTaskRemoveFromEventList+0xb0>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d11d      	bne.n	800c538 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	3304      	adds	r3, #4
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe fe4d 	bl	800b1a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c50a:	4b19      	ldr	r3, [pc, #100]	@ (800c570 <xTaskRemoveFromEventList+0xb4>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d903      	bls.n	800c51a <xTaskRemoveFromEventList+0x5e>
 800c512:	693b      	ldr	r3, [r7, #16]
 800c514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c516:	4a16      	ldr	r2, [pc, #88]	@ (800c570 <xTaskRemoveFromEventList+0xb4>)
 800c518:	6013      	str	r3, [r2, #0]
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c51e:	4613      	mov	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4a13      	ldr	r2, [pc, #76]	@ (800c574 <xTaskRemoveFromEventList+0xb8>)
 800c528:	441a      	add	r2, r3
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	3304      	adds	r3, #4
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f7fe fdd8 	bl	800b0e6 <vListInsertEnd>
 800c536:	e005      	b.n	800c544 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	3318      	adds	r3, #24
 800c53c:	4619      	mov	r1, r3
 800c53e:	480e      	ldr	r0, [pc, #56]	@ (800c578 <xTaskRemoveFromEventList+0xbc>)
 800c540:	f7fe fdd1 	bl	800b0e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c548:	4b0c      	ldr	r3, [pc, #48]	@ (800c57c <xTaskRemoveFromEventList+0xc0>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54e:	429a      	cmp	r2, r3
 800c550:	d905      	bls.n	800c55e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c552:	2301      	movs	r3, #1
 800c554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c556:	4b0a      	ldr	r3, [pc, #40]	@ (800c580 <xTaskRemoveFromEventList+0xc4>)
 800c558:	2201      	movs	r2, #1
 800c55a:	601a      	str	r2, [r3, #0]
 800c55c:	e001      	b.n	800c562 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c55e:	2300      	movs	r3, #0
 800c560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c562:	697b      	ldr	r3, [r7, #20]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3718      	adds	r7, #24
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	200010d4 	.word	0x200010d4
 800c570:	200010b4 	.word	0x200010b4
 800c574:	20000bdc 	.word	0x20000bdc
 800c578:	2000106c 	.word	0x2000106c
 800c57c:	20000bd8 	.word	0x20000bd8
 800c580:	200010c0 	.word	0x200010c0

0800c584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c584:	b480      	push	{r7}
 800c586:	b083      	sub	sp, #12
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c58c:	4b06      	ldr	r3, [pc, #24]	@ (800c5a8 <vTaskInternalSetTimeOutState+0x24>)
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c594:	4b05      	ldr	r3, [pc, #20]	@ (800c5ac <vTaskInternalSetTimeOutState+0x28>)
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	605a      	str	r2, [r3, #4]
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	200010c4 	.word	0x200010c4
 800c5ac:	200010b0 	.word	0x200010b0

0800c5b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b088      	sub	sp, #32
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10b      	bne.n	800c5d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	613b      	str	r3, [r7, #16]
}
 800c5d2:	bf00      	nop
 800c5d4:	bf00      	nop
 800c5d6:	e7fd      	b.n	800c5d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10b      	bne.n	800c5f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	60fb      	str	r3, [r7, #12]
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	e7fd      	b.n	800c5f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c5f6:	f000 fe8f 	bl	800d318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5fa:	4b1d      	ldr	r3, [pc, #116]	@ (800c670 <xTaskCheckForTimeOut+0xc0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	69ba      	ldr	r2, [r7, #24]
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c612:	d102      	bne.n	800c61a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c614:	2300      	movs	r3, #0
 800c616:	61fb      	str	r3, [r7, #28]
 800c618:	e023      	b.n	800c662 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b15      	ldr	r3, [pc, #84]	@ (800c674 <xTaskCheckForTimeOut+0xc4>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d007      	beq.n	800c636 <xTaskCheckForTimeOut+0x86>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d302      	bcc.n	800c636 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	61fb      	str	r3, [r7, #28]
 800c634:	e015      	b.n	800c662 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	697a      	ldr	r2, [r7, #20]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d20b      	bcs.n	800c658 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	1ad2      	subs	r2, r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff ff99 	bl	800c584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c652:	2300      	movs	r3, #0
 800c654:	61fb      	str	r3, [r7, #28]
 800c656:	e004      	b.n	800c662 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	2200      	movs	r2, #0
 800c65c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c65e:	2301      	movs	r3, #1
 800c660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c662:	f000 fe8b 	bl	800d37c <vPortExitCritical>

	return xReturn;
 800c666:	69fb      	ldr	r3, [r7, #28]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3720      	adds	r7, #32
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	200010b0 	.word	0x200010b0
 800c674:	200010c4 	.word	0x200010c4

0800c678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c67c:	4b03      	ldr	r3, [pc, #12]	@ (800c68c <vTaskMissedYield+0x14>)
 800c67e:	2201      	movs	r2, #1
 800c680:	601a      	str	r2, [r3, #0]
}
 800c682:	bf00      	nop
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	200010c0 	.word	0x200010c0

0800c690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c698:	f000 f852 	bl	800c740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c69c:	4b06      	ldr	r3, [pc, #24]	@ (800c6b8 <prvIdleTask+0x28>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d9f9      	bls.n	800c698 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6a4:	4b05      	ldr	r3, [pc, #20]	@ (800c6bc <prvIdleTask+0x2c>)
 800c6a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6aa:	601a      	str	r2, [r3, #0]
 800c6ac:	f3bf 8f4f 	dsb	sy
 800c6b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c6b4:	e7f0      	b.n	800c698 <prvIdleTask+0x8>
 800c6b6:	bf00      	nop
 800c6b8:	20000bdc 	.word	0x20000bdc
 800c6bc:	e000ed04 	.word	0xe000ed04

0800c6c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	607b      	str	r3, [r7, #4]
 800c6ca:	e00c      	b.n	800c6e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4a12      	ldr	r2, [pc, #72]	@ (800c720 <prvInitialiseTaskLists+0x60>)
 800c6d8:	4413      	add	r3, r2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fcd6 	bl	800b08c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	607b      	str	r3, [r7, #4]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b37      	cmp	r3, #55	@ 0x37
 800c6ea:	d9ef      	bls.n	800c6cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6ec:	480d      	ldr	r0, [pc, #52]	@ (800c724 <prvInitialiseTaskLists+0x64>)
 800c6ee:	f7fe fccd 	bl	800b08c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6f2:	480d      	ldr	r0, [pc, #52]	@ (800c728 <prvInitialiseTaskLists+0x68>)
 800c6f4:	f7fe fcca 	bl	800b08c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6f8:	480c      	ldr	r0, [pc, #48]	@ (800c72c <prvInitialiseTaskLists+0x6c>)
 800c6fa:	f7fe fcc7 	bl	800b08c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6fe:	480c      	ldr	r0, [pc, #48]	@ (800c730 <prvInitialiseTaskLists+0x70>)
 800c700:	f7fe fcc4 	bl	800b08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c704:	480b      	ldr	r0, [pc, #44]	@ (800c734 <prvInitialiseTaskLists+0x74>)
 800c706:	f7fe fcc1 	bl	800b08c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c70a:	4b0b      	ldr	r3, [pc, #44]	@ (800c738 <prvInitialiseTaskLists+0x78>)
 800c70c:	4a05      	ldr	r2, [pc, #20]	@ (800c724 <prvInitialiseTaskLists+0x64>)
 800c70e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c710:	4b0a      	ldr	r3, [pc, #40]	@ (800c73c <prvInitialiseTaskLists+0x7c>)
 800c712:	4a05      	ldr	r2, [pc, #20]	@ (800c728 <prvInitialiseTaskLists+0x68>)
 800c714:	601a      	str	r2, [r3, #0]
}
 800c716:	bf00      	nop
 800c718:	3708      	adds	r7, #8
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
 800c71e:	bf00      	nop
 800c720:	20000bdc 	.word	0x20000bdc
 800c724:	2000103c 	.word	0x2000103c
 800c728:	20001050 	.word	0x20001050
 800c72c:	2000106c 	.word	0x2000106c
 800c730:	20001080 	.word	0x20001080
 800c734:	20001098 	.word	0x20001098
 800c738:	20001064 	.word	0x20001064
 800c73c:	20001068 	.word	0x20001068

0800c740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c746:	e019      	b.n	800c77c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c748:	f000 fde6 	bl	800d318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c74c:	4b10      	ldr	r3, [pc, #64]	@ (800c790 <prvCheckTasksWaitingTermination+0x50>)
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	3304      	adds	r3, #4
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fe fd21 	bl	800b1a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c75e:	4b0d      	ldr	r3, [pc, #52]	@ (800c794 <prvCheckTasksWaitingTermination+0x54>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3b01      	subs	r3, #1
 800c764:	4a0b      	ldr	r2, [pc, #44]	@ (800c794 <prvCheckTasksWaitingTermination+0x54>)
 800c766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c768:	4b0b      	ldr	r3, [pc, #44]	@ (800c798 <prvCheckTasksWaitingTermination+0x58>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3b01      	subs	r3, #1
 800c76e:	4a0a      	ldr	r2, [pc, #40]	@ (800c798 <prvCheckTasksWaitingTermination+0x58>)
 800c770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c772:	f000 fe03 	bl	800d37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f810 	bl	800c79c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c77c:	4b06      	ldr	r3, [pc, #24]	@ (800c798 <prvCheckTasksWaitingTermination+0x58>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1e1      	bne.n	800c748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c784:	bf00      	nop
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20001080 	.word	0x20001080
 800c794:	200010ac 	.word	0x200010ac
 800c798:	20001094 	.word	0x20001094

0800c79c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d108      	bne.n	800c7c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 ffa0 	bl	800d6f8 <vPortFree>
				vPortFree( pxTCB );
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 ff9d 	bl	800d6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7be:	e019      	b.n	800c7f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d103      	bne.n	800c7d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 ff94 	bl	800d6f8 <vPortFree>
	}
 800c7d0:	e010      	b.n	800c7f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d00b      	beq.n	800c7f4 <prvDeleteTCB+0x58>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	60fb      	str	r3, [r7, #12]
}
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
 800c7f2:	e7fd      	b.n	800c7f0 <prvDeleteTCB+0x54>
	}
 800c7f4:	bf00      	nop
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c802:	4b0c      	ldr	r3, [pc, #48]	@ (800c834 <prvResetNextTaskUnblockTime+0x38>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c80c:	4b0a      	ldr	r3, [pc, #40]	@ (800c838 <prvResetNextTaskUnblockTime+0x3c>)
 800c80e:	f04f 32ff 	mov.w	r2, #4294967295
 800c812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c814:	e008      	b.n	800c828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c816:	4b07      	ldr	r3, [pc, #28]	@ (800c834 <prvResetNextTaskUnblockTime+0x38>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	4a04      	ldr	r2, [pc, #16]	@ (800c838 <prvResetNextTaskUnblockTime+0x3c>)
 800c826:	6013      	str	r3, [r2, #0]
}
 800c828:	bf00      	nop
 800c82a:	370c      	adds	r7, #12
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20001064 	.word	0x20001064
 800c838:	200010cc 	.word	0x200010cc

0800c83c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c842:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <xTaskGetSchedulerState+0x34>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d102      	bne.n	800c850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c84a:	2301      	movs	r3, #1
 800c84c:	607b      	str	r3, [r7, #4]
 800c84e:	e008      	b.n	800c862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c850:	4b08      	ldr	r3, [pc, #32]	@ (800c874 <xTaskGetSchedulerState+0x38>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d102      	bne.n	800c85e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c858:	2302      	movs	r3, #2
 800c85a:	607b      	str	r3, [r7, #4]
 800c85c:	e001      	b.n	800c862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c85e:	2300      	movs	r3, #0
 800c860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c862:	687b      	ldr	r3, [r7, #4]
	}
 800c864:	4618      	mov	r0, r3
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	200010b8 	.word	0x200010b8
 800c874:	200010d4 	.word	0x200010d4

0800c878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c884:	2300      	movs	r3, #0
 800c886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d058      	beq.n	800c940 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c88e:	4b2f      	ldr	r3, [pc, #188]	@ (800c94c <xTaskPriorityDisinherit+0xd4>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	429a      	cmp	r2, r3
 800c896:	d00b      	beq.n	800c8b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	60fb      	str	r3, [r7, #12]
}
 800c8aa:	bf00      	nop
 800c8ac:	bf00      	nop
 800c8ae:	e7fd      	b.n	800c8ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10b      	bne.n	800c8d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8bc:	f383 8811 	msr	BASEPRI, r3
 800c8c0:	f3bf 8f6f 	isb	sy
 800c8c4:	f3bf 8f4f 	dsb	sy
 800c8c8:	60bb      	str	r3, [r7, #8]
}
 800c8ca:	bf00      	nop
 800c8cc:	bf00      	nop
 800c8ce:	e7fd      	b.n	800c8cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8d4:	1e5a      	subs	r2, r3, #1
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d02c      	beq.n	800c940 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d128      	bne.n	800c940 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fc54 	bl	800b1a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8fc:	693b      	ldr	r3, [r7, #16]
 800c8fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c904:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c910:	4b0f      	ldr	r3, [pc, #60]	@ (800c950 <xTaskPriorityDisinherit+0xd8>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d903      	bls.n	800c920 <xTaskPriorityDisinherit+0xa8>
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c91c:	4a0c      	ldr	r2, [pc, #48]	@ (800c950 <xTaskPriorityDisinherit+0xd8>)
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c924:	4613      	mov	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4a09      	ldr	r2, [pc, #36]	@ (800c954 <xTaskPriorityDisinherit+0xdc>)
 800c92e:	441a      	add	r2, r3
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	3304      	adds	r3, #4
 800c934:	4619      	mov	r1, r3
 800c936:	4610      	mov	r0, r2
 800c938:	f7fe fbd5 	bl	800b0e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c940:	697b      	ldr	r3, [r7, #20]
	}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	20000bd8 	.word	0x20000bd8
 800c950:	200010b4 	.word	0x200010b4
 800c954:	20000bdc 	.word	0x20000bdc

0800c958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c962:	4b21      	ldr	r3, [pc, #132]	@ (800c9e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c968:	4b20      	ldr	r3, [pc, #128]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	3304      	adds	r3, #4
 800c96e:	4618      	mov	r0, r3
 800c970:	f7fe fc16 	bl	800b1a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97a:	d10a      	bne.n	800c992 <prvAddCurrentTaskToDelayedList+0x3a>
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d007      	beq.n	800c992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c982:	4b1a      	ldr	r3, [pc, #104]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3304      	adds	r3, #4
 800c988:	4619      	mov	r1, r3
 800c98a:	4819      	ldr	r0, [pc, #100]	@ (800c9f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800c98c:	f7fe fbab 	bl	800b0e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c990:	e026      	b.n	800c9e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4413      	add	r3, r2
 800c998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c99a:	4b14      	ldr	r3, [pc, #80]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68ba      	ldr	r2, [r7, #8]
 800c9a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c9a2:	68ba      	ldr	r2, [r7, #8]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d209      	bcs.n	800c9be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9aa:	4b12      	ldr	r3, [pc, #72]	@ (800c9f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	4b0f      	ldr	r3, [pc, #60]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	f7fe fbb9 	bl	800b12e <vListInsert>
}
 800c9bc:	e010      	b.n	800c9e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c9be:	4b0e      	ldr	r3, [pc, #56]	@ (800c9f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	f7fe fbaf 	bl	800b12e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68ba      	ldr	r2, [r7, #8]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d202      	bcs.n	800c9e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c9da:	4a08      	ldr	r2, [pc, #32]	@ (800c9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	6013      	str	r3, [r2, #0]
}
 800c9e0:	bf00      	nop
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200010b0 	.word	0x200010b0
 800c9ec:	20000bd8 	.word	0x20000bd8
 800c9f0:	20001098 	.word	0x20001098
 800c9f4:	20001068 	.word	0x20001068
 800c9f8:	20001064 	.word	0x20001064
 800c9fc:	200010cc 	.word	0x200010cc

0800ca00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08a      	sub	sp, #40	@ 0x28
 800ca04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ca0a:	f000 fb13 	bl	800d034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ca0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ca84 <xTimerCreateTimerTask+0x84>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d021      	beq.n	800ca5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ca1e:	1d3a      	adds	r2, r7, #4
 800ca20:	f107 0108 	add.w	r1, r7, #8
 800ca24:	f107 030c 	add.w	r3, r7, #12
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fb15 	bl	800b058 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ca2e:	6879      	ldr	r1, [r7, #4]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	9202      	str	r2, [sp, #8]
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	2302      	movs	r3, #2
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	460a      	mov	r2, r1
 800ca40:	4911      	ldr	r1, [pc, #68]	@ (800ca88 <xTimerCreateTimerTask+0x88>)
 800ca42:	4812      	ldr	r0, [pc, #72]	@ (800ca8c <xTimerCreateTimerTask+0x8c>)
 800ca44:	f7ff f8d0 	bl	800bbe8 <xTaskCreateStatic>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4a11      	ldr	r2, [pc, #68]	@ (800ca90 <xTimerCreateTimerTask+0x90>)
 800ca4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca4e:	4b10      	ldr	r3, [pc, #64]	@ (800ca90 <xTimerCreateTimerTask+0x90>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca56:	2301      	movs	r3, #1
 800ca58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10b      	bne.n	800ca78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	613b      	str	r3, [r7, #16]
}
 800ca72:	bf00      	nop
 800ca74:	bf00      	nop
 800ca76:	e7fd      	b.n	800ca74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca78:	697b      	ldr	r3, [r7, #20]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	20001108 	.word	0x20001108
 800ca88:	0800ecec 	.word	0x0800ecec
 800ca8c:	0800cbcd 	.word	0x0800cbcd
 800ca90:	2000110c 	.word	0x2000110c

0800ca94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b08a      	sub	sp, #40	@ 0x28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	607a      	str	r2, [r7, #4]
 800caa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10b      	bne.n	800cac4 <xTimerGenericCommand+0x30>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	623b      	str	r3, [r7, #32]
}
 800cabe:	bf00      	nop
 800cac0:	bf00      	nop
 800cac2:	e7fd      	b.n	800cac0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cac4:	4b19      	ldr	r3, [pc, #100]	@ (800cb2c <xTimerGenericCommand+0x98>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d02a      	beq.n	800cb22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b05      	cmp	r3, #5
 800cadc:	dc18      	bgt.n	800cb10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cade:	f7ff fead 	bl	800c83c <xTaskGetSchedulerState>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d109      	bne.n	800cafc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cae8:	4b10      	ldr	r3, [pc, #64]	@ (800cb2c <xTimerGenericCommand+0x98>)
 800caea:	6818      	ldr	r0, [r3, #0]
 800caec:	f107 0110 	add.w	r1, r7, #16
 800caf0:	2300      	movs	r3, #0
 800caf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caf4:	f7fe fc88 	bl	800b408 <xQueueGenericSend>
 800caf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800cafa:	e012      	b.n	800cb22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cafc:	4b0b      	ldr	r3, [pc, #44]	@ (800cb2c <xTimerGenericCommand+0x98>)
 800cafe:	6818      	ldr	r0, [r3, #0]
 800cb00:	f107 0110 	add.w	r1, r7, #16
 800cb04:	2300      	movs	r3, #0
 800cb06:	2200      	movs	r2, #0
 800cb08:	f7fe fc7e 	bl	800b408 <xQueueGenericSend>
 800cb0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800cb0e:	e008      	b.n	800cb22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cb10:	4b06      	ldr	r3, [pc, #24]	@ (800cb2c <xTimerGenericCommand+0x98>)
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	f107 0110 	add.w	r1, r7, #16
 800cb18:	2300      	movs	r3, #0
 800cb1a:	683a      	ldr	r2, [r7, #0]
 800cb1c:	f7fe fd76 	bl	800b60c <xQueueGenericSendFromISR>
 800cb20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3728      	adds	r7, #40	@ 0x28
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	20001108 	.word	0x20001108

0800cb30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af02      	add	r7, sp, #8
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb3a:	4b23      	ldr	r3, [pc, #140]	@ (800cbc8 <prvProcessExpiredTimer+0x98>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	3304      	adds	r3, #4
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fe fb29 	bl	800b1a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb54:	f003 0304 	and.w	r3, r3, #4
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d023      	beq.n	800cba4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	699a      	ldr	r2, [r3, #24]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	18d1      	adds	r1, r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	683a      	ldr	r2, [r7, #0]
 800cb68:	6978      	ldr	r0, [r7, #20]
 800cb6a:	f000 f8d5 	bl	800cd18 <prvInsertTimerInActiveList>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d020      	beq.n	800cbb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb74:	2300      	movs	r3, #0
 800cb76:	9300      	str	r3, [sp, #0]
 800cb78:	2300      	movs	r3, #0
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	6978      	ldr	r0, [r7, #20]
 800cb80:	f7ff ff88 	bl	800ca94 <xTimerGenericCommand>
 800cb84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d114      	bne.n	800cbb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800cb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb90:	f383 8811 	msr	BASEPRI, r3
 800cb94:	f3bf 8f6f 	isb	sy
 800cb98:	f3bf 8f4f 	dsb	sy
 800cb9c:	60fb      	str	r3, [r7, #12]
}
 800cb9e:	bf00      	nop
 800cba0:	bf00      	nop
 800cba2:	e7fd      	b.n	800cba0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbaa:	f023 0301 	bic.w	r3, r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	6978      	ldr	r0, [r7, #20]
 800cbbc:	4798      	blx	r3
}
 800cbbe:	bf00      	nop
 800cbc0:	3718      	adds	r7, #24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	20001100 	.word	0x20001100

0800cbcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbd4:	f107 0308 	add.w	r3, r7, #8
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f000 f859 	bl	800cc90 <prvGetNextExpireTime>
 800cbde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	68f8      	ldr	r0, [r7, #12]
 800cbe6:	f000 f805 	bl	800cbf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cbea:	f000 f8d7 	bl	800cd9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cbee:	bf00      	nop
 800cbf0:	e7f0      	b.n	800cbd4 <prvTimerTask+0x8>
	...

0800cbf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbfe:	f7ff fa37 	bl	800c070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc02:	f107 0308 	add.w	r3, r7, #8
 800cc06:	4618      	mov	r0, r3
 800cc08:	f000 f866 	bl	800ccd8 <prvSampleTimeNow>
 800cc0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d130      	bne.n	800cc76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d10a      	bne.n	800cc30 <prvProcessTimerOrBlockTask+0x3c>
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d806      	bhi.n	800cc30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cc22:	f7ff fa33 	bl	800c08c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cc26:	68f9      	ldr	r1, [r7, #12]
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f7ff ff81 	bl	800cb30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cc2e:	e024      	b.n	800cc7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d008      	beq.n	800cc48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cc36:	4b13      	ldr	r3, [pc, #76]	@ (800cc84 <prvProcessTimerOrBlockTask+0x90>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <prvProcessTimerOrBlockTask+0x50>
 800cc40:	2301      	movs	r3, #1
 800cc42:	e000      	b.n	800cc46 <prvProcessTimerOrBlockTask+0x52>
 800cc44:	2300      	movs	r3, #0
 800cc46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cc48:	4b0f      	ldr	r3, [pc, #60]	@ (800cc88 <prvProcessTimerOrBlockTask+0x94>)
 800cc4a:	6818      	ldr	r0, [r3, #0]
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	4619      	mov	r1, r3
 800cc56:	f7fe ff93 	bl	800bb80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc5a:	f7ff fa17 	bl	800c08c <xTaskResumeAll>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc64:	4b09      	ldr	r3, [pc, #36]	@ (800cc8c <prvProcessTimerOrBlockTask+0x98>)
 800cc66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc6a:	601a      	str	r2, [r3, #0]
 800cc6c:	f3bf 8f4f 	dsb	sy
 800cc70:	f3bf 8f6f 	isb	sy
}
 800cc74:	e001      	b.n	800cc7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc76:	f7ff fa09 	bl	800c08c <xTaskResumeAll>
}
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	20001104 	.word	0x20001104
 800cc88:	20001108 	.word	0x20001108
 800cc8c:	e000ed04 	.word	0xe000ed04

0800cc90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc90:	b480      	push	{r7}
 800cc92:	b085      	sub	sp, #20
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc98:	4b0e      	ldr	r3, [pc, #56]	@ (800ccd4 <prvGetNextExpireTime+0x44>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d101      	bne.n	800cca6 <prvGetNextExpireTime+0x16>
 800cca2:	2201      	movs	r2, #1
 800cca4:	e000      	b.n	800cca8 <prvGetNextExpireTime+0x18>
 800cca6:	2200      	movs	r2, #0
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d105      	bne.n	800ccc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ccb4:	4b07      	ldr	r3, [pc, #28]	@ (800ccd4 <prvGetNextExpireTime+0x44>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	60fb      	str	r3, [r7, #12]
 800ccbe:	e001      	b.n	800ccc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	20001100 	.word	0x20001100

0800ccd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cce0:	f7ff fa72 	bl	800c1c8 <xTaskGetTickCount>
 800cce4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cce6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd14 <prvSampleTimeNow+0x3c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	68fa      	ldr	r2, [r7, #12]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d205      	bcs.n	800ccfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ccf0:	f000 f93a 	bl	800cf68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	e002      	b.n	800cd02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cd02:	4a04      	ldr	r2, [pc, #16]	@ (800cd14 <prvSampleTimeNow+0x3c>)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cd08:	68fb      	ldr	r3, [r7, #12]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20001110 	.word	0x20001110

0800cd18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cd26:	2300      	movs	r3, #0
 800cd28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cd36:	68ba      	ldr	r2, [r7, #8]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d812      	bhi.n	800cd64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	1ad2      	subs	r2, r2, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d302      	bcc.n	800cd52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	617b      	str	r3, [r7, #20]
 800cd50:	e01b      	b.n	800cd8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd52:	4b10      	ldr	r3, [pc, #64]	@ (800cd94 <prvInsertTimerInActiveList+0x7c>)
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	3304      	adds	r3, #4
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	f7fe f9e6 	bl	800b12e <vListInsert>
 800cd62:	e012      	b.n	800cd8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d206      	bcs.n	800cd7a <prvInsertTimerInActiveList+0x62>
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d302      	bcc.n	800cd7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd74:	2301      	movs	r3, #1
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e007      	b.n	800cd8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd7a:	4b07      	ldr	r3, [pc, #28]	@ (800cd98 <prvInsertTimerInActiveList+0x80>)
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3304      	adds	r3, #4
 800cd82:	4619      	mov	r1, r3
 800cd84:	4610      	mov	r0, r2
 800cd86:	f7fe f9d2 	bl	800b12e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd8a:	697b      	ldr	r3, [r7, #20]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3718      	adds	r7, #24
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	20001104 	.word	0x20001104
 800cd98:	20001100 	.word	0x20001100

0800cd9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b08e      	sub	sp, #56	@ 0x38
 800cda0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cda2:	e0ce      	b.n	800cf42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	da19      	bge.n	800cdde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cdaa:	1d3b      	adds	r3, r7, #4
 800cdac:	3304      	adds	r3, #4
 800cdae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10b      	bne.n	800cdce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800cdb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdba:	f383 8811 	msr	BASEPRI, r3
 800cdbe:	f3bf 8f6f 	isb	sy
 800cdc2:	f3bf 8f4f 	dsb	sy
 800cdc6:	61fb      	str	r3, [r7, #28]
}
 800cdc8:	bf00      	nop
 800cdca:	bf00      	nop
 800cdcc:	e7fd      	b.n	800cdca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdd4:	6850      	ldr	r0, [r2, #4]
 800cdd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cdd8:	6892      	ldr	r2, [r2, #8]
 800cdda:	4611      	mov	r1, r2
 800cddc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f2c0 80ae 	blt.w	800cf42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d004      	beq.n	800cdfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe f9d2 	bl	800b1a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdfc:	463b      	mov	r3, r7
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7ff ff6a 	bl	800ccd8 <prvSampleTimeNow>
 800ce04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2b09      	cmp	r3, #9
 800ce0a:	f200 8097 	bhi.w	800cf3c <prvProcessReceivedCommands+0x1a0>
 800ce0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce14 <prvProcessReceivedCommands+0x78>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800ce3d 	.word	0x0800ce3d
 800ce18:	0800ce3d 	.word	0x0800ce3d
 800ce1c:	0800ce3d 	.word	0x0800ce3d
 800ce20:	0800ceb3 	.word	0x0800ceb3
 800ce24:	0800cec7 	.word	0x0800cec7
 800ce28:	0800cf13 	.word	0x0800cf13
 800ce2c:	0800ce3d 	.word	0x0800ce3d
 800ce30:	0800ce3d 	.word	0x0800ce3d
 800ce34:	0800ceb3 	.word	0x0800ceb3
 800ce38:	0800cec7 	.word	0x0800cec7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce42:	f043 0301 	orr.w	r3, r3, #1
 800ce46:	b2da      	uxtb	r2, r3
 800ce48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce52:	699b      	ldr	r3, [r3, #24]
 800ce54:	18d1      	adds	r1, r2, r3
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce5c:	f7ff ff5c 	bl	800cd18 <prvInsertTimerInActiveList>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d06c      	beq.n	800cf40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d061      	beq.n	800cf40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce80:	699b      	ldr	r3, [r3, #24]
 800ce82:	441a      	add	r2, r3
 800ce84:	2300      	movs	r3, #0
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	2300      	movs	r3, #0
 800ce8a:	2100      	movs	r1, #0
 800ce8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ce8e:	f7ff fe01 	bl	800ca94 <xTimerGenericCommand>
 800ce92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce94:	6a3b      	ldr	r3, [r7, #32]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d152      	bne.n	800cf40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800ce9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	61bb      	str	r3, [r7, #24]
}
 800ceac:	bf00      	nop
 800ceae:	bf00      	nop
 800ceb0:	e7fd      	b.n	800ceae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ceb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ceb8:	f023 0301 	bic.w	r3, r3, #1
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cec4:	e03d      	b.n	800cf42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cecc:	f043 0301 	orr.w	r3, r3, #1
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ced4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ced8:	68ba      	ldr	r2, [r7, #8]
 800ceda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cedc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10b      	bne.n	800cefe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	617b      	str	r3, [r7, #20]
}
 800cef8:	bf00      	nop
 800cefa:	bf00      	nop
 800cefc:	e7fd      	b.n	800cefa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf00:	699a      	ldr	r2, [r3, #24]
 800cf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf04:	18d1      	adds	r1, r2, r3
 800cf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf0c:	f7ff ff04 	bl	800cd18 <prvInsertTimerInActiveList>
					break;
 800cf10:	e017      	b.n	800cf42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf18:	f003 0302 	and.w	r3, r3, #2
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d103      	bne.n	800cf28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cf20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf22:	f000 fbe9 	bl	800d6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cf26:	e00c      	b.n	800cf42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf2e:	f023 0301 	bic.w	r3, r3, #1
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cf3a:	e002      	b.n	800cf42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cf3c:	bf00      	nop
 800cf3e:	e000      	b.n	800cf42 <prvProcessReceivedCommands+0x1a6>
					break;
 800cf40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf42:	4b08      	ldr	r3, [pc, #32]	@ (800cf64 <prvProcessReceivedCommands+0x1c8>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	1d39      	adds	r1, r7, #4
 800cf48:	2200      	movs	r2, #0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe fbfc 	bl	800b748 <xQueueReceive>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	f47f af26 	bne.w	800cda4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cf58:	bf00      	nop
 800cf5a:	bf00      	nop
 800cf5c:	3730      	adds	r7, #48	@ 0x30
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop
 800cf64:	20001108 	.word	0x20001108

0800cf68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b088      	sub	sp, #32
 800cf6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf6e:	e049      	b.n	800d004 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf70:	4b2e      	ldr	r3, [pc, #184]	@ (800d02c <prvSwitchTimerLists+0xc4>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf7a:	4b2c      	ldr	r3, [pc, #176]	@ (800d02c <prvSwitchTimerLists+0xc4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	68db      	ldr	r3, [r3, #12]
 800cf82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3304      	adds	r3, #4
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7fe f909 	bl	800b1a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6a1b      	ldr	r3, [r3, #32]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d02f      	beq.n	800d004 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	699b      	ldr	r3, [r3, #24]
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	4413      	add	r3, r2
 800cfac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d90e      	bls.n	800cfd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfc2:	4b1a      	ldr	r3, [pc, #104]	@ (800d02c <prvSwitchTimerLists+0xc4>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	3304      	adds	r3, #4
 800cfca:	4619      	mov	r1, r3
 800cfcc:	4610      	mov	r0, r2
 800cfce:	f7fe f8ae 	bl	800b12e <vListInsert>
 800cfd2:	e017      	b.n	800d004 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	2100      	movs	r1, #0
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f7ff fd58 	bl	800ca94 <xTimerGenericCommand>
 800cfe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10b      	bne.n	800d004 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	603b      	str	r3, [r7, #0]
}
 800cffe:	bf00      	nop
 800d000:	bf00      	nop
 800d002:	e7fd      	b.n	800d000 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d004:	4b09      	ldr	r3, [pc, #36]	@ (800d02c <prvSwitchTimerLists+0xc4>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1b0      	bne.n	800cf70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d00e:	4b07      	ldr	r3, [pc, #28]	@ (800d02c <prvSwitchTimerLists+0xc4>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d014:	4b06      	ldr	r3, [pc, #24]	@ (800d030 <prvSwitchTimerLists+0xc8>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	4a04      	ldr	r2, [pc, #16]	@ (800d02c <prvSwitchTimerLists+0xc4>)
 800d01a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d01c:	4a04      	ldr	r2, [pc, #16]	@ (800d030 <prvSwitchTimerLists+0xc8>)
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	6013      	str	r3, [r2, #0]
}
 800d022:	bf00      	nop
 800d024:	3718      	adds	r7, #24
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20001100 	.word	0x20001100
 800d030:	20001104 	.word	0x20001104

0800d034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d03a:	f000 f96d 	bl	800d318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d03e:	4b15      	ldr	r3, [pc, #84]	@ (800d094 <prvCheckForValidListAndQueue+0x60>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d120      	bne.n	800d088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d046:	4814      	ldr	r0, [pc, #80]	@ (800d098 <prvCheckForValidListAndQueue+0x64>)
 800d048:	f7fe f820 	bl	800b08c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d04c:	4813      	ldr	r0, [pc, #76]	@ (800d09c <prvCheckForValidListAndQueue+0x68>)
 800d04e:	f7fe f81d 	bl	800b08c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d052:	4b13      	ldr	r3, [pc, #76]	@ (800d0a0 <prvCheckForValidListAndQueue+0x6c>)
 800d054:	4a10      	ldr	r2, [pc, #64]	@ (800d098 <prvCheckForValidListAndQueue+0x64>)
 800d056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d058:	4b12      	ldr	r3, [pc, #72]	@ (800d0a4 <prvCheckForValidListAndQueue+0x70>)
 800d05a:	4a10      	ldr	r2, [pc, #64]	@ (800d09c <prvCheckForValidListAndQueue+0x68>)
 800d05c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d05e:	2300      	movs	r3, #0
 800d060:	9300      	str	r3, [sp, #0]
 800d062:	4b11      	ldr	r3, [pc, #68]	@ (800d0a8 <prvCheckForValidListAndQueue+0x74>)
 800d064:	4a11      	ldr	r2, [pc, #68]	@ (800d0ac <prvCheckForValidListAndQueue+0x78>)
 800d066:	2110      	movs	r1, #16
 800d068:	200a      	movs	r0, #10
 800d06a:	f7fe f92d 	bl	800b2c8 <xQueueGenericCreateStatic>
 800d06e:	4603      	mov	r3, r0
 800d070:	4a08      	ldr	r2, [pc, #32]	@ (800d094 <prvCheckForValidListAndQueue+0x60>)
 800d072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d074:	4b07      	ldr	r3, [pc, #28]	@ (800d094 <prvCheckForValidListAndQueue+0x60>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d005      	beq.n	800d088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d07c:	4b05      	ldr	r3, [pc, #20]	@ (800d094 <prvCheckForValidListAndQueue+0x60>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	490b      	ldr	r1, [pc, #44]	@ (800d0b0 <prvCheckForValidListAndQueue+0x7c>)
 800d082:	4618      	mov	r0, r3
 800d084:	f7fe fd52 	bl	800bb2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d088:	f000 f978 	bl	800d37c <vPortExitCritical>
}
 800d08c:	bf00      	nop
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	20001108 	.word	0x20001108
 800d098:	200010d8 	.word	0x200010d8
 800d09c:	200010ec 	.word	0x200010ec
 800d0a0:	20001100 	.word	0x20001100
 800d0a4:	20001104 	.word	0x20001104
 800d0a8:	200011b4 	.word	0x200011b4
 800d0ac:	20001114 	.word	0x20001114
 800d0b0:	0800ecf4 	.word	0x0800ecf4

0800d0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b085      	sub	sp, #20
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	3b04      	subs	r3, #4
 800d0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	3b04      	subs	r3, #4
 800d0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f023 0201 	bic.w	r2, r3, #1
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	3b04      	subs	r3, #4
 800d0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d0e4:	4a0c      	ldr	r2, [pc, #48]	@ (800d118 <pxPortInitialiseStack+0x64>)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	3b14      	subs	r3, #20
 800d0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3b04      	subs	r3, #4
 800d0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f06f 0202 	mvn.w	r2, #2
 800d102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	3b20      	subs	r3, #32
 800d108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d10a:	68fb      	ldr	r3, [r7, #12]
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3714      	adds	r7, #20
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	0800d11d 	.word	0x0800d11d

0800d11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d122:	2300      	movs	r3, #0
 800d124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d126:	4b13      	ldr	r3, [pc, #76]	@ (800d174 <prvTaskExitError+0x58>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d12e:	d00b      	beq.n	800d148 <prvTaskExitError+0x2c>
	__asm volatile
 800d130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d134:	f383 8811 	msr	BASEPRI, r3
 800d138:	f3bf 8f6f 	isb	sy
 800d13c:	f3bf 8f4f 	dsb	sy
 800d140:	60fb      	str	r3, [r7, #12]
}
 800d142:	bf00      	nop
 800d144:	bf00      	nop
 800d146:	e7fd      	b.n	800d144 <prvTaskExitError+0x28>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	60bb      	str	r3, [r7, #8]
}
 800d15a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d15c:	bf00      	nop
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d0fc      	beq.n	800d15e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d164:	bf00      	nop
 800d166:	bf00      	nop
 800d168:	3714      	adds	r7, #20
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	20000114 	.word	0x20000114
	...

0800d180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d180:	4b07      	ldr	r3, [pc, #28]	@ (800d1a0 <pxCurrentTCBConst2>)
 800d182:	6819      	ldr	r1, [r3, #0]
 800d184:	6808      	ldr	r0, [r1, #0]
 800d186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18a:	f380 8809 	msr	PSP, r0
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f04f 0000 	mov.w	r0, #0
 800d196:	f380 8811 	msr	BASEPRI, r0
 800d19a:	4770      	bx	lr
 800d19c:	f3af 8000 	nop.w

0800d1a0 <pxCurrentTCBConst2>:
 800d1a0:	20000bd8 	.word	0x20000bd8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d1a4:	bf00      	nop
 800d1a6:	bf00      	nop

0800d1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d1a8:	4808      	ldr	r0, [pc, #32]	@ (800d1cc <prvPortStartFirstTask+0x24>)
 800d1aa:	6800      	ldr	r0, [r0, #0]
 800d1ac:	6800      	ldr	r0, [r0, #0]
 800d1ae:	f380 8808 	msr	MSP, r0
 800d1b2:	f04f 0000 	mov.w	r0, #0
 800d1b6:	f380 8814 	msr	CONTROL, r0
 800d1ba:	b662      	cpsie	i
 800d1bc:	b661      	cpsie	f
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	f3bf 8f6f 	isb	sy
 800d1c6:	df00      	svc	0
 800d1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d1ca:	bf00      	nop
 800d1cc:	e000ed08 	.word	0xe000ed08

0800d1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d1d6:	4b47      	ldr	r3, [pc, #284]	@ (800d2f4 <xPortStartScheduler+0x124>)
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a47      	ldr	r2, [pc, #284]	@ (800d2f8 <xPortStartScheduler+0x128>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d10b      	bne.n	800d1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800d1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e4:	f383 8811 	msr	BASEPRI, r3
 800d1e8:	f3bf 8f6f 	isb	sy
 800d1ec:	f3bf 8f4f 	dsb	sy
 800d1f0:	613b      	str	r3, [r7, #16]
}
 800d1f2:	bf00      	nop
 800d1f4:	bf00      	nop
 800d1f6:	e7fd      	b.n	800d1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800d2f4 <xPortStartScheduler+0x124>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800d2fc <xPortStartScheduler+0x12c>)
 800d1fe:	4293      	cmp	r3, r2
 800d200:	d10b      	bne.n	800d21a <xPortStartScheduler+0x4a>
	__asm volatile
 800d202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	60fb      	str	r3, [r7, #12]
}
 800d214:	bf00      	nop
 800d216:	bf00      	nop
 800d218:	e7fd      	b.n	800d216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d21a:	4b39      	ldr	r3, [pc, #228]	@ (800d300 <xPortStartScheduler+0x130>)
 800d21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b2db      	uxtb	r3, r3
 800d224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	22ff      	movs	r2, #255	@ 0xff
 800d22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	b2db      	uxtb	r3, r3
 800d232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d234:	78fb      	ldrb	r3, [r7, #3]
 800d236:	b2db      	uxtb	r3, r3
 800d238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	4b31      	ldr	r3, [pc, #196]	@ (800d304 <xPortStartScheduler+0x134>)
 800d240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d242:	4b31      	ldr	r3, [pc, #196]	@ (800d308 <xPortStartScheduler+0x138>)
 800d244:	2207      	movs	r2, #7
 800d246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d248:	e009      	b.n	800d25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d24a:	4b2f      	ldr	r3, [pc, #188]	@ (800d308 <xPortStartScheduler+0x138>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3b01      	subs	r3, #1
 800d250:	4a2d      	ldr	r2, [pc, #180]	@ (800d308 <xPortStartScheduler+0x138>)
 800d252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	b2db      	uxtb	r3, r3
 800d258:	005b      	lsls	r3, r3, #1
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	b2db      	uxtb	r3, r3
 800d262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d266:	2b80      	cmp	r3, #128	@ 0x80
 800d268:	d0ef      	beq.n	800d24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d26a:	4b27      	ldr	r3, [pc, #156]	@ (800d308 <xPortStartScheduler+0x138>)
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f1c3 0307 	rsb	r3, r3, #7
 800d272:	2b04      	cmp	r3, #4
 800d274:	d00b      	beq.n	800d28e <xPortStartScheduler+0xbe>
	__asm volatile
 800d276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d27a:	f383 8811 	msr	BASEPRI, r3
 800d27e:	f3bf 8f6f 	isb	sy
 800d282:	f3bf 8f4f 	dsb	sy
 800d286:	60bb      	str	r3, [r7, #8]
}
 800d288:	bf00      	nop
 800d28a:	bf00      	nop
 800d28c:	e7fd      	b.n	800d28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d28e:	4b1e      	ldr	r3, [pc, #120]	@ (800d308 <xPortStartScheduler+0x138>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	021b      	lsls	r3, r3, #8
 800d294:	4a1c      	ldr	r2, [pc, #112]	@ (800d308 <xPortStartScheduler+0x138>)
 800d296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d298:	4b1b      	ldr	r3, [pc, #108]	@ (800d308 <xPortStartScheduler+0x138>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d2a0:	4a19      	ldr	r2, [pc, #100]	@ (800d308 <xPortStartScheduler+0x138>)
 800d2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	b2da      	uxtb	r2, r3
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d2ac:	4b17      	ldr	r3, [pc, #92]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a16      	ldr	r2, [pc, #88]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d2b8:	4b14      	ldr	r3, [pc, #80]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a13      	ldr	r2, [pc, #76]	@ (800d30c <xPortStartScheduler+0x13c>)
 800d2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d2c4:	f000 f8da 	bl	800d47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d2c8:	4b11      	ldr	r3, [pc, #68]	@ (800d310 <xPortStartScheduler+0x140>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d2ce:	f000 f8f9 	bl	800d4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d2d2:	4b10      	ldr	r3, [pc, #64]	@ (800d314 <xPortStartScheduler+0x144>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800d314 <xPortStartScheduler+0x144>)
 800d2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d2de:	f7ff ff63 	bl	800d1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d2e2:	f7ff f83b 	bl	800c35c <vTaskSwitchContext>
	prvTaskExitError();
 800d2e6:	f7ff ff19 	bl	800d11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	e000ed00 	.word	0xe000ed00
 800d2f8:	410fc271 	.word	0x410fc271
 800d2fc:	410fc270 	.word	0x410fc270
 800d300:	e000e400 	.word	0xe000e400
 800d304:	20001204 	.word	0x20001204
 800d308:	20001208 	.word	0x20001208
 800d30c:	e000ed20 	.word	0xe000ed20
 800d310:	20000114 	.word	0x20000114
 800d314:	e000ef34 	.word	0xe000ef34

0800d318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	607b      	str	r3, [r7, #4]
}
 800d330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d332:	4b10      	ldr	r3, [pc, #64]	@ (800d374 <vPortEnterCritical+0x5c>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3301      	adds	r3, #1
 800d338:	4a0e      	ldr	r2, [pc, #56]	@ (800d374 <vPortEnterCritical+0x5c>)
 800d33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d33c:	4b0d      	ldr	r3, [pc, #52]	@ (800d374 <vPortEnterCritical+0x5c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2b01      	cmp	r3, #1
 800d342:	d110      	bne.n	800d366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d344:	4b0c      	ldr	r3, [pc, #48]	@ (800d378 <vPortEnterCritical+0x60>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00b      	beq.n	800d366 <vPortEnterCritical+0x4e>
	__asm volatile
 800d34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d352:	f383 8811 	msr	BASEPRI, r3
 800d356:	f3bf 8f6f 	isb	sy
 800d35a:	f3bf 8f4f 	dsb	sy
 800d35e:	603b      	str	r3, [r7, #0]
}
 800d360:	bf00      	nop
 800d362:	bf00      	nop
 800d364:	e7fd      	b.n	800d362 <vPortEnterCritical+0x4a>
	}
}
 800d366:	bf00      	nop
 800d368:	370c      	adds	r7, #12
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	20000114 	.word	0x20000114
 800d378:	e000ed04 	.word	0xe000ed04

0800d37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d382:	4b12      	ldr	r3, [pc, #72]	@ (800d3cc <vPortExitCritical+0x50>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <vPortExitCritical+0x26>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	607b      	str	r3, [r7, #4]
}
 800d39c:	bf00      	nop
 800d39e:	bf00      	nop
 800d3a0:	e7fd      	b.n	800d39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d3cc <vPortExitCritical+0x50>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	3b01      	subs	r3, #1
 800d3a8:	4a08      	ldr	r2, [pc, #32]	@ (800d3cc <vPortExitCritical+0x50>)
 800d3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d3ac:	4b07      	ldr	r3, [pc, #28]	@ (800d3cc <vPortExitCritical+0x50>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <vPortExitCritical+0x44>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	f383 8811 	msr	BASEPRI, r3
}
 800d3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d3c0:	bf00      	nop
 800d3c2:	370c      	adds	r7, #12
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	20000114 	.word	0x20000114

0800d3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d3d0:	f3ef 8009 	mrs	r0, PSP
 800d3d4:	f3bf 8f6f 	isb	sy
 800d3d8:	4b15      	ldr	r3, [pc, #84]	@ (800d430 <pxCurrentTCBConst>)
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	f01e 0f10 	tst.w	lr, #16
 800d3e0:	bf08      	it	eq
 800d3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ea:	6010      	str	r0, [r2, #0]
 800d3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d3f4:	f380 8811 	msr	BASEPRI, r0
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	f3bf 8f6f 	isb	sy
 800d400:	f7fe ffac 	bl	800c35c <vTaskSwitchContext>
 800d404:	f04f 0000 	mov.w	r0, #0
 800d408:	f380 8811 	msr	BASEPRI, r0
 800d40c:	bc09      	pop	{r0, r3}
 800d40e:	6819      	ldr	r1, [r3, #0]
 800d410:	6808      	ldr	r0, [r1, #0]
 800d412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d416:	f01e 0f10 	tst.w	lr, #16
 800d41a:	bf08      	it	eq
 800d41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d420:	f380 8809 	msr	PSP, r0
 800d424:	f3bf 8f6f 	isb	sy
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	f3af 8000 	nop.w

0800d430 <pxCurrentTCBConst>:
 800d430:	20000bd8 	.word	0x20000bd8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop

0800d438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	607b      	str	r3, [r7, #4]
}
 800d450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d452:	f7fe fec9 	bl	800c1e8 <xTaskIncrementTick>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d45c:	4b06      	ldr	r3, [pc, #24]	@ (800d478 <xPortSysTickHandler+0x40>)
 800d45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	2300      	movs	r3, #0
 800d466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	f383 8811 	msr	BASEPRI, r3
}
 800d46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	e000ed04 	.word	0xe000ed04

0800d47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d47c:	b480      	push	{r7}
 800d47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d480:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <vPortSetupTimerInterrupt+0x34>)
 800d482:	2200      	movs	r2, #0
 800d484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d486:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b4 <vPortSetupTimerInterrupt+0x38>)
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d48c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4b8 <vPortSetupTimerInterrupt+0x3c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a0a      	ldr	r2, [pc, #40]	@ (800d4bc <vPortSetupTimerInterrupt+0x40>)
 800d492:	fba2 2303 	umull	r2, r3, r2, r3
 800d496:	099b      	lsrs	r3, r3, #6
 800d498:	4a09      	ldr	r2, [pc, #36]	@ (800d4c0 <vPortSetupTimerInterrupt+0x44>)
 800d49a:	3b01      	subs	r3, #1
 800d49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d49e:	4b04      	ldr	r3, [pc, #16]	@ (800d4b0 <vPortSetupTimerInterrupt+0x34>)
 800d4a0:	2207      	movs	r2, #7
 800d4a2:	601a      	str	r2, [r3, #0]
}
 800d4a4:	bf00      	nop
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	e000e010 	.word	0xe000e010
 800d4b4:	e000e018 	.word	0xe000e018
 800d4b8:	20000000 	.word	0x20000000
 800d4bc:	10624dd3 	.word	0x10624dd3
 800d4c0:	e000e014 	.word	0xe000e014

0800d4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d4d4 <vPortEnableVFP+0x10>
 800d4c8:	6801      	ldr	r1, [r0, #0]
 800d4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d4ce:	6001      	str	r1, [r0, #0]
 800d4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d4d2:	bf00      	nop
 800d4d4:	e000ed88 	.word	0xe000ed88

0800d4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d4de:	f3ef 8305 	mrs	r3, IPSR
 800d4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2b0f      	cmp	r3, #15
 800d4e8:	d915      	bls.n	800d516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d4ea:	4a18      	ldr	r2, [pc, #96]	@ (800d54c <vPortValidateInterruptPriority+0x74>)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d4f4:	4b16      	ldr	r3, [pc, #88]	@ (800d550 <vPortValidateInterruptPriority+0x78>)
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	7afa      	ldrb	r2, [r7, #11]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d20b      	bcs.n	800d516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	607b      	str	r3, [r7, #4]
}
 800d510:	bf00      	nop
 800d512:	bf00      	nop
 800d514:	e7fd      	b.n	800d512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d516:	4b0f      	ldr	r3, [pc, #60]	@ (800d554 <vPortValidateInterruptPriority+0x7c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d51e:	4b0e      	ldr	r3, [pc, #56]	@ (800d558 <vPortValidateInterruptPriority+0x80>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	429a      	cmp	r2, r3
 800d524:	d90b      	bls.n	800d53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52a:	f383 8811 	msr	BASEPRI, r3
 800d52e:	f3bf 8f6f 	isb	sy
 800d532:	f3bf 8f4f 	dsb	sy
 800d536:	603b      	str	r3, [r7, #0]
}
 800d538:	bf00      	nop
 800d53a:	bf00      	nop
 800d53c:	e7fd      	b.n	800d53a <vPortValidateInterruptPriority+0x62>
	}
 800d53e:	bf00      	nop
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	e000e3f0 	.word	0xe000e3f0
 800d550:	20001204 	.word	0x20001204
 800d554:	e000ed0c 	.word	0xe000ed0c
 800d558:	20001208 	.word	0x20001208

0800d55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b08a      	sub	sp, #40	@ 0x28
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d564:	2300      	movs	r3, #0
 800d566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d568:	f7fe fd82 	bl	800c070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d56c:	4b5c      	ldr	r3, [pc, #368]	@ (800d6e0 <pvPortMalloc+0x184>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d101      	bne.n	800d578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d574:	f000 f924 	bl	800d7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d578:	4b5a      	ldr	r3, [pc, #360]	@ (800d6e4 <pvPortMalloc+0x188>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4013      	ands	r3, r2
 800d580:	2b00      	cmp	r3, #0
 800d582:	f040 8095 	bne.w	800d6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d01e      	beq.n	800d5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d58c:	2208      	movs	r2, #8
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	4413      	add	r3, r2
 800d592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d015      	beq.n	800d5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f023 0307 	bic.w	r3, r3, #7
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f003 0307 	and.w	r3, r3, #7
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d00b      	beq.n	800d5ca <pvPortMalloc+0x6e>
	__asm volatile
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	617b      	str	r3, [r7, #20]
}
 800d5c4:	bf00      	nop
 800d5c6:	bf00      	nop
 800d5c8:	e7fd      	b.n	800d5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d06f      	beq.n	800d6b0 <pvPortMalloc+0x154>
 800d5d0:	4b45      	ldr	r3, [pc, #276]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	429a      	cmp	r2, r3
 800d5d8:	d86a      	bhi.n	800d6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d5da:	4b44      	ldr	r3, [pc, #272]	@ (800d6ec <pvPortMalloc+0x190>)
 800d5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d5de:	4b43      	ldr	r3, [pc, #268]	@ (800d6ec <pvPortMalloc+0x190>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5e4:	e004      	b.n	800d5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5f2:	685b      	ldr	r3, [r3, #4]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d903      	bls.n	800d602 <pvPortMalloc+0xa6>
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1f1      	bne.n	800d5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d602:	4b37      	ldr	r3, [pc, #220]	@ (800d6e0 <pvPortMalloc+0x184>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d608:	429a      	cmp	r2, r3
 800d60a:	d051      	beq.n	800d6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2208      	movs	r2, #8
 800d612:	4413      	add	r3, r2
 800d614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	6a3b      	ldr	r3, [r7, #32]
 800d61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d620:	685a      	ldr	r2, [r3, #4]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	1ad2      	subs	r2, r2, r3
 800d626:	2308      	movs	r3, #8
 800d628:	005b      	lsls	r3, r3, #1
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d920      	bls.n	800d670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4413      	add	r3, r2
 800d634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	f003 0307 	and.w	r3, r3, #7
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d00b      	beq.n	800d658 <pvPortMalloc+0xfc>
	__asm volatile
 800d640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	613b      	str	r3, [r7, #16]
}
 800d652:	bf00      	nop
 800d654:	bf00      	nop
 800d656:	e7fd      	b.n	800d654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d65a:	685a      	ldr	r2, [r3, #4]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	1ad2      	subs	r2, r2, r3
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	687a      	ldr	r2, [r7, #4]
 800d668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d66a:	69b8      	ldr	r0, [r7, #24]
 800d66c:	f000 f90a 	bl	800d884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d670:	4b1d      	ldr	r3, [pc, #116]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	4a1b      	ldr	r2, [pc, #108]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d67e:	4b1a      	ldr	r3, [pc, #104]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d680:	681a      	ldr	r2, [r3, #0]
 800d682:	4b1b      	ldr	r3, [pc, #108]	@ (800d6f0 <pvPortMalloc+0x194>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	429a      	cmp	r2, r3
 800d688:	d203      	bcs.n	800d692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d68a:	4b17      	ldr	r3, [pc, #92]	@ (800d6e8 <pvPortMalloc+0x18c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a18      	ldr	r2, [pc, #96]	@ (800d6f0 <pvPortMalloc+0x194>)
 800d690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d694:	685a      	ldr	r2, [r3, #4]
 800d696:	4b13      	ldr	r3, [pc, #76]	@ (800d6e4 <pvPortMalloc+0x188>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	431a      	orrs	r2, r3
 800d69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d6a6:	4b13      	ldr	r3, [pc, #76]	@ (800d6f4 <pvPortMalloc+0x198>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	4a11      	ldr	r2, [pc, #68]	@ (800d6f4 <pvPortMalloc+0x198>)
 800d6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d6b0:	f7fe fcec 	bl	800c08c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	f003 0307 	and.w	r3, r3, #7
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d00b      	beq.n	800d6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60fb      	str	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	bf00      	nop
 800d6d4:	e7fd      	b.n	800d6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800d6d6:	69fb      	ldr	r3, [r7, #28]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3728      	adds	r7, #40	@ 0x28
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20004e14 	.word	0x20004e14
 800d6e4:	20004e28 	.word	0x20004e28
 800d6e8:	20004e18 	.word	0x20004e18
 800d6ec:	20004e0c 	.word	0x20004e0c
 800d6f0:	20004e1c 	.word	0x20004e1c
 800d6f4:	20004e20 	.word	0x20004e20

0800d6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d04f      	beq.n	800d7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d70a:	2308      	movs	r3, #8
 800d70c:	425b      	negs	r3, r3
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	4413      	add	r3, r2
 800d712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	4b25      	ldr	r3, [pc, #148]	@ (800d7b4 <vPortFree+0xbc>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4013      	ands	r3, r2
 800d722:	2b00      	cmp	r3, #0
 800d724:	d10b      	bne.n	800d73e <vPortFree+0x46>
	__asm volatile
 800d726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d72a:	f383 8811 	msr	BASEPRI, r3
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f3bf 8f4f 	dsb	sy
 800d736:	60fb      	str	r3, [r7, #12]
}
 800d738:	bf00      	nop
 800d73a:	bf00      	nop
 800d73c:	e7fd      	b.n	800d73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d00b      	beq.n	800d75e <vPortFree+0x66>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60bb      	str	r3, [r7, #8]
}
 800d758:	bf00      	nop
 800d75a:	bf00      	nop
 800d75c:	e7fd      	b.n	800d75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	4b14      	ldr	r3, [pc, #80]	@ (800d7b4 <vPortFree+0xbc>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4013      	ands	r3, r2
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d01e      	beq.n	800d7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d11a      	bne.n	800d7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	685a      	ldr	r2, [r3, #4]
 800d778:	4b0e      	ldr	r3, [pc, #56]	@ (800d7b4 <vPortFree+0xbc>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	43db      	mvns	r3, r3
 800d77e:	401a      	ands	r2, r3
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d784:	f7fe fc74 	bl	800c070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	685a      	ldr	r2, [r3, #4]
 800d78c:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b8 <vPortFree+0xc0>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4413      	add	r3, r2
 800d792:	4a09      	ldr	r2, [pc, #36]	@ (800d7b8 <vPortFree+0xc0>)
 800d794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d796:	6938      	ldr	r0, [r7, #16]
 800d798:	f000 f874 	bl	800d884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d79c:	4b07      	ldr	r3, [pc, #28]	@ (800d7bc <vPortFree+0xc4>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	4a06      	ldr	r2, [pc, #24]	@ (800d7bc <vPortFree+0xc4>)
 800d7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d7a6:	f7fe fc71 	bl	800c08c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d7aa:	bf00      	nop
 800d7ac:	3718      	adds	r7, #24
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	20004e28 	.word	0x20004e28
 800d7b8:	20004e18 	.word	0x20004e18
 800d7bc:	20004e24 	.word	0x20004e24

0800d7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d7c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d7cc:	4b27      	ldr	r3, [pc, #156]	@ (800d86c <prvHeapInit+0xac>)
 800d7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f003 0307 	and.w	r3, r3, #7
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00c      	beq.n	800d7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3307      	adds	r3, #7
 800d7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f023 0307 	bic.w	r3, r3, #7
 800d7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800d86c <prvHeapInit+0xac>)
 800d7f0:	4413      	add	r3, r2
 800d7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800d870 <prvHeapInit+0xb0>)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800d870 <prvHeapInit+0xb0>)
 800d800:	2200      	movs	r2, #0
 800d802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	68ba      	ldr	r2, [r7, #8]
 800d808:	4413      	add	r3, r2
 800d80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d80c:	2208      	movs	r2, #8
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f023 0307 	bic.w	r3, r3, #7
 800d81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	4a15      	ldr	r2, [pc, #84]	@ (800d874 <prvHeapInit+0xb4>)
 800d820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d822:	4b14      	ldr	r3, [pc, #80]	@ (800d874 <prvHeapInit+0xb4>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2200      	movs	r2, #0
 800d828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d82a:	4b12      	ldr	r3, [pc, #72]	@ (800d874 <prvHeapInit+0xb4>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	2200      	movs	r2, #0
 800d830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	1ad2      	subs	r2, r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d840:	4b0c      	ldr	r3, [pc, #48]	@ (800d874 <prvHeapInit+0xb4>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	4a0a      	ldr	r2, [pc, #40]	@ (800d878 <prvHeapInit+0xb8>)
 800d84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	4a09      	ldr	r2, [pc, #36]	@ (800d87c <prvHeapInit+0xbc>)
 800d856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d858:	4b09      	ldr	r3, [pc, #36]	@ (800d880 <prvHeapInit+0xc0>)
 800d85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d85e:	601a      	str	r2, [r3, #0]
}
 800d860:	bf00      	nop
 800d862:	3714      	adds	r7, #20
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	2000120c 	.word	0x2000120c
 800d870:	20004e0c 	.word	0x20004e0c
 800d874:	20004e14 	.word	0x20004e14
 800d878:	20004e1c 	.word	0x20004e1c
 800d87c:	20004e18 	.word	0x20004e18
 800d880:	20004e28 	.word	0x20004e28

0800d884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d88c:	4b28      	ldr	r3, [pc, #160]	@ (800d930 <prvInsertBlockIntoFreeList+0xac>)
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	e002      	b.n	800d898 <prvInsertBlockIntoFreeList+0x14>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	60fb      	str	r3, [r7, #12]
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	687a      	ldr	r2, [r7, #4]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d8f7      	bhi.n	800d892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d108      	bne.n	800d8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	441a      	add	r2, r3
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	441a      	add	r2, r3
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d118      	bne.n	800d90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b15      	ldr	r3, [pc, #84]	@ (800d934 <prvInsertBlockIntoFreeList+0xb0>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d00d      	beq.n	800d902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685a      	ldr	r2, [r3, #4]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	e008      	b.n	800d914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d902:	4b0c      	ldr	r3, [pc, #48]	@ (800d934 <prvInsertBlockIntoFreeList+0xb0>)
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	e003      	b.n	800d914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d914:	68fa      	ldr	r2, [r7, #12]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d002      	beq.n	800d922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d922:	bf00      	nop
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20004e0c 	.word	0x20004e0c
 800d934:	20004e14 	.word	0x20004e14

0800d938 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d93c:	2201      	movs	r2, #1
 800d93e:	4912      	ldr	r1, [pc, #72]	@ (800d988 <MX_USB_DEVICE_Init+0x50>)
 800d940:	4812      	ldr	r0, [pc, #72]	@ (800d98c <MX_USB_DEVICE_Init+0x54>)
 800d942:	f7fb ff31 	bl	80097a8 <USBD_Init>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d94c:	f7f3 fbb0 	bl	80010b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d950:	490f      	ldr	r1, [pc, #60]	@ (800d990 <MX_USB_DEVICE_Init+0x58>)
 800d952:	480e      	ldr	r0, [pc, #56]	@ (800d98c <MX_USB_DEVICE_Init+0x54>)
 800d954:	f7fb ff58 	bl	8009808 <USBD_RegisterClass>
 800d958:	4603      	mov	r3, r0
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d001      	beq.n	800d962 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d95e:	f7f3 fba7 	bl	80010b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d962:	490c      	ldr	r1, [pc, #48]	@ (800d994 <MX_USB_DEVICE_Init+0x5c>)
 800d964:	4809      	ldr	r0, [pc, #36]	@ (800d98c <MX_USB_DEVICE_Init+0x54>)
 800d966:	f7fb fe4f 	bl	8009608 <USBD_CDC_RegisterInterface>
 800d96a:	4603      	mov	r3, r0
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d001      	beq.n	800d974 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d970:	f7f3 fb9e 	bl	80010b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d974:	4805      	ldr	r0, [pc, #20]	@ (800d98c <MX_USB_DEVICE_Init+0x54>)
 800d976:	f7fb ff7d 	bl	8009874 <USBD_Start>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d980:	f7f3 fb96 	bl	80010b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d984:	bf00      	nop
 800d986:	bd80      	pop	{r7, pc}
 800d988:	2000012c 	.word	0x2000012c
 800d98c:	20004e2c 	.word	0x20004e2c
 800d990:	20000094 	.word	0x20000094
 800d994:	20000118 	.word	0x20000118

0800d998 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d99c:	2200      	movs	r2, #0
 800d99e:	4905      	ldr	r1, [pc, #20]	@ (800d9b4 <CDC_Init_HS+0x1c>)
 800d9a0:	4805      	ldr	r0, [pc, #20]	@ (800d9b8 <CDC_Init_HS+0x20>)
 800d9a2:	f7fb fe4b 	bl	800963c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d9a6:	4905      	ldr	r1, [pc, #20]	@ (800d9bc <CDC_Init_HS+0x24>)
 800d9a8:	4803      	ldr	r0, [pc, #12]	@ (800d9b8 <CDC_Init_HS+0x20>)
 800d9aa:	f7fb fe69 	bl	8009680 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9ae:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	20005908 	.word	0x20005908
 800d9b8:	20004e2c 	.word	0x20004e2c
 800d9bc:	20005108 	.word	0x20005108

0800d9c0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d9c4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b083      	sub	sp, #12
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	6039      	str	r1, [r7, #0]
 800d9da:	71fb      	strb	r3, [r7, #7]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d9e0:	79fb      	ldrb	r3, [r7, #7]
 800d9e2:	2b23      	cmp	r3, #35	@ 0x23
 800d9e4:	d84a      	bhi.n	800da7c <CDC_Control_HS+0xac>
 800d9e6:	a201      	add	r2, pc, #4	@ (adr r2, 800d9ec <CDC_Control_HS+0x1c>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800da7d 	.word	0x0800da7d
 800d9f0:	0800da7d 	.word	0x0800da7d
 800d9f4:	0800da7d 	.word	0x0800da7d
 800d9f8:	0800da7d 	.word	0x0800da7d
 800d9fc:	0800da7d 	.word	0x0800da7d
 800da00:	0800da7d 	.word	0x0800da7d
 800da04:	0800da7d 	.word	0x0800da7d
 800da08:	0800da7d 	.word	0x0800da7d
 800da0c:	0800da7d 	.word	0x0800da7d
 800da10:	0800da7d 	.word	0x0800da7d
 800da14:	0800da7d 	.word	0x0800da7d
 800da18:	0800da7d 	.word	0x0800da7d
 800da1c:	0800da7d 	.word	0x0800da7d
 800da20:	0800da7d 	.word	0x0800da7d
 800da24:	0800da7d 	.word	0x0800da7d
 800da28:	0800da7d 	.word	0x0800da7d
 800da2c:	0800da7d 	.word	0x0800da7d
 800da30:	0800da7d 	.word	0x0800da7d
 800da34:	0800da7d 	.word	0x0800da7d
 800da38:	0800da7d 	.word	0x0800da7d
 800da3c:	0800da7d 	.word	0x0800da7d
 800da40:	0800da7d 	.word	0x0800da7d
 800da44:	0800da7d 	.word	0x0800da7d
 800da48:	0800da7d 	.word	0x0800da7d
 800da4c:	0800da7d 	.word	0x0800da7d
 800da50:	0800da7d 	.word	0x0800da7d
 800da54:	0800da7d 	.word	0x0800da7d
 800da58:	0800da7d 	.word	0x0800da7d
 800da5c:	0800da7d 	.word	0x0800da7d
 800da60:	0800da7d 	.word	0x0800da7d
 800da64:	0800da7d 	.word	0x0800da7d
 800da68:	0800da7d 	.word	0x0800da7d
 800da6c:	0800da7d 	.word	0x0800da7d
 800da70:	0800da7d 	.word	0x0800da7d
 800da74:	0800da7d 	.word	0x0800da7d
 800da78:	0800da7d 	.word	0x0800da7d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800da7c:	bf00      	nop
  }

  return (USBD_OK);
 800da7e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800da80:	4618      	mov	r0, r3
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800da96:	6879      	ldr	r1, [r7, #4]
 800da98:	4805      	ldr	r0, [pc, #20]	@ (800dab0 <CDC_Receive_HS+0x24>)
 800da9a:	f7fb fdf1 	bl	8009680 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800da9e:	4804      	ldr	r0, [pc, #16]	@ (800dab0 <CDC_Receive_HS+0x24>)
 800daa0:	f7fb fe4c 	bl	800973c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800daa4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3708      	adds	r7, #8
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20004e2c 	.word	0x20004e2c

0800dab4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	460b      	mov	r3, r1
 800dabe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800dac4:	4b0d      	ldr	r3, [pc, #52]	@ (800dafc <CDC_Transmit_HS+0x48>)
 800dac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800daca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d001      	beq.n	800dada <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e00b      	b.n	800daf2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800dada:	887b      	ldrh	r3, [r7, #2]
 800dadc:	461a      	mov	r2, r3
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	4806      	ldr	r0, [pc, #24]	@ (800dafc <CDC_Transmit_HS+0x48>)
 800dae2:	f7fb fdab 	bl	800963c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800dae6:	4805      	ldr	r0, [pc, #20]	@ (800dafc <CDC_Transmit_HS+0x48>)
 800dae8:	f7fb fde8 	bl	80096bc <USBD_CDC_TransmitPacket>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20004e2c 	.word	0x20004e2c

0800db00 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800db00:	b480      	push	{r7}
 800db02:	b087      	sub	sp, #28
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	4613      	mov	r3, r2
 800db0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800db12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	371c      	adds	r7, #28
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
	...

0800db24 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	6039      	str	r1, [r7, #0]
 800db2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	2212      	movs	r2, #18
 800db34:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800db36:	4b03      	ldr	r3, [pc, #12]	@ (800db44 <USBD_HS_DeviceDescriptor+0x20>)
}
 800db38:	4618      	mov	r0, r3
 800db3a:	370c      	adds	r7, #12
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr
 800db44:	20000148 	.word	0x20000148

0800db48 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	4603      	mov	r3, r0
 800db50:	6039      	str	r1, [r7, #0]
 800db52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	2204      	movs	r2, #4
 800db58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800db5a:	4b03      	ldr	r3, [pc, #12]	@ (800db68 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr
 800db68:	2000015c 	.word	0x2000015c

0800db6c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	4603      	mov	r3, r0
 800db74:	6039      	str	r1, [r7, #0]
 800db76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db78:	79fb      	ldrb	r3, [r7, #7]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d105      	bne.n	800db8a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800db7e:	683a      	ldr	r2, [r7, #0]
 800db80:	4907      	ldr	r1, [pc, #28]	@ (800dba0 <USBD_HS_ProductStrDescriptor+0x34>)
 800db82:	4808      	ldr	r0, [pc, #32]	@ (800dba4 <USBD_HS_ProductStrDescriptor+0x38>)
 800db84:	f7fd f826 	bl	800abd4 <USBD_GetString>
 800db88:	e004      	b.n	800db94 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800db8a:	683a      	ldr	r2, [r7, #0]
 800db8c:	4904      	ldr	r1, [pc, #16]	@ (800dba0 <USBD_HS_ProductStrDescriptor+0x34>)
 800db8e:	4805      	ldr	r0, [pc, #20]	@ (800dba4 <USBD_HS_ProductStrDescriptor+0x38>)
 800db90:	f7fd f820 	bl	800abd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db94:	4b02      	ldr	r3, [pc, #8]	@ (800dba0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
 800db9e:	bf00      	nop
 800dba0:	20006108 	.word	0x20006108
 800dba4:	0800ecfc 	.word	0x0800ecfc

0800dba8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	6039      	str	r1, [r7, #0]
 800dbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dbb4:	683a      	ldr	r2, [r7, #0]
 800dbb6:	4904      	ldr	r1, [pc, #16]	@ (800dbc8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800dbb8:	4804      	ldr	r0, [pc, #16]	@ (800dbcc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800dbba:	f7fd f80b 	bl	800abd4 <USBD_GetString>
  return USBD_StrDesc;
 800dbbe:	4b02      	ldr	r3, [pc, #8]	@ (800dbc8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	20006108 	.word	0x20006108
 800dbcc:	0800ed14 	.word	0x0800ed14

0800dbd0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	6039      	str	r1, [r7, #0]
 800dbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	221a      	movs	r2, #26
 800dbe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dbe2:	f000 f843 	bl	800dc6c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dbe6:	4b02      	ldr	r3, [pc, #8]	@ (800dbf0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3708      	adds	r7, #8
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20000160 	.word	0x20000160

0800dbf4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	6039      	str	r1, [r7, #0]
 800dbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d105      	bne.n	800dc12 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800dc06:	683a      	ldr	r2, [r7, #0]
 800dc08:	4907      	ldr	r1, [pc, #28]	@ (800dc28 <USBD_HS_ConfigStrDescriptor+0x34>)
 800dc0a:	4808      	ldr	r0, [pc, #32]	@ (800dc2c <USBD_HS_ConfigStrDescriptor+0x38>)
 800dc0c:	f7fc ffe2 	bl	800abd4 <USBD_GetString>
 800dc10:	e004      	b.n	800dc1c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800dc12:	683a      	ldr	r2, [r7, #0]
 800dc14:	4904      	ldr	r1, [pc, #16]	@ (800dc28 <USBD_HS_ConfigStrDescriptor+0x34>)
 800dc16:	4805      	ldr	r0, [pc, #20]	@ (800dc2c <USBD_HS_ConfigStrDescriptor+0x38>)
 800dc18:	f7fc ffdc 	bl	800abd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc1c:	4b02      	ldr	r3, [pc, #8]	@ (800dc28 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20006108 	.word	0x20006108
 800dc2c:	0800ed28 	.word	0x0800ed28

0800dc30 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	6039      	str	r1, [r7, #0]
 800dc3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d105      	bne.n	800dc4e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800dc42:	683a      	ldr	r2, [r7, #0]
 800dc44:	4907      	ldr	r1, [pc, #28]	@ (800dc64 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dc46:	4808      	ldr	r0, [pc, #32]	@ (800dc68 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800dc48:	f7fc ffc4 	bl	800abd4 <USBD_GetString>
 800dc4c:	e004      	b.n	800dc58 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800dc4e:	683a      	ldr	r2, [r7, #0]
 800dc50:	4904      	ldr	r1, [pc, #16]	@ (800dc64 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800dc52:	4805      	ldr	r0, [pc, #20]	@ (800dc68 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800dc54:	f7fc ffbe 	bl	800abd4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc58:	4b02      	ldr	r3, [pc, #8]	@ (800dc64 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	bf00      	nop
 800dc64:	20006108 	.word	0x20006108
 800dc68:	0800ed34 	.word	0x0800ed34

0800dc6c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dc72:	4b0f      	ldr	r3, [pc, #60]	@ (800dcb0 <Get_SerialNum+0x44>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dc78:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb4 <Get_SerialNum+0x48>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	@ (800dcb8 <Get_SerialNum+0x4c>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	4413      	add	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d009      	beq.n	800dca6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dc92:	2208      	movs	r2, #8
 800dc94:	4909      	ldr	r1, [pc, #36]	@ (800dcbc <Get_SerialNum+0x50>)
 800dc96:	68f8      	ldr	r0, [r7, #12]
 800dc98:	f000 f814 	bl	800dcc4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dc9c:	2204      	movs	r2, #4
 800dc9e:	4908      	ldr	r1, [pc, #32]	@ (800dcc0 <Get_SerialNum+0x54>)
 800dca0:	68b8      	ldr	r0, [r7, #8]
 800dca2:	f000 f80f 	bl	800dcc4 <IntToUnicode>
  }
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	1fff7a10 	.word	0x1fff7a10
 800dcb4:	1fff7a14 	.word	0x1fff7a14
 800dcb8:	1fff7a18 	.word	0x1fff7a18
 800dcbc:	20000162 	.word	0x20000162
 800dcc0:	20000172 	.word	0x20000172

0800dcc4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dcc4:	b480      	push	{r7}
 800dcc6:	b087      	sub	sp, #28
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	60f8      	str	r0, [r7, #12]
 800dccc:	60b9      	str	r1, [r7, #8]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	75fb      	strb	r3, [r7, #23]
 800dcda:	e027      	b.n	800dd2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	0f1b      	lsrs	r3, r3, #28
 800dce0:	2b09      	cmp	r3, #9
 800dce2:	d80b      	bhi.n	800dcfc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	0f1b      	lsrs	r3, r3, #28
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	7dfb      	ldrb	r3, [r7, #23]
 800dcec:	005b      	lsls	r3, r3, #1
 800dcee:	4619      	mov	r1, r3
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	440b      	add	r3, r1
 800dcf4:	3230      	adds	r2, #48	@ 0x30
 800dcf6:	b2d2      	uxtb	r2, r2
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	e00a      	b.n	800dd12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	0f1b      	lsrs	r3, r3, #28
 800dd00:	b2da      	uxtb	r2, r3
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	005b      	lsls	r3, r3, #1
 800dd06:	4619      	mov	r1, r3
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	440b      	add	r3, r1
 800dd0c:	3237      	adds	r2, #55	@ 0x37
 800dd0e:	b2d2      	uxtb	r2, r2
 800dd10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	011b      	lsls	r3, r3, #4
 800dd16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	4413      	add	r3, r2
 800dd22:	2200      	movs	r2, #0
 800dd24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dd26:	7dfb      	ldrb	r3, [r7, #23]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	75fb      	strb	r3, [r7, #23]
 800dd2c:	7dfa      	ldrb	r2, [r7, #23]
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d3d3      	bcc.n	800dcdc <IntToUnicode+0x18>
  }
}
 800dd34:	bf00      	nop
 800dd36:	bf00      	nop
 800dd38:	371c      	adds	r7, #28
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd40:	4770      	bx	lr
	...

0800dd44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08a      	sub	sp, #40	@ 0x28
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dd4c:	f107 0314 	add.w	r3, r7, #20
 800dd50:	2200      	movs	r2, #0
 800dd52:	601a      	str	r2, [r3, #0]
 800dd54:	605a      	str	r2, [r3, #4]
 800dd56:	609a      	str	r2, [r3, #8]
 800dd58:	60da      	str	r2, [r3, #12]
 800dd5a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a1d      	ldr	r2, [pc, #116]	@ (800ddd8 <HAL_PCD_MspInit+0x94>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d134      	bne.n	800ddd0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dd66:	2300      	movs	r3, #0
 800dd68:	613b      	str	r3, [r7, #16]
 800dd6a:	4b1c      	ldr	r3, [pc, #112]	@ (800dddc <HAL_PCD_MspInit+0x98>)
 800dd6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd6e:	4a1b      	ldr	r2, [pc, #108]	@ (800dddc <HAL_PCD_MspInit+0x98>)
 800dd70:	f043 0302 	orr.w	r3, r3, #2
 800dd74:	6313      	str	r3, [r2, #48]	@ 0x30
 800dd76:	4b19      	ldr	r3, [pc, #100]	@ (800dddc <HAL_PCD_MspInit+0x98>)
 800dd78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd7a:	f003 0302 	and.w	r3, r3, #2
 800dd7e:	613b      	str	r3, [r7, #16]
 800dd80:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800dd82:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800dd86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dd88:	2302      	movs	r3, #2
 800dd8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dd90:	2303      	movs	r3, #3
 800dd92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dd94:	230c      	movs	r3, #12
 800dd96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dd98:	f107 0314 	add.w	r3, r7, #20
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4810      	ldr	r0, [pc, #64]	@ (800dde0 <HAL_PCD_MspInit+0x9c>)
 800dda0:	f7f5 fd10 	bl	80037c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dda4:	2300      	movs	r3, #0
 800dda6:	60fb      	str	r3, [r7, #12]
 800dda8:	4b0c      	ldr	r3, [pc, #48]	@ (800dddc <HAL_PCD_MspInit+0x98>)
 800ddaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddac:	4a0b      	ldr	r2, [pc, #44]	@ (800dddc <HAL_PCD_MspInit+0x98>)
 800ddae:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ddb2:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddb4:	4b09      	ldr	r3, [pc, #36]	@ (800dddc <HAL_PCD_MspInit+0x98>)
 800ddb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	2105      	movs	r1, #5
 800ddc4:	204d      	movs	r0, #77	@ 0x4d
 800ddc6:	f7f5 f87f 	bl	8002ec8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ddca:	204d      	movs	r0, #77	@ 0x4d
 800ddcc:	f7f5 f898 	bl	8002f00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ddd0:	bf00      	nop
 800ddd2:	3728      	adds	r7, #40	@ 0x28
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	40040000 	.word	0x40040000
 800dddc:	40023800 	.word	0x40023800
 800dde0:	40020400 	.word	0x40020400

0800dde4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	4610      	mov	r0, r2
 800ddfc:	f7fb fd87 	bl	800990e <USBD_LL_SetupStage>
}
 800de00:	bf00      	nop
 800de02:	3708      	adds	r7, #8
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b082      	sub	sp, #8
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	460b      	mov	r3, r1
 800de12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800de1a:	78fa      	ldrb	r2, [r7, #3]
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	4613      	mov	r3, r2
 800de20:	00db      	lsls	r3, r3, #3
 800de22:	4413      	add	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	440b      	add	r3, r1
 800de28:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	78fb      	ldrb	r3, [r7, #3]
 800de30:	4619      	mov	r1, r3
 800de32:	f7fb fdc1 	bl	80099b8 <USBD_LL_DataOutStage>
}
 800de36:	bf00      	nop
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
 800de46:	460b      	mov	r3, r1
 800de48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800de50:	78fa      	ldrb	r2, [r7, #3]
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	4613      	mov	r3, r2
 800de56:	00db      	lsls	r3, r3, #3
 800de58:	4413      	add	r3, r2
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	440b      	add	r3, r1
 800de5e:	3320      	adds	r3, #32
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	78fb      	ldrb	r3, [r7, #3]
 800de64:	4619      	mov	r1, r3
 800de66:	f7fb fe5a 	bl	8009b1e <USBD_LL_DataInStage>
}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}

0800de72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b082      	sub	sp, #8
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800de80:	4618      	mov	r0, r3
 800de82:	f7fb ff94 	bl	8009dae <USBD_LL_SOF>
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b084      	sub	sp, #16
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800de96:	2301      	movs	r3, #1
 800de98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	79db      	ldrb	r3, [r3, #7]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dea2:	2300      	movs	r3, #0
 800dea4:	73fb      	strb	r3, [r7, #15]
 800dea6:	e008      	b.n	800deba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	79db      	ldrb	r3, [r3, #7]
 800deac:	2b02      	cmp	r3, #2
 800deae:	d102      	bne.n	800deb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800deb0:	2301      	movs	r3, #1
 800deb2:	73fb      	strb	r3, [r7, #15]
 800deb4:	e001      	b.n	800deba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800deb6:	f7f3 f8fb 	bl	80010b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dec0:	7bfa      	ldrb	r2, [r7, #15]
 800dec2:	4611      	mov	r1, r2
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fb ff2e 	bl	8009d26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ded0:	4618      	mov	r0, r3
 800ded2:	f7fb fed6 	bl	8009c82 <USBD_LL_Reset>
}
 800ded6:	bf00      	nop
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800deee:	4618      	mov	r0, r3
 800def0:	f7fb ff29 	bl	8009d46 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	6812      	ldr	r2, [r2, #0]
 800df02:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df06:	f043 0301 	orr.w	r3, r3, #1
 800df0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7adb      	ldrb	r3, [r3, #11]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d005      	beq.n	800df20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800df14:	4b04      	ldr	r3, [pc, #16]	@ (800df28 <HAL_PCD_SuspendCallback+0x48>)
 800df16:	691b      	ldr	r3, [r3, #16]
 800df18:	4a03      	ldr	r2, [pc, #12]	@ (800df28 <HAL_PCD_SuspendCallback+0x48>)
 800df1a:	f043 0306 	orr.w	r3, r3, #6
 800df1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}
 800df28:	e000ed00 	.word	0xe000ed00

0800df2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fb ff1f 	bl	8009d7e <USBD_LL_Resume>
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df5a:	78fa      	ldrb	r2, [r7, #3]
 800df5c:	4611      	mov	r1, r2
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fb ff77 	bl	8009e52 <USBD_LL_IsoOUTIncomplete>
}
 800df64:	bf00      	nop
 800df66:	3708      	adds	r7, #8
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}

0800df6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	460b      	mov	r3, r1
 800df76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df7e:	78fa      	ldrb	r2, [r7, #3]
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f7fb ff33 	bl	8009dee <USBD_LL_IsoINIncomplete>
}
 800df88:	bf00      	nop
 800df8a:	3708      	adds	r7, #8
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fb ff89 	bl	8009eb6 <USBD_LL_DevConnected>
}
 800dfa4:	bf00      	nop
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fb ff86 	bl	8009ecc <USBD_LL_DevDisconnected>
}
 800dfc0:	bf00      	nop
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	2b01      	cmp	r3, #1
 800dfd6:	d140      	bne.n	800e05a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800dfd8:	4a22      	ldr	r2, [pc, #136]	@ (800e064 <USBD_LL_Init+0x9c>)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	4a20      	ldr	r2, [pc, #128]	@ (800e064 <USBD_LL_Init+0x9c>)
 800dfe4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dfe8:	4b1e      	ldr	r3, [pc, #120]	@ (800e064 <USBD_LL_Init+0x9c>)
 800dfea:	4a1f      	ldr	r2, [pc, #124]	@ (800e068 <USBD_LL_Init+0xa0>)
 800dfec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800dfee:	4b1d      	ldr	r3, [pc, #116]	@ (800e064 <USBD_LL_Init+0x9c>)
 800dff0:	2206      	movs	r2, #6
 800dff2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800dff4:	4b1b      	ldr	r3, [pc, #108]	@ (800e064 <USBD_LL_Init+0x9c>)
 800dff6:	2202      	movs	r2, #2
 800dff8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dffa:	4b1a      	ldr	r3, [pc, #104]	@ (800e064 <USBD_LL_Init+0x9c>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e000:	4b18      	ldr	r3, [pc, #96]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e002:	2202      	movs	r2, #2
 800e004:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e006:	4b17      	ldr	r3, [pc, #92]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e008:	2200      	movs	r2, #0
 800e00a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e00c:	4b15      	ldr	r3, [pc, #84]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e00e:	2200      	movs	r2, #0
 800e010:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800e012:	4b14      	ldr	r3, [pc, #80]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e014:	2200      	movs	r2, #0
 800e016:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e018:	4b12      	ldr	r3, [pc, #72]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800e01e:	4b11      	ldr	r3, [pc, #68]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e020:	2200      	movs	r2, #0
 800e022:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e024:	4b0f      	ldr	r3, [pc, #60]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e026:	2200      	movs	r2, #0
 800e028:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800e02a:	480e      	ldr	r0, [pc, #56]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e02c:	f7f6 f869 	bl	8004102 <HAL_PCD_Init>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800e036:	f7f3 f83b 	bl	80010b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800e03a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e03e:	4809      	ldr	r0, [pc, #36]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e040:	f7f7 fa95 	bl	800556e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800e044:	2280      	movs	r2, #128	@ 0x80
 800e046:	2100      	movs	r1, #0
 800e048:	4806      	ldr	r0, [pc, #24]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e04a:	f7f7 fa49 	bl	80054e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800e04e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800e052:	2101      	movs	r1, #1
 800e054:	4803      	ldr	r0, [pc, #12]	@ (800e064 <USBD_LL_Init+0x9c>)
 800e056:	f7f7 fa43 	bl	80054e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20006308 	.word	0x20006308
 800e068:	40040000 	.word	0x40040000

0800e06c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e074:	2300      	movs	r3, #0
 800e076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e078:	2300      	movs	r3, #0
 800e07a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e082:	4618      	mov	r0, r3
 800e084:	f7f6 f94c 	bl	8004320 <HAL_PCD_Start>
 800e088:	4603      	mov	r3, r0
 800e08a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e08c:	7bfb      	ldrb	r3, [r7, #15]
 800e08e:	4618      	mov	r0, r3
 800e090:	f000 f942 	bl	800e318 <USBD_Get_USB_Status>
 800e094:	4603      	mov	r3, r0
 800e096:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e098:	7bbb      	ldrb	r3, [r7, #14]
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3710      	adds	r7, #16
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b084      	sub	sp, #16
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
 800e0aa:	4608      	mov	r0, r1
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	70fb      	strb	r3, [r7, #3]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	70bb      	strb	r3, [r7, #2]
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e0ca:	78bb      	ldrb	r3, [r7, #2]
 800e0cc:	883a      	ldrh	r2, [r7, #0]
 800e0ce:	78f9      	ldrb	r1, [r7, #3]
 800e0d0:	f7f6 fe20 	bl	8004d14 <HAL_PCD_EP_Open>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0d8:	7bfb      	ldrb	r3, [r7, #15]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f000 f91c 	bl	800e318 <USBD_Get_USB_Status>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b084      	sub	sp, #16
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e108:	78fa      	ldrb	r2, [r7, #3]
 800e10a:	4611      	mov	r1, r2
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7f6 fe6b 	bl	8004de8 <HAL_PCD_EP_Close>
 800e112:	4603      	mov	r3, r0
 800e114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e116:	7bfb      	ldrb	r3, [r7, #15]
 800e118:	4618      	mov	r0, r3
 800e11a:	f000 f8fd 	bl	800e318 <USBD_Get_USB_Status>
 800e11e:	4603      	mov	r3, r0
 800e120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e122:	7bbb      	ldrb	r3, [r7, #14]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b084      	sub	sp, #16
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	460b      	mov	r3, r1
 800e136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e138:	2300      	movs	r3, #0
 800e13a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e13c:	2300      	movs	r3, #0
 800e13e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e146:	78fa      	ldrb	r2, [r7, #3]
 800e148:	4611      	mov	r1, r2
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7f6 ff23 	bl	8004f96 <HAL_PCD_EP_SetStall>
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e154:	7bfb      	ldrb	r3, [r7, #15]
 800e156:	4618      	mov	r0, r3
 800e158:	f000 f8de 	bl	800e318 <USBD_Get_USB_Status>
 800e15c:	4603      	mov	r3, r0
 800e15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e160:	7bbb      	ldrb	r3, [r7, #14]
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e16a:	b580      	push	{r7, lr}
 800e16c:	b084      	sub	sp, #16
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
 800e172:	460b      	mov	r3, r1
 800e174:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e184:	78fa      	ldrb	r2, [r7, #3]
 800e186:	4611      	mov	r1, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7f6 ff67 	bl	800505c <HAL_PCD_EP_ClrStall>
 800e18e:	4603      	mov	r3, r0
 800e190:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e192:	7bfb      	ldrb	r3, [r7, #15]
 800e194:	4618      	mov	r0, r3
 800e196:	f000 f8bf 	bl	800e318 <USBD_Get_USB_Status>
 800e19a:	4603      	mov	r3, r0
 800e19c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	3710      	adds	r7, #16
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e1bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	da0b      	bge.n	800e1dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e1c4:	78fb      	ldrb	r3, [r7, #3]
 800e1c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1ca:	68f9      	ldr	r1, [r7, #12]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	4413      	add	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	440b      	add	r3, r1
 800e1d6:	3316      	adds	r3, #22
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	e00b      	b.n	800e1f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e1dc:	78fb      	ldrb	r3, [r7, #3]
 800e1de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e1e2:	68f9      	ldr	r1, [r7, #12]
 800e1e4:	4613      	mov	r3, r2
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	4413      	add	r3, r2
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	440b      	add	r3, r1
 800e1ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e1f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3714      	adds	r7, #20
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	460b      	mov	r3, r1
 800e20a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e210:	2300      	movs	r3, #0
 800e212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e21a:	78fa      	ldrb	r2, [r7, #3]
 800e21c:	4611      	mov	r1, r2
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f6 fd54 	bl	8004ccc <HAL_PCD_SetAddress>
 800e224:	4603      	mov	r3, r0
 800e226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e228:	7bfb      	ldrb	r3, [r7, #15]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f000 f874 	bl	800e318 <USBD_Get_USB_Status>
 800e230:	4603      	mov	r3, r0
 800e232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e234:	7bbb      	ldrb	r3, [r7, #14]
}
 800e236:	4618      	mov	r0, r3
 800e238:	3710      	adds	r7, #16
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}

0800e23e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e23e:	b580      	push	{r7, lr}
 800e240:	b086      	sub	sp, #24
 800e242:	af00      	add	r7, sp, #0
 800e244:	60f8      	str	r0, [r7, #12]
 800e246:	607a      	str	r2, [r7, #4]
 800e248:	603b      	str	r3, [r7, #0]
 800e24a:	460b      	mov	r3, r1
 800e24c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e252:	2300      	movs	r3, #0
 800e254:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e25c:	7af9      	ldrb	r1, [r7, #11]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	f7f6 fe5e 	bl	8004f22 <HAL_PCD_EP_Transmit>
 800e266:	4603      	mov	r3, r0
 800e268:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e26a:	7dfb      	ldrb	r3, [r7, #23]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f000 f853 	bl	800e318 <USBD_Get_USB_Status>
 800e272:	4603      	mov	r3, r0
 800e274:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e276:	7dbb      	ldrb	r3, [r7, #22]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3718      	adds	r7, #24
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b086      	sub	sp, #24
 800e284:	af00      	add	r7, sp, #0
 800e286:	60f8      	str	r0, [r7, #12]
 800e288:	607a      	str	r2, [r7, #4]
 800e28a:	603b      	str	r3, [r7, #0]
 800e28c:	460b      	mov	r3, r1
 800e28e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e29e:	7af9      	ldrb	r1, [r7, #11]
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	f7f6 fdea 	bl	8004e7c <HAL_PCD_EP_Receive>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2ac:	7dfb      	ldrb	r3, [r7, #23]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 f832 	bl	800e318 <USBD_Get_USB_Status>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e2b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3718      	adds	r7, #24
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b082      	sub	sp, #8
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2d4:	78fa      	ldrb	r2, [r7, #3]
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f6 fe0a 	bl	8004ef2 <HAL_PCD_EP_GetRxCount>
 800e2de:	4603      	mov	r3, r0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e2f0:	4b03      	ldr	r3, [pc, #12]	@ (800e300 <USBD_static_malloc+0x18>)
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	200067ec 	.word	0x200067ec

0800e304 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]

}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e318:	b480      	push	{r7}
 800e31a:	b085      	sub	sp, #20
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	4603      	mov	r3, r0
 800e320:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e322:	2300      	movs	r3, #0
 800e324:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e326:	79fb      	ldrb	r3, [r7, #7]
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d817      	bhi.n	800e35c <USBD_Get_USB_Status+0x44>
 800e32c:	a201      	add	r2, pc, #4	@ (adr r2, 800e334 <USBD_Get_USB_Status+0x1c>)
 800e32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e332:	bf00      	nop
 800e334:	0800e345 	.word	0x0800e345
 800e338:	0800e34b 	.word	0x0800e34b
 800e33c:	0800e351 	.word	0x0800e351
 800e340:	0800e357 	.word	0x0800e357
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e344:	2300      	movs	r3, #0
 800e346:	73fb      	strb	r3, [r7, #15]
    break;
 800e348:	e00b      	b.n	800e362 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e34a:	2303      	movs	r3, #3
 800e34c:	73fb      	strb	r3, [r7, #15]
    break;
 800e34e:	e008      	b.n	800e362 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e350:	2301      	movs	r3, #1
 800e352:	73fb      	strb	r3, [r7, #15]
    break;
 800e354:	e005      	b.n	800e362 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e356:	2303      	movs	r3, #3
 800e358:	73fb      	strb	r3, [r7, #15]
    break;
 800e35a:	e002      	b.n	800e362 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e35c:	2303      	movs	r3, #3
 800e35e:	73fb      	strb	r3, [r7, #15]
    break;
 800e360:	bf00      	nop
  }
  return usb_status;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <siprintf>:
 800e370:	b40e      	push	{r1, r2, r3}
 800e372:	b500      	push	{lr}
 800e374:	b09c      	sub	sp, #112	@ 0x70
 800e376:	ab1d      	add	r3, sp, #116	@ 0x74
 800e378:	9002      	str	r0, [sp, #8]
 800e37a:	9006      	str	r0, [sp, #24]
 800e37c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e380:	4809      	ldr	r0, [pc, #36]	@ (800e3a8 <siprintf+0x38>)
 800e382:	9107      	str	r1, [sp, #28]
 800e384:	9104      	str	r1, [sp, #16]
 800e386:	4909      	ldr	r1, [pc, #36]	@ (800e3ac <siprintf+0x3c>)
 800e388:	f853 2b04 	ldr.w	r2, [r3], #4
 800e38c:	9105      	str	r1, [sp, #20]
 800e38e:	6800      	ldr	r0, [r0, #0]
 800e390:	9301      	str	r3, [sp, #4]
 800e392:	a902      	add	r1, sp, #8
 800e394:	f000 f9a2 	bl	800e6dc <_svfiprintf_r>
 800e398:	9b02      	ldr	r3, [sp, #8]
 800e39a:	2200      	movs	r2, #0
 800e39c:	701a      	strb	r2, [r3, #0]
 800e39e:	b01c      	add	sp, #112	@ 0x70
 800e3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a4:	b003      	add	sp, #12
 800e3a6:	4770      	bx	lr
 800e3a8:	2000017c 	.word	0x2000017c
 800e3ac:	ffff0208 	.word	0xffff0208

0800e3b0 <memset>:
 800e3b0:	4402      	add	r2, r0
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d100      	bne.n	800e3ba <memset+0xa>
 800e3b8:	4770      	bx	lr
 800e3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e3be:	e7f9      	b.n	800e3b4 <memset+0x4>

0800e3c0 <__errno>:
 800e3c0:	4b01      	ldr	r3, [pc, #4]	@ (800e3c8 <__errno+0x8>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	2000017c 	.word	0x2000017c

0800e3cc <__libc_init_array>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	4d0d      	ldr	r5, [pc, #52]	@ (800e404 <__libc_init_array+0x38>)
 800e3d0:	4c0d      	ldr	r4, [pc, #52]	@ (800e408 <__libc_init_array+0x3c>)
 800e3d2:	1b64      	subs	r4, r4, r5
 800e3d4:	10a4      	asrs	r4, r4, #2
 800e3d6:	2600      	movs	r6, #0
 800e3d8:	42a6      	cmp	r6, r4
 800e3da:	d109      	bne.n	800e3f0 <__libc_init_array+0x24>
 800e3dc:	4d0b      	ldr	r5, [pc, #44]	@ (800e40c <__libc_init_array+0x40>)
 800e3de:	4c0c      	ldr	r4, [pc, #48]	@ (800e410 <__libc_init_array+0x44>)
 800e3e0:	f000 fc66 	bl	800ecb0 <_init>
 800e3e4:	1b64      	subs	r4, r4, r5
 800e3e6:	10a4      	asrs	r4, r4, #2
 800e3e8:	2600      	movs	r6, #0
 800e3ea:	42a6      	cmp	r6, r4
 800e3ec:	d105      	bne.n	800e3fa <__libc_init_array+0x2e>
 800e3ee:	bd70      	pop	{r4, r5, r6, pc}
 800e3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3f4:	4798      	blx	r3
 800e3f6:	3601      	adds	r6, #1
 800e3f8:	e7ee      	b.n	800e3d8 <__libc_init_array+0xc>
 800e3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e3fe:	4798      	blx	r3
 800e400:	3601      	adds	r6, #1
 800e402:	e7f2      	b.n	800e3ea <__libc_init_array+0x1e>
 800e404:	080108a0 	.word	0x080108a0
 800e408:	080108a0 	.word	0x080108a0
 800e40c:	080108a0 	.word	0x080108a0
 800e410:	080108a4 	.word	0x080108a4

0800e414 <__retarget_lock_acquire_recursive>:
 800e414:	4770      	bx	lr

0800e416 <__retarget_lock_release_recursive>:
 800e416:	4770      	bx	lr

0800e418 <memcpy>:
 800e418:	440a      	add	r2, r1
 800e41a:	4291      	cmp	r1, r2
 800e41c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e420:	d100      	bne.n	800e424 <memcpy+0xc>
 800e422:	4770      	bx	lr
 800e424:	b510      	push	{r4, lr}
 800e426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e42a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e42e:	4291      	cmp	r1, r2
 800e430:	d1f9      	bne.n	800e426 <memcpy+0xe>
 800e432:	bd10      	pop	{r4, pc}

0800e434 <_free_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4605      	mov	r5, r0
 800e438:	2900      	cmp	r1, #0
 800e43a:	d041      	beq.n	800e4c0 <_free_r+0x8c>
 800e43c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e440:	1f0c      	subs	r4, r1, #4
 800e442:	2b00      	cmp	r3, #0
 800e444:	bfb8      	it	lt
 800e446:	18e4      	addlt	r4, r4, r3
 800e448:	f000 f8e0 	bl	800e60c <__malloc_lock>
 800e44c:	4a1d      	ldr	r2, [pc, #116]	@ (800e4c4 <_free_r+0x90>)
 800e44e:	6813      	ldr	r3, [r2, #0]
 800e450:	b933      	cbnz	r3, 800e460 <_free_r+0x2c>
 800e452:	6063      	str	r3, [r4, #4]
 800e454:	6014      	str	r4, [r2, #0]
 800e456:	4628      	mov	r0, r5
 800e458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e45c:	f000 b8dc 	b.w	800e618 <__malloc_unlock>
 800e460:	42a3      	cmp	r3, r4
 800e462:	d908      	bls.n	800e476 <_free_r+0x42>
 800e464:	6820      	ldr	r0, [r4, #0]
 800e466:	1821      	adds	r1, r4, r0
 800e468:	428b      	cmp	r3, r1
 800e46a:	bf01      	itttt	eq
 800e46c:	6819      	ldreq	r1, [r3, #0]
 800e46e:	685b      	ldreq	r3, [r3, #4]
 800e470:	1809      	addeq	r1, r1, r0
 800e472:	6021      	streq	r1, [r4, #0]
 800e474:	e7ed      	b.n	800e452 <_free_r+0x1e>
 800e476:	461a      	mov	r2, r3
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	b10b      	cbz	r3, 800e480 <_free_r+0x4c>
 800e47c:	42a3      	cmp	r3, r4
 800e47e:	d9fa      	bls.n	800e476 <_free_r+0x42>
 800e480:	6811      	ldr	r1, [r2, #0]
 800e482:	1850      	adds	r0, r2, r1
 800e484:	42a0      	cmp	r0, r4
 800e486:	d10b      	bne.n	800e4a0 <_free_r+0x6c>
 800e488:	6820      	ldr	r0, [r4, #0]
 800e48a:	4401      	add	r1, r0
 800e48c:	1850      	adds	r0, r2, r1
 800e48e:	4283      	cmp	r3, r0
 800e490:	6011      	str	r1, [r2, #0]
 800e492:	d1e0      	bne.n	800e456 <_free_r+0x22>
 800e494:	6818      	ldr	r0, [r3, #0]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	6053      	str	r3, [r2, #4]
 800e49a:	4408      	add	r0, r1
 800e49c:	6010      	str	r0, [r2, #0]
 800e49e:	e7da      	b.n	800e456 <_free_r+0x22>
 800e4a0:	d902      	bls.n	800e4a8 <_free_r+0x74>
 800e4a2:	230c      	movs	r3, #12
 800e4a4:	602b      	str	r3, [r5, #0]
 800e4a6:	e7d6      	b.n	800e456 <_free_r+0x22>
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	1821      	adds	r1, r4, r0
 800e4ac:	428b      	cmp	r3, r1
 800e4ae:	bf04      	itt	eq
 800e4b0:	6819      	ldreq	r1, [r3, #0]
 800e4b2:	685b      	ldreq	r3, [r3, #4]
 800e4b4:	6063      	str	r3, [r4, #4]
 800e4b6:	bf04      	itt	eq
 800e4b8:	1809      	addeq	r1, r1, r0
 800e4ba:	6021      	streq	r1, [r4, #0]
 800e4bc:	6054      	str	r4, [r2, #4]
 800e4be:	e7ca      	b.n	800e456 <_free_r+0x22>
 800e4c0:	bd38      	pop	{r3, r4, r5, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20006b50 	.word	0x20006b50

0800e4c8 <sbrk_aligned>:
 800e4c8:	b570      	push	{r4, r5, r6, lr}
 800e4ca:	4e0f      	ldr	r6, [pc, #60]	@ (800e508 <sbrk_aligned+0x40>)
 800e4cc:	460c      	mov	r4, r1
 800e4ce:	6831      	ldr	r1, [r6, #0]
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	b911      	cbnz	r1, 800e4da <sbrk_aligned+0x12>
 800e4d4:	f000 fba6 	bl	800ec24 <_sbrk_r>
 800e4d8:	6030      	str	r0, [r6, #0]
 800e4da:	4621      	mov	r1, r4
 800e4dc:	4628      	mov	r0, r5
 800e4de:	f000 fba1 	bl	800ec24 <_sbrk_r>
 800e4e2:	1c43      	adds	r3, r0, #1
 800e4e4:	d103      	bne.n	800e4ee <sbrk_aligned+0x26>
 800e4e6:	f04f 34ff 	mov.w	r4, #4294967295
 800e4ea:	4620      	mov	r0, r4
 800e4ec:	bd70      	pop	{r4, r5, r6, pc}
 800e4ee:	1cc4      	adds	r4, r0, #3
 800e4f0:	f024 0403 	bic.w	r4, r4, #3
 800e4f4:	42a0      	cmp	r0, r4
 800e4f6:	d0f8      	beq.n	800e4ea <sbrk_aligned+0x22>
 800e4f8:	1a21      	subs	r1, r4, r0
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	f000 fb92 	bl	800ec24 <_sbrk_r>
 800e500:	3001      	adds	r0, #1
 800e502:	d1f2      	bne.n	800e4ea <sbrk_aligned+0x22>
 800e504:	e7ef      	b.n	800e4e6 <sbrk_aligned+0x1e>
 800e506:	bf00      	nop
 800e508:	20006b4c 	.word	0x20006b4c

0800e50c <_malloc_r>:
 800e50c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e510:	1ccd      	adds	r5, r1, #3
 800e512:	f025 0503 	bic.w	r5, r5, #3
 800e516:	3508      	adds	r5, #8
 800e518:	2d0c      	cmp	r5, #12
 800e51a:	bf38      	it	cc
 800e51c:	250c      	movcc	r5, #12
 800e51e:	2d00      	cmp	r5, #0
 800e520:	4606      	mov	r6, r0
 800e522:	db01      	blt.n	800e528 <_malloc_r+0x1c>
 800e524:	42a9      	cmp	r1, r5
 800e526:	d904      	bls.n	800e532 <_malloc_r+0x26>
 800e528:	230c      	movs	r3, #12
 800e52a:	6033      	str	r3, [r6, #0]
 800e52c:	2000      	movs	r0, #0
 800e52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e608 <_malloc_r+0xfc>
 800e536:	f000 f869 	bl	800e60c <__malloc_lock>
 800e53a:	f8d8 3000 	ldr.w	r3, [r8]
 800e53e:	461c      	mov	r4, r3
 800e540:	bb44      	cbnz	r4, 800e594 <_malloc_r+0x88>
 800e542:	4629      	mov	r1, r5
 800e544:	4630      	mov	r0, r6
 800e546:	f7ff ffbf 	bl	800e4c8 <sbrk_aligned>
 800e54a:	1c43      	adds	r3, r0, #1
 800e54c:	4604      	mov	r4, r0
 800e54e:	d158      	bne.n	800e602 <_malloc_r+0xf6>
 800e550:	f8d8 4000 	ldr.w	r4, [r8]
 800e554:	4627      	mov	r7, r4
 800e556:	2f00      	cmp	r7, #0
 800e558:	d143      	bne.n	800e5e2 <_malloc_r+0xd6>
 800e55a:	2c00      	cmp	r4, #0
 800e55c:	d04b      	beq.n	800e5f6 <_malloc_r+0xea>
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	4639      	mov	r1, r7
 800e562:	4630      	mov	r0, r6
 800e564:	eb04 0903 	add.w	r9, r4, r3
 800e568:	f000 fb5c 	bl	800ec24 <_sbrk_r>
 800e56c:	4581      	cmp	r9, r0
 800e56e:	d142      	bne.n	800e5f6 <_malloc_r+0xea>
 800e570:	6821      	ldr	r1, [r4, #0]
 800e572:	1a6d      	subs	r5, r5, r1
 800e574:	4629      	mov	r1, r5
 800e576:	4630      	mov	r0, r6
 800e578:	f7ff ffa6 	bl	800e4c8 <sbrk_aligned>
 800e57c:	3001      	adds	r0, #1
 800e57e:	d03a      	beq.n	800e5f6 <_malloc_r+0xea>
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	442b      	add	r3, r5
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	f8d8 3000 	ldr.w	r3, [r8]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	bb62      	cbnz	r2, 800e5e8 <_malloc_r+0xdc>
 800e58e:	f8c8 7000 	str.w	r7, [r8]
 800e592:	e00f      	b.n	800e5b4 <_malloc_r+0xa8>
 800e594:	6822      	ldr	r2, [r4, #0]
 800e596:	1b52      	subs	r2, r2, r5
 800e598:	d420      	bmi.n	800e5dc <_malloc_r+0xd0>
 800e59a:	2a0b      	cmp	r2, #11
 800e59c:	d917      	bls.n	800e5ce <_malloc_r+0xc2>
 800e59e:	1961      	adds	r1, r4, r5
 800e5a0:	42a3      	cmp	r3, r4
 800e5a2:	6025      	str	r5, [r4, #0]
 800e5a4:	bf18      	it	ne
 800e5a6:	6059      	strne	r1, [r3, #4]
 800e5a8:	6863      	ldr	r3, [r4, #4]
 800e5aa:	bf08      	it	eq
 800e5ac:	f8c8 1000 	streq.w	r1, [r8]
 800e5b0:	5162      	str	r2, [r4, r5]
 800e5b2:	604b      	str	r3, [r1, #4]
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f000 f82f 	bl	800e618 <__malloc_unlock>
 800e5ba:	f104 000b 	add.w	r0, r4, #11
 800e5be:	1d23      	adds	r3, r4, #4
 800e5c0:	f020 0007 	bic.w	r0, r0, #7
 800e5c4:	1ac2      	subs	r2, r0, r3
 800e5c6:	bf1c      	itt	ne
 800e5c8:	1a1b      	subne	r3, r3, r0
 800e5ca:	50a3      	strne	r3, [r4, r2]
 800e5cc:	e7af      	b.n	800e52e <_malloc_r+0x22>
 800e5ce:	6862      	ldr	r2, [r4, #4]
 800e5d0:	42a3      	cmp	r3, r4
 800e5d2:	bf0c      	ite	eq
 800e5d4:	f8c8 2000 	streq.w	r2, [r8]
 800e5d8:	605a      	strne	r2, [r3, #4]
 800e5da:	e7eb      	b.n	800e5b4 <_malloc_r+0xa8>
 800e5dc:	4623      	mov	r3, r4
 800e5de:	6864      	ldr	r4, [r4, #4]
 800e5e0:	e7ae      	b.n	800e540 <_malloc_r+0x34>
 800e5e2:	463c      	mov	r4, r7
 800e5e4:	687f      	ldr	r7, [r7, #4]
 800e5e6:	e7b6      	b.n	800e556 <_malloc_r+0x4a>
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	42a3      	cmp	r3, r4
 800e5ee:	d1fb      	bne.n	800e5e8 <_malloc_r+0xdc>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	6053      	str	r3, [r2, #4]
 800e5f4:	e7de      	b.n	800e5b4 <_malloc_r+0xa8>
 800e5f6:	230c      	movs	r3, #12
 800e5f8:	6033      	str	r3, [r6, #0]
 800e5fa:	4630      	mov	r0, r6
 800e5fc:	f000 f80c 	bl	800e618 <__malloc_unlock>
 800e600:	e794      	b.n	800e52c <_malloc_r+0x20>
 800e602:	6005      	str	r5, [r0, #0]
 800e604:	e7d6      	b.n	800e5b4 <_malloc_r+0xa8>
 800e606:	bf00      	nop
 800e608:	20006b50 	.word	0x20006b50

0800e60c <__malloc_lock>:
 800e60c:	4801      	ldr	r0, [pc, #4]	@ (800e614 <__malloc_lock+0x8>)
 800e60e:	f7ff bf01 	b.w	800e414 <__retarget_lock_acquire_recursive>
 800e612:	bf00      	nop
 800e614:	20006b48 	.word	0x20006b48

0800e618 <__malloc_unlock>:
 800e618:	4801      	ldr	r0, [pc, #4]	@ (800e620 <__malloc_unlock+0x8>)
 800e61a:	f7ff befc 	b.w	800e416 <__retarget_lock_release_recursive>
 800e61e:	bf00      	nop
 800e620:	20006b48 	.word	0x20006b48

0800e624 <__ssputs_r>:
 800e624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e628:	688e      	ldr	r6, [r1, #8]
 800e62a:	461f      	mov	r7, r3
 800e62c:	42be      	cmp	r6, r7
 800e62e:	680b      	ldr	r3, [r1, #0]
 800e630:	4682      	mov	sl, r0
 800e632:	460c      	mov	r4, r1
 800e634:	4690      	mov	r8, r2
 800e636:	d82d      	bhi.n	800e694 <__ssputs_r+0x70>
 800e638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e63c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e640:	d026      	beq.n	800e690 <__ssputs_r+0x6c>
 800e642:	6965      	ldr	r5, [r4, #20]
 800e644:	6909      	ldr	r1, [r1, #16]
 800e646:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e64a:	eba3 0901 	sub.w	r9, r3, r1
 800e64e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e652:	1c7b      	adds	r3, r7, #1
 800e654:	444b      	add	r3, r9
 800e656:	106d      	asrs	r5, r5, #1
 800e658:	429d      	cmp	r5, r3
 800e65a:	bf38      	it	cc
 800e65c:	461d      	movcc	r5, r3
 800e65e:	0553      	lsls	r3, r2, #21
 800e660:	d527      	bpl.n	800e6b2 <__ssputs_r+0x8e>
 800e662:	4629      	mov	r1, r5
 800e664:	f7ff ff52 	bl	800e50c <_malloc_r>
 800e668:	4606      	mov	r6, r0
 800e66a:	b360      	cbz	r0, 800e6c6 <__ssputs_r+0xa2>
 800e66c:	6921      	ldr	r1, [r4, #16]
 800e66e:	464a      	mov	r2, r9
 800e670:	f7ff fed2 	bl	800e418 <memcpy>
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e67a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e67e:	81a3      	strh	r3, [r4, #12]
 800e680:	6126      	str	r6, [r4, #16]
 800e682:	6165      	str	r5, [r4, #20]
 800e684:	444e      	add	r6, r9
 800e686:	eba5 0509 	sub.w	r5, r5, r9
 800e68a:	6026      	str	r6, [r4, #0]
 800e68c:	60a5      	str	r5, [r4, #8]
 800e68e:	463e      	mov	r6, r7
 800e690:	42be      	cmp	r6, r7
 800e692:	d900      	bls.n	800e696 <__ssputs_r+0x72>
 800e694:	463e      	mov	r6, r7
 800e696:	6820      	ldr	r0, [r4, #0]
 800e698:	4632      	mov	r2, r6
 800e69a:	4641      	mov	r1, r8
 800e69c:	f000 faa8 	bl	800ebf0 <memmove>
 800e6a0:	68a3      	ldr	r3, [r4, #8]
 800e6a2:	1b9b      	subs	r3, r3, r6
 800e6a4:	60a3      	str	r3, [r4, #8]
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	4433      	add	r3, r6
 800e6aa:	6023      	str	r3, [r4, #0]
 800e6ac:	2000      	movs	r0, #0
 800e6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6b2:	462a      	mov	r2, r5
 800e6b4:	f000 fac6 	bl	800ec44 <_realloc_r>
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d1e0      	bne.n	800e680 <__ssputs_r+0x5c>
 800e6be:	6921      	ldr	r1, [r4, #16]
 800e6c0:	4650      	mov	r0, sl
 800e6c2:	f7ff feb7 	bl	800e434 <_free_r>
 800e6c6:	230c      	movs	r3, #12
 800e6c8:	f8ca 3000 	str.w	r3, [sl]
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6d2:	81a3      	strh	r3, [r4, #12]
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	e7e9      	b.n	800e6ae <__ssputs_r+0x8a>
	...

0800e6dc <_svfiprintf_r>:
 800e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e0:	4698      	mov	r8, r3
 800e6e2:	898b      	ldrh	r3, [r1, #12]
 800e6e4:	061b      	lsls	r3, r3, #24
 800e6e6:	b09d      	sub	sp, #116	@ 0x74
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	460d      	mov	r5, r1
 800e6ec:	4614      	mov	r4, r2
 800e6ee:	d510      	bpl.n	800e712 <_svfiprintf_r+0x36>
 800e6f0:	690b      	ldr	r3, [r1, #16]
 800e6f2:	b973      	cbnz	r3, 800e712 <_svfiprintf_r+0x36>
 800e6f4:	2140      	movs	r1, #64	@ 0x40
 800e6f6:	f7ff ff09 	bl	800e50c <_malloc_r>
 800e6fa:	6028      	str	r0, [r5, #0]
 800e6fc:	6128      	str	r0, [r5, #16]
 800e6fe:	b930      	cbnz	r0, 800e70e <_svfiprintf_r+0x32>
 800e700:	230c      	movs	r3, #12
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	b01d      	add	sp, #116	@ 0x74
 800e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70e:	2340      	movs	r3, #64	@ 0x40
 800e710:	616b      	str	r3, [r5, #20]
 800e712:	2300      	movs	r3, #0
 800e714:	9309      	str	r3, [sp, #36]	@ 0x24
 800e716:	2320      	movs	r3, #32
 800e718:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e71c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e720:	2330      	movs	r3, #48	@ 0x30
 800e722:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e8c0 <_svfiprintf_r+0x1e4>
 800e726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e72a:	f04f 0901 	mov.w	r9, #1
 800e72e:	4623      	mov	r3, r4
 800e730:	469a      	mov	sl, r3
 800e732:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e736:	b10a      	cbz	r2, 800e73c <_svfiprintf_r+0x60>
 800e738:	2a25      	cmp	r2, #37	@ 0x25
 800e73a:	d1f9      	bne.n	800e730 <_svfiprintf_r+0x54>
 800e73c:	ebba 0b04 	subs.w	fp, sl, r4
 800e740:	d00b      	beq.n	800e75a <_svfiprintf_r+0x7e>
 800e742:	465b      	mov	r3, fp
 800e744:	4622      	mov	r2, r4
 800e746:	4629      	mov	r1, r5
 800e748:	4638      	mov	r0, r7
 800e74a:	f7ff ff6b 	bl	800e624 <__ssputs_r>
 800e74e:	3001      	adds	r0, #1
 800e750:	f000 80a7 	beq.w	800e8a2 <_svfiprintf_r+0x1c6>
 800e754:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e756:	445a      	add	r2, fp
 800e758:	9209      	str	r2, [sp, #36]	@ 0x24
 800e75a:	f89a 3000 	ldrb.w	r3, [sl]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	f000 809f 	beq.w	800e8a2 <_svfiprintf_r+0x1c6>
 800e764:	2300      	movs	r3, #0
 800e766:	f04f 32ff 	mov.w	r2, #4294967295
 800e76a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e76e:	f10a 0a01 	add.w	sl, sl, #1
 800e772:	9304      	str	r3, [sp, #16]
 800e774:	9307      	str	r3, [sp, #28]
 800e776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e77a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e77c:	4654      	mov	r4, sl
 800e77e:	2205      	movs	r2, #5
 800e780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e784:	484e      	ldr	r0, [pc, #312]	@ (800e8c0 <_svfiprintf_r+0x1e4>)
 800e786:	f7f1 fd33 	bl	80001f0 <memchr>
 800e78a:	9a04      	ldr	r2, [sp, #16]
 800e78c:	b9d8      	cbnz	r0, 800e7c6 <_svfiprintf_r+0xea>
 800e78e:	06d0      	lsls	r0, r2, #27
 800e790:	bf44      	itt	mi
 800e792:	2320      	movmi	r3, #32
 800e794:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e798:	0711      	lsls	r1, r2, #28
 800e79a:	bf44      	itt	mi
 800e79c:	232b      	movmi	r3, #43	@ 0x2b
 800e79e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e7a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7a8:	d015      	beq.n	800e7d6 <_svfiprintf_r+0xfa>
 800e7aa:	9a07      	ldr	r2, [sp, #28]
 800e7ac:	4654      	mov	r4, sl
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	f04f 0c0a 	mov.w	ip, #10
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7ba:	3b30      	subs	r3, #48	@ 0x30
 800e7bc:	2b09      	cmp	r3, #9
 800e7be:	d94b      	bls.n	800e858 <_svfiprintf_r+0x17c>
 800e7c0:	b1b0      	cbz	r0, 800e7f0 <_svfiprintf_r+0x114>
 800e7c2:	9207      	str	r2, [sp, #28]
 800e7c4:	e014      	b.n	800e7f0 <_svfiprintf_r+0x114>
 800e7c6:	eba0 0308 	sub.w	r3, r0, r8
 800e7ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e7ce:	4313      	orrs	r3, r2
 800e7d0:	9304      	str	r3, [sp, #16]
 800e7d2:	46a2      	mov	sl, r4
 800e7d4:	e7d2      	b.n	800e77c <_svfiprintf_r+0xa0>
 800e7d6:	9b03      	ldr	r3, [sp, #12]
 800e7d8:	1d19      	adds	r1, r3, #4
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	9103      	str	r1, [sp, #12]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	bfbb      	ittet	lt
 800e7e2:	425b      	neglt	r3, r3
 800e7e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e7e8:	9307      	strge	r3, [sp, #28]
 800e7ea:	9307      	strlt	r3, [sp, #28]
 800e7ec:	bfb8      	it	lt
 800e7ee:	9204      	strlt	r2, [sp, #16]
 800e7f0:	7823      	ldrb	r3, [r4, #0]
 800e7f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e7f4:	d10a      	bne.n	800e80c <_svfiprintf_r+0x130>
 800e7f6:	7863      	ldrb	r3, [r4, #1]
 800e7f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e7fa:	d132      	bne.n	800e862 <_svfiprintf_r+0x186>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	1d1a      	adds	r2, r3, #4
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	9203      	str	r2, [sp, #12]
 800e804:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e808:	3402      	adds	r4, #2
 800e80a:	9305      	str	r3, [sp, #20]
 800e80c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e8d0 <_svfiprintf_r+0x1f4>
 800e810:	7821      	ldrb	r1, [r4, #0]
 800e812:	2203      	movs	r2, #3
 800e814:	4650      	mov	r0, sl
 800e816:	f7f1 fceb 	bl	80001f0 <memchr>
 800e81a:	b138      	cbz	r0, 800e82c <_svfiprintf_r+0x150>
 800e81c:	9b04      	ldr	r3, [sp, #16]
 800e81e:	eba0 000a 	sub.w	r0, r0, sl
 800e822:	2240      	movs	r2, #64	@ 0x40
 800e824:	4082      	lsls	r2, r0
 800e826:	4313      	orrs	r3, r2
 800e828:	3401      	adds	r4, #1
 800e82a:	9304      	str	r3, [sp, #16]
 800e82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e830:	4824      	ldr	r0, [pc, #144]	@ (800e8c4 <_svfiprintf_r+0x1e8>)
 800e832:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e836:	2206      	movs	r2, #6
 800e838:	f7f1 fcda 	bl	80001f0 <memchr>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d036      	beq.n	800e8ae <_svfiprintf_r+0x1d2>
 800e840:	4b21      	ldr	r3, [pc, #132]	@ (800e8c8 <_svfiprintf_r+0x1ec>)
 800e842:	bb1b      	cbnz	r3, 800e88c <_svfiprintf_r+0x1b0>
 800e844:	9b03      	ldr	r3, [sp, #12]
 800e846:	3307      	adds	r3, #7
 800e848:	f023 0307 	bic.w	r3, r3, #7
 800e84c:	3308      	adds	r3, #8
 800e84e:	9303      	str	r3, [sp, #12]
 800e850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e852:	4433      	add	r3, r6
 800e854:	9309      	str	r3, [sp, #36]	@ 0x24
 800e856:	e76a      	b.n	800e72e <_svfiprintf_r+0x52>
 800e858:	fb0c 3202 	mla	r2, ip, r2, r3
 800e85c:	460c      	mov	r4, r1
 800e85e:	2001      	movs	r0, #1
 800e860:	e7a8      	b.n	800e7b4 <_svfiprintf_r+0xd8>
 800e862:	2300      	movs	r3, #0
 800e864:	3401      	adds	r4, #1
 800e866:	9305      	str	r3, [sp, #20]
 800e868:	4619      	mov	r1, r3
 800e86a:	f04f 0c0a 	mov.w	ip, #10
 800e86e:	4620      	mov	r0, r4
 800e870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e874:	3a30      	subs	r2, #48	@ 0x30
 800e876:	2a09      	cmp	r2, #9
 800e878:	d903      	bls.n	800e882 <_svfiprintf_r+0x1a6>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d0c6      	beq.n	800e80c <_svfiprintf_r+0x130>
 800e87e:	9105      	str	r1, [sp, #20]
 800e880:	e7c4      	b.n	800e80c <_svfiprintf_r+0x130>
 800e882:	fb0c 2101 	mla	r1, ip, r1, r2
 800e886:	4604      	mov	r4, r0
 800e888:	2301      	movs	r3, #1
 800e88a:	e7f0      	b.n	800e86e <_svfiprintf_r+0x192>
 800e88c:	ab03      	add	r3, sp, #12
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	462a      	mov	r2, r5
 800e892:	4b0e      	ldr	r3, [pc, #56]	@ (800e8cc <_svfiprintf_r+0x1f0>)
 800e894:	a904      	add	r1, sp, #16
 800e896:	4638      	mov	r0, r7
 800e898:	f3af 8000 	nop.w
 800e89c:	1c42      	adds	r2, r0, #1
 800e89e:	4606      	mov	r6, r0
 800e8a0:	d1d6      	bne.n	800e850 <_svfiprintf_r+0x174>
 800e8a2:	89ab      	ldrh	r3, [r5, #12]
 800e8a4:	065b      	lsls	r3, r3, #25
 800e8a6:	f53f af2d 	bmi.w	800e704 <_svfiprintf_r+0x28>
 800e8aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e8ac:	e72c      	b.n	800e708 <_svfiprintf_r+0x2c>
 800e8ae:	ab03      	add	r3, sp, #12
 800e8b0:	9300      	str	r3, [sp, #0]
 800e8b2:	462a      	mov	r2, r5
 800e8b4:	4b05      	ldr	r3, [pc, #20]	@ (800e8cc <_svfiprintf_r+0x1f0>)
 800e8b6:	a904      	add	r1, sp, #16
 800e8b8:	4638      	mov	r0, r7
 800e8ba:	f000 f879 	bl	800e9b0 <_printf_i>
 800e8be:	e7ed      	b.n	800e89c <_svfiprintf_r+0x1c0>
 800e8c0:	08010864 	.word	0x08010864
 800e8c4:	0801086e 	.word	0x0801086e
 800e8c8:	00000000 	.word	0x00000000
 800e8cc:	0800e625 	.word	0x0800e625
 800e8d0:	0801086a 	.word	0x0801086a

0800e8d4 <_printf_common>:
 800e8d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d8:	4616      	mov	r6, r2
 800e8da:	4698      	mov	r8, r3
 800e8dc:	688a      	ldr	r2, [r1, #8]
 800e8de:	690b      	ldr	r3, [r1, #16]
 800e8e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	bfb8      	it	lt
 800e8e8:	4613      	movlt	r3, r2
 800e8ea:	6033      	str	r3, [r6, #0]
 800e8ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e8f0:	4607      	mov	r7, r0
 800e8f2:	460c      	mov	r4, r1
 800e8f4:	b10a      	cbz	r2, 800e8fa <_printf_common+0x26>
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	6033      	str	r3, [r6, #0]
 800e8fa:	6823      	ldr	r3, [r4, #0]
 800e8fc:	0699      	lsls	r1, r3, #26
 800e8fe:	bf42      	ittt	mi
 800e900:	6833      	ldrmi	r3, [r6, #0]
 800e902:	3302      	addmi	r3, #2
 800e904:	6033      	strmi	r3, [r6, #0]
 800e906:	6825      	ldr	r5, [r4, #0]
 800e908:	f015 0506 	ands.w	r5, r5, #6
 800e90c:	d106      	bne.n	800e91c <_printf_common+0x48>
 800e90e:	f104 0a19 	add.w	sl, r4, #25
 800e912:	68e3      	ldr	r3, [r4, #12]
 800e914:	6832      	ldr	r2, [r6, #0]
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	42ab      	cmp	r3, r5
 800e91a:	dc26      	bgt.n	800e96a <_printf_common+0x96>
 800e91c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e920:	6822      	ldr	r2, [r4, #0]
 800e922:	3b00      	subs	r3, #0
 800e924:	bf18      	it	ne
 800e926:	2301      	movne	r3, #1
 800e928:	0692      	lsls	r2, r2, #26
 800e92a:	d42b      	bmi.n	800e984 <_printf_common+0xb0>
 800e92c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e930:	4641      	mov	r1, r8
 800e932:	4638      	mov	r0, r7
 800e934:	47c8      	blx	r9
 800e936:	3001      	adds	r0, #1
 800e938:	d01e      	beq.n	800e978 <_printf_common+0xa4>
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	6922      	ldr	r2, [r4, #16]
 800e93e:	f003 0306 	and.w	r3, r3, #6
 800e942:	2b04      	cmp	r3, #4
 800e944:	bf02      	ittt	eq
 800e946:	68e5      	ldreq	r5, [r4, #12]
 800e948:	6833      	ldreq	r3, [r6, #0]
 800e94a:	1aed      	subeq	r5, r5, r3
 800e94c:	68a3      	ldr	r3, [r4, #8]
 800e94e:	bf0c      	ite	eq
 800e950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e954:	2500      	movne	r5, #0
 800e956:	4293      	cmp	r3, r2
 800e958:	bfc4      	itt	gt
 800e95a:	1a9b      	subgt	r3, r3, r2
 800e95c:	18ed      	addgt	r5, r5, r3
 800e95e:	2600      	movs	r6, #0
 800e960:	341a      	adds	r4, #26
 800e962:	42b5      	cmp	r5, r6
 800e964:	d11a      	bne.n	800e99c <_printf_common+0xc8>
 800e966:	2000      	movs	r0, #0
 800e968:	e008      	b.n	800e97c <_printf_common+0xa8>
 800e96a:	2301      	movs	r3, #1
 800e96c:	4652      	mov	r2, sl
 800e96e:	4641      	mov	r1, r8
 800e970:	4638      	mov	r0, r7
 800e972:	47c8      	blx	r9
 800e974:	3001      	adds	r0, #1
 800e976:	d103      	bne.n	800e980 <_printf_common+0xac>
 800e978:	f04f 30ff 	mov.w	r0, #4294967295
 800e97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e980:	3501      	adds	r5, #1
 800e982:	e7c6      	b.n	800e912 <_printf_common+0x3e>
 800e984:	18e1      	adds	r1, r4, r3
 800e986:	1c5a      	adds	r2, r3, #1
 800e988:	2030      	movs	r0, #48	@ 0x30
 800e98a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e98e:	4422      	add	r2, r4
 800e990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e998:	3302      	adds	r3, #2
 800e99a:	e7c7      	b.n	800e92c <_printf_common+0x58>
 800e99c:	2301      	movs	r3, #1
 800e99e:	4622      	mov	r2, r4
 800e9a0:	4641      	mov	r1, r8
 800e9a2:	4638      	mov	r0, r7
 800e9a4:	47c8      	blx	r9
 800e9a6:	3001      	adds	r0, #1
 800e9a8:	d0e6      	beq.n	800e978 <_printf_common+0xa4>
 800e9aa:	3601      	adds	r6, #1
 800e9ac:	e7d9      	b.n	800e962 <_printf_common+0x8e>
	...

0800e9b0 <_printf_i>:
 800e9b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9b4:	7e0f      	ldrb	r7, [r1, #24]
 800e9b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e9b8:	2f78      	cmp	r7, #120	@ 0x78
 800e9ba:	4691      	mov	r9, r2
 800e9bc:	4680      	mov	r8, r0
 800e9be:	460c      	mov	r4, r1
 800e9c0:	469a      	mov	sl, r3
 800e9c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e9c6:	d807      	bhi.n	800e9d8 <_printf_i+0x28>
 800e9c8:	2f62      	cmp	r7, #98	@ 0x62
 800e9ca:	d80a      	bhi.n	800e9e2 <_printf_i+0x32>
 800e9cc:	2f00      	cmp	r7, #0
 800e9ce:	f000 80d2 	beq.w	800eb76 <_printf_i+0x1c6>
 800e9d2:	2f58      	cmp	r7, #88	@ 0x58
 800e9d4:	f000 80b9 	beq.w	800eb4a <_printf_i+0x19a>
 800e9d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e9e0:	e03a      	b.n	800ea58 <_printf_i+0xa8>
 800e9e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e9e6:	2b15      	cmp	r3, #21
 800e9e8:	d8f6      	bhi.n	800e9d8 <_printf_i+0x28>
 800e9ea:	a101      	add	r1, pc, #4	@ (adr r1, 800e9f0 <_printf_i+0x40>)
 800e9ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9f0:	0800ea49 	.word	0x0800ea49
 800e9f4:	0800ea5d 	.word	0x0800ea5d
 800e9f8:	0800e9d9 	.word	0x0800e9d9
 800e9fc:	0800e9d9 	.word	0x0800e9d9
 800ea00:	0800e9d9 	.word	0x0800e9d9
 800ea04:	0800e9d9 	.word	0x0800e9d9
 800ea08:	0800ea5d 	.word	0x0800ea5d
 800ea0c:	0800e9d9 	.word	0x0800e9d9
 800ea10:	0800e9d9 	.word	0x0800e9d9
 800ea14:	0800e9d9 	.word	0x0800e9d9
 800ea18:	0800e9d9 	.word	0x0800e9d9
 800ea1c:	0800eb5d 	.word	0x0800eb5d
 800ea20:	0800ea87 	.word	0x0800ea87
 800ea24:	0800eb17 	.word	0x0800eb17
 800ea28:	0800e9d9 	.word	0x0800e9d9
 800ea2c:	0800e9d9 	.word	0x0800e9d9
 800ea30:	0800eb7f 	.word	0x0800eb7f
 800ea34:	0800e9d9 	.word	0x0800e9d9
 800ea38:	0800ea87 	.word	0x0800ea87
 800ea3c:	0800e9d9 	.word	0x0800e9d9
 800ea40:	0800e9d9 	.word	0x0800e9d9
 800ea44:	0800eb1f 	.word	0x0800eb1f
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	1d1a      	adds	r2, r3, #4
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6032      	str	r2, [r6, #0]
 800ea50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ea54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e09d      	b.n	800eb98 <_printf_i+0x1e8>
 800ea5c:	6833      	ldr	r3, [r6, #0]
 800ea5e:	6820      	ldr	r0, [r4, #0]
 800ea60:	1d19      	adds	r1, r3, #4
 800ea62:	6031      	str	r1, [r6, #0]
 800ea64:	0606      	lsls	r6, r0, #24
 800ea66:	d501      	bpl.n	800ea6c <_printf_i+0xbc>
 800ea68:	681d      	ldr	r5, [r3, #0]
 800ea6a:	e003      	b.n	800ea74 <_printf_i+0xc4>
 800ea6c:	0645      	lsls	r5, r0, #25
 800ea6e:	d5fb      	bpl.n	800ea68 <_printf_i+0xb8>
 800ea70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	da03      	bge.n	800ea80 <_printf_i+0xd0>
 800ea78:	232d      	movs	r3, #45	@ 0x2d
 800ea7a:	426d      	negs	r5, r5
 800ea7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea80:	4859      	ldr	r0, [pc, #356]	@ (800ebe8 <_printf_i+0x238>)
 800ea82:	230a      	movs	r3, #10
 800ea84:	e011      	b.n	800eaaa <_printf_i+0xfa>
 800ea86:	6821      	ldr	r1, [r4, #0]
 800ea88:	6833      	ldr	r3, [r6, #0]
 800ea8a:	0608      	lsls	r0, r1, #24
 800ea8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea90:	d402      	bmi.n	800ea98 <_printf_i+0xe8>
 800ea92:	0649      	lsls	r1, r1, #25
 800ea94:	bf48      	it	mi
 800ea96:	b2ad      	uxthmi	r5, r5
 800ea98:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea9a:	4853      	ldr	r0, [pc, #332]	@ (800ebe8 <_printf_i+0x238>)
 800ea9c:	6033      	str	r3, [r6, #0]
 800ea9e:	bf14      	ite	ne
 800eaa0:	230a      	movne	r3, #10
 800eaa2:	2308      	moveq	r3, #8
 800eaa4:	2100      	movs	r1, #0
 800eaa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eaaa:	6866      	ldr	r6, [r4, #4]
 800eaac:	60a6      	str	r6, [r4, #8]
 800eaae:	2e00      	cmp	r6, #0
 800eab0:	bfa2      	ittt	ge
 800eab2:	6821      	ldrge	r1, [r4, #0]
 800eab4:	f021 0104 	bicge.w	r1, r1, #4
 800eab8:	6021      	strge	r1, [r4, #0]
 800eaba:	b90d      	cbnz	r5, 800eac0 <_printf_i+0x110>
 800eabc:	2e00      	cmp	r6, #0
 800eabe:	d04b      	beq.n	800eb58 <_printf_i+0x1a8>
 800eac0:	4616      	mov	r6, r2
 800eac2:	fbb5 f1f3 	udiv	r1, r5, r3
 800eac6:	fb03 5711 	mls	r7, r3, r1, r5
 800eaca:	5dc7      	ldrb	r7, [r0, r7]
 800eacc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ead0:	462f      	mov	r7, r5
 800ead2:	42bb      	cmp	r3, r7
 800ead4:	460d      	mov	r5, r1
 800ead6:	d9f4      	bls.n	800eac2 <_printf_i+0x112>
 800ead8:	2b08      	cmp	r3, #8
 800eada:	d10b      	bne.n	800eaf4 <_printf_i+0x144>
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	07df      	lsls	r7, r3, #31
 800eae0:	d508      	bpl.n	800eaf4 <_printf_i+0x144>
 800eae2:	6923      	ldr	r3, [r4, #16]
 800eae4:	6861      	ldr	r1, [r4, #4]
 800eae6:	4299      	cmp	r1, r3
 800eae8:	bfde      	ittt	le
 800eaea:	2330      	movle	r3, #48	@ 0x30
 800eaec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eaf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eaf4:	1b92      	subs	r2, r2, r6
 800eaf6:	6122      	str	r2, [r4, #16]
 800eaf8:	f8cd a000 	str.w	sl, [sp]
 800eafc:	464b      	mov	r3, r9
 800eafe:	aa03      	add	r2, sp, #12
 800eb00:	4621      	mov	r1, r4
 800eb02:	4640      	mov	r0, r8
 800eb04:	f7ff fee6 	bl	800e8d4 <_printf_common>
 800eb08:	3001      	adds	r0, #1
 800eb0a:	d14a      	bne.n	800eba2 <_printf_i+0x1f2>
 800eb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb10:	b004      	add	sp, #16
 800eb12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb16:	6823      	ldr	r3, [r4, #0]
 800eb18:	f043 0320 	orr.w	r3, r3, #32
 800eb1c:	6023      	str	r3, [r4, #0]
 800eb1e:	4833      	ldr	r0, [pc, #204]	@ (800ebec <_printf_i+0x23c>)
 800eb20:	2778      	movs	r7, #120	@ 0x78
 800eb22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eb26:	6823      	ldr	r3, [r4, #0]
 800eb28:	6831      	ldr	r1, [r6, #0]
 800eb2a:	061f      	lsls	r7, r3, #24
 800eb2c:	f851 5b04 	ldr.w	r5, [r1], #4
 800eb30:	d402      	bmi.n	800eb38 <_printf_i+0x188>
 800eb32:	065f      	lsls	r7, r3, #25
 800eb34:	bf48      	it	mi
 800eb36:	b2ad      	uxthmi	r5, r5
 800eb38:	6031      	str	r1, [r6, #0]
 800eb3a:	07d9      	lsls	r1, r3, #31
 800eb3c:	bf44      	itt	mi
 800eb3e:	f043 0320 	orrmi.w	r3, r3, #32
 800eb42:	6023      	strmi	r3, [r4, #0]
 800eb44:	b11d      	cbz	r5, 800eb4e <_printf_i+0x19e>
 800eb46:	2310      	movs	r3, #16
 800eb48:	e7ac      	b.n	800eaa4 <_printf_i+0xf4>
 800eb4a:	4827      	ldr	r0, [pc, #156]	@ (800ebe8 <_printf_i+0x238>)
 800eb4c:	e7e9      	b.n	800eb22 <_printf_i+0x172>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	f023 0320 	bic.w	r3, r3, #32
 800eb54:	6023      	str	r3, [r4, #0]
 800eb56:	e7f6      	b.n	800eb46 <_printf_i+0x196>
 800eb58:	4616      	mov	r6, r2
 800eb5a:	e7bd      	b.n	800ead8 <_printf_i+0x128>
 800eb5c:	6833      	ldr	r3, [r6, #0]
 800eb5e:	6825      	ldr	r5, [r4, #0]
 800eb60:	6961      	ldr	r1, [r4, #20]
 800eb62:	1d18      	adds	r0, r3, #4
 800eb64:	6030      	str	r0, [r6, #0]
 800eb66:	062e      	lsls	r6, r5, #24
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	d501      	bpl.n	800eb70 <_printf_i+0x1c0>
 800eb6c:	6019      	str	r1, [r3, #0]
 800eb6e:	e002      	b.n	800eb76 <_printf_i+0x1c6>
 800eb70:	0668      	lsls	r0, r5, #25
 800eb72:	d5fb      	bpl.n	800eb6c <_printf_i+0x1bc>
 800eb74:	8019      	strh	r1, [r3, #0]
 800eb76:	2300      	movs	r3, #0
 800eb78:	6123      	str	r3, [r4, #16]
 800eb7a:	4616      	mov	r6, r2
 800eb7c:	e7bc      	b.n	800eaf8 <_printf_i+0x148>
 800eb7e:	6833      	ldr	r3, [r6, #0]
 800eb80:	1d1a      	adds	r2, r3, #4
 800eb82:	6032      	str	r2, [r6, #0]
 800eb84:	681e      	ldr	r6, [r3, #0]
 800eb86:	6862      	ldr	r2, [r4, #4]
 800eb88:	2100      	movs	r1, #0
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	f7f1 fb30 	bl	80001f0 <memchr>
 800eb90:	b108      	cbz	r0, 800eb96 <_printf_i+0x1e6>
 800eb92:	1b80      	subs	r0, r0, r6
 800eb94:	6060      	str	r0, [r4, #4]
 800eb96:	6863      	ldr	r3, [r4, #4]
 800eb98:	6123      	str	r3, [r4, #16]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eba0:	e7aa      	b.n	800eaf8 <_printf_i+0x148>
 800eba2:	6923      	ldr	r3, [r4, #16]
 800eba4:	4632      	mov	r2, r6
 800eba6:	4649      	mov	r1, r9
 800eba8:	4640      	mov	r0, r8
 800ebaa:	47d0      	blx	sl
 800ebac:	3001      	adds	r0, #1
 800ebae:	d0ad      	beq.n	800eb0c <_printf_i+0x15c>
 800ebb0:	6823      	ldr	r3, [r4, #0]
 800ebb2:	079b      	lsls	r3, r3, #30
 800ebb4:	d413      	bmi.n	800ebde <_printf_i+0x22e>
 800ebb6:	68e0      	ldr	r0, [r4, #12]
 800ebb8:	9b03      	ldr	r3, [sp, #12]
 800ebba:	4298      	cmp	r0, r3
 800ebbc:	bfb8      	it	lt
 800ebbe:	4618      	movlt	r0, r3
 800ebc0:	e7a6      	b.n	800eb10 <_printf_i+0x160>
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	4632      	mov	r2, r6
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	4640      	mov	r0, r8
 800ebca:	47d0      	blx	sl
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d09d      	beq.n	800eb0c <_printf_i+0x15c>
 800ebd0:	3501      	adds	r5, #1
 800ebd2:	68e3      	ldr	r3, [r4, #12]
 800ebd4:	9903      	ldr	r1, [sp, #12]
 800ebd6:	1a5b      	subs	r3, r3, r1
 800ebd8:	42ab      	cmp	r3, r5
 800ebda:	dcf2      	bgt.n	800ebc2 <_printf_i+0x212>
 800ebdc:	e7eb      	b.n	800ebb6 <_printf_i+0x206>
 800ebde:	2500      	movs	r5, #0
 800ebe0:	f104 0619 	add.w	r6, r4, #25
 800ebe4:	e7f5      	b.n	800ebd2 <_printf_i+0x222>
 800ebe6:	bf00      	nop
 800ebe8:	08010875 	.word	0x08010875
 800ebec:	08010886 	.word	0x08010886

0800ebf0 <memmove>:
 800ebf0:	4288      	cmp	r0, r1
 800ebf2:	b510      	push	{r4, lr}
 800ebf4:	eb01 0402 	add.w	r4, r1, r2
 800ebf8:	d902      	bls.n	800ec00 <memmove+0x10>
 800ebfa:	4284      	cmp	r4, r0
 800ebfc:	4623      	mov	r3, r4
 800ebfe:	d807      	bhi.n	800ec10 <memmove+0x20>
 800ec00:	1e43      	subs	r3, r0, #1
 800ec02:	42a1      	cmp	r1, r4
 800ec04:	d008      	beq.n	800ec18 <memmove+0x28>
 800ec06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec0e:	e7f8      	b.n	800ec02 <memmove+0x12>
 800ec10:	4402      	add	r2, r0
 800ec12:	4601      	mov	r1, r0
 800ec14:	428a      	cmp	r2, r1
 800ec16:	d100      	bne.n	800ec1a <memmove+0x2a>
 800ec18:	bd10      	pop	{r4, pc}
 800ec1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec22:	e7f7      	b.n	800ec14 <memmove+0x24>

0800ec24 <_sbrk_r>:
 800ec24:	b538      	push	{r3, r4, r5, lr}
 800ec26:	4d06      	ldr	r5, [pc, #24]	@ (800ec40 <_sbrk_r+0x1c>)
 800ec28:	2300      	movs	r3, #0
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	4608      	mov	r0, r1
 800ec2e:	602b      	str	r3, [r5, #0]
 800ec30:	f7f2 fb1c 	bl	800126c <_sbrk>
 800ec34:	1c43      	adds	r3, r0, #1
 800ec36:	d102      	bne.n	800ec3e <_sbrk_r+0x1a>
 800ec38:	682b      	ldr	r3, [r5, #0]
 800ec3a:	b103      	cbz	r3, 800ec3e <_sbrk_r+0x1a>
 800ec3c:	6023      	str	r3, [r4, #0]
 800ec3e:	bd38      	pop	{r3, r4, r5, pc}
 800ec40:	20006b44 	.word	0x20006b44

0800ec44 <_realloc_r>:
 800ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec48:	4680      	mov	r8, r0
 800ec4a:	4615      	mov	r5, r2
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	b921      	cbnz	r1, 800ec5a <_realloc_r+0x16>
 800ec50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec54:	4611      	mov	r1, r2
 800ec56:	f7ff bc59 	b.w	800e50c <_malloc_r>
 800ec5a:	b92a      	cbnz	r2, 800ec68 <_realloc_r+0x24>
 800ec5c:	f7ff fbea 	bl	800e434 <_free_r>
 800ec60:	2400      	movs	r4, #0
 800ec62:	4620      	mov	r0, r4
 800ec64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec68:	f000 f81a 	bl	800eca0 <_malloc_usable_size_r>
 800ec6c:	4285      	cmp	r5, r0
 800ec6e:	4606      	mov	r6, r0
 800ec70:	d802      	bhi.n	800ec78 <_realloc_r+0x34>
 800ec72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ec76:	d8f4      	bhi.n	800ec62 <_realloc_r+0x1e>
 800ec78:	4629      	mov	r1, r5
 800ec7a:	4640      	mov	r0, r8
 800ec7c:	f7ff fc46 	bl	800e50c <_malloc_r>
 800ec80:	4607      	mov	r7, r0
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0ec      	beq.n	800ec60 <_realloc_r+0x1c>
 800ec86:	42b5      	cmp	r5, r6
 800ec88:	462a      	mov	r2, r5
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	bf28      	it	cs
 800ec8e:	4632      	movcs	r2, r6
 800ec90:	f7ff fbc2 	bl	800e418 <memcpy>
 800ec94:	4621      	mov	r1, r4
 800ec96:	4640      	mov	r0, r8
 800ec98:	f7ff fbcc 	bl	800e434 <_free_r>
 800ec9c:	463c      	mov	r4, r7
 800ec9e:	e7e0      	b.n	800ec62 <_realloc_r+0x1e>

0800eca0 <_malloc_usable_size_r>:
 800eca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eca4:	1f18      	subs	r0, r3, #4
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	bfbc      	itt	lt
 800ecaa:	580b      	ldrlt	r3, [r1, r0]
 800ecac:	18c0      	addlt	r0, r0, r3
 800ecae:	4770      	bx	lr

0800ecb0 <_init>:
 800ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb2:	bf00      	nop
 800ecb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecb6:	bc08      	pop	{r3}
 800ecb8:	469e      	mov	lr, r3
 800ecba:	4770      	bx	lr

0800ecbc <_fini>:
 800ecbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbe:	bf00      	nop
 800ecc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecc2:	bc08      	pop	{r3}
 800ecc4:	469e      	mov	lr, r3
 800ecc6:	4770      	bx	lr
