
mini_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ac4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f88  08011c78  08011c78  00012c78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c00  08013c00  00015354  2**0
                  CONTENTS
  4 .ARM          00000008  08013c00  08013c00  00014c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c08  08013c08  00015354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c08  08013c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013c0c  08013c0c  00014c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000354  20000000  08013c10  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00015354  2**0
                  CONTENTS
 10 .bss          0000695c  20000354  20000354  00015354  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20006cb0  20006cb0  00015354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00015354  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029052  00000000  00000000  00015384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006604  00000000  00000000  0003e3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002530  00000000  00000000  000449e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001c72  00000000  00000000  00046f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a014  00000000  00000000  00048b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c42d  00000000  00000000  00052b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f751c  00000000  00000000  0007efc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001764df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ad30  00000000  00000000  00176524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00181254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000354 	.word	0x20000354
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011c5c 	.word	0x08011c5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000358 	.word	0x20000358
 80001ec:	08011c5c 	.word	0x08011c5c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b96a 	b.w	8000f54 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d14e      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	458c      	cmp	ip, r1
 8000ca8:	4686      	mov	lr, r0
 8000caa:	fab2 f282 	clz	r2, r2
 8000cae:	d962      	bls.n	8000d76 <__udivmoddi4+0xde>
 8000cb0:	b14a      	cbz	r2, 8000cc6 <__udivmoddi4+0x2e>
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f f68c 	uxth.w	r6, ip
 8000cce:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cde:	fb04 f106 	mul.w	r1, r4, r6
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cee:	f080 8112 	bcs.w	8000f16 <__udivmoddi4+0x27e>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 810f 	bls.w	8000f16 <__udivmoddi4+0x27e>
 8000cf8:	3c02      	subs	r4, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	fa1f f38e 	uxth.w	r3, lr
 8000d02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d06:	fb07 1110 	mls	r1, r7, r0, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f606 	mul.w	r6, r0, r6
 8000d12:	429e      	cmp	r6, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x94>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1e:	f080 80fc 	bcs.w	8000f1a <__udivmoddi4+0x282>
 8000d22:	429e      	cmp	r6, r3
 8000d24:	f240 80f9 	bls.w	8000f1a <__udivmoddi4+0x282>
 8000d28:	4463      	add	r3, ip
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d32:	2100      	movs	r1, #0
 8000d34:	b11d      	cbz	r5, 8000d3e <__udivmoddi4+0xa6>
 8000d36:	40d3      	lsrs	r3, r2
 8000d38:	2200      	movs	r2, #0
 8000d3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d905      	bls.n	8000d52 <__udivmoddi4+0xba>
 8000d46:	b10d      	cbz	r5, 8000d4c <__udivmoddi4+0xb4>
 8000d48:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e7f5      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d52:	fab3 f183 	clz	r1, r3
 8000d56:	2900      	cmp	r1, #0
 8000d58:	d146      	bne.n	8000de8 <__udivmoddi4+0x150>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d302      	bcc.n	8000d64 <__udivmoddi4+0xcc>
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	f0c0 80f0 	bcc.w	8000f44 <__udivmoddi4+0x2ac>
 8000d64:	1a86      	subs	r6, r0, r2
 8000d66:	eb64 0303 	sbc.w	r3, r4, r3
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	d0e6      	beq.n	8000d3e <__udivmoddi4+0xa6>
 8000d70:	e9c5 6300 	strd	r6, r3, [r5]
 8000d74:	e7e3      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000d76:	2a00      	cmp	r2, #0
 8000d78:	f040 8090 	bne.w	8000e9c <__udivmoddi4+0x204>
 8000d7c:	eba1 040c 	sub.w	r4, r1, ip
 8000d80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d84:	fa1f f78c 	uxth.w	r7, ip
 8000d88:	2101      	movs	r1, #1
 8000d8a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb08 4416 	mls	r4, r8, r6, r4
 8000d96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d9a:	fb07 f006 	mul.w	r0, r7, r6
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x11c>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x11a>
 8000dac:	4298      	cmp	r0, r3
 8000dae:	f200 80cd 	bhi.w	8000f4c <__udivmoddi4+0x2b4>
 8000db2:	4626      	mov	r6, r4
 8000db4:	1a1c      	subs	r4, r3, r0
 8000db6:	fa1f f38e 	uxth.w	r3, lr
 8000dba:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dbe:	fb08 4410 	mls	r4, r8, r0, r4
 8000dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dc6:	fb00 f707 	mul.w	r7, r0, r7
 8000dca:	429f      	cmp	r7, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x148>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x146>
 8000dd8:	429f      	cmp	r7, r3
 8000dda:	f200 80b0 	bhi.w	8000f3e <__udivmoddi4+0x2a6>
 8000dde:	4620      	mov	r0, r4
 8000de0:	1bdb      	subs	r3, r3, r7
 8000de2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000de6:	e7a5      	b.n	8000d34 <__udivmoddi4+0x9c>
 8000de8:	f1c1 0620 	rsb	r6, r1, #32
 8000dec:	408b      	lsls	r3, r1
 8000dee:	fa22 f706 	lsr.w	r7, r2, r6
 8000df2:	431f      	orrs	r7, r3
 8000df4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000df8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dfc:	ea43 030c 	orr.w	r3, r3, ip
 8000e00:	40f4      	lsrs	r4, r6
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	0c38      	lsrs	r0, r7, #16
 8000e08:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e0c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e10:	fa1f fc87 	uxth.w	ip, r7
 8000e14:	fb00 441e 	mls	r4, r0, lr, r4
 8000e18:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e1c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e20:	45a1      	cmp	r9, r4
 8000e22:	fa02 f201 	lsl.w	r2, r2, r1
 8000e26:	d90a      	bls.n	8000e3e <__udivmoddi4+0x1a6>
 8000e28:	193c      	adds	r4, r7, r4
 8000e2a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e2e:	f080 8084 	bcs.w	8000f3a <__udivmoddi4+0x2a2>
 8000e32:	45a1      	cmp	r9, r4
 8000e34:	f240 8081 	bls.w	8000f3a <__udivmoddi4+0x2a2>
 8000e38:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e3c:	443c      	add	r4, r7
 8000e3e:	eba4 0409 	sub.w	r4, r4, r9
 8000e42:	fa1f f983 	uxth.w	r9, r3
 8000e46:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e4a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e4e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e52:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e56:	45a4      	cmp	ip, r4
 8000e58:	d907      	bls.n	8000e6a <__udivmoddi4+0x1d2>
 8000e5a:	193c      	adds	r4, r7, r4
 8000e5c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e60:	d267      	bcs.n	8000f32 <__udivmoddi4+0x29a>
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d965      	bls.n	8000f32 <__udivmoddi4+0x29a>
 8000e66:	3b02      	subs	r3, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e6e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e72:	eba4 040c 	sub.w	r4, r4, ip
 8000e76:	429c      	cmp	r4, r3
 8000e78:	46ce      	mov	lr, r9
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	d351      	bcc.n	8000f22 <__udivmoddi4+0x28a>
 8000e7e:	d04e      	beq.n	8000f1e <__udivmoddi4+0x286>
 8000e80:	b155      	cbz	r5, 8000e98 <__udivmoddi4+0x200>
 8000e82:	ebb8 030e 	subs.w	r3, r8, lr
 8000e86:	eb64 040c 	sbc.w	r4, r4, ip
 8000e8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8e:	40cb      	lsrs	r3, r1
 8000e90:	431e      	orrs	r6, r3
 8000e92:	40cc      	lsrs	r4, r1
 8000e94:	e9c5 6400 	strd	r6, r4, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	e750      	b.n	8000d3e <__udivmoddi4+0xa6>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea8:	fa24 f303 	lsr.w	r3, r4, r3
 8000eac:	4094      	lsls	r4, r2
 8000eae:	430c      	orrs	r4, r1
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ec4:	0c23      	lsrs	r3, r4, #16
 8000ec6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eca:	fb00 f107 	mul.w	r1, r0, r7
 8000ece:	4299      	cmp	r1, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x24c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eda:	d22c      	bcs.n	8000f36 <__udivmoddi4+0x29e>
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d92a      	bls.n	8000f36 <__udivmoddi4+0x29e>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	1a5b      	subs	r3, r3, r1
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000eec:	fb08 3311 	mls	r3, r8, r1, r3
 8000ef0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ef4:	fb01 f307 	mul.w	r3, r1, r7
 8000ef8:	42a3      	cmp	r3, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x276>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f04:	d213      	bcs.n	8000f2e <__udivmoddi4+0x296>
 8000f06:	42a3      	cmp	r3, r4
 8000f08:	d911      	bls.n	8000f2e <__udivmoddi4+0x296>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	1ae4      	subs	r4, r4, r3
 8000f10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f14:	e739      	b.n	8000d8a <__udivmoddi4+0xf2>
 8000f16:	4604      	mov	r4, r0
 8000f18:	e6f0      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	e706      	b.n	8000d2c <__udivmoddi4+0x94>
 8000f1e:	45c8      	cmp	r8, r9
 8000f20:	d2ae      	bcs.n	8000e80 <__udivmoddi4+0x1e8>
 8000f22:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f26:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f2a:	3801      	subs	r0, #1
 8000f2c:	e7a8      	b.n	8000e80 <__udivmoddi4+0x1e8>
 8000f2e:	4631      	mov	r1, r6
 8000f30:	e7ed      	b.n	8000f0e <__udivmoddi4+0x276>
 8000f32:	4603      	mov	r3, r0
 8000f34:	e799      	b.n	8000e6a <__udivmoddi4+0x1d2>
 8000f36:	4630      	mov	r0, r6
 8000f38:	e7d4      	b.n	8000ee4 <__udivmoddi4+0x24c>
 8000f3a:	46d6      	mov	lr, sl
 8000f3c:	e77f      	b.n	8000e3e <__udivmoddi4+0x1a6>
 8000f3e:	4463      	add	r3, ip
 8000f40:	3802      	subs	r0, #2
 8000f42:	e74d      	b.n	8000de0 <__udivmoddi4+0x148>
 8000f44:	4606      	mov	r6, r0
 8000f46:	4623      	mov	r3, r4
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e70f      	b.n	8000d6c <__udivmoddi4+0xd4>
 8000f4c:	3e02      	subs	r6, #2
 8000f4e:	4463      	add	r3, ip
 8000f50:	e730      	b.n	8000db4 <__udivmoddi4+0x11c>
 8000f52:	bf00      	nop

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f002 fcc4 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f866 	bl	8001030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f8ce 	bl	8001104 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000f68:	f001 fb5c 	bl	8002624 <BSP_GYRO_Init>
  BSP_LCD_Init();
 8000f6c:	f001 fbd4 	bl	8002718 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000f70:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 fc51 	bl	800281c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f001 fcb2 	bl	80028e4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8000f80:	f002 f8ea 	bl	8003158 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8000f84:	481c      	ldr	r0, [pc, #112]	@ (8000ff8 <main+0xa0>)
 8000f86:	f001 fd1f 	bl	80029c8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000f8a:	481b      	ldr	r0, [pc, #108]	@ (8000ff8 <main+0xa0>)
 8000f8c:	f001 fcd2 	bl	8002934 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f001 fcb6 	bl	8002904 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"Score: 0");
 8000f98:	4918      	ldr	r1, [pc, #96]	@ (8000ffc <main+0xa4>)
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f001 fea2 	bl	8002ce4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_FillCircle(125, 160, 30);
 8000fa0:	221e      	movs	r2, #30
 8000fa2:	21a0      	movs	r1, #160	@ 0xa0
 8000fa4:	207d      	movs	r0, #125	@ 0x7d
 8000fa6:	f002 f837 	bl	8003018 <BSP_LCD_FillCircle>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000faa:	f00a fd71 	bl	800ba90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ReadAndProcess */
  ReadAndProcessHandle = osThreadNew(ReadAndProcess_Handle, NULL, &ReadAndProcess_attributes);
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <main+0xa8>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4814      	ldr	r0, [pc, #80]	@ (8001004 <main+0xac>)
 8000fb4:	f00a fdb6 	bl	800bb24 <osThreadNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <main+0xb0>)
 8000fbc:	6013      	str	r3, [r2, #0]

  /* creation of Output */
  OutputHandle = osThreadNew(Output_handle, NULL, &Output_attributes);
 8000fbe:	4a13      	ldr	r2, [pc, #76]	@ (800100c <main+0xb4>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4813      	ldr	r0, [pc, #76]	@ (8001010 <main+0xb8>)
 8000fc4:	f00a fdae 	bl	800bb24 <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <main+0xbc>)
 8000fcc:	6013      	str	r3, [r2, #0]

  /* creation of ZPID */
  ZPIDHandle = osThreadNew(ZPID_handle, NULL, &ZPID_attributes);
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <main+0xc0>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4812      	ldr	r0, [pc, #72]	@ (800101c <main+0xc4>)
 8000fd4:	f00a fda6 	bl	800bb24 <osThreadNew>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <main+0xc8>)
 8000fdc:	6013      	str	r3, [r2, #0]

  /* creation of XPID */
  XPIDHandle = osThreadNew(XPID_handle, NULL, &XPID_attributes);
 8000fde:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <main+0xcc>)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4811      	ldr	r0, [pc, #68]	@ (8001028 <main+0xd0>)
 8000fe4:	f00a fd9e 	bl	800bb24 <osThreadNew>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a10      	ldr	r2, [pc, #64]	@ (800102c <main+0xd4>)
 8000fec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fee:	f00a fd73 	bl	800bad8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff2:	bf00      	nop
 8000ff4:	e7fd      	b.n	8000ff2 <main+0x9a>
 8000ff6:	bf00      	nop
 8000ff8:	ff0000ff 	.word	0xff0000ff
 8000ffc:	08011ca0 	.word	0x08011ca0
 8001000:	08011d28 	.word	0x08011d28
 8001004:	080011c9 	.word	0x080011c9
 8001008:	20000370 	.word	0x20000370
 800100c:	08011d4c 	.word	0x08011d4c
 8001010:	08001315 	.word	0x08001315
 8001014:	20000374 	.word	0x20000374
 8001018:	08011d70 	.word	0x08011d70
 800101c:	08001415 	.word	0x08001415
 8001020:	20000378 	.word	0x20000378
 8001024:	08011d94 	.word	0x08011d94
 8001028:	080014f5 	.word	0x080014f5
 800102c:	2000037c 	.word	0x2000037c

08001030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b094      	sub	sp, #80	@ 0x50
 8001034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001036:	f107 0320 	add.w	r3, r7, #32
 800103a:	2230      	movs	r2, #48	@ 0x30
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f00e fd43 	bl	800faca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <SystemClock_Config+0xcc>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105c:	4a27      	ldr	r2, [pc, #156]	@ (80010fc <SystemClock_Config+0xcc>)
 800105e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001062:	6413      	str	r3, [r2, #64]	@ 0x40
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	4b22      	ldr	r3, [pc, #136]	@ (8001100 <SystemClock_Config+0xd0>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <SystemClock_Config+0xd0>)
 800107a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b1f      	ldr	r3, [pc, #124]	@ (8001100 <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001090:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010a0:	2308      	movs	r3, #8
 80010a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0320 	add.w	r3, r7, #32
 80010b6:	4618      	mov	r0, r3
 80010b8:	f005 f8a4 	bl	8006204 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010c2:	f000 faab 	bl	800161c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2302      	movs	r3, #2
 80010cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2105      	movs	r1, #5
 80010e4:	4618      	mov	r0, r3
 80010e6:	f005 fb05 	bl	80066f4 <HAL_RCC_ClockConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010f0:	f000 fa94 	bl	800161c <Error_Handler>
  }
}
 80010f4:	bf00      	nop
 80010f6:	3750      	adds	r7, #80	@ 0x50
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b27      	ldr	r3, [pc, #156]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a26      	ldr	r2, [pc, #152]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <MX_GPIO_Init+0xb8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <MX_GPIO_Init+0xb8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001140:	f043 0302 	orr.w	r3, r3, #2
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0302 	and.w	r3, r3, #2
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a18      	ldr	r2, [pc, #96]	@ (80011bc <MX_GPIO_Init+0xb8>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a11      	ldr	r2, [pc, #68]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <MX_GPIO_Init+0xb8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001190:	480b      	ldr	r0, [pc, #44]	@ (80011c0 <MX_GPIO_Init+0xbc>)
 8001192:	f003 faf1 	bl	8004778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_4_Pin;
 8001196:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800119a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_GPIO_Init+0xbc>)
 80011b0:	f003 f936 	bl	8004420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	@ 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40021800 	.word	0x40021800
 80011c4:	00000000 	.word	0x00000000

080011c8 <ReadAndProcess_Handle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadAndProcess_Handle */
void ReadAndProcess_Handle(void *argument)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80011d0:	f00d f9e2 	bl	800e598 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  float pfData[3];
  /* Infinite loop */
  for(;;)
  {
	if(end)
 80011d4:	4b48      	ldr	r3, [pc, #288]	@ (80012f8 <ReadAndProcess_Handle+0x130>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f040 8084 	bne.w	80012e6 <ReadAndProcess_Handle+0x11e>
	{
		break;
	}
	BSP_GYRO_GetXYZ(pfData);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 fa84 	bl	80026f0 <BSP_GYRO_GetXYZ>
	pfData[1] = pfData[1] * 17.5 * 0.001;
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9bc 	bl	8000568 <__aeabi_f2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <ReadAndProcess_Handle+0x134>)
 80011f6:	f7ff fa0f 	bl	8000618 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	a33b      	add	r3, pc, #236	@ (adr r3, 80012f0 <ReadAndProcess_Handle+0x128>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fa06 	bl	8000618 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcd8 	bl	8000bc8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	613b      	str	r3, [r7, #16]
	pfData[2] = pfData[2] * 17.5 * 0.001;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f9a2 	bl	8000568 <__aeabi_f2d>
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b34      	ldr	r3, [pc, #208]	@ (80012fc <ReadAndProcess_Handle+0x134>)
 800122a:	f7ff f9f5 	bl	8000618 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a32e      	add	r3, pc, #184	@ (adr r3, 80012f0 <ReadAndProcess_Handle+0x128>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9ec 	bl	8000618 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	f7ff fcbe 	bl	8000bc8 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	617b      	str	r3, [r7, #20]
	if(target_height == 30 && current_height <= -(int)pfData[2])
 8001250:	4b2b      	ldr	r3, [pc, #172]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b1e      	cmp	r3, #30
 8001256:	d139      	bne.n	80012cc <ReadAndProcess_Handle+0x104>
 8001258:	edd7 7a05 	vldr	s15, [r7, #20]
 800125c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001260:	ee17 3a90 	vmov	r3, s15
 8001264:	425a      	negs	r2, r3
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <ReadAndProcess_Handle+0x13c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	429a      	cmp	r2, r3
 800126c:	db2e      	blt.n	80012cc <ReadAndProcess_Handle+0x104>
	{
		target_height*=1.5;
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f966 	bl	8000544 <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <ReadAndProcess_Handle+0x140>)
 800127e:	f7ff f9cb 	bl	8000618 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fc75 	bl	8000b78 <__aeabi_d2iz>
 800128e:	4603      	mov	r3, r0
 8001290:	4a1b      	ldr	r2, [pc, #108]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 8001292:	6013      	str	r3, [r2, #0]
		target_width+=pfData[1];
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <ReadAndProcess_Handle+0x144>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	ee07 3a90 	vmov	s15, r3
 800129c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ac:	ee17 2a90 	vmov	r2, s15
 80012b0:	4b16      	ldr	r3, [pc, #88]	@ (800130c <ReadAndProcess_Handle+0x144>)
 80012b2:	601a      	str	r2, [r3, #0]
		if(target_height > 100)
 80012b4:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b64      	cmp	r3, #100	@ 0x64
 80012ba:	dd02      	ble.n	80012c2 <ReadAndProcess_Handle+0xfa>
		{
			target_height = 100;
 80012bc:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 80012be:	2264      	movs	r2, #100	@ 0x64
 80012c0:	601a      	str	r2, [r3, #0]
		}
		score+=1;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <ReadAndProcess_Handle+0x148>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <ReadAndProcess_Handle+0x148>)
 80012ca:	6013      	str	r3, [r2, #0]
	}
	if(current_height >= target_height)
 80012cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <ReadAndProcess_Handle+0x13c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	db02      	blt.n	80012de <ReadAndProcess_Handle+0x116>
	{
		target_height = 30;
 80012d8:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <ReadAndProcess_Handle+0x138>)
 80012da:	221e      	movs	r2, #30
 80012dc:	601a      	str	r2, [r3, #0]
	}
    osDelay(100);
 80012de:	2064      	movs	r0, #100	@ 0x64
 80012e0:	f00a fcb2 	bl	800bc48 <osDelay>
	if(end)
 80012e4:	e776      	b.n	80011d4 <ReadAndProcess_Handle+0xc>
		break;
 80012e6:	bf00      	nop
  }
  /* USER CODE END 5 */
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80012f4:	3f50624d 	.word	0x3f50624d
 80012f8:	20000384 	.word	0x20000384
 80012fc:	40318000 	.word	0x40318000
 8001300:	20000000 	.word	0x20000000
 8001304:	20000004 	.word	0x20000004
 8001308:	3ff80000 	.word	0x3ff80000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000380 	.word	0x20000380

08001314 <Output_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Output_handle */
void Output_handle(void *argument)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Output_handle */
  char data[20];
  int old_score = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Infinite loop */
  for(;;)
  {
	if(end)
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <Output_handle+0xdc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <Output_handle+0x3c>
	{
		BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001328:	4832      	ldr	r0, [pc, #200]	@ (80013f4 <Output_handle+0xe0>)
 800132a:	f001 fb4d 	bl	80029c8 <BSP_LCD_Clear>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*)"GAMEOVER");
 800132e:	4932      	ldr	r1, [pc, #200]	@ (80013f8 <Output_handle+0xe4>)
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fcd7 	bl	8002ce4 <BSP_LCD_DisplayStringAtLine>
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800133c:	482f      	ldr	r0, [pc, #188]	@ (80013fc <Output_handle+0xe8>)
 800133e:	f003 fa1b 	bl	8004778 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, 1);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001348:	482c      	ldr	r0, [pc, #176]	@ (80013fc <Output_handle+0xe8>)
 800134a:	f003 fa15 	bl	8004778 <HAL_GPIO_WritePin>
		break;
 800134e:	e04b      	b.n	80013e8 <Output_handle+0xd4>
	}
	if(score != old_score)
 8001350:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <Output_handle+0xec>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001356:	429a      	cmp	r2, r3
 8001358:	d009      	beq.n	800136e <Output_handle+0x5a>
	{
		old_score = score;
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <Output_handle+0xec>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 1);
 8001360:	2201      	movs	r2, #1
 8001362:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001366:	4825      	ldr	r0, [pc, #148]	@ (80013fc <Output_handle+0xe8>)
 8001368:	f003 fa06 	bl	8004778 <HAL_GPIO_WritePin>
 800136c:	e005      	b.n	800137a <Output_handle+0x66>
	}
	else
	{
		HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001374:	4821      	ldr	r0, [pc, #132]	@ (80013fc <Output_handle+0xe8>)
 8001376:	f003 f9ff 	bl	8004778 <HAL_GPIO_WritePin>
	}
	sprintf(data, "Score: %d", score);
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <Output_handle+0xec>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4920      	ldr	r1, [pc, #128]	@ (8001404 <Output_handle+0xf0>)
 8001384:	4618      	mov	r0, r3
 8001386:	f00e fb3d 	bl	800fa04 <siprintf>
	BSP_LCD_DisplayStringAtLine(1, (uint8_t*)data);
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4619      	mov	r1, r3
 8001390:	2001      	movs	r0, #1
 8001392:	f001 fca7 	bl	8002ce4 <BSP_LCD_DisplayStringAtLine>
	sprintf(data, "%d\n", current_height);
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <Output_handle+0xf4>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	491b      	ldr	r1, [pc, #108]	@ (800140c <Output_handle+0xf8>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f00e fb2f 	bl	800fa04 <siprintf>
	CDC_Transmit_HS((uint8_t*)data, 20);
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2114      	movs	r1, #20
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00d f9b1 	bl	800e714 <CDC_Transmit_HS>
	for(int i = 2; i <= 11; i++)
 80013b2:	2302      	movs	r3, #2
 80013b4:	623b      	str	r3, [r7, #32]
 80013b6:	e006      	b.n	80013c6 <Output_handle+0xb2>
	{
		BSP_LCD_ClearStringLine(i);
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 fb2c 	bl	8002a18 <BSP_LCD_ClearStringLine>
	for(int i = 2; i <= 11; i++)
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	3301      	adds	r3, #1
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	2b0b      	cmp	r3, #11
 80013ca:	ddf5      	ble.n	80013b8 <Output_handle+0xa4>
	}
	BSP_LCD_FillCircle(current_width, 160, current_height);
 80013cc:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <Output_handle+0xfc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001408 <Output_handle+0xf4>)
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	b292      	uxth	r2, r2
 80013d8:	21a0      	movs	r1, #160	@ 0xa0
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fe1c 	bl	8003018 <BSP_LCD_FillCircle>
    osDelay(100);
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f00a fc31 	bl	800bc48 <osDelay>
	if(end)
 80013e6:	e79b      	b.n	8001320 <Output_handle+0xc>
  }
  /* USER CODE END Output_handle */
}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000384 	.word	0x20000384
 80013f4:	ff0000ff 	.word	0xff0000ff
 80013f8:	08011cac 	.word	0x08011cac
 80013fc:	40021800 	.word	0x40021800
 8001400:	20000380 	.word	0x20000380
 8001404:	08011cb8 	.word	0x08011cb8
 8001408:	20000004 	.word	0x20000004
 800140c:	08011cc4 	.word	0x08011cc4
 8001410:	2000000c 	.word	0x2000000c

08001414 <ZPID_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ZPID_handle */
void ZPID_handle(void *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ZPID_handle */
  int old_error = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  int sum_error = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
  /* Infinite loop */
  for(;;)
  {
	int error = target_height - current_height;
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <ZPID_handle+0xc4>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <ZPID_handle+0xc8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
	float P = Kp * error;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80014e0 <ZPID_handle+0xcc>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	edc7 7a04 	vstr	s15, [r7, #16]
	float D = Kd * (error - old_error) / 100;
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80014e4 <ZPID_handle+0xd0>
 8001458:	ee27 7a87 	vmul.f32	s14, s15, s14
 800145c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80014e8 <ZPID_handle+0xd4>
 8001460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001464:	edc7 7a03 	vstr	s15, [r7, #12]
	sum_error+=error;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	4413      	add	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
	float I = Ki * sum_error * 100;
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80014ec <ZPID_handle+0xd8>
 800147e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001482:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80014e8 <ZPID_handle+0xd4>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	edc7 7a02 	vstr	s15, [r7, #8]
	old_error = error;
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	61fb      	str	r3, [r7, #28]
	current_height += (int)(P + D + I);
 8001492:	ed97 7a04 	vldr	s14, [r7, #16]
 8001496:	edd7 7a03 	vldr	s15, [r7, #12]
 800149a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800149e:	edd7 7a02 	vldr	s15, [r7, #8]
 80014a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014aa:	ee17 2a90 	vmov	r2, s15
 80014ae:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <ZPID_handle+0xc8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <ZPID_handle+0xc8>)
 80014b6:	6013      	str	r3, [r2, #0]
	if(current_height < 30)
 80014b8:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <ZPID_handle+0xc8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b1d      	cmp	r3, #29
 80014be:	dc03      	bgt.n	80014c8 <ZPID_handle+0xb4>
	{
		end = 1;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <ZPID_handle+0xdc>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
		break;
 80014c6:	e003      	b.n	80014d0 <ZPID_handle+0xbc>
	}
    osDelay(100);
 80014c8:	2064      	movs	r0, #100	@ 0x64
 80014ca:	f00a fbbd 	bl	800bc48 <osDelay>
  {
 80014ce:	e7a9      	b.n	8001424 <ZPID_handle+0x10>
  }
  /* USER CODE END ZPID_handle */
}
 80014d0:	bf00      	nop
 80014d2:	3720      	adds	r7, #32
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004
 80014e0:	3dcccccd 	.word	0x3dcccccd
 80014e4:	3d4ccccd 	.word	0x3d4ccccd
 80014e8:	42c80000 	.word	0x42c80000
 80014ec:	3a83126f 	.word	0x3a83126f
 80014f0:	20000384 	.word	0x20000384

080014f4 <XPID_handle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_XPID_handle */
void XPID_handle(void *argument)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN XPID_handle */
  int old_error = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  int sum_error = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	623b      	str	r3, [r7, #32]
  /* Infinite loop */
  for(;;)
  {
	if(end)
 8001504:	4b34      	ldr	r3, [pc, #208]	@ (80015d8 <XPID_handle+0xe4>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d15f      	bne.n	80015cc <XPID_handle+0xd8>
	{
	 break;
	}
	int error = target_width - current_width;
 800150c:	4b33      	ldr	r3, [pc, #204]	@ (80015dc <XPID_handle+0xe8>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b33      	ldr	r3, [pc, #204]	@ (80015e0 <XPID_handle+0xec>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	61fb      	str	r3, [r7, #28]
	float P = Kp * error;
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001522:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80015e4 <XPID_handle+0xf0>
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	edc7 7a06 	vstr	s15, [r7, #24]
	float D = Kd * (error - old_error) / 100;
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80015e8 <XPID_handle+0xf4>
 8001540:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001544:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80015ec <XPID_handle+0xf8>
 8001548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800154c:	edc7 7a05 	vstr	s15, [r7, #20]
	sum_error+=error;
 8001550:	6a3a      	ldr	r2, [r7, #32]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	4413      	add	r3, r2
 8001556:	623b      	str	r3, [r7, #32]
	float I = Ki * sum_error * 100;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	ee07 3a90 	vmov	s15, r3
 800155e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001562:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80015f0 <XPID_handle+0xfc>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80015ec <XPID_handle+0xf8>
 800156e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001572:	edc7 7a04 	vstr	s15, [r7, #16]
	old_error = error;
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	627b      	str	r3, [r7, #36]	@ 0x24
	int temp = current_width + (int)(P + D + I);
 800157a:	ed97 7a06 	vldr	s14, [r7, #24]
 800157e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001582:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001586:	edd7 7a04 	vldr	s15, [r7, #16]
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001592:	ee17 2a90 	vmov	r2, s15
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <XPID_handle+0xec>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]
	if(temp + current_height > 210 || temp - current_height < 0)
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <XPID_handle+0x100>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	2bd2      	cmp	r3, #210	@ 0xd2
 80015a8:	dc05      	bgt.n	80015b6 <XPID_handle+0xc2>
 80015aa:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <XPID_handle+0x100>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da03      	bge.n	80015be <XPID_handle+0xca>
	{
	  target_width = 125;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <XPID_handle+0xe8>)
 80015b8:	227d      	movs	r2, #125	@ 0x7d
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e002      	b.n	80015c4 <XPID_handle+0xd0>
	}
	else
	{
	  current_width = temp;
 80015be:	4a08      	ldr	r2, [pc, #32]	@ (80015e0 <XPID_handle+0xec>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6013      	str	r3, [r2, #0]
	}
    osDelay(100);
 80015c4:	2064      	movs	r0, #100	@ 0x64
 80015c6:	f00a fb3f 	bl	800bc48 <osDelay>
  {
 80015ca:	e79b      	b.n	8001504 <XPID_handle+0x10>
	 break;
 80015cc:	bf00      	nop
  }
  /* USER CODE END XPID_handle */
}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	@ 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000384 	.word	0x20000384
 80015dc:	20000008 	.word	0x20000008
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	3dcccccd 	.word	0x3dcccccd
 80015e8:	3d4ccccd 	.word	0x3d4ccccd
 80015ec:	42c80000 	.word	0x42c80000
 80015f0:	3a83126f 	.word	0x3a83126f
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800160a:	f002 f98f 	bl	800392c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40001000 	.word	0x40001000

0800161c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <Error_Handler+0x8>

08001628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_MspInit+0x54>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a11      	ldr	r2, [pc, #68]	@ (800167c <HAL_MspInit+0x54>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_MspInit+0x54>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <HAL_MspInit+0x54>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <HAL_MspInit+0x54>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	@ 0x40
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <HAL_MspInit+0x54>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	210f      	movs	r1, #15
 800166a:	f06f 0001 	mvn.w	r0, #1
 800166e:	f002 fa59 	bl	8003b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800

08001680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08e      	sub	sp, #56	@ 0x38
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b33      	ldr	r3, [pc, #204]	@ (8001764 <HAL_InitTick+0xe4>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a32      	ldr	r2, [pc, #200]	@ (8001764 <HAL_InitTick+0xe4>)
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a0:	4b30      	ldr	r3, [pc, #192]	@ (8001764 <HAL_InitTick+0xe4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ac:	f107 0210 	add.w	r2, r7, #16
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 fa28 	bl	8006b0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d103      	bne.n	80016ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016c6:	f005 fa0d 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 80016ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80016cc:	e004      	b.n	80016d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ce:	f005 fa09 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 80016d2:	4603      	mov	r3, r0
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016da:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <HAL_InitTick+0xe8>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3b01      	subs	r3, #1
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016e6:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_InitTick+0xec>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <HAL_InitTick+0xf0>)
 80016ea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <HAL_InitTick+0xec>)
 80016ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016f2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016f4:	4a1d      	ldr	r2, [pc, #116]	@ (800176c <HAL_InitTick+0xec>)
 80016f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <HAL_InitTick+0xec>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001700:	4b1a      	ldr	r3, [pc, #104]	@ (800176c <HAL_InitTick+0xec>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_InitTick+0xec>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800170c:	4817      	ldr	r0, [pc, #92]	@ (800176c <HAL_InitTick+0xec>)
 800170e:	f006 faa5 	bl	8007c5c <HAL_TIM_Base_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001718:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800171c:	2b00      	cmp	r3, #0
 800171e:	d11b      	bne.n	8001758 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001720:	4812      	ldr	r0, [pc, #72]	@ (800176c <HAL_InitTick+0xec>)
 8001722:	f006 faf5 	bl	8007d10 <HAL_TIM_Base_Start_IT>
 8001726:	4603      	mov	r3, r0
 8001728:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800172c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001730:	2b00      	cmp	r3, #0
 8001732:	d111      	bne.n	8001758 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001734:	2036      	movs	r0, #54	@ 0x36
 8001736:	f002 fa11 	bl	8003b5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d808      	bhi.n	8001752 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	2036      	movs	r0, #54	@ 0x36
 8001746:	f002 f9ed 	bl	8003b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <HAL_InitTick+0xf4>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	e002      	b.n	8001758 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001758:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800175c:	4618      	mov	r0, r3
 800175e:	3738      	adds	r7, #56	@ 0x38
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	431bde83 	.word	0x431bde83
 800176c:	20000388 	.word	0x20000388
 8001770:	40001000 	.word	0x40001000
 8001774:	20000090 	.word	0x20000090

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <NMI_Handler+0x4>

08001780 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <HardFault_Handler+0x4>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <MemManage_Handler+0x4>

08001790 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <UsageFault_Handler+0x4>

080017a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <TIM6_DAC_IRQHandler+0x10>)
 80017b6:	f006 fb1b 	bl	8007df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000388 	.word	0x20000388

080017c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <OTG_HS_IRQHandler+0x10>)
 80017ca:	f003 fc0c 	bl	8004fe6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20006460 	.word	0x20006460

080017d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return 1;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <_kill>:

int _kill(int pid, int sig)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f2:	f00e f9bd 	bl	800fb70 <__errno>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2216      	movs	r2, #22
 80017fa:	601a      	str	r2, [r3, #0]
  return -1;
 80017fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <_exit>:

void _exit (int status)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ffe7 	bl	80017e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800181a:	bf00      	nop
 800181c:	e7fd      	b.n	800181a <_exit+0x12>

0800181e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	e00a      	b.n	8001846 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001830:	f3af 8000 	nop.w
 8001834:	4601      	mov	r1, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	60ba      	str	r2, [r7, #8]
 800183c:	b2ca      	uxtb	r2, r1
 800183e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	429a      	cmp	r2, r3
 800184c:	dbf0      	blt.n	8001830 <_read+0x12>
  }

  return len;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e009      	b.n	800187e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	60ba      	str	r2, [r7, #8]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbf1      	blt.n	800186a <_write+0x12>
  }
  return len;
 8001886:	687b      	ldr	r3, [r7, #4]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_close>:

int _close(int file)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b8:	605a      	str	r2, [r3, #4]
  return 0;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <_isatty>:

int _isatty(int file)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d0:	2301      	movs	r3, #1
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001900:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <_sbrk+0x5c>)
 8001902:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <_sbrk+0x60>)
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001914:	4b11      	ldr	r3, [pc, #68]	@ (800195c <_sbrk+0x64>)
 8001916:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <_sbrk+0x68>)
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	429a      	cmp	r2, r3
 8001926:	d207      	bcs.n	8001938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001928:	f00e f922 	bl	800fb70 <__errno>
 800192c:	4603      	mov	r3, r0
 800192e:	220c      	movs	r2, #12
 8001930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
 8001936:	e009      	b.n	800194c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001938:	4b08      	ldr	r3, [pc, #32]	@ (800195c <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <_sbrk+0x64>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <_sbrk+0x64>)
 8001948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194a:	68fb      	ldr	r3, [r7, #12]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20030000 	.word	0x20030000
 8001958:	00000400 	.word	0x00000400
 800195c:	200003d0 	.word	0x200003d0
 8001960:	20006cb0 	.word	0x20006cb0

08001964 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <SystemInit+0x20>)
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <SystemInit+0x20>)
 8001970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198c:	f7ff ffea 	bl	8001964 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	@ (80019d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f00e f8e1 	bl	800fb7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff facd 	bl	8000f58 <main>
  bx  lr    
 80019be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 80019cc:	08013c10 	.word	0x08013c10
  ldr r2, =_sbss
 80019d0:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 80019d4:	20006cb0 	.word	0x20006cb0

080019d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC_IRQHandler>

080019da <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80019de:	f000 fc6f 	bl	80022c0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80019e2:	20ca      	movs	r0, #202	@ 0xca
 80019e4:	f000 f95d 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80019e8:	20c3      	movs	r0, #195	@ 0xc3
 80019ea:	f000 f967 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80019ee:	2008      	movs	r0, #8
 80019f0:	f000 f964 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80019f4:	2050      	movs	r0, #80	@ 0x50
 80019f6:	f000 f961 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80019fa:	20cf      	movs	r0, #207	@ 0xcf
 80019fc:	f000 f951 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f95b 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001a06:	20c1      	movs	r0, #193	@ 0xc1
 8001a08:	f000 f958 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001a0c:	2030      	movs	r0, #48	@ 0x30
 8001a0e:	f000 f955 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001a12:	20ed      	movs	r0, #237	@ 0xed
 8001a14:	f000 f945 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001a18:	2064      	movs	r0, #100	@ 0x64
 8001a1a:	f000 f94f 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001a1e:	2003      	movs	r0, #3
 8001a20:	f000 f94c 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001a24:	2012      	movs	r0, #18
 8001a26:	f000 f949 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001a2a:	2081      	movs	r0, #129	@ 0x81
 8001a2c:	f000 f946 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001a30:	20e8      	movs	r0, #232	@ 0xe8
 8001a32:	f000 f936 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001a36:	2085      	movs	r0, #133	@ 0x85
 8001a38:	f000 f940 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f000 f93d 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a42:	2078      	movs	r0, #120	@ 0x78
 8001a44:	f000 f93a 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001a48:	20cb      	movs	r0, #203	@ 0xcb
 8001a4a:	f000 f92a 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001a4e:	2039      	movs	r0, #57	@ 0x39
 8001a50:	f000 f934 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001a54:	202c      	movs	r0, #44	@ 0x2c
 8001a56:	f000 f931 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a5a:	2000      	movs	r0, #0
 8001a5c:	f000 f92e 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001a60:	2034      	movs	r0, #52	@ 0x34
 8001a62:	f000 f92b 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001a66:	2002      	movs	r0, #2
 8001a68:	f000 f928 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001a6c:	20f7      	movs	r0, #247	@ 0xf7
 8001a6e:	f000 f918 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001a72:	2020      	movs	r0, #32
 8001a74:	f000 f922 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001a78:	20ea      	movs	r0, #234	@ 0xea
 8001a7a:	f000 f912 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f000 f91c 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f000 f919 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001a8a:	20b1      	movs	r0, #177	@ 0xb1
 8001a8c:	f000 f909 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f000 f913 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a96:	201b      	movs	r0, #27
 8001a98:	f000 f910 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a9c:	20b6      	movs	r0, #182	@ 0xb6
 8001a9e:	f000 f900 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f000 f90a 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001aa8:	20a2      	movs	r0, #162	@ 0xa2
 8001aaa:	f000 f907 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001aae:	20c0      	movs	r0, #192	@ 0xc0
 8001ab0:	f000 f8f7 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ab4:	2010      	movs	r0, #16
 8001ab6:	f000 f901 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001aba:	20c1      	movs	r0, #193	@ 0xc1
 8001abc:	f000 f8f1 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001ac0:	2010      	movs	r0, #16
 8001ac2:	f000 f8fb 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001ac6:	20c5      	movs	r0, #197	@ 0xc5
 8001ac8:	f000 f8eb 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001acc:	2045      	movs	r0, #69	@ 0x45
 8001ace:	f000 f8f5 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001ad2:	2015      	movs	r0, #21
 8001ad4:	f000 f8f2 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001ad8:	20c7      	movs	r0, #199	@ 0xc7
 8001ada:	f000 f8e2 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001ade:	2090      	movs	r0, #144	@ 0x90
 8001ae0:	f000 f8ec 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001ae4:	2036      	movs	r0, #54	@ 0x36
 8001ae6:	f000 f8dc 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001aea:	20c8      	movs	r0, #200	@ 0xc8
 8001aec:	f000 f8e6 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001af0:	20f2      	movs	r0, #242	@ 0xf2
 8001af2:	f000 f8d6 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f8e0 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001afc:	20b0      	movs	r0, #176	@ 0xb0
 8001afe:	f000 f8d0 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001b02:	20c2      	movs	r0, #194	@ 0xc2
 8001b04:	f000 f8da 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001b08:	20b6      	movs	r0, #182	@ 0xb6
 8001b0a:	f000 f8ca 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f000 f8d4 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001b14:	20a7      	movs	r0, #167	@ 0xa7
 8001b16:	f000 f8d1 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001b1a:	2027      	movs	r0, #39	@ 0x27
 8001b1c:	f000 f8ce 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b20:	2004      	movs	r0, #4
 8001b22:	f000 f8cb 	bl	8001cbc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001b26:	202a      	movs	r0, #42	@ 0x2a
 8001b28:	f000 f8bb 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f000 f8c5 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f8c2 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f000 f8bf 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001b3e:	20ef      	movs	r0, #239	@ 0xef
 8001b40:	f000 f8bc 	bl	8001cbc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001b44:	202b      	movs	r0, #43	@ 0x2b
 8001b46:	f000 f8ac 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f000 f8b6 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b50:	2000      	movs	r0, #0
 8001b52:	f000 f8b3 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 f8b0 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001b5c:	203f      	movs	r0, #63	@ 0x3f
 8001b5e:	f000 f8ad 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001b62:	20f6      	movs	r0, #246	@ 0xf6
 8001b64:	f000 f89d 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 f8a7 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f8a4 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001b74:	2006      	movs	r0, #6
 8001b76:	f000 f8a1 	bl	8001cbc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001b7a:	202c      	movs	r0, #44	@ 0x2c
 8001b7c:	f000 f891 	bl	8001ca2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001b80:	20c8      	movs	r0, #200	@ 0xc8
 8001b82:	f000 fc8b 	bl	800249c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001b86:	2026      	movs	r0, #38	@ 0x26
 8001b88:	f000 f88b 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 f895 	bl	8001cbc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001b92:	20e0      	movs	r0, #224	@ 0xe0
 8001b94:	f000 f885 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001b98:	200f      	movs	r0, #15
 8001b9a:	f000 f88f 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001b9e:	2029      	movs	r0, #41	@ 0x29
 8001ba0:	f000 f88c 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001ba4:	2024      	movs	r0, #36	@ 0x24
 8001ba6:	f000 f889 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001baa:	200c      	movs	r0, #12
 8001bac:	f000 f886 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001bb0:	200e      	movs	r0, #14
 8001bb2:	f000 f883 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bb6:	2009      	movs	r0, #9
 8001bb8:	f000 f880 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001bbc:	204e      	movs	r0, #78	@ 0x4e
 8001bbe:	f000 f87d 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001bc2:	2078      	movs	r0, #120	@ 0x78
 8001bc4:	f000 f87a 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001bc8:	203c      	movs	r0, #60	@ 0x3c
 8001bca:	f000 f877 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001bce:	2009      	movs	r0, #9
 8001bd0:	f000 f874 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001bd4:	2013      	movs	r0, #19
 8001bd6:	f000 f871 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001bda:	2005      	movs	r0, #5
 8001bdc:	f000 f86e 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001be0:	2017      	movs	r0, #23
 8001be2:	f000 f86b 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001be6:	2011      	movs	r0, #17
 8001be8:	f000 f868 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f000 f865 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001bf2:	20e1      	movs	r0, #225	@ 0xe1
 8001bf4:	f000 f855 	bl	8001ca2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f000 f85f 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001bfe:	2016      	movs	r0, #22
 8001c00:	f000 f85c 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001c04:	201b      	movs	r0, #27
 8001c06:	f000 f859 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001c0a:	2004      	movs	r0, #4
 8001c0c:	f000 f856 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001c10:	2011      	movs	r0, #17
 8001c12:	f000 f853 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001c16:	2007      	movs	r0, #7
 8001c18:	f000 f850 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001c1c:	2031      	movs	r0, #49	@ 0x31
 8001c1e:	f000 f84d 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001c22:	2033      	movs	r0, #51	@ 0x33
 8001c24:	f000 f84a 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001c28:	2042      	movs	r0, #66	@ 0x42
 8001c2a:	f000 f847 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001c2e:	2005      	movs	r0, #5
 8001c30:	f000 f844 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001c34:	200c      	movs	r0, #12
 8001c36:	f000 f841 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001c3a:	200a      	movs	r0, #10
 8001c3c:	f000 f83e 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001c40:	2028      	movs	r0, #40	@ 0x28
 8001c42:	f000 f83b 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001c46:	202f      	movs	r0, #47	@ 0x2f
 8001c48:	f000 f838 	bl	8001cbc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001c4c:	200f      	movs	r0, #15
 8001c4e:	f000 f835 	bl	8001cbc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001c52:	2011      	movs	r0, #17
 8001c54:	f000 f825 	bl	8001ca2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001c58:	20c8      	movs	r0, #200	@ 0xc8
 8001c5a:	f000 fc1f 	bl	800249c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c5e:	2029      	movs	r0, #41	@ 0x29
 8001c60:	f000 f81f 	bl	8001ca2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001c64:	202c      	movs	r0, #44	@ 0x2c
 8001c66:	f000 f81c 	bl	8001ca2 <ili9341_WriteReg>
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001c72:	f000 fb25 	bl	80022c0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001c76:	2103      	movs	r1, #3
 8001c78:	20d3      	movs	r0, #211	@ 0xd3
 8001c7a:	f000 f82c 	bl	8001cd6 <ili9341_ReadData>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29b      	uxth	r3, r3
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001c8a:	2029      	movs	r0, #41	@ 0x29
 8001c8c:	f000 f809 	bl	8001ca2 <ili9341_WriteReg>
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001c98:	2028      	movs	r0, #40	@ 0x28
 8001c9a:	f000 f802 	bl	8001ca2 <ili9341_WriteReg>
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fba0 	bl	80023f4 <LCD_IO_WriteReg>
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fb71 	bl	80023b0 <LCD_IO_WriteData>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	460a      	mov	r2, r1
 8001ce0:	80fb      	strh	r3, [r7, #6]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001ce6:	797a      	ldrb	r2, [r7, #5]
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 fba3 	bl	8002438 <LCD_IO_ReadData>
 8001cf2:	4603      	mov	r3, r0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001d00:	23f0      	movs	r3, #240	@ 0xf0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001d10:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d2c:	f000 fbc2 	bl	80024b4 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001d36:	f107 030f 	add.w	r3, r7, #15
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2120      	movs	r1, #32
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fc04 	bl	800254c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001d4e:	f107 030f 	add.w	r3, r7, #15
 8001d52:	2201      	movs	r2, #1
 8001d54:	2123      	movs	r1, #35	@ 0x23
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 fbf8 	bl	800254c <GYRO_IO_Write>
}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001d78:	f000 fb9c 	bl	80024b4 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	2201      	movs	r2, #1
 8001d80:	210f      	movs	r1, #15
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fc14 	bl	80025b0 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001d88:	79fb      	ldrb	r3, [r7, #7]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	2124      	movs	r1, #36	@ 0x24
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fc06 	bl	80025b0 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	2201      	movs	r2, #1
 8001db2:	2124      	movs	r1, #36	@ 0x24
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fbc9 	bl	800254c <GYRO_IO_Write>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8001dd6:	f107 030f 	add.w	r3, r7, #15
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2120      	movs	r1, #32
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fbb4 	bl	800254c <GYRO_IO_Write>
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001dfe:	f107 030f 	add.w	r3, r7, #15
 8001e02:	2201      	movs	r2, #1
 8001e04:	2130      	movs	r1, #48	@ 0x30
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fbd2 	bl	80025b0 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e0c:	f107 030e 	add.w	r3, r7, #14
 8001e10:	2201      	movs	r2, #1
 8001e12:	2122      	movs	r1, #34	@ 0x22
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 fbcb 	bl	80025b0 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	121b      	asrs	r3, r3, #8
 8001e2a:	b25a      	sxtb	r2, r3
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	b25b      	sxtb	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b25b      	sxtb	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	f023 0320 	bic.w	r3, r3, #32
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	7bbb      	ldrb	r3, [r7, #14]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001e4e:	f107 030f 	add.w	r3, r7, #15
 8001e52:	2201      	movs	r2, #1
 8001e54:	2130      	movs	r1, #48	@ 0x30
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fb78 	bl	800254c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001e5c:	f107 030e 	add.w	r3, r7, #14
 8001e60:	2201      	movs	r2, #1
 8001e62:	2122      	movs	r1, #34	@ 0x22
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fb71 	bl	800254c <GYRO_IO_Write>
}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b084      	sub	sp, #16
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	4603      	mov	r3, r0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001e7c:	f107 030f 	add.w	r3, r7, #15
 8001e80:	2201      	movs	r2, #1
 8001e82:	2122      	movs	r1, #34	@ 0x22
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fb93 	bl	80025b0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	73fb      	strb	r3, [r7, #15]
 8001ea4:	e00c      	b.n	8001ec0 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d109      	bne.n	8001ec0 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	f023 0308 	bic.w	r3, r3, #8
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ec0:	f107 030f 	add.w	r3, r7, #15
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2122      	movs	r1, #34	@ 0x22
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fb3f 	bl	800254c <GYRO_IO_Write>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001ee0:	f107 030f 	add.w	r3, r7, #15
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2122      	movs	r1, #34	@ 0x22
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fb61 	bl	80025b0 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d107      	bne.n	8001f04 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e009      	b.n	8001f18 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d106      	bne.n	8001f18 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	f023 0308 	bic.w	r3, r3, #8
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001f18:	f107 030f 	add.w	r3, r7, #15
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	2122      	movs	r1, #34	@ 0x22
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fb13 	bl	800254c <GYRO_IO_Write>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	4603      	mov	r3, r0
 8001f36:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f38:	f107 030f 	add.w	r3, r7, #15
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	2121      	movs	r1, #33	@ 0x21
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fb35 	bl	80025b0 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001f5a:	f107 030f 	add.w	r3, r7, #15
 8001f5e:	2201      	movs	r2, #1
 8001f60:	2121      	movs	r1, #33	@ 0x21
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 faf2 	bl	800254c <GYRO_IO_Write>
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f7a:	f107 030f 	add.w	r3, r7, #15
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2124      	movs	r1, #36	@ 0x24
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 fb14 	bl	80025b0 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	f023 0310 	bic.w	r3, r3, #16
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001f9c:	f107 030f 	add.w	r3, r7, #15
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2124      	movs	r1, #36	@ 0x24
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fad1 	bl	800254c <GYRO_IO_Write>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  int i =0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001fdc:	f107 030f 	add.w	r3, r7, #15
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	2123      	movs	r1, #35	@ 0x23
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f000 fae3 	bl	80025b0 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	2206      	movs	r2, #6
 8001ff0:	2128      	movs	r1, #40	@ 0x28
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 fadc 	bl	80025b0 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d121      	bne.n	8002046 <L3GD20_ReadXYZAngRate+0x92>
  {
    for(i=0; i<3; i++)
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
 8002006:	e01a      	b.n	800203e <L3GD20_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	3301      	adds	r3, #1
 800200e:	3328      	adds	r3, #40	@ 0x28
 8002010:	443b      	add	r3, r7
 8002012:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b29b      	uxth	r3, r3
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	0052      	lsls	r2, r2, #1
 800201e:	3228      	adds	r2, #40	@ 0x28
 8002020:	443a      	add	r2, r7
 8002022:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8002026:	4413      	add	r3, r2
 8002028:	b29b      	uxth	r3, r3
 800202a:	b21a      	sxth	r2, r3
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	3328      	adds	r3, #40	@ 0x28
 8002032:	443b      	add	r3, r7
 8002034:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	3301      	adds	r3, #1
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	2b02      	cmp	r3, #2
 8002042:	dde1      	ble.n	8002008 <L3GD20_ReadXYZAngRate+0x54>
 8002044:	e020      	b.n	8002088 <L3GD20_ReadXYZAngRate+0xd4>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	e01a      	b.n	8002082 <L3GD20_ReadXYZAngRate+0xce>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	3328      	adds	r3, #40	@ 0x28
 8002052:	443b      	add	r3, r7
 8002054:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	0052      	lsls	r2, r2, #1
 8002060:	3201      	adds	r2, #1
 8002062:	3228      	adds	r2, #40	@ 0x28
 8002064:	443a      	add	r2, r7
 8002066:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 800206a:	4413      	add	r3, r2
 800206c:	b29b      	uxth	r3, r3
 800206e:	b21a      	sxth	r2, r3
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	3328      	adds	r3, #40	@ 0x28
 8002076:	443b      	add	r3, r7
 8002078:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	3301      	adds	r3, #1
 8002080:	623b      	str	r3, [r7, #32]
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	2b02      	cmp	r3, #2
 8002086:	dde1      	ble.n	800204c <L3GD20_ReadXYZAngRate+0x98>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800208e:	2b20      	cmp	r3, #32
 8002090:	d00c      	beq.n	80020ac <L3GD20_ReadXYZAngRate+0xf8>
 8002092:	2b20      	cmp	r3, #32
 8002094:	dc0d      	bgt.n	80020b2 <L3GD20_ReadXYZAngRate+0xfe>
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <L3GD20_ReadXYZAngRate+0xec>
 800209a:	2b10      	cmp	r3, #16
 800209c:	d003      	beq.n	80020a6 <L3GD20_ReadXYZAngRate+0xf2>
 800209e:	e008      	b.n	80020b2 <L3GD20_ReadXYZAngRate+0xfe>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80020a0:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <L3GD20_ReadXYZAngRate+0x144>)
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80020a4:	e005      	b.n	80020b2 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <L3GD20_ReadXYZAngRate+0x148>)
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80020aa:	e002      	b.n	80020b2 <L3GD20_ReadXYZAngRate+0xfe>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <L3GD20_ReadXYZAngRate+0x14c>)
 80020ae:	627b      	str	r3, [r7, #36]	@ 0x24
    break;
 80020b0:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
 80020b6:	e016      	b.n	80020e6 <L3GD20_ReadXYZAngRate+0x132>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80020b8:	6a3b      	ldr	r3, [r7, #32]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	3328      	adds	r3, #40	@ 0x28
 80020be:	443b      	add	r3, r7
 80020c0:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80020c4:	ee07 3a90 	vmov	s15, r3
 80020c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020dc:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	3301      	adds	r3, #1
 80020e4:	623b      	str	r3, [r7, #32]
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	dde5      	ble.n	80020b8 <L3GD20_ReadXYZAngRate+0x104>
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	3728      	adds	r7, #40	@ 0x28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	410c0000 	.word	0x410c0000
 80020fc:	418c0000 	.word	0x418c0000
 8002100:	428c0000 	.word	0x428c0000

08002104 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002108:	4819      	ldr	r0, [pc, #100]	@ (8002170 <SPIx_Init+0x6c>)
 800210a:	f005 fc57 	bl	80079bc <HAL_SPI_GetState>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d12b      	bne.n	800216c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <SPIx_Init+0x6c>)
 8002116:	4a17      	ldr	r2, [pc, #92]	@ (8002174 <SPIx_Init+0x70>)
 8002118:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <SPIx_Init+0x6c>)
 800211c:	2218      	movs	r2, #24
 800211e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <SPIx_Init+0x6c>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002126:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <SPIx_Init+0x6c>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800212c:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <SPIx_Init+0x6c>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002132:	4b0f      	ldr	r3, [pc, #60]	@ (8002170 <SPIx_Init+0x6c>)
 8002134:	2200      	movs	r2, #0
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <SPIx_Init+0x6c>)
 800213a:	2207      	movs	r2, #7
 800213c:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800213e:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <SPIx_Init+0x6c>)
 8002140:	2200      	movs	r2, #0
 8002142:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002144:	4b0a      	ldr	r3, [pc, #40]	@ (8002170 <SPIx_Init+0x6c>)
 8002146:	2200      	movs	r2, #0
 8002148:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800214a:	4b09      	ldr	r3, [pc, #36]	@ (8002170 <SPIx_Init+0x6c>)
 800214c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002150:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <SPIx_Init+0x6c>)
 8002154:	2200      	movs	r2, #0
 8002156:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <SPIx_Init+0x6c>)
 800215a:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800215e:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <SPIx_Init+0x6c>)
 8002162:	f000 f873 	bl	800224c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002166:	4802      	ldr	r0, [pc, #8]	@ (8002170 <SPIx_Init+0x6c>)
 8002168:	f004 ff5d 	bl	8007026 <HAL_SPI_Init>
  }
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	200003d4 	.word	0x200003d4
 8002174:	40015000 	.word	0x40015000

08002178 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	b29a      	uxth	r2, r3
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <SPIx_Read+0x38>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f107 0108 	add.w	r1, r7, #8
 8002192:	4808      	ldr	r0, [pc, #32]	@ (80021b4 <SPIx_Read+0x3c>)
 8002194:	f005 f950 	bl	8007438 <HAL_SPI_Receive>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80021a2:	f000 f847 	bl	8002234 <SPIx_Error>
  }

  return readvalue;
 80021a6:	68bb      	ldr	r3, [r7, #8]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000080 	.word	0x20000080
 80021b4:	200003d4 	.word	0x200003d4

080021b8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <SPIx_Write+0x34>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	1db9      	adds	r1, r7, #6
 80021cc:	2201      	movs	r2, #1
 80021ce:	4808      	ldr	r0, [pc, #32]	@ (80021f0 <SPIx_Write+0x38>)
 80021d0:	f004 ffee 	bl	80071b0 <HAL_SPI_Transmit>
 80021d4:	4603      	mov	r3, r0
 80021d6:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80021de:	f000 f829 	bl	8002234 <SPIx_Error>
  }
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000080 	.word	0x20000080
 80021f0:	200003d4 	.word	0x200003d4

080021f4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af02      	add	r7, sp, #8
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]

  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t *) &Byte, (uint8_t *) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002202:	4b0a      	ldr	r3, [pc, #40]	@ (800222c <SPIx_WriteRead+0x38>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f107 020f 	add.w	r2, r7, #15
 800220a:	1df9      	adds	r1, r7, #7
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	4807      	ldr	r0, [pc, #28]	@ (8002230 <SPIx_WriteRead+0x3c>)
 8002212:	f005 fa2a 	bl	800766a <HAL_SPI_TransmitReceive>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 800221c:	f000 f80a 	bl	8002234 <SPIx_Error>
  }

  return receivedbyte;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000080 	.word	0x20000080
 8002230:	200003d4 	.word	0x200003d4

08002234 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002238:	4803      	ldr	r0, [pc, #12]	@ (8002248 <SPIx_Error+0x14>)
 800223a:	f004 ff7d 	bl	8007138 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800223e:	f7ff ff61 	bl	8002104 <SPIx_Init>
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200003d4 	.word	0x200003d4

0800224c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	@ 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <SPIx_MspInit+0x6c>)
 800225a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225c:	4a16      	ldr	r2, [pc, #88]	@ (80022b8 <SPIx_MspInit+0x6c>)
 800225e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002262:	6453      	str	r3, [r2, #68]	@ 0x44
 8002264:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <SPIx_MspInit+0x6c>)
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <SPIx_MspInit+0x6c>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	4a0f      	ldr	r2, [pc, #60]	@ (80022b8 <SPIx_MspInit+0x6c>)
 800227a:	f043 0320 	orr.w	r3, r3, #32
 800227e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002280:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <SPIx_MspInit+0x6c>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800228c:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002290:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002296:	2302      	movs	r3, #2
 8002298:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800229a:	2301      	movs	r3, #1
 800229c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800229e:	2305      	movs	r3, #5
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80022a2:	f107 0314 	add.w	r3, r7, #20
 80022a6:	4619      	mov	r1, r3
 80022a8:	4804      	ldr	r0, [pc, #16]	@ (80022bc <SPIx_MspInit+0x70>)
 80022aa:	f002 f8b9 	bl	8004420 <HAL_GPIO_Init>
}
 80022ae:	bf00      	nop
 80022b0:	3728      	adds	r7, #40	@ 0x28
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40021400 	.word	0x40021400

080022c0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 80022c6:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <LCD_IO_Init+0xe0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d164      	bne.n	8002398 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 80022ce:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <LCD_IO_Init+0xe0>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <LCD_IO_Init+0xe4>)
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	4a31      	ldr	r2, [pc, #196]	@ (80023a4 <LCD_IO_Init+0xe4>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e4:	4b2f      	ldr	r3, [pc, #188]	@ (80023a4 <LCD_IO_Init+0xe4>)
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80022f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022fe:	2302      	movs	r3, #2
 8002300:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	4619      	mov	r1, r3
 8002308:	4827      	ldr	r0, [pc, #156]	@ (80023a8 <LCD_IO_Init+0xe8>)
 800230a:	f002 f889 	bl	8004420 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <LCD_IO_Init+0xe4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a23      	ldr	r2, [pc, #140]	@ (80023a4 <LCD_IO_Init+0xe4>)
 8002318:	f043 0308 	orr.w	r3, r3, #8
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <LCD_IO_Init+0xe4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800232a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800232e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002330:	2301      	movs	r3, #1
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002338:	2302      	movs	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	4619      	mov	r1, r3
 8002342:	4819      	ldr	r0, [pc, #100]	@ (80023a8 <LCD_IO_Init+0xe8>)
 8002344:	f002 f86c 	bl	8004420 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <LCD_IO_Init+0xe4>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	4a14      	ldr	r2, [pc, #80]	@ (80023a4 <LCD_IO_Init+0xe4>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6313      	str	r3, [r2, #48]	@ 0x30
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <LCD_IO_Init+0xe4>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002364:	2304      	movs	r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	4619      	mov	r1, r3
 800237a:	480c      	ldr	r0, [pc, #48]	@ (80023ac <LCD_IO_Init+0xec>)
 800237c:	f002 f850 	bl	8004420 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002380:	2200      	movs	r2, #0
 8002382:	2104      	movs	r1, #4
 8002384:	4809      	ldr	r0, [pc, #36]	@ (80023ac <LCD_IO_Init+0xec>)
 8002386:	f002 f9f7 	bl	8004778 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800238a:	2201      	movs	r2, #1
 800238c:	2104      	movs	r1, #4
 800238e:	4807      	ldr	r0, [pc, #28]	@ (80023ac <LCD_IO_Init+0xec>)
 8002390:	f002 f9f2 	bl	8004778 <HAL_GPIO_WritePin>

    SPIx_Init();
 8002394:	f7ff feb6 	bl	8002104 <SPIx_Init>
  }
}
 8002398:	bf00      	nop
 800239a:	3720      	adds	r7, #32
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000042c 	.word	0x2000042c
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40020c00 	.word	0x40020c00
 80023ac:	40020800 	.word	0x40020800

080023b0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023ba:	2201      	movs	r2, #1
 80023bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023c0:	480a      	ldr	r0, [pc, #40]	@ (80023ec <LCD_IO_WriteData+0x3c>)
 80023c2:	f002 f9d9 	bl	8004778 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 80023c6:	2200      	movs	r2, #0
 80023c8:	2104      	movs	r1, #4
 80023ca:	4809      	ldr	r0, [pc, #36]	@ (80023f0 <LCD_IO_WriteData+0x40>)
 80023cc:	f002 f9d4 	bl	8004778 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fef0 	bl	80021b8 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80023d8:	2201      	movs	r2, #1
 80023da:	2104      	movs	r1, #4
 80023dc:	4804      	ldr	r0, [pc, #16]	@ (80023f0 <LCD_IO_WriteData+0x40>)
 80023de:	f002 f9cb 	bl	8004778 <HAL_GPIO_WritePin>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020800 	.word	0x40020800

080023f4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80023fe:	2200      	movs	r2, #0
 8002400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002404:	480a      	ldr	r0, [pc, #40]	@ (8002430 <LCD_IO_WriteReg+0x3c>)
 8002406:	f002 f9b7 	bl	8004778 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800240a:	2200      	movs	r2, #0
 800240c:	2104      	movs	r1, #4
 800240e:	4809      	ldr	r0, [pc, #36]	@ (8002434 <LCD_IO_WriteReg+0x40>)
 8002410:	f002 f9b2 	bl	8004778 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	b29b      	uxth	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fecd 	bl	80021b8 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800241e:	2201      	movs	r2, #1
 8002420:	2104      	movs	r1, #4
 8002422:	4804      	ldr	r0, [pc, #16]	@ (8002434 <LCD_IO_WriteReg+0x40>)
 8002424:	f002 f9a8 	bl	8004778 <HAL_GPIO_WritePin>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40020800 	.word	0x40020800

08002438 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	460a      	mov	r2, r1
 8002442:	80fb      	strh	r3, [r7, #6]
 8002444:	4613      	mov	r3, r2
 8002446:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800244c:	2200      	movs	r2, #0
 800244e:	2104      	movs	r1, #4
 8002450:	4810      	ldr	r0, [pc, #64]	@ (8002494 <LCD_IO_ReadData+0x5c>)
 8002452:	f002 f991 	bl	8004778 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002456:	2200      	movs	r2, #0
 8002458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800245c:	480e      	ldr	r0, [pc, #56]	@ (8002498 <LCD_IO_ReadData+0x60>)
 800245e:	f002 f98b 	bl	8004778 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fea7 	bl	80021b8 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 800246a:	797b      	ldrb	r3, [r7, #5]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe83 	bl	8002178 <SPIx_Read>
 8002472:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002474:	2201      	movs	r2, #1
 8002476:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800247a:	4807      	ldr	r0, [pc, #28]	@ (8002498 <LCD_IO_ReadData+0x60>)
 800247c:	f002 f97c 	bl	8004778 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002480:	2201      	movs	r2, #1
 8002482:	2104      	movs	r1, #4
 8002484:	4803      	ldr	r0, [pc, #12]	@ (8002494 <LCD_IO_ReadData+0x5c>)
 8002486:	f002 f977 	bl	8004778 <HAL_GPIO_WritePin>

  return readvalue;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40020800 	.word	0x40020800
 8002498:	40020c00 	.word	0x40020c00

0800249c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f001 fa61 	bl	800396c <HAL_Delay>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */
  GYRO_CS_GPIO_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <GYRO_IO_Init+0x8c>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002540 <GYRO_IO_Init+0x8c>)
 80024c4:	f043 0304 	orr.w	r3, r3, #4
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <GYRO_IO_Init+0x8c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80024d6:	2302      	movs	r3, #2
 80024d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	2301      	movs	r3, #1
 80024dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4619      	mov	r1, r3
 80024ec:	4815      	ldr	r0, [pc, #84]	@ (8002544 <GYRO_IO_Init+0x90>)
 80024ee:	f001 ff97 	bl	8004420 <HAL_GPIO_Init>

  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80024f2:	2201      	movs	r2, #1
 80024f4:	2102      	movs	r1, #2
 80024f6:	4813      	ldr	r0, [pc, #76]	@ (8002544 <GYRO_IO_Init+0x90>)
 80024f8:	f002 f93e 	bl	8004778 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
 8002500:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <GYRO_IO_Init+0x8c>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002504:	4a0e      	ldr	r2, [pc, #56]	@ (8002540 <GYRO_IO_Init+0x8c>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6313      	str	r3, [r2, #48]	@ 0x30
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <GYRO_IO_Init+0x8c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002518:	2306      	movs	r3, #6
 800251a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002520:	2302      	movs	r3, #2
 8002522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	4619      	mov	r1, r3
 800252e:	4806      	ldr	r0, [pc, #24]	@ (8002548 <GYRO_IO_Init+0x94>)
 8002530:	f001 ff76 	bl	8004420 <HAL_GPIO_Init>

  SPIx_Init();
 8002534:	f7ff fde6 	bl	8002104 <SPIx_Init>
}
 8002538:	bf00      	nop
 800253a:	3720      	adds	r7, #32
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40023800 	.word	0x40023800
 8002544:	40020800 	.word	0x40020800
 8002548:	40020000 	.word	0x40020000

0800254c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
 8002558:	4613      	mov	r3, r2
 800255a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit:
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if (NumByteToWrite > 0x01)
 800255c:	883b      	ldrh	r3, [r7, #0]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d903      	bls.n	800256a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002568:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800256a:	2200      	movs	r2, #0
 800256c:	2102      	movs	r1, #2
 800256e:	480f      	ldr	r0, [pc, #60]	@ (80025ac <GYRO_IO_Write+0x60>)
 8002570:	f002 f902 	bl	8004778 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fe3c 	bl	80021f4 <SPIx_WriteRead>

  /* Send the data that will be written into the device (MSB First) */
  while (NumByteToWrite >= 0x01)
 800257c:	e00a      	b.n	8002594 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fe36 	bl	80021f4 <SPIx_WriteRead>
    NumByteToWrite--;
 8002588:	883b      	ldrh	r3, [r7, #0]
 800258a:	3b01      	subs	r3, #1
 800258c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3301      	adds	r3, #1
 8002592:	607b      	str	r3, [r7, #4]
  while (NumByteToWrite >= 0x01)
 8002594:	883b      	ldrh	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f1      	bne.n	800257e <GYRO_IO_Write+0x32>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800259a:	2201      	movs	r2, #1
 800259c:	2102      	movs	r1, #2
 800259e:	4803      	ldr	r0, [pc, #12]	@ (80025ac <GYRO_IO_Write+0x60>)
 80025a0:	f002 f8ea 	bl	8004778 <HAL_GPIO_WritePin>
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40020800 	.word	0x40020800

080025b0 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	70fb      	strb	r3, [r7, #3]
 80025bc:	4613      	mov	r3, r2
 80025be:	803b      	strh	r3, [r7, #0]
  if (NumByteToRead > 0x01)
 80025c0:	883b      	ldrh	r3, [r7, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d904      	bls.n	80025d0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80025cc:	70fb      	strb	r3, [r7, #3]
 80025ce:	e003      	b.n	80025d8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025d6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80025d8:	2200      	movs	r2, #0
 80025da:	2102      	movs	r1, #2
 80025dc:	4810      	ldr	r0, [pc, #64]	@ (8002620 <GYRO_IO_Read+0x70>)
 80025de:	f002 f8cb 	bl	8004778 <HAL_GPIO_WritePin>

  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff fe05 	bl	80021f4 <SPIx_WriteRead>

  /* Receive the data that will be read from the device (MSB First) */
  while (NumByteToRead > 0x00)
 80025ea:	e00c      	b.n	8002606 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7ff fe01 	bl	80021f4 <SPIx_WriteRead>
 80025f2:	4603      	mov	r3, r0
 80025f4:	461a      	mov	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80025fa:	883b      	ldrh	r3, [r7, #0]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3301      	adds	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
  while (NumByteToRead > 0x00)
 8002606:	883b      	ldrh	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1ef      	bne.n	80025ec <GYRO_IO_Read+0x3c>
  }

  /* Set chip select High at the end of the transmission */
  GYRO_CS_HIGH();
 800260c:	2201      	movs	r2, #1
 800260e:	2102      	movs	r1, #2
 8002610:	4803      	ldr	r0, [pc, #12]	@ (8002620 <GYRO_IO_Read+0x70>)
 8002612:	f002 f8b1 	bl	8004778 <HAL_GPIO_WritePin>
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40020800 	.word	0x40020800

08002624 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800262e:	2300      	movs	r3, #0
 8002630:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0, 0};
 8002632:	2300      	movs	r3, #0
 8002634:	703b      	strb	r3, [r7, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	707b      	strb	r3, [r7, #1]

  if ((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800263a:	4b2b      	ldr	r3, [pc, #172]	@ (80026e8 <BSP_GYRO_Init+0xc4>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4798      	blx	r3
 8002640:	4603      	mov	r3, r0
 8002642:	2bd4      	cmp	r3, #212	@ 0xd4
 8002644:	d005      	beq.n	8002652 <BSP_GYRO_Init+0x2e>
 8002646:	4b28      	ldr	r3, [pc, #160]	@ (80026e8 <BSP_GYRO_Init+0xc4>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4798      	blx	r3
 800264c:	4603      	mov	r3, r0
 800264e:	2bd5      	cmp	r3, #213	@ 0xd5
 8002650:	d144      	bne.n	80026dc <BSP_GYRO_Init+0xb8>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002652:	4b26      	ldr	r3, [pc, #152]	@ (80026ec <BSP_GYRO_Init+0xc8>)
 8002654:	4a24      	ldr	r2, [pc, #144]	@ (80026e8 <BSP_GYRO_Init+0xc4>)
 8002656:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002658:	2308      	movs	r3, #8
 800265a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800265c:	2300      	movs	r3, #0
 800265e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002660:	2307      	movs	r3, #7
 8002662:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002664:	2330      	movs	r3, #48	@ 0x30
 8002666:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002668:	2300      	movs	r3, #0
 800266a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800266c:	2300      	movs	r3, #0
 800266e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002670:	2310      	movs	r3, #16
 8002672:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002674:	793a      	ldrb	r2, [r7, #4]
 8002676:	797b      	ldrb	r3, [r7, #5]
 8002678:	4313      	orrs	r3, r2
 800267a:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800267c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800267e:	4313      	orrs	r3, r2
 8002680:	b2da      	uxtb	r2, r3
                      Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002682:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t)(Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002684:	4313      	orrs	r3, r2
 8002686:	b2db      	uxtb	r3, r3
 8002688:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800268a:	7a3a      	ldrb	r2, [r7, #8]
 800268c:	7a7b      	ldrb	r3, [r7, #9]
 800268e:	4313      	orrs	r3, r2
 8002690:	b2da      	uxtb	r2, r3
                        Gyro_InitStructure.Full_Scale) << 8);
 8002692:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t)((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002694:	4313      	orrs	r3, r2
 8002696:	b2db      	uxtb	r3, r3
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b29a      	uxth	r2, r3
 800269c:	89bb      	ldrh	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80026a2:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <BSP_GYRO_Init+0xc8>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	89ba      	ldrh	r2, [r7, #12]
 80026aa:	4610      	mov	r0, r2
 80026ac:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80026ae:	2300      	movs	r3, #0
 80026b0:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 80026b6:	783a      	ldrb	r2, [r7, #0]
                      Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80026b8:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t)((Gyro_FilterStructure.HighPassFilter_Mode_Selection | \
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <BSP_GYRO_Init+0xc8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c6:	89ba      	ldrh	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4610      	mov	r0, r2
 80026cc:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <BSP_GYRO_Init+0xc8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	2010      	movs	r0, #16
 80026d6:	4798      	blx	r3

    ret = GYRO_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000004c 	.word	0x2000004c
 80026ec:	20000430 	.word	0x20000430

080026f0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <BSP_GYRO_GetXYZ+0x24>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d004      	beq.n	800270c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002702:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <BSP_GYRO_GetXYZ+0x24>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
  }
}
 800270c:	bf00      	nop
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000430 	.word	0x20000430

08002718 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 800271c:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800271e:	4a2e      	ldr	r2, [pc, #184]	@ (80027d8 <BSP_LCD_Init+0xc0>)
 8002720:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002722:	4b2c      	ldr	r3, [pc, #176]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002724:	2209      	movs	r2, #9
 8002726:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002728:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800272a:	2201      	movs	r2, #1
 800272c:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800272e:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002730:	221d      	movs	r2, #29
 8002732:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002734:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002736:	2203      	movs	r2, #3
 8002738:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 800273a:	4b26      	ldr	r3, [pc, #152]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800273c:	f240 120d 	movw	r2, #269	@ 0x10d
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002744:	f240 1243 	movw	r2, #323	@ 0x143
 8002748:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 800274a:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800274c:	f240 1217 	movw	r2, #279	@ 0x117
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002754:	f240 1247 	movw	r2, #327	@ 0x147
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8002762:	4b1c      	ldr	r3, [pc, #112]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800276a:	4b1a      	ldr	r3, [pc, #104]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002772:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <BSP_LCD_Init+0xc4>)
 8002774:	2208      	movs	r2, #8
 8002776:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002778:	4b18      	ldr	r3, [pc, #96]	@ (80027dc <BSP_LCD_Init+0xc4>)
 800277a:	22c0      	movs	r2, #192	@ 0xc0
 800277c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800277e:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <BSP_LCD_Init+0xc4>)
 8002780:	2204      	movs	r2, #4
 8002782:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002784:	4b15      	ldr	r3, [pc, #84]	@ (80027dc <BSP_LCD_Init+0xc4>)
 8002786:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800278a:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800278c:	4813      	ldr	r0, [pc, #76]	@ (80027dc <BSP_LCD_Init+0xc4>)
 800278e:	f004 f9ef 	bl	8006b70 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002792:	4b10      	ldr	r3, [pc, #64]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 8002794:	2200      	movs	r2, #0
 8002796:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800279e:	4b0d      	ldr	r3, [pc, #52]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 80027aa:	f000 fce5 	bl	8003178 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 80027ae:	4809      	ldr	r0, [pc, #36]	@ (80027d4 <BSP_LCD_Init+0xbc>)
 80027b0:	f001 fffc 	bl	80047ac <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	@ (80027e0 <BSP_LCD_Init+0xc8>)
 80027b6:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <BSP_LCD_Init+0xcc>)
 80027b8:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80027ba:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <BSP_LCD_Init+0xc8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80027c2:	f000 fec7 	bl	8003554 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027c6:	4808      	ldr	r0, [pc, #32]	@ (80027e8 <BSP_LCD_Init+0xd0>)
 80027c8:	f000 f8ce 	bl	8002968 <BSP_LCD_SetFont>

  return LCD_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000434 	.word	0x20000434
 80027d8:	40016800 	.word	0x40016800
 80027dc:	2000051c 	.word	0x2000051c
 80027e0:	20000568 	.word	0x20000568
 80027e4:	20000014 	.word	0x20000014
 80027e8:	20000084 	.word	0x20000084

080027ec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80027f0:	4b03      	ldr	r3, [pc, #12]	@ (8002800 <BSP_LCD_GetXSize+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	4798      	blx	r3
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000568 	.word	0x20000568

08002804 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <BSP_LCD_GetYSize+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	4798      	blx	r3
 8002810:	4603      	mov	r3, r0
}
 8002812:	4618      	mov	r0, r3
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000568 	.word	0x20000568

0800281c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b090      	sub	sp, #64	@ 0x40
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800282c:	f7ff ffde 	bl	80027ec <BSP_LCD_GetXSize>
 8002830:	4603      	mov	r3, r0
 8002832:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8002838:	f7ff ffe4 	bl	8002804 <BSP_LCD_GetYSize>
 800283c:	4603      	mov	r3, r0
 800283e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8002848:	23ff      	movs	r3, #255	@ 0xff
 800284a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002862:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002868:	2307      	movs	r3, #7
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800286c:	f7ff ffbe 	bl	80027ec <BSP_LCD_GetXSize>
 8002870:	4603      	mov	r3, r0
 8002872:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002874:	f7ff ffc6 	bl	8002804 <BSP_LCD_GetYSize>
 8002878:	4603      	mov	r3, r0
 800287a:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	f107 030c 	add.w	r3, r7, #12
 8002882:	4619      	mov	r1, r3
 8002884:	4814      	ldr	r0, [pc, #80]	@ (80028d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002886:	f002 f86b 	bl	8004960 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	4913      	ldr	r1, [pc, #76]	@ (80028dc <BSP_LCD_LayerDefaultInit+0xc0>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3304      	adds	r3, #4
 800289a:	f04f 32ff 	mov.w	r2, #4294967295
 800289e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	490e      	ldr	r1, [pc, #56]	@ (80028dc <BSP_LCD_LayerDefaultInit+0xc0>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	3308      	adds	r3, #8
 80028b0:	4a0b      	ldr	r2, [pc, #44]	@ (80028e0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80028b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80028b4:	88fa      	ldrh	r2, [r7, #6]
 80028b6:	4909      	ldr	r1, [pc, #36]	@ (80028dc <BSP_LCD_LayerDefaultInit+0xc0>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80028c6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80028c8:	4803      	ldr	r0, [pc, #12]	@ (80028d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028ca:	f002 f887 	bl	80049dc <HAL_LTDC_EnableDither>
}
 80028ce:	bf00      	nop
 80028d0:	3740      	adds	r7, #64	@ 0x40
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000434 	.word	0x20000434
 80028dc:	20000550 	.word	0x20000550
 80028e0:	20000084 	.word	0x20000084

080028e4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80028ec:	4a04      	ldr	r2, [pc, #16]	@ (8002900 <BSP_LCD_SelectLayer+0x1c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	2000054c 	.word	0x2000054c

08002904 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800290c:	4b07      	ldr	r3, [pc, #28]	@ (800292c <BSP_LCD_SetTextColor+0x28>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4907      	ldr	r1, [pc, #28]	@ (8002930 <BSP_LCD_SetTextColor+0x2c>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	601a      	str	r2, [r3, #0]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	2000054c 	.word	0x2000054c
 8002930:	20000550 	.word	0x20000550

08002934 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800293c:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <BSP_LCD_SetBackColor+0x2c>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4908      	ldr	r1, [pc, #32]	@ (8002964 <BSP_LCD_SetBackColor+0x30>)
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	3304      	adds	r3, #4
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	601a      	str	r2, [r3, #0]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000054c 	.word	0x2000054c
 8002964:	20000550 	.word	0x20000550

08002968 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002970:	4b08      	ldr	r3, [pc, #32]	@ (8002994 <BSP_LCD_SetFont+0x2c>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4908      	ldr	r1, [pc, #32]	@ (8002998 <BSP_LCD_SetFont+0x30>)
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	3308      	adds	r3, #8
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	2000054c 	.word	0x2000054c
 8002998:	20000550 	.word	0x20000550

0800299c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <BSP_LCD_GetFont+0x24>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4907      	ldr	r1, [pc, #28]	@ (80029c4 <BSP_LCD_GetFont+0x28>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3308      	adds	r3, #8
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000054c 	.word	0x2000054c
 80029c4:	20000550 	.word	0x20000550

080029c8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80029c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80029d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002a10 <BSP_LCD_Clear+0x48>)
 80029d2:	681c      	ldr	r4, [r3, #0]
 80029d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a10 <BSP_LCD_Clear+0x48>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a14 <BSP_LCD_Clear+0x4c>)
 80029da:	2134      	movs	r1, #52	@ 0x34
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	335c      	adds	r3, #92	@ 0x5c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461e      	mov	r6, r3
 80029e8:	f7ff ff00 	bl	80027ec <BSP_LCD_GetXSize>
 80029ec:	4605      	mov	r5, r0
 80029ee:	f7ff ff09 	bl	8002804 <BSP_LCD_GetYSize>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	4613      	mov	r3, r2
 80029fe:	462a      	mov	r2, r5
 8002a00:	4631      	mov	r1, r6
 8002a02:	4620      	mov	r0, r4
 8002a04:	f000 fd6e 	bl	80034e4 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a10:	2000054c 	.word	0x2000054c
 8002a14:	20000434 	.word	0x20000434

08002a18 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8002a18:	b590      	push	{r4, r7, lr}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8002a20:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	492d      	ldr	r1, [pc, #180]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8002a34:	4b28      	ldr	r3, [pc, #160]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4827      	ldr	r0, [pc, #156]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002a3e:	460b      	mov	r3, r1
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4403      	add	r3, r0
 8002a48:	3304      	adds	r3, #4
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	4823      	ldr	r0, [pc, #140]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4403      	add	r3, r0
 8002a58:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(),
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	491f      	ldr	r1, [pc, #124]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	88da      	ldrh	r2, [r3, #6]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	fb12 f303 	smulbb	r3, r2, r3
 8002a78:	b29c      	uxth	r4, r3
 8002a7a:	f7ff feb7 	bl	80027ec <BSP_LCD_GetXSize>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	b299      	uxth	r1, r3
                   DrawProp[ActiveLayer].pFont->Height);
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4815      	ldr	r0, [pc, #84]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4403      	add	r3, r0
 8002a92:	3308      	adds	r3, #8
 8002a94:	681b      	ldr	r3, [r3, #0]
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(),
 8002a96:	88db      	ldrh	r3, [r3, #6]
 8002a98:	460a      	mov	r2, r1
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f000 fa61 	bl	8002f64 <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = colorbackup;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	490d      	ldr	r1, [pc, #52]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ab6:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <BSP_LCD_ClearStringLine+0xc0>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4908      	ldr	r1, [pc, #32]	@ (8002adc <BSP_LCD_ClearStringLine+0xc4>)
 8002abc:	4613      	mov	r3, r2
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff1b 	bl	8002904 <BSP_LCD_SetTextColor>
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd90      	pop	{r4, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000054c 	.word	0x2000054c
 8002adc:	20000550 	.word	0x20000550

08002ae0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
 8002aea:	460b      	mov	r3, r1
 8002aec:	80bb      	strh	r3, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002af2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <BSP_LCD_DisplayChar+0x80>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	491b      	ldr	r1, [pc, #108]	@ (8002b64 <BSP_LCD_DisplayChar+0x84>)
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	3308      	adds	r3, #8
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6819      	ldr	r1, [r3, #0]
 8002b08:	78fb      	ldrb	r3, [r7, #3]
 8002b0a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b0e:	4b14      	ldr	r3, [pc, #80]	@ (8002b60 <BSP_LCD_DisplayChar+0x80>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4c14      	ldr	r4, [pc, #80]	@ (8002b64 <BSP_LCD_DisplayChar+0x84>)
 8002b14:	4613      	mov	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4423      	add	r3, r4
 8002b1e:	3308      	adds	r3, #8
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002b24:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b28:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <BSP_LCD_DisplayChar+0x80>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002b64 <BSP_LCD_DisplayChar+0x84>)
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4423      	add	r3, r4
 8002b38:	3308      	adds	r3, #8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	889b      	ldrh	r3, [r3, #4]
 8002b3e:	3307      	adds	r3, #7
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da00      	bge.n	8002b46 <BSP_LCD_DisplayChar+0x66>
 8002b44:	3307      	adds	r3, #7
 8002b46:	10db      	asrs	r3, r3, #3
 8002b48:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002b4c:	18ca      	adds	r2, r1, r3
 8002b4e:	88b9      	ldrh	r1, [r7, #4]
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fc0c 	bl	8003370 <DrawChar>
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd90      	pop	{r4, r7, pc}
 8002b60:	2000054c 	.word	0x2000054c
 8002b64:	20000550 	.word	0x20000550

08002b68 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002b68:	b5b0      	push	{r4, r5, r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60ba      	str	r2, [r7, #8]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	81fb      	strh	r3, [r7, #14]
 8002b76:	460b      	mov	r3, r1
 8002b78:	81bb      	strh	r3, [r7, #12]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	83fb      	strh	r3, [r7, #30]
 8002b82:	2300      	movs	r3, #0
 8002b84:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 8002b92:	e002      	b.n	8002b9a <BSP_LCD_DisplayStringAt+0x32>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	617a      	str	r2, [r7, #20]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f6      	bne.n	8002b94 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8002ba6:	f7ff fe21 	bl	80027ec <BSP_LCD_GetXSize>
 8002baa:	4601      	mov	r1, r0
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <BSP_LCD_DisplayStringAt+0x174>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	484b      	ldr	r0, [pc, #300]	@ (8002ce0 <BSP_LCD_DisplayStringAt+0x178>)
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4403      	add	r3, r0
 8002bbc:	3308      	adds	r3, #8
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	889b      	ldrh	r3, [r3, #4]
 8002bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc6:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d01c      	beq.n	8002c08 <BSP_LCD_DisplayStringAt+0xa0>
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	dc33      	bgt.n	8002c3a <BSP_LCD_DisplayStringAt+0xd2>
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d002      	beq.n	8002bdc <BSP_LCD_DisplayStringAt+0x74>
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d019      	beq.n	8002c0e <BSP_LCD_DisplayStringAt+0xa6>
 8002bda:	e02e      	b.n	8002c3a <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad1      	subs	r1, r2, r3
 8002be2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cdc <BSP_LCD_DisplayStringAt+0x174>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	483e      	ldr	r0, [pc, #248]	@ (8002ce0 <BSP_LCD_DisplayStringAt+0x178>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4403      	add	r3, r0
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	889b      	ldrh	r3, [r3, #4]
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	89fb      	ldrh	r3, [r7, #14]
 8002c02:	4413      	add	r3, r2
 8002c04:	83fb      	strh	r3, [r7, #30]
      break;
 8002c06:	e01b      	b.n	8002c40 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002c08:	89fb      	ldrh	r3, [r7, #14]
 8002c0a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c0c:	e018      	b.n	8002c40 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	b299      	uxth	r1, r3
 8002c16:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <BSP_LCD_DisplayStringAt+0x174>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4831      	ldr	r0, [pc, #196]	@ (8002ce0 <BSP_LCD_DisplayStringAt+0x178>)
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4403      	add	r3, r0
 8002c26:	3308      	adds	r3, #8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	889b      	ldrh	r3, [r3, #4]
 8002c2c:	fb11 f303 	smulbb	r3, r1, r3
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	4413      	add	r3, r2
 8002c36:	83fb      	strh	r3, [r7, #30]
      break;
 8002c38:	e002      	b.n	8002c40 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 8002c3a:	89fb      	ldrh	r3, [r7, #14]
 8002c3c:	83fb      	strh	r3, [r7, #30]
      break;
 8002c3e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002c40:	e01a      	b.n	8002c78 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	89b9      	ldrh	r1, [r7, #12]
 8002c48:	8bfb      	ldrh	r3, [r7, #30]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff48 	bl	8002ae0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002c50:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <BSP_LCD_DisplayStringAt+0x174>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4922      	ldr	r1, [pc, #136]	@ (8002ce0 <BSP_LCD_DisplayStringAt+0x178>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3308      	adds	r3, #8
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	889a      	ldrh	r2, [r3, #4]
 8002c66:	8bfb      	ldrh	r3, [r7, #30]
 8002c68:	4413      	add	r3, r2
 8002c6a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	60bb      	str	r3, [r7, #8]
    i++;
 8002c72:	8bbb      	ldrh	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2dc      	uxtb	r4, r3
 8002c86:	f7ff fdb1 	bl	80027ec <BSP_LCD_GetXSize>
 8002c8a:	8bb9      	ldrh	r1, [r7, #28]
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <BSP_LCD_DisplayStringAt+0x174>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4d13      	ldr	r5, [pc, #76]	@ (8002ce0 <BSP_LCD_DisplayStringAt+0x178>)
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	442b      	add	r3, r5
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	889b      	ldrh	r3, [r3, #4]
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	1ac3      	subs	r3, r0, r3
 8002ca8:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 8002caa:	4b0c      	ldr	r3, [pc, #48]	@ (8002cdc <BSP_LCD_DisplayStringAt+0x174>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <BSP_LCD_DisplayStringAt+0x178>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4403      	add	r3, r0
 8002cba:	3308      	adds	r3, #8
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	bf2c      	ite	cs
 8002cc4:	2301      	movcs	r3, #1
 8002cc6:	2300      	movcc	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	4023      	ands	r3, r4
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1b7      	bne.n	8002c42 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bdb0      	pop	{r4, r5, r7, pc}
 8002cdc:	2000054c 	.word	0x2000054c
 8002ce0:	20000550 	.word	0x20000550

08002ce4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002cf0:	f7ff fe54 	bl	800299c <BSP_LCD_GetFont>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	88db      	ldrh	r3, [r3, #6]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	fb12 f303 	smulbb	r3, r2, r3
 8002cfe:	b299      	uxth	r1, r3
 8002d00:	2303      	movs	r3, #3
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7ff ff2f 	bl	8002b68 <BSP_LCD_DisplayStringAt>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002d14:	b5b0      	push	{r4, r5, r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	80fb      	strh	r3, [r7, #6]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	80bb      	strh	r3, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <BSP_LCD_DrawHLine+0x70>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a16      	ldr	r2, [pc, #88]	@ (8002d88 <BSP_LCD_DrawHLine+0x74>)
 8002d30:	2134      	movs	r1, #52	@ 0x34
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	335c      	adds	r3, #92	@ 0x5c
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	f7ff fd56 	bl	80027ec <BSP_LCD_GetXSize>
 8002d40:	4602      	mov	r2, r0
 8002d42:	88bb      	ldrh	r3, [r7, #4]
 8002d44:	fb03 f202 	mul.w	r2, r3, r2
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4423      	add	r3, r4
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002d52:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <BSP_LCD_DrawHLine+0x70>)
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	887c      	ldrh	r4, [r7, #2]
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <BSP_LCD_DrawHLine+0x70>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4d0b      	ldr	r5, [pc, #44]	@ (8002d8c <BSP_LCD_DrawHLine+0x78>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	442b      	add	r3, r5
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	9301      	str	r3, [sp, #4]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	2301      	movs	r3, #1
 8002d74:	4622      	mov	r2, r4
 8002d76:	f000 fbb5 	bl	80034e4 <FillBuffer>
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000054c 	.word	0x2000054c
 8002d88:	20000434 	.word	0x20000434
 8002d8c:	20000550 	.word	0x20000550

08002d90 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	80bb      	strh	r3, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	f1c3 0303 	rsb	r3, r3, #3
 8002daa:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	60fb      	str	r3, [r7, #12]

  while (curx <= cury)
 8002db4:	e0c7      	b.n	8002f46 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	88ba      	ldrh	r2, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	4b64      	ldr	r3, [pc, #400]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4c64      	ldr	r4, [pc, #400]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4423      	add	r3, r4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f000 faa1 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b298      	uxth	r0, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	88ba      	ldrh	r2, [r7, #4]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	b299      	uxth	r1, r3
 8002df6:	4b59      	ldr	r3, [pc, #356]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4c59      	ldr	r4, [pc, #356]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4423      	add	r3, r4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f000 fa8b 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4413      	add	r3, r2
 8002e16:	b298      	uxth	r0, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	88ba      	ldrh	r2, [r7, #4]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b4e      	ldr	r3, [pc, #312]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4c4e      	ldr	r4, [pc, #312]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4423      	add	r3, r4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f000 fa75 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b298      	uxth	r0, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	88ba      	ldrh	r2, [r7, #4]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	4b43      	ldr	r3, [pc, #268]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4c43      	ldr	r4, [pc, #268]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4423      	add	r3, r4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 fa5f 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	b298      	uxth	r0, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	88bb      	ldrh	r3, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	b299      	uxth	r1, r3
 8002e7a:	4b38      	ldr	r3, [pc, #224]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	4c38      	ldr	r4, [pc, #224]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4423      	add	r3, r4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f000 fa49 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	b298      	uxth	r0, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	88bb      	ldrh	r3, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b299      	uxth	r1, r3
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4c2d      	ldr	r4, [pc, #180]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4423      	add	r3, r4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f000 fa33 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	b298      	uxth	r0, r3
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	88bb      	ldrh	r3, [r7, #4]
 8002ece:	4413      	add	r3, r2
 8002ed0:	b299      	uxth	r1, r3
 8002ed2:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4c22      	ldr	r4, [pc, #136]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4423      	add	r3, r4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f000 fa1d 	bl	8003324 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	88fa      	ldrh	r2, [r7, #6]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	b298      	uxth	r0, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	b299      	uxth	r1, r3
 8002efe:	4b17      	ldr	r3, [pc, #92]	@ (8002f5c <BSP_LCD_DrawCircle+0x1cc>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4c17      	ldr	r4, [pc, #92]	@ (8002f60 <BSP_LCD_DrawCircle+0x1d0>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4423      	add	r3, r4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	f000 fa07 	bl	8003324 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da06      	bge.n	8002f2a <BSP_LCD_DrawCircle+0x19a>
    {
      d += (curx << 2) + 6;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	009a      	lsls	r2, r3, #2
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	4413      	add	r3, r2
 8002f24:	3306      	adds	r3, #6
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e00a      	b.n	8002f40 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	009a      	lsls	r2, r3, #2
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4413      	add	r3, r2
 8002f36:	330a      	adds	r3, #10
 8002f38:	617b      	str	r3, [r7, #20]
      cury--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	3301      	adds	r3, #1
 8002f44:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	f67f af33 	bls.w	8002db6 <BSP_LCD_DrawCircle+0x26>
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd90      	pop	{r4, r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000054c 	.word	0x2000054c
 8002f60:	20000550 	.word	0x20000550

08002f64 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f68:	b086      	sub	sp, #24
 8002f6a:	af02      	add	r7, sp, #8
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	4608      	mov	r0, r1
 8002f70:	4611      	mov	r1, r2
 8002f72:	461a      	mov	r2, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	80fb      	strh	r3, [r7, #6]
 8002f78:	4603      	mov	r3, r0
 8002f7a:	80bb      	strh	r3, [r7, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	807b      	strh	r3, [r7, #2]
 8002f80:	4613      	mov	r3, r2
 8002f82:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f88:	4b20      	ldr	r3, [pc, #128]	@ (800300c <BSP_LCD_FillRect+0xa8>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4920      	ldr	r1, [pc, #128]	@ (8003010 <BSP_LCD_FillRect+0xac>)
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fcb2 	bl	8002904 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800300c <BSP_LCD_FillRect+0xa8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8003014 <BSP_LCD_FillRect+0xb0>)
 8002fa6:	2134      	movs	r1, #52	@ 0x34
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	335c      	adds	r3, #92	@ 0x5c
 8002fb0:	681c      	ldr	r4, [r3, #0]
 8002fb2:	f7ff fc1b 	bl	80027ec <BSP_LCD_GetXSize>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	88bb      	ldrh	r3, [r7, #4]
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4423      	add	r3, r4
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8002fc8:	4b10      	ldr	r3, [pc, #64]	@ (800300c <BSP_LCD_FillRect+0xa8>)
 8002fca:	681c      	ldr	r4, [r3, #0]
 8002fcc:	68fd      	ldr	r5, [r7, #12]
 8002fce:	887e      	ldrh	r6, [r7, #2]
 8002fd0:	f8b7 8000 	ldrh.w	r8, [r7]
 8002fd4:	f7ff fc0a 	bl	80027ec <BSP_LCD_GetXSize>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	1ad1      	subs	r1, r2, r3
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <BSP_LCD_FillRect+0xa8>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	480b      	ldr	r0, [pc, #44]	@ (8003010 <BSP_LCD_FillRect+0xac>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4403      	add	r3, r0
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	9100      	str	r1, [sp, #0]
 8002ff4:	4643      	mov	r3, r8
 8002ff6:	4632      	mov	r2, r6
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f000 fa72 	bl	80034e4 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800300a:	bf00      	nop
 800300c:	2000054c 	.word	0x2000054c
 8003010:	20000550 	.word	0x20000550
 8003014:	20000434 	.word	0x20000434

08003018 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
 8003022:	460b      	mov	r3, r1
 8003024:	80bb      	strh	r3, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */

  d = 3 - (Radius << 1);
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	f1c3 0303 	rsb	r3, r3, #3
 8003032:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003034:	2300      	movs	r3, #0
 8003036:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003038:	887b      	ldrh	r3, [r7, #2]
 800303a:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800303c:	4b44      	ldr	r3, [pc, #272]	@ (8003150 <BSP_LCD_FillCircle+0x138>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4944      	ldr	r1, [pc, #272]	@ (8003154 <BSP_LCD_FillCircle+0x13c>)
 8003042:	4613      	mov	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fc58 	bl	8002904 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003054:	e061      	b.n	800311a <BSP_LCD_FillCircle+0x102>
  {
    if (cury > 0)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d021      	beq.n	80030a0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	b29b      	uxth	r3, r3
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	b298      	uxth	r0, r3
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	b29a      	uxth	r2, r3
 800306a:	88bb      	ldrh	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	b299      	uxth	r1, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	b29b      	uxth	r3, r3
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	b29b      	uxth	r3, r3
 8003078:	461a      	mov	r2, r3
 800307a:	f7ff fe4b 	bl	8002d14 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	b29b      	uxth	r3, r3
 8003082:	88fa      	ldrh	r2, [r7, #6]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	b298      	uxth	r0, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	b29b      	uxth	r3, r3
 800308c:	88ba      	ldrh	r2, [r7, #4]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	b299      	uxth	r1, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	b29b      	uxth	r3, r3
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	f7ff fe3a 	bl	8002d14 <BSP_LCD_DrawHLine>
    }

    if (curx > 0)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d021      	beq.n	80030ea <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	b298      	uxth	r0, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	88ba      	ldrh	r2, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b299      	uxth	r1, r3
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	f7ff fe26 	bl	8002d14 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	b298      	uxth	r0, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	88bb      	ldrh	r3, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	b299      	uxth	r1, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	f7ff fe15 	bl	8002d14 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da06      	bge.n	80030fe <BSP_LCD_FillCircle+0xe6>
    {
      d += (curx << 2) + 6;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	009a      	lsls	r2, r3, #2
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4413      	add	r3, r2
 80030f8:	3306      	adds	r3, #6
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e00a      	b.n	8003114 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	009a      	lsls	r2, r3, #2
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	4413      	add	r3, r2
 800310a:	330a      	adds	r3, #10
 800310c:	617b      	str	r3, [r7, #20]
      cury--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	3301      	adds	r3, #1
 8003118:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	429a      	cmp	r2, r3
 8003120:	d999      	bls.n	8003056 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003122:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <BSP_LCD_FillCircle+0x138>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	490b      	ldr	r1, [pc, #44]	@ (8003154 <BSP_LCD_FillCircle+0x13c>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fbe5 	bl	8002904 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	88b9      	ldrh	r1, [r7, #4]
 800313e:	88fb      	ldrh	r3, [r7, #6]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fe25 	bl	8002d90 <BSP_LCD_DrawCircle>
}
 8003146:	bf00      	nop
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000054c 	.word	0x2000054c
 8003154:	20000550 	.word	0x20000550

08003158 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <BSP_LCD_DisplayOn+0x1c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003166:	4b03      	ldr	r3, [pc, #12]	@ (8003174 <BSP_LCD_DisplayOn+0x1c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4798      	blx	r3
  }
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000568 	.word	0x20000568

08003178 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	@ 0x38
 800317c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
 8003182:	4b61      	ldr	r3, [pc, #388]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003186:	4a60      	ldr	r2, [pc, #384]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003188:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800318c:	6453      	str	r3, [r2, #68]	@ 0x44
 800318e:	4b5e      	ldr	r3, [pc, #376]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	4b5a      	ldr	r3, [pc, #360]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a59      	ldr	r2, [pc, #356]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b57      	ldr	r3, [pc, #348]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a52      	ldr	r2, [pc, #328]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b50      	ldr	r3, [pc, #320]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a4b      	ldr	r2, [pc, #300]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b49      	ldr	r3, [pc, #292]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	4b45      	ldr	r3, [pc, #276]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	4a44      	ldr	r2, [pc, #272]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 80031f8:	f043 0304 	orr.w	r3, r3, #4
 80031fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fe:	4b42      	ldr	r3, [pc, #264]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	4a3d      	ldr	r2, [pc, #244]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003214:	f043 0308 	orr.w	r3, r3, #8
 8003218:	6313      	str	r3, [r2, #48]	@ 0x30
 800321a:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	4a36      	ldr	r2, [pc, #216]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003230:	f043 0320 	orr.w	r3, r3, #32
 8003234:	6313      	str	r3, [r2, #48]	@ 0x30
 8003236:	4b34      	ldr	r3, [pc, #208]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	4b30      	ldr	r3, [pc, #192]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	4a2f      	ldr	r2, [pc, #188]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 800324c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003250:	6313      	str	r3, [r2, #48]	@ 0x30
 8003252:	4b2d      	ldr	r3, [pc, #180]	@ (8003308 <BSP_LCD_MspInit+0x190>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800325e:	f641 0358 	movw	r3, #6232	@ 0x1858
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003264:	2302      	movs	r3, #2
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800326c:	2302      	movs	r3, #2
 800326e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8003270:	230e      	movs	r3, #14
 8003272:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003278:	4619      	mov	r1, r3
 800327a:	4824      	ldr	r0, [pc, #144]	@ (800330c <BSP_LCD_MspInit+0x194>)
 800327c:	f001 f8d0 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003280:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	4820      	ldr	r0, [pc, #128]	@ (8003310 <BSP_LCD_MspInit+0x198>)
 800328e:	f001 f8c7 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003292:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003298:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329c:	4619      	mov	r1, r3
 800329e:	481d      	ldr	r0, [pc, #116]	@ (8003314 <BSP_LCD_MspInit+0x19c>)
 80032a0:	f001 f8be 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80032a4:	2348      	movs	r3, #72	@ 0x48
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80032a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ac:	4619      	mov	r1, r3
 80032ae:	481a      	ldr	r0, [pc, #104]	@ (8003318 <BSP_LCD_MspInit+0x1a0>)
 80032b0:	f001 f8b6 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80032b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80032ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032be:	4619      	mov	r1, r3
 80032c0:	4816      	ldr	r0, [pc, #88]	@ (800331c <BSP_LCD_MspInit+0x1a4>)
 80032c2:	f001 f8ad 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80032c6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d0:	4619      	mov	r1, r3
 80032d2:	4813      	ldr	r0, [pc, #76]	@ (8003320 <BSP_LCD_MspInit+0x1a8>)
 80032d4:	f001 f8a4 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80032d8:	2303      	movs	r3, #3
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80032dc:	2309      	movs	r3, #9
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80032e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e4:	4619      	mov	r1, r3
 80032e6:	480a      	ldr	r0, [pc, #40]	@ (8003310 <BSP_LCD_MspInit+0x198>)
 80032e8:	f001 f89a 	bl	8004420 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80032ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80032f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80032f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032f6:	4619      	mov	r1, r3
 80032f8:	4809      	ldr	r0, [pc, #36]	@ (8003320 <BSP_LCD_MspInit+0x1a8>)
 80032fa:	f001 f891 	bl	8004420 <HAL_GPIO_Init>
}
 80032fe:	bf00      	nop
 8003300:	3738      	adds	r7, #56	@ 0x38
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021400 	.word	0x40021400
 8003320:	40021800 	.word	0x40021800

08003324 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003324:	b5b0      	push	{r4, r5, r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	603a      	str	r2, [r7, #0]
 800332e:	80fb      	strh	r3, [r7, #6]
 8003330:	460b      	mov	r3, r1
 8003332:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003334:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <BSP_LCD_DrawPixel+0x44>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a0c      	ldr	r2, [pc, #48]	@ (800336c <BSP_LCD_DrawPixel+0x48>)
 800333a:	2134      	movs	r1, #52	@ 0x34
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	335c      	adds	r3, #92	@ 0x5c
 8003344:	681c      	ldr	r4, [r3, #0]
 8003346:	88bd      	ldrh	r5, [r7, #4]
 8003348:	f7ff fa50 	bl	80027ec <BSP_LCD_GetXSize>
 800334c:	4603      	mov	r3, r0
 800334e:	fb03 f205 	mul.w	r2, r3, r5
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4423      	add	r3, r4
 800335a:	461a      	mov	r2, r3
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6013      	str	r3, [r2, #0]
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bdb0      	pop	{r4, r5, r7, pc}
 8003368:	2000054c 	.word	0x2000054c
 800336c:	20000434 	.word	0x20000434

08003370 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	603a      	str	r2, [r7, #0]
 800337a:	80fb      	strh	r3, [r7, #6]
 800337c:	460b      	mov	r3, r1
 800337e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800338c:	4b53      	ldr	r3, [pc, #332]	@ (80034dc <DrawChar+0x16c>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4953      	ldr	r1, [pc, #332]	@ (80034e0 <DrawChar+0x170>)
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3308      	adds	r3, #8
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	88db      	ldrh	r3, [r3, #6]
 80033a2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80033a4:	4b4d      	ldr	r3, [pc, #308]	@ (80034dc <DrawChar+0x16c>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	494d      	ldr	r1, [pc, #308]	@ (80034e0 <DrawChar+0x170>)
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3308      	adds	r3, #8
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	889b      	ldrh	r3, [r3, #4]
 80033ba:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 80033bc:	8a3b      	ldrh	r3, [r7, #16]
 80033be:	3307      	adds	r3, #7
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da00      	bge.n	80033c6 <DrawChar+0x56>
 80033c4:	3307      	adds	r3, #7
 80033c6:	10db      	asrs	r3, r3, #3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	8a3b      	ldrh	r3, [r7, #16]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e076      	b.n	80034ca <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80033dc:	8a3b      	ldrh	r3, [r7, #16]
 80033de:	3307      	adds	r3, #7
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da00      	bge.n	80033e6 <DrawChar+0x76>
 80033e4:	3307      	adds	r3, #7
 80033e6:	10db      	asrs	r3, r3, #3
 80033e8:	461a      	mov	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	4413      	add	r3, r2
 80033f4:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80033f6:	8a3b      	ldrh	r3, [r7, #16]
 80033f8:	3307      	adds	r3, #7
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	da00      	bge.n	8003400 <DrawChar+0x90>
 80033fe:	3307      	adds	r3, #7
 8003400:	10db      	asrs	r3, r3, #3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d002      	beq.n	800340c <DrawChar+0x9c>
 8003406:	2b02      	cmp	r3, #2
 8003408:	d004      	beq.n	8003414 <DrawChar+0xa4>
 800340a:	e00c      	b.n	8003426 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	617b      	str	r3, [r7, #20]
        break;
 8003412:	e016      	b.n	8003442 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	3201      	adds	r2, #1
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
        break;
 8003424:	e00d      	b.n	8003442 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	041a      	lsls	r2, r3, #16
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3301      	adds	r3, #1
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	4313      	orrs	r3, r2
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	3202      	adds	r2, #2
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
        break;
 8003440:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e036      	b.n	80034b6 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8003448:	8a3a      	ldrh	r2, [r7, #16]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	1ad2      	subs	r2, r2, r3
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	4413      	add	r3, r2
 8003452:	3b01      	subs	r3, #1
 8003454:	2201      	movs	r2, #1
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	461a      	mov	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	b29a      	uxth	r2, r3
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4413      	add	r3, r2
 800346c:	b298      	uxth	r0, r3
 800346e:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <DrawChar+0x16c>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	491b      	ldr	r1, [pc, #108]	@ (80034e0 <DrawChar+0x170>)
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	88bb      	ldrh	r3, [r7, #4]
 8003482:	4619      	mov	r1, r3
 8003484:	f7ff ff4e 	bl	8003324 <BSP_LCD_DrawPixel>
 8003488:	e012      	b.n	80034b0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	b29a      	uxth	r2, r3
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	4413      	add	r3, r2
 8003492:	b298      	uxth	r0, r3
 8003494:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <DrawChar+0x16c>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4911      	ldr	r1, [pc, #68]	@ (80034e0 <DrawChar+0x170>)
 800349a:	4613      	mov	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3304      	adds	r3, #4
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	88bb      	ldrh	r3, [r7, #4]
 80034aa:	4619      	mov	r1, r3
 80034ac:	f7ff ff3a 	bl	8003324 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	3301      	adds	r3, #1
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	8a3b      	ldrh	r3, [r7, #16]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d3c4      	bcc.n	8003448 <DrawChar+0xd8>
      }
    }
    Ypos++;
 80034be:	88bb      	ldrh	r3, [r7, #4]
 80034c0:	3301      	adds	r3, #1
 80034c2:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	8a7b      	ldrh	r3, [r7, #18]
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d384      	bcc.n	80033dc <DrawChar+0x6c>
  }
}
 80034d2:	bf00      	nop
 80034d4:	bf00      	nop
 80034d6:	3720      	adds	r7, #32
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2000054c 	.word	0x2000054c
 80034e0:	20000550 	.word	0x20000550

080034e4 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80034f2:	4b16      	ldr	r3, [pc, #88]	@ (800354c <FillBuffer+0x68>)
 80034f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80034f8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034fa:	4b14      	ldr	r3, [pc, #80]	@ (800354c <FillBuffer+0x68>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8003500:	4a12      	ldr	r2, [pc, #72]	@ (800354c <FillBuffer+0x68>)
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8003506:	4b11      	ldr	r3, [pc, #68]	@ (800354c <FillBuffer+0x68>)
 8003508:	4a11      	ldr	r2, [pc, #68]	@ (8003550 <FillBuffer+0x6c>)
 800350a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 800350c:	480f      	ldr	r0, [pc, #60]	@ (800354c <FillBuffer+0x68>)
 800350e:	f000 fcf1 	bl	8003ef4 <HAL_DMA2D_Init>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d115      	bne.n	8003544 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	480c      	ldr	r0, [pc, #48]	@ (800354c <FillBuffer+0x68>)
 800351c:	f000 fe52 	bl	80041c4 <HAL_DMA2D_ConfigLayer>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10e      	bne.n	8003544 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69f9      	ldr	r1, [r7, #28]
 8003530:	4806      	ldr	r0, [pc, #24]	@ (800354c <FillBuffer+0x68>)
 8003532:	f000 fd32 	bl	8003f9a <HAL_DMA2D_Start>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800353c:	210a      	movs	r1, #10
 800353e:	4803      	ldr	r0, [pc, #12]	@ (800354c <FillBuffer+0x68>)
 8003540:	f000 fd56 	bl	8003ff0 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	200004dc 	.word	0x200004dc
 8003550:	4002b000 	.word	0x4002b000

08003554 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003558:	4b29      	ldr	r3, [pc, #164]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 800355a:	4a2a      	ldr	r2, [pc, #168]	@ (8003604 <BSP_SDRAM_Init+0xb0>)
 800355c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800355e:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 8003560:	2202      	movs	r2, #2
 8003562:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003564:	4b28      	ldr	r3, [pc, #160]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 8003566:	2207      	movs	r2, #7
 8003568:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800356a:	4b27      	ldr	r3, [pc, #156]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 800356c:	2204      	movs	r2, #4
 800356e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003570:	4b25      	ldr	r3, [pc, #148]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 8003572:	2207      	movs	r2, #7
 8003574:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003576:	4b24      	ldr	r3, [pc, #144]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 8003578:	2202      	movs	r2, #2
 800357a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800357c:	4b22      	ldr	r3, [pc, #136]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 800357e:	2202      	movs	r2, #2
 8003580:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003582:	4b21      	ldr	r3, [pc, #132]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 8003584:	2202      	movs	r2, #2
 8003586:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003588:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 800358a:	2201      	movs	r2, #1
 800358c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800358e:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 8003590:	2200      	movs	r2, #0
 8003592:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003594:	4b1a      	ldr	r3, [pc, #104]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 8003596:	2204      	movs	r2, #4
 8003598:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800359a:	4b19      	ldr	r3, [pc, #100]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 800359c:	2210      	movs	r2, #16
 800359e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80035a0:	4b17      	ldr	r3, [pc, #92]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80035a6:	4b16      	ldr	r3, [pc, #88]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035a8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80035ac:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80035ae:	4b14      	ldr	r3, [pc, #80]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80035b4:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ba:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80035bc:	4b10      	ldr	r3, [pc, #64]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035be:	2200      	movs	r2, #0
 80035c0:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80035c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80035ca:	2100      	movs	r1, #0
 80035cc:	480c      	ldr	r0, [pc, #48]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035ce:	f000 f87f 	bl	80036d0 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80035d2:	490d      	ldr	r1, [pc, #52]	@ (8003608 <BSP_SDRAM_Init+0xb4>)
 80035d4:	480a      	ldr	r0, [pc, #40]	@ (8003600 <BSP_SDRAM_Init+0xac>)
 80035d6:	f003 fc8b 	bl	8006ef0 <HAL_SDRAM_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80035e0:	4b0a      	ldr	r3, [pc, #40]	@ (800360c <BSP_SDRAM_Init+0xb8>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e002      	b.n	80035ee <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80035e8:	4b08      	ldr	r3, [pc, #32]	@ (800360c <BSP_SDRAM_Init+0xb8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035ee:	f240 506a 	movw	r0, #1386	@ 0x56a
 80035f2:	f000 f80d 	bl	8003610 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80035f6:	4b05      	ldr	r3, [pc, #20]	@ (800360c <BSP_SDRAM_Init+0xb8>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	2000056c 	.word	0x2000056c
 8003604:	a0000140 	.word	0xa0000140
 8003608:	200005a0 	.word	0x200005a0
 800360c:	2000008c 	.word	0x2000008c

08003610 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800361c:	4b2a      	ldr	r3, [pc, #168]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003622:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003624:	2208      	movs	r2, #8
 8003626:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003628:	4b27      	ldr	r3, [pc, #156]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362a:	2201      	movs	r2, #1
 800362c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800362e:	4b26      	ldr	r3, [pc, #152]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003630:	2200      	movs	r2, #0
 8003632:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003638:	4923      	ldr	r1, [pc, #140]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800363a:	4824      	ldr	r0, [pc, #144]	@ (80036cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800363c:	f003 fc96 	bl	8006f6c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003640:	2001      	movs	r0, #1
 8003642:	f000 f993 	bl	800396c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003646:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003648:	2202      	movs	r2, #2
 800364a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800364c:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364e:	2208      	movs	r2, #8
 8003650:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003652:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003654:	2201      	movs	r2, #1
 8003656:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800365e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003662:	4919      	ldr	r1, [pc, #100]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003664:	4819      	ldr	r0, [pc, #100]	@ (80036cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003666:	f003 fc81 	bl	8006f6c <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800366a:	4b17      	ldr	r3, [pc, #92]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800366c:	2203      	movs	r2, #3
 800366e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003670:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003672:	2208      	movs	r2, #8
 8003674:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003676:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003678:	2204      	movs	r2, #4
 800367a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800367c:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800367e:	2200      	movs	r2, #0
 8003680:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003682:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003686:	4910      	ldr	r1, [pc, #64]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003688:	4810      	ldr	r0, [pc, #64]	@ (80036cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 800368a:	f003 fc6f 	bl	8006f6c <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800368e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8003692:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003694:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003696:	2204      	movs	r2, #4
 8003698:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800369a:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800369c:	2208      	movs	r2, #8
 800369e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80036a0:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a07      	ldr	r2, [pc, #28]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036aa:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80036ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036b0:	4905      	ldr	r1, [pc, #20]	@ (80036c8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036b2:	4806      	ldr	r0, [pc, #24]	@ (80036cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036b4:	f003 fc5a 	bl	8006f6c <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4804      	ldr	r0, [pc, #16]	@ (80036cc <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036bc:	f003 fc8b 	bl	8006fd6 <HAL_SDRAM_ProgramRefreshRate>
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	200005bc 	.word	0x200005bc
 80036cc:	2000056c 	.word	0x2000056c

080036d0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b090      	sub	sp, #64	@ 0x40
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80ec 	beq.w	80038ba <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036e6:	4b77      	ldr	r3, [pc, #476]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 80036e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ea:	4a76      	ldr	r2, [pc, #472]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6393      	str	r3, [r2, #56]	@ 0x38
 80036f2:	4b74      	ldr	r3, [pc, #464]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
 8003702:	4b70      	ldr	r3, [pc, #448]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003706:	4a6f      	ldr	r2, [pc, #444]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800370c:	6313      	str	r3, [r2, #48]	@ 0x30
 800370e:	4b6d      	ldr	r3, [pc, #436]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
 800371e:	4b69      	ldr	r3, [pc, #420]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	4a68      	ldr	r2, [pc, #416]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003724:	f043 0302 	orr.w	r3, r3, #2
 8003728:	6313      	str	r3, [r2, #48]	@ 0x30
 800372a:	4b66      	ldr	r3, [pc, #408]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	623b      	str	r3, [r7, #32]
 8003734:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	4b62      	ldr	r3, [pc, #392]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	4a61      	ldr	r2, [pc, #388]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003740:	f043 0304 	orr.w	r3, r3, #4
 8003744:	6313      	str	r3, [r2, #48]	@ 0x30
 8003746:	4b5f      	ldr	r3, [pc, #380]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	61fb      	str	r3, [r7, #28]
 8003750:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	4b5b      	ldr	r3, [pc, #364]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	4a5a      	ldr	r2, [pc, #360]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 800375c:	f043 0308 	orr.w	r3, r3, #8
 8003760:	6313      	str	r3, [r2, #48]	@ 0x30
 8003762:	4b58      	ldr	r3, [pc, #352]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	4b54      	ldr	r3, [pc, #336]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	4a53      	ldr	r2, [pc, #332]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003778:	f043 0310 	orr.w	r3, r3, #16
 800377c:	6313      	str	r3, [r2, #48]	@ 0x30
 800377e:	4b51      	ldr	r3, [pc, #324]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	4b4d      	ldr	r3, [pc, #308]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003792:	4a4c      	ldr	r2, [pc, #304]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	6313      	str	r3, [r2, #48]	@ 0x30
 800379a:	4b4a      	ldr	r3, [pc, #296]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	4b46      	ldr	r3, [pc, #280]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ae:	4a45      	ldr	r2, [pc, #276]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 80037b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037b6:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <BSP_SDRAM_MspInit+0x1f4>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037be:	60fb      	str	r3, [r7, #12]
 80037c0:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80037c2:	2302      	movs	r3, #2
 80037c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80037c6:	2302      	movs	r3, #2
 80037c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80037ce:	230c      	movs	r3, #12
 80037d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80037d2:	2360      	movs	r3, #96	@ 0x60
 80037d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80037d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037da:	4619      	mov	r1, r3
 80037dc:	483a      	ldr	r0, [pc, #232]	@ (80038c8 <BSP_SDRAM_MspInit+0x1f8>)
 80037de:	f000 fe1f 	bl	8004420 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80037e2:	2301      	movs	r3, #1
 80037e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80037e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037ea:	4619      	mov	r1, r3
 80037ec:	4837      	ldr	r0, [pc, #220]	@ (80038cc <BSP_SDRAM_MspInit+0x1fc>)
 80037ee:	f000 fe17 	bl	8004420 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80037f2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80037f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80037f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037fc:	4619      	mov	r1, r3
 80037fe:	4834      	ldr	r0, [pc, #208]	@ (80038d0 <BSP_SDRAM_MspInit+0x200>)
 8003800:	f000 fe0e 	bl	8004420 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003804:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003808:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800380a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800380e:	4619      	mov	r1, r3
 8003810:	4830      	ldr	r0, [pc, #192]	@ (80038d4 <BSP_SDRAM_MspInit+0x204>)
 8003812:	f000 fe05 	bl	8004420 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8003816:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800381c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003820:	4619      	mov	r1, r3
 8003822:	482d      	ldr	r0, [pc, #180]	@ (80038d8 <BSP_SDRAM_MspInit+0x208>)
 8003824:	f000 fdfc 	bl	8004420 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003828:	f248 1333 	movw	r3, #33075	@ 0x8133
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800382e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003832:	4619      	mov	r1, r3
 8003834:	4829      	ldr	r0, [pc, #164]	@ (80038dc <BSP_SDRAM_MspInit+0x20c>)
 8003836:	f000 fdf3 	bl	8004420 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800383a:	4b29      	ldr	r3, [pc, #164]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 800383c:	2200      	movs	r2, #0
 800383e:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003840:	4b27      	ldr	r3, [pc, #156]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003842:	2280      	movs	r2, #128	@ 0x80
 8003844:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003846:	4b26      	ldr	r3, [pc, #152]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800384c:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800384e:	4b24      	ldr	r3, [pc, #144]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003850:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003854:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003856:	4b22      	ldr	r3, [pc, #136]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003858:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800385c:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800385e:	4b20      	ldr	r3, [pc, #128]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003860:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003864:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8003866:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003868:	2200      	movs	r2, #0
 800386a:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800386c:	4b1c      	ldr	r3, [pc, #112]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 800386e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003872:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003874:	4b1a      	ldr	r3, [pc, #104]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003876:	2200      	movs	r2, #0
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800387a:	4b19      	ldr	r3, [pc, #100]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 800387c:	2203      	movs	r2, #3
 800387e:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003880:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003882:	2200      	movs	r2, #0
 8003884:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8003886:	4b16      	ldr	r3, [pc, #88]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003888:	2200      	movs	r2, #0
 800388a:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 800388e:	4a15      	ldr	r2, [pc, #84]	@ (80038e4 <BSP_SDRAM_MspInit+0x214>)
 8003890:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a12      	ldr	r2, [pc, #72]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
 8003898:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 800389e:	4810      	ldr	r0, [pc, #64]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 80038a0:	f000 fa18 	bl	8003cd4 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 80038a4:	480e      	ldr	r0, [pc, #56]	@ (80038e0 <BSP_SDRAM_MspInit+0x210>)
 80038a6:	f000 f967 	bl	8003b78 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	210f      	movs	r1, #15
 80038ae:	2038      	movs	r0, #56	@ 0x38
 80038b0:	f000 f938 	bl	8003b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80038b4:	2038      	movs	r0, #56	@ 0x38
 80038b6:	f000 f951 	bl	8003b5c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80038ba:	bf00      	nop
 80038bc:	3740      	adds	r7, #64	@ 0x40
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023800 	.word	0x40023800
 80038c8:	40020400 	.word	0x40020400
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40021400 	.word	0x40021400
 80038dc:	40021800 	.word	0x40021800
 80038e0:	200005cc 	.word	0x200005cc
 80038e4:	40026410 	.word	0x40026410

080038e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003928 <HAL_Init+0x40>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003928 <HAL_Init+0x40>)
 80038f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003928 <HAL_Init+0x40>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <HAL_Init+0x40>)
 80038fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003904:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	@ (8003928 <HAL_Init+0x40>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003910:	2003      	movs	r0, #3
 8003912:	f000 f8fc 	bl	8003b0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003916:	200f      	movs	r0, #15
 8003918:	f7fd feb2 	bl	8001680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800391c:	f7fd fe84 	bl	8001628 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40023c00 	.word	0x40023c00

0800392c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <HAL_IncTick+0x20>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <HAL_IncTick+0x24>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4413      	add	r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	@ (8003950 <HAL_IncTick+0x24>)
 800393e:	6013      	str	r3, [r2, #0]
}
 8003940:	bf00      	nop
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000094 	.word	0x20000094
 8003950:	2000062c 	.word	0x2000062c

08003954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return uwTick;
 8003958:	4b03      	ldr	r3, [pc, #12]	@ (8003968 <HAL_GetTick+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	2000062c 	.word	0x2000062c

0800396c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003974:	f7ff ffee 	bl	8003954 <HAL_GetTick>
 8003978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d005      	beq.n	8003992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003986:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <HAL_Delay+0x44>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003992:	bf00      	nop
 8003994:	f7ff ffde 	bl	8003954 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d8f7      	bhi.n	8003994 <HAL_Delay+0x28>
  {
  }
}
 80039a4:	bf00      	nop
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000094 	.word	0x20000094

080039b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039d0:	4013      	ands	r3, r2
 80039d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e6:	4a04      	ldr	r2, [pc, #16]	@ (80039f8 <__NVIC_SetPriorityGrouping+0x44>)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	60d3      	str	r3, [r2, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4907      	ldr	r1, [pc, #28]	@ (8003a50 <__NVIC_EnableIRQ+0x38>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db0a      	blt.n	8003a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	490c      	ldr	r1, [pc, #48]	@ (8003aa0 <__NVIC_SetPriority+0x4c>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	440b      	add	r3, r1
 8003a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a7c:	e00a      	b.n	8003a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4908      	ldr	r1, [pc, #32]	@ (8003aa4 <__NVIC_SetPriority+0x50>)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	440b      	add	r3, r1
 8003a92:	761a      	strb	r2, [r3, #24]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000e100 	.word	0xe000e100
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	@ 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f1c3 0307 	rsb	r3, r3, #7
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	bf28      	it	cs
 8003ac6:	2304      	movcs	r3, #4
 8003ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d902      	bls.n	8003ad8 <NVIC_EncodePriority+0x30>
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3b03      	subs	r3, #3
 8003ad6:	e000      	b.n	8003ada <NVIC_EncodePriority+0x32>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	401a      	ands	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af0:	f04f 31ff 	mov.w	r1, #4294967295
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	43d9      	mvns	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	4313      	orrs	r3, r2
         );
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	@ 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff ff4c 	bl	80039b4 <__NVIC_SetPriorityGrouping>
}
 8003b1c:	bf00      	nop
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b36:	f7ff ff61 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003b3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	6978      	ldr	r0, [r7, #20]
 8003b42:	f7ff ffb1 	bl	8003aa8 <NVIC_EncodePriority>
 8003b46:	4602      	mov	r2, r0
 8003b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff ff80 	bl	8003a54 <__NVIC_SetPriority>
}
 8003b54:	bf00      	nop
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff ff54 	bl	8003a18 <__NVIC_EnableIRQ>
}
 8003b70:	bf00      	nop
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7ff fee6 	bl	8003954 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e099      	b.n	8003cc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bb4:	e00f      	b.n	8003bd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bb6:	f7ff fecd 	bl	8003954 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b05      	cmp	r3, #5
 8003bc2:	d908      	bls.n	8003bd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e078      	b.n	8003cc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e8      	bne.n	8003bb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4b38      	ldr	r3, [pc, #224]	@ (8003cd0 <HAL_DMA_Init+0x158>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d107      	bne.n	8003c40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f023 0307 	bic.w	r3, r3, #7
 8003c56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d117      	bne.n	8003c9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f8bd 	bl	8003dfc <DMA_CheckFifoParam>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2240      	movs	r2, #64	@ 0x40
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c96:	2301      	movs	r3, #1
 8003c98:	e016      	b.n	8003cc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f874 	bl	8003d90 <DMA_CalcBaseAndBitshift>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb0:	223f      	movs	r2, #63	@ 0x3f
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	f010803f 	.word	0xf010803f

08003cd4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e050      	b.n	8003d88 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e048      	b.n	8003d88 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2221      	movs	r2, #33	@ 0x21
 8003d34:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f82a 	bl	8003d90 <DMA_CalcBaseAndBitshift>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	223f      	movs	r2, #63	@ 0x3f
 8003d6a:	409a      	lsls	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	3b10      	subs	r3, #16
 8003da0:	4a14      	ldr	r2, [pc, #80]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x64>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003daa:	4a13      	ldr	r2, [pc, #76]	@ (8003df8 <DMA_CalcBaseAndBitshift+0x68>)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d909      	bls.n	8003dd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dc6:	f023 0303 	bic.w	r3, r3, #3
 8003dca:	1d1a      	adds	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dd0:	e007      	b.n	8003de2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	aaaaaaab 	.word	0xaaaaaaab
 8003df8:	08013888 	.word	0x08013888

08003dfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d11f      	bne.n	8003e56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d856      	bhi.n	8003eca <DMA_CheckFifoParam+0xce>
 8003e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e24 <DMA_CheckFifoParam+0x28>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e47 	.word	0x08003e47
 8003e2c:	08003e35 	.word	0x08003e35
 8003e30:	08003ecb 	.word	0x08003ecb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d046      	beq.n	8003ece <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e44:	e043      	b.n	8003ece <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e4e:	d140      	bne.n	8003ed2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e54:	e03d      	b.n	8003ed2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e5e:	d121      	bne.n	8003ea4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b03      	cmp	r3, #3
 8003e64:	d837      	bhi.n	8003ed6 <DMA_CheckFifoParam+0xda>
 8003e66:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <DMA_CheckFifoParam+0x70>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e83 	.word	0x08003e83
 8003e74:	08003e7d 	.word	0x08003e7d
 8003e78:	08003e95 	.word	0x08003e95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e030      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d025      	beq.n	8003eda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e92:	e022      	b.n	8003eda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e9c:	d11f      	bne.n	8003ede <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ea2:	e01c      	b.n	8003ede <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d903      	bls.n	8003eb2 <DMA_CheckFifoParam+0xb6>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d003      	beq.n	8003eb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eb0:	e018      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb6:	e015      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ebc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00e      	beq.n	8003ee2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e00b      	b.n	8003ee2 <DMA_CheckFifoParam+0xe6>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e00a      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e008      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e006      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e004      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003eda:	bf00      	nop
 8003edc:	e002      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ede:	bf00      	nop
 8003ee0:	e000      	b.n	8003ee4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ee2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop

08003ef4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e03b      	b.n	8003f7e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f833 	bl	8003f86 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f44:	f023 0107 	bic.w	r1, r3, #7
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f5e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	68d1      	ldr	r1, [r2, #12]
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af02      	add	r7, sp, #8
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA2D_Start+0x1c>
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	e018      	b.n	8003fe8 <HAL_DMA2D_Start+0x4e>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f989 	bl	80042e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d056      	beq.n	80040ba <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800400c:	f7ff fca2 	bl	8003954 <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004012:	e04b      	b.n	80040ac <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004022:	2b00      	cmp	r3, #0
 8004024:	d023      	beq.n	800406e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	f043 0202 	orr.w	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2221      	movs	r2, #33	@ 0x21
 8004058:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2204      	movs	r2, #4
 800405e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0a5      	b.n	80041ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d01a      	beq.n	80040ac <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004076:	f7ff fc6d 	bl	8003954 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <HAL_DMA2D_PollForTransfer+0x9c>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10f      	bne.n	80040ac <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2203      	movs	r2, #3
 800409c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e086      	b.n	80041ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0ac      	beq.n	8004014 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d061      	beq.n	80041a0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80040dc:	f7ff fc3a 	bl	8003954 <HAL_GetTick>
 80040e0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040e2:	e056      	b.n	8004192 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02e      	beq.n	8004154 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d005      	beq.n	800410c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800411a:	f043 0202 	orr.w	r2, r3, #2
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	f043 0201 	orr.w	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2229      	movs	r2, #41	@ 0x29
 800413e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2204      	movs	r2, #4
 8004144:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415a:	d01a      	beq.n	8004192 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800415c:	f7ff fbfa 	bl	8003954 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <HAL_DMA2D_PollForTransfer+0x182>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2203      	movs	r2, #3
 8004182:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e013      	b.n	80041ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0a1      	beq.n	80040e4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2212      	movs	r2, #18
 80041a6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_DMA2D_ConfigLayer+0x20>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e079      	b.n	80042d8 <HAL_DMA2D_ConfigLayer+0x114>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	3318      	adds	r3, #24
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	041b      	lsls	r3, r3, #16
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800420e:	4b35      	ldr	r3, [pc, #212]	@ (80042e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004210:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b0a      	cmp	r3, #10
 8004218:	d003      	beq.n	8004222 <HAL_DMA2D_ConfigLayer+0x5e>
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b09      	cmp	r3, #9
 8004220:	d107      	bne.n	8004232 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	e005      	b.n	800423e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d120      	bne.n	8004286 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	ea02 0103 	and.w	r1, r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	430a      	orrs	r2, r1
 800425a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b0a      	cmp	r3, #10
 800426c:	d003      	beq.n	8004276 <HAL_DMA2D_ConfigLayer+0xb2>
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b09      	cmp	r3, #9
 8004274:	d127      	bne.n	80042c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28
 8004284:	e01f      	b.n	80042c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	43db      	mvns	r3, r3
 8004290:	ea02 0103 	and.w	r1, r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	430a      	orrs	r2, r1
 800429c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b0a      	cmp	r3, #10
 80042ae:	d003      	beq.n	80042b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2b09      	cmp	r3, #9
 80042b6:	d106      	bne.n	80042c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	68da      	ldr	r2, [r3, #12]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80042c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	ff03000f 	.word	0xff03000f

080042e8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b08b      	sub	sp, #44	@ 0x2c
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fc:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	041a      	lsls	r2, r3, #16
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	431a      	orrs	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	430a      	orrs	r2, r1
 800430e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004320:	d174      	bne.n	800440c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004328:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004330:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004338:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	b2db      	uxtb	r3, r3
 800433e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	431a      	orrs	r2, r3
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	4313      	orrs	r3, r2
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	627b      	str	r3, [r7, #36]	@ 0x24
 8004358:	e053      	b.n	8004402 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d106      	bne.n	8004370 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	4313      	orrs	r3, r2
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	627b      	str	r3, [r7, #36]	@ 0x24
 800436e:	e048      	b.n	8004402 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d111      	bne.n	800439c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	0cdb      	lsrs	r3, r3, #19
 800437c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	0a9b      	lsrs	r3, r3, #10
 8004382:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	08db      	lsrs	r3, r3, #3
 8004388:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	015a      	lsls	r2, r3, #5
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	02db      	lsls	r3, r3, #11
 8004392:	4313      	orrs	r3, r2
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
 800439a:	e032      	b.n	8004402 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d117      	bne.n	80043d4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	0fdb      	lsrs	r3, r3, #31
 80043a8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	0cdb      	lsrs	r3, r3, #19
 80043ae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	0adb      	lsrs	r3, r3, #11
 80043b4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	08db      	lsrs	r3, r3, #3
 80043ba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	431a      	orrs	r2, r3
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	03db      	lsls	r3, r3, #15
 80043ca:	4313      	orrs	r3, r2
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d2:	e016      	b.n	8004402 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	0f1b      	lsrs	r3, r3, #28
 80043d8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	0d1b      	lsrs	r3, r3, #20
 80043de:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	0b1b      	lsrs	r3, r3, #12
 80043e4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	011a      	lsls	r2, r3, #4
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	021b      	lsls	r3, r3, #8
 80043f4:	431a      	orrs	r2, r3
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	031b      	lsls	r3, r3, #12
 80043fa:	4313      	orrs	r3, r2
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004408:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800440a:	e003      	b.n	8004414 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	bf00      	nop
 8004416:	372c      	adds	r7, #44	@ 0x2c
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	@ 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800442a:	2300      	movs	r3, #0
 800442c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800442e:	2300      	movs	r3, #0
 8004430:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e177      	b.n	800472c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800443c:	2201      	movs	r2, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4013      	ands	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	429a      	cmp	r2, r3
 8004456:	f040 8166 	bne.w	8004726 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d005      	beq.n	8004472 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800446e:	2b02      	cmp	r3, #2
 8004470:	d130      	bne.n	80044d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	005b      	lsls	r3, r3, #1
 800447c:	2203      	movs	r2, #3
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4313      	orrs	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044a8:	2201      	movs	r2, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	43db      	mvns	r3, r3
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	4013      	ands	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f003 0201 	and.w	r2, r3, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0303 	and.w	r3, r3, #3
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d017      	beq.n	8004510 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2203      	movs	r2, #3
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d123      	bne.n	8004564 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	08da      	lsrs	r2, r3, #3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3208      	adds	r2, #8
 8004524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004528:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4013      	ands	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4313      	orrs	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	08da      	lsrs	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	3208      	adds	r2, #8
 800455e:	69b9      	ldr	r1, [r7, #24]
 8004560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 0203 	and.w	r2, r3, #3
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fa02 f303 	lsl.w	r3, r2, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 80c0 	beq.w	8004726 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	4b66      	ldr	r3, [pc, #408]	@ (8004744 <HAL_GPIO_Init+0x324>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	4a65      	ldr	r2, [pc, #404]	@ (8004744 <HAL_GPIO_Init+0x324>)
 80045b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045b6:	4b63      	ldr	r3, [pc, #396]	@ (8004744 <HAL_GPIO_Init+0x324>)
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045c2:	4a61      	ldr	r2, [pc, #388]	@ (8004748 <HAL_GPIO_Init+0x328>)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	089b      	lsrs	r3, r3, #2
 80045c8:	3302      	adds	r3, #2
 80045ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	220f      	movs	r2, #15
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a58      	ldr	r2, [pc, #352]	@ (800474c <HAL_GPIO_Init+0x32c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d037      	beq.n	800465e <HAL_GPIO_Init+0x23e>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a57      	ldr	r2, [pc, #348]	@ (8004750 <HAL_GPIO_Init+0x330>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d031      	beq.n	800465a <HAL_GPIO_Init+0x23a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a56      	ldr	r2, [pc, #344]	@ (8004754 <HAL_GPIO_Init+0x334>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d02b      	beq.n	8004656 <HAL_GPIO_Init+0x236>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a55      	ldr	r2, [pc, #340]	@ (8004758 <HAL_GPIO_Init+0x338>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d025      	beq.n	8004652 <HAL_GPIO_Init+0x232>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a54      	ldr	r2, [pc, #336]	@ (800475c <HAL_GPIO_Init+0x33c>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d01f      	beq.n	800464e <HAL_GPIO_Init+0x22e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a53      	ldr	r2, [pc, #332]	@ (8004760 <HAL_GPIO_Init+0x340>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d019      	beq.n	800464a <HAL_GPIO_Init+0x22a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_GPIO_Init+0x344>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_GPIO_Init+0x226>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a51      	ldr	r2, [pc, #324]	@ (8004768 <HAL_GPIO_Init+0x348>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00d      	beq.n	8004642 <HAL_GPIO_Init+0x222>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a50      	ldr	r2, [pc, #320]	@ (800476c <HAL_GPIO_Init+0x34c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d007      	beq.n	800463e <HAL_GPIO_Init+0x21e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a4f      	ldr	r2, [pc, #316]	@ (8004770 <HAL_GPIO_Init+0x350>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d101      	bne.n	800463a <HAL_GPIO_Init+0x21a>
 8004636:	2309      	movs	r3, #9
 8004638:	e012      	b.n	8004660 <HAL_GPIO_Init+0x240>
 800463a:	230a      	movs	r3, #10
 800463c:	e010      	b.n	8004660 <HAL_GPIO_Init+0x240>
 800463e:	2308      	movs	r3, #8
 8004640:	e00e      	b.n	8004660 <HAL_GPIO_Init+0x240>
 8004642:	2307      	movs	r3, #7
 8004644:	e00c      	b.n	8004660 <HAL_GPIO_Init+0x240>
 8004646:	2306      	movs	r3, #6
 8004648:	e00a      	b.n	8004660 <HAL_GPIO_Init+0x240>
 800464a:	2305      	movs	r3, #5
 800464c:	e008      	b.n	8004660 <HAL_GPIO_Init+0x240>
 800464e:	2304      	movs	r3, #4
 8004650:	e006      	b.n	8004660 <HAL_GPIO_Init+0x240>
 8004652:	2303      	movs	r3, #3
 8004654:	e004      	b.n	8004660 <HAL_GPIO_Init+0x240>
 8004656:	2302      	movs	r3, #2
 8004658:	e002      	b.n	8004660 <HAL_GPIO_Init+0x240>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_GPIO_Init+0x240>
 800465e:	2300      	movs	r3, #0
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	f002 0203 	and.w	r2, r2, #3
 8004666:	0092      	lsls	r2, r2, #2
 8004668:	4093      	lsls	r3, r2
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004670:	4935      	ldr	r1, [pc, #212]	@ (8004748 <HAL_GPIO_Init+0x328>)
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	089b      	lsrs	r3, r3, #2
 8004676:	3302      	adds	r3, #2
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800467e:	4b3d      	ldr	r3, [pc, #244]	@ (8004774 <HAL_GPIO_Init+0x354>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046a2:	4a34      	ldr	r2, [pc, #208]	@ (8004774 <HAL_GPIO_Init+0x354>)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046a8:	4b32      	ldr	r3, [pc, #200]	@ (8004774 <HAL_GPIO_Init+0x354>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d003      	beq.n	80046cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046cc:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <HAL_GPIO_Init+0x354>)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046d2:	4b28      	ldr	r3, [pc, #160]	@ (8004774 <HAL_GPIO_Init+0x354>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <HAL_GPIO_Init+0x354>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004774 <HAL_GPIO_Init+0x354>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004720:	4a14      	ldr	r2, [pc, #80]	@ (8004774 <HAL_GPIO_Init+0x354>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3301      	adds	r3, #1
 800472a:	61fb      	str	r3, [r7, #28]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b0f      	cmp	r3, #15
 8004730:	f67f ae84 	bls.w	800443c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3724      	adds	r7, #36	@ 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40023800 	.word	0x40023800
 8004748:	40013800 	.word	0x40013800
 800474c:	40020000 	.word	0x40020000
 8004750:	40020400 	.word	0x40020400
 8004754:	40020800 	.word	0x40020800
 8004758:	40020c00 	.word	0x40020c00
 800475c:	40021000 	.word	0x40021000
 8004760:	40021400 	.word	0x40021400
 8004764:	40021800 	.word	0x40021800
 8004768:	40021c00 	.word	0x40021c00
 800476c:	40022000 	.word	0x40022000
 8004770:	40022400 	.word	0x40022400
 8004774:	40013c00 	.word	0x40013c00

08004778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
 8004784:	4613      	mov	r3, r2
 8004786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004788:	787b      	ldrb	r3, [r7, #1]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004794:	e003      	b.n	800479e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	041a      	lsls	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	619a      	str	r2, [r3, #24]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0bf      	b.n	800493e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8ba 	bl	800494c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80047ee:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6999      	ldr	r1, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004804:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6899      	ldr	r1, [r3, #8]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b4a      	ldr	r3, [pc, #296]	@ (8004948 <HAL_LTDC_Init+0x19c>)
 8004820:	400b      	ands	r3, r1
 8004822:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6899      	ldr	r1, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68d9      	ldr	r1, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b3e      	ldr	r3, [pc, #248]	@ (8004948 <HAL_LTDC_Init+0x19c>)
 800484e:	400b      	ands	r3, r1
 8004850:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68d9      	ldr	r1, [r3, #12]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6919      	ldr	r1, [r3, #16]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b33      	ldr	r3, [pc, #204]	@ (8004948 <HAL_LTDC_Init+0x19c>)
 800487c:	400b      	ands	r3, r1
 800487e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6919      	ldr	r1, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6959      	ldr	r1, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_LTDC_Init+0x19c>)
 80048aa:	400b      	ands	r3, r1
 80048ac:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	041b      	lsls	r3, r3, #16
 80048b4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6959      	ldr	r1, [r3, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0206 	orr.w	r2, r2, #6
 800491a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	699a      	ldr	r2, [r3, #24]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	f000f800 	.word	0xf000f800

0800494c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d101      	bne.n	800497a <HAL_LTDC_ConfigLayer+0x1a>
 8004976:	2302      	movs	r3, #2
 8004978:	e02c      	b.n	80049d4 <HAL_LTDC_ConfigLayer+0x74>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2134      	movs	r1, #52	@ 0x34
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4614      	mov	r4, r2
 800499e:	461d      	mov	r5, r3
 80049a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80049aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68b9      	ldr	r1, [r7, #8]
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f83b 	bl	8004a30 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bdb0      	pop	{r4, r5, r7, pc}

080049dc <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_LTDC_EnableDither+0x16>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e016      	b.n	8004a20 <HAL_LTDC_EnableDither+0x44>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004a02:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <HAL_LTDC_EnableDither+0x50>)
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	4a09      	ldr	r2, [pc, #36]	@ (8004a2c <HAL_LTDC_EnableDither+0x50>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40016800 	.word	0x40016800

08004a30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	@ 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	0c1b      	lsrs	r3, r3, #16
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	4413      	add	r3, r2
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	01db      	lsls	r3, r3, #7
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3384      	adds	r3, #132	@ 0x84
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	4611      	mov	r1, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	01d2      	lsls	r2, r2, #7
 8004a6c:	440a      	add	r2, r1
 8004a6e:	3284      	adds	r2, #132	@ 0x84
 8004a70:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a74:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	0c1b      	lsrs	r3, r3, #16
 8004a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a86:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a88:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	01db      	lsls	r3, r3, #7
 8004a94:	440b      	add	r3, r1
 8004a96:	3384      	adds	r3, #132	@ 0x84
 8004a98:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a9e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aae:	4413      	add	r3, r2
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	01db      	lsls	r3, r3, #7
 8004abe:	4413      	add	r3, r2
 8004ac0:	3384      	adds	r3, #132	@ 0x84
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	6812      	ldr	r2, [r2, #0]
 8004ac8:	4611      	mov	r1, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	01d2      	lsls	r2, r2, #7
 8004ace:	440a      	add	r2, r1
 8004ad0:	3284      	adds	r2, #132	@ 0x84
 8004ad2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ad6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ae6:	4413      	add	r3, r2
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	440b      	add	r3, r1
 8004af6:	3384      	adds	r3, #132	@ 0x84
 8004af8:	4619      	mov	r1, r3
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3384      	adds	r3, #132	@ 0x84
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4611      	mov	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	01d2      	lsls	r2, r2, #7
 8004b1a:	440a      	add	r2, r1
 8004b1c:	3284      	adds	r2, #132	@ 0x84
 8004b1e:	f023 0307 	bic.w	r3, r3, #7
 8004b22:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	01db      	lsls	r3, r3, #7
 8004b2e:	4413      	add	r3, r2
 8004b30:	3384      	adds	r3, #132	@ 0x84
 8004b32:	461a      	mov	r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b4a:	041b      	lsls	r3, r3, #16
 8004b4c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	061b      	lsls	r3, r3, #24
 8004b54:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	01db      	lsls	r3, r3, #7
 8004b60:	4413      	add	r3, r2
 8004b62:	3384      	adds	r3, #132	@ 0x84
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	01db      	lsls	r3, r3, #7
 8004b70:	4413      	add	r3, r2
 8004b72:	3384      	adds	r3, #132	@ 0x84
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b80:	461a      	mov	r2, r3
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	01db      	lsls	r3, r3, #7
 8004b94:	440b      	add	r3, r1
 8004b96:	3384      	adds	r3, #132	@ 0x84
 8004b98:	4619      	mov	r1, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	01db      	lsls	r3, r3, #7
 8004baa:	4413      	add	r3, r2
 8004bac:	3384      	adds	r3, #132	@ 0x84
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	01d2      	lsls	r2, r2, #7
 8004bba:	440a      	add	r2, r1
 8004bbc:	3284      	adds	r2, #132	@ 0x84
 8004bbe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bc2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	01db      	lsls	r3, r3, #7
 8004bce:	4413      	add	r3, r2
 8004bd0:	3384      	adds	r3, #132	@ 0x84
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	01db      	lsls	r3, r3, #7
 8004be4:	4413      	add	r3, r2
 8004be6:	3384      	adds	r3, #132	@ 0x84
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	4611      	mov	r1, r2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	01d2      	lsls	r2, r2, #7
 8004bf4:	440a      	add	r2, r1
 8004bf6:	3284      	adds	r2, #132	@ 0x84
 8004bf8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004bfc:	f023 0307 	bic.w	r3, r3, #7
 8004c00:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6809      	ldr	r1, [r1, #0]
 8004c0e:	4608      	mov	r0, r1
 8004c10:	6879      	ldr	r1, [r7, #4]
 8004c12:	01c9      	lsls	r1, r1, #7
 8004c14:	4401      	add	r1, r0
 8004c16:	3184      	adds	r1, #132	@ 0x84
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	01db      	lsls	r3, r3, #7
 8004c26:	4413      	add	r3, r2
 8004c28:	3384      	adds	r3, #132	@ 0x84
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	461a      	mov	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	01db      	lsls	r3, r3, #7
 8004c36:	4413      	add	r3, r2
 8004c38:	3384      	adds	r3, #132	@ 0x84
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	01db      	lsls	r3, r3, #7
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3384      	adds	r3, #132	@ 0x84
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004c5e:	2304      	movs	r3, #4
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	e01b      	b.n	8004c9c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e014      	b.n	8004c9c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d00b      	beq.n	8004c92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d007      	beq.n	8004c92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d003      	beq.n	8004c92 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c8e:	2b07      	cmp	r3, #7
 8004c90:	d102      	bne.n	8004c98 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c92:	2302      	movs	r3, #2
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	e001      	b.n	8004c9c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	4413      	add	r3, r2
 8004ca8:	3384      	adds	r3, #132	@ 0x84
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	01d2      	lsls	r2, r2, #7
 8004cb6:	440a      	add	r2, r1
 8004cb8:	3284      	adds	r2, #132	@ 0x84
 8004cba:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	6859      	ldr	r1, [r3, #4]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1acb      	subs	r3, r1, r3
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	fb01 f303 	mul.w	r3, r1, r3
 8004cdc:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	6809      	ldr	r1, [r1, #0]
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	01c9      	lsls	r1, r1, #7
 8004ce8:	4401      	add	r1, r0
 8004cea:	3184      	adds	r1, #132	@ 0x84
 8004cec:	4313      	orrs	r3, r2
 8004cee:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	01db      	lsls	r3, r3, #7
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3384      	adds	r3, #132	@ 0x84
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	6812      	ldr	r2, [r2, #0]
 8004d04:	4611      	mov	r1, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	01d2      	lsls	r2, r2, #7
 8004d0a:	440a      	add	r2, r1
 8004d0c:	3284      	adds	r2, #132	@ 0x84
 8004d0e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d12:	f023 0307 	bic.w	r3, r3, #7
 8004d16:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	01db      	lsls	r3, r3, #7
 8004d22:	4413      	add	r3, r2
 8004d24:	3384      	adds	r3, #132	@ 0x84
 8004d26:	461a      	mov	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	01db      	lsls	r3, r3, #7
 8004d38:	4413      	add	r3, r2
 8004d3a:	3384      	adds	r3, #132	@ 0x84
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	6812      	ldr	r2, [r2, #0]
 8004d42:	4611      	mov	r1, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	01d2      	lsls	r2, r2, #7
 8004d48:	440a      	add	r2, r1
 8004d4a:	3284      	adds	r2, #132	@ 0x84
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6013      	str	r3, [r2, #0]
}
 8004d52:	bf00      	nop
 8004d54:	3724      	adds	r7, #36	@ 0x24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af02      	add	r7, sp, #8
 8004d64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e101      	b.n	8004f74 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f009 fe0a 	bl	800e9a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2203      	movs	r2, #3
 8004d94:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d9e:	d102      	bne.n	8004da6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f003 fc29 	bl	8008602 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7c1a      	ldrb	r2, [r3, #16]
 8004db8:	f88d 2000 	strb.w	r2, [sp]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dc0:	f003 fb08 	bl	80083d4 <USB_CoreInit>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0ce      	b.n	8004f74 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f003 fc21 	bl	8008624 <USB_SetCurrentMode>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0bf      	b.n	8004f74 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	73fb      	strb	r3, [r7, #15]
 8004df8:	e04a      	b.n	8004e90 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3315      	adds	r3, #21
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	7bfa      	ldrb	r2, [r7, #15]
 8004e20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	b298      	uxth	r0, r3
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	332e      	adds	r3, #46	@ 0x2e
 8004e36:	4602      	mov	r2, r0
 8004e38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3318      	adds	r3, #24
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e4e:	7bfa      	ldrb	r2, [r7, #15]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	4413      	add	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	331c      	adds	r3, #28
 8004e5e:	2200      	movs	r2, #0
 8004e60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	3320      	adds	r3, #32
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e76:	7bfa      	ldrb	r2, [r7, #15]
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	440b      	add	r3, r1
 8004e84:	3324      	adds	r3, #36	@ 0x24
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	791b      	ldrb	r3, [r3, #4]
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d3af      	bcc.n	8004dfa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	e044      	b.n	8004f2a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004eb6:	7bfa      	ldrb	r2, [r7, #15]
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ec8:	7bfa      	ldrb	r2, [r7, #15]
 8004eca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ecc:	7bfa      	ldrb	r2, [r7, #15]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	00db      	lsls	r3, r3, #3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ede:	2200      	movs	r2, #0
 8004ee0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ee2:	7bfa      	ldrb	r2, [r7, #15]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	4413      	add	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f0e:	7bfa      	ldrb	r2, [r7, #15]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004f20:	2200      	movs	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	3301      	adds	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	791b      	ldrb	r3, [r3, #4]
 8004f2e:	7bfa      	ldrb	r2, [r7, #15]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d3b5      	bcc.n	8004ea0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	7c1a      	ldrb	r2, [r3, #16]
 8004f3c:	f88d 2000 	strb.w	r2, [sp]
 8004f40:	3304      	adds	r3, #4
 8004f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f44:	f003 fbba 	bl	80086bc <USB_DevInit>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d005      	beq.n	8004f5a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2202      	movs	r2, #2
 8004f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e00c      	b.n	8004f74 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f004 fc04 	bl	800977a <USB_DevDisconnect>

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_PCD_Start+0x1c>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e022      	b.n	8004fde <HAL_PCD_Start+0x62>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f003 fb0b 	bl	80085e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f004 fbb2 	bl	8009738 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fe6:	b590      	push	{r4, r7, lr}
 8004fe8:	b08d      	sub	sp, #52	@ 0x34
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f004 fc70 	bl	80098e2 <USB_GetMode>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	f040 848c 	bne.w	8005922 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f004 fbd4 	bl	80097bc <USB_ReadInterrupts>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 8482 	beq.w	8005920 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	0a1b      	lsrs	r3, r3, #8
 8005026:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f004 fbc1 	bl	80097bc <USB_ReadInterrupts>
 800503a:	4603      	mov	r3, r0
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b02      	cmp	r3, #2
 8005042:	d107      	bne.n	8005054 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f002 0202 	and.w	r2, r2, #2
 8005052:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f004 fbaf 	bl	80097bc <USB_ReadInterrupts>
 800505e:	4603      	mov	r3, r0
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b10      	cmp	r3, #16
 8005066:	d161      	bne.n	800512c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699a      	ldr	r2, [r3, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0210 	bic.w	r2, r2, #16
 8005076:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	f003 020f 	and.w	r2, r3, #15
 8005084:	4613      	mov	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	4413      	add	r3, r2
 8005094:	3304      	adds	r3, #4
 8005096:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	0c5b      	lsrs	r3, r3, #17
 800509c:	f003 030f 	and.w	r3, r3, #15
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d124      	bne.n	80050ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d035      	beq.n	800511c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	091b      	lsrs	r3, r3, #4
 80050b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80050ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6a38      	ldr	r0, [r7, #32]
 80050c4:	f004 f9e6 	bl	8009494 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	091b      	lsrs	r3, r3, #4
 80050e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e6:	441a      	add	r2, r3
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	615a      	str	r2, [r3, #20]
 80050ec:	e016      	b.n	800511c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	0c5b      	lsrs	r3, r3, #17
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	2b06      	cmp	r3, #6
 80050f8:	d110      	bne.n	800511c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005100:	2208      	movs	r2, #8
 8005102:	4619      	mov	r1, r3
 8005104:	6a38      	ldr	r0, [r7, #32]
 8005106:	f004 f9c5 	bl	8009494 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	695a      	ldr	r2, [r3, #20]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	091b      	lsrs	r3, r3, #4
 8005112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005116:	441a      	add	r2, r3
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699a      	ldr	r2, [r3, #24]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0210 	orr.w	r2, r2, #16
 800512a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f004 fb43 	bl	80097bc <USB_ReadInterrupts>
 8005136:	4603      	mov	r3, r0
 8005138:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800513c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005140:	f040 80a7 	bne.w	8005292 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f004 fb48 	bl	80097e2 <USB_ReadDevAllOutEpInterrupt>
 8005152:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005154:	e099      	b.n	800528a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 808e 	beq.w	800527e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005168:	b2d2      	uxtb	r2, r2
 800516a:	4611      	mov	r1, r2
 800516c:	4618      	mov	r0, r3
 800516e:	f004 fb6c 	bl	800984a <USB_ReadDevOutEPInterrupt>
 8005172:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	015a      	lsls	r2, r3, #5
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	4413      	add	r3, r2
 8005186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518a:	461a      	mov	r2, r3
 800518c:	2301      	movs	r3, #1
 800518e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fea4 	bl	8005ee0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ae:	461a      	mov	r2, r3
 80051b0:	2308      	movs	r3, #8
 80051b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80051b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 ff7a 	bl	80060b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d2:	461a      	mov	r2, r3
 80051d4:	2310      	movs	r3, #16
 80051d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d030      	beq.n	8005244 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ea:	2b80      	cmp	r3, #128	@ 0x80
 80051ec:	d109      	bne.n	8005202 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005200:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	3304      	adds	r3, #4
 8005216:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d108      	bne.n	8005232 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f009 fcbb 	bl	800eba8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523e:	461a      	mov	r2, r3
 8005240:	2302      	movs	r3, #2
 8005242:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	461a      	mov	r2, r3
 800525c:	2320      	movs	r3, #32
 800525e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005276:	461a      	mov	r2, r3
 8005278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800527c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	3301      	adds	r3, #1
 8005282:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f af62 	bne.w	8005156 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f004 fa90 	bl	80097bc <USB_ReadInterrupts>
 800529c:	4603      	mov	r3, r0
 800529e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052a6:	f040 80db 	bne.w	8005460 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f004 fab1 	bl	8009816 <USB_ReadDevAllInEpInterrupt>
 80052b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80052ba:	e0cd      	b.n	8005458 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80c2 	beq.w	800544c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f004 fad7 	bl	8009886 <USB_ReadDevInEPInterrupt>
 80052d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d057      	beq.n	8005394 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	2201      	movs	r2, #1
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	43db      	mvns	r3, r3
 80052fe:	69f9      	ldr	r1, [r7, #28]
 8005300:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005304:	4013      	ands	r3, r2
 8005306:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	461a      	mov	r2, r3
 8005316:	2301      	movs	r3, #1
 8005318:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	799b      	ldrb	r3, [r3, #6]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d132      	bne.n	8005388 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3320      	adds	r3, #32
 8005332:	6819      	ldr	r1, [r3, #0]
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4403      	add	r3, r0
 8005342:	331c      	adds	r3, #28
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4419      	add	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4403      	add	r3, r0
 8005356:	3320      	adds	r3, #32
 8005358:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	2b00      	cmp	r3, #0
 800535e:	d113      	bne.n	8005388 <HAL_PCD_IRQHandler+0x3a2>
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005364:	4613      	mov	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	3324      	adds	r3, #36	@ 0x24
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d108      	bne.n	8005388 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005380:	461a      	mov	r2, r3
 8005382:	2101      	movs	r1, #1
 8005384:	f004 fade 	bl	8009944 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	b2db      	uxtb	r3, r3
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f009 fb85 	bl	800ea9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d008      	beq.n	80053b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	461a      	mov	r2, r3
 80053ac:	2308      	movs	r3, #8
 80053ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d008      	beq.n	80053cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c6:	461a      	mov	r2, r3
 80053c8:	2310      	movs	r3, #16
 80053ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053e2:	461a      	mov	r2, r3
 80053e4:	2340      	movs	r3, #64	@ 0x40
 80053e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d023      	beq.n	800543a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053f4:	6a38      	ldr	r0, [r7, #32]
 80053f6:	f003 fac5 	bl	8008984 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	3310      	adds	r3, #16
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	4413      	add	r3, r2
 800540a:	3304      	adds	r3, #4
 800540c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	78db      	ldrb	r3, [r3, #3]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d108      	bne.n	8005428 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	b2db      	uxtb	r3, r3
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f009 fbd2 	bl	800ebcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	461a      	mov	r2, r3
 8005436:	2302      	movs	r3, #2
 8005438:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005444:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fcbd 	bl	8005dc6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	3301      	adds	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	085b      	lsrs	r3, r3, #1
 8005456:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800545a:	2b00      	cmp	r3, #0
 800545c:	f47f af2e 	bne.w	80052bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f004 f9a9 	bl	80097bc <USB_ReadInterrupts>
 800546a:	4603      	mov	r3, r0
 800546c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005470:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005474:	d122      	bne.n	80054bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005490:	2b01      	cmp	r3, #1
 8005492:	d108      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800549c:	2100      	movs	r1, #0
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fea4 	bl	80061ec <HAL_PCDEx_LPM_Callback>
 80054a4:	e002      	b.n	80054ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f009 fb70 	bl	800eb8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80054ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f004 f97b 	bl	80097bc <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d0:	d112      	bne.n	80054f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d102      	bne.n	80054e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f009 fb2c 	bl	800eb40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695a      	ldr	r2, [r3, #20]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80054f6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f004 f95d 	bl	80097bc <USB_ReadInterrupts>
 8005502:	4603      	mov	r3, r0
 8005504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800550c:	f040 80b7 	bne.w	800567e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	69fa      	ldr	r2, [r7, #28]
 800551a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2110      	movs	r1, #16
 800552a:	4618      	mov	r0, r3
 800552c:	f003 fa2a 	bl	8008984 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005530:	2300      	movs	r3, #0
 8005532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005534:	e046      	b.n	80055c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005542:	461a      	mov	r2, r3
 8005544:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005548:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005564:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005568:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005576:	461a      	mov	r2, r3
 8005578:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800557c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005598:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800559c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	3301      	adds	r3, #1
 80055c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	791b      	ldrb	r3, [r3, #4]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d3b2      	bcc.n	8005536 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055de:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80055e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	7bdb      	ldrb	r3, [r3, #15]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d016      	beq.n	800561a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055fc:	f043 030b 	orr.w	r3, r3, #11
 8005600:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005612:	f043 030b 	orr.w	r3, r3, #11
 8005616:	6453      	str	r3, [r2, #68]	@ 0x44
 8005618:	e015      	b.n	8005646 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005628:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800562c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005630:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	69fa      	ldr	r2, [r7, #28]
 800563c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005640:	f043 030b 	orr.w	r3, r3, #11
 8005644:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005654:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005658:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005668:	461a      	mov	r2, r3
 800566a:	f004 f96b 	bl	8009944 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800567c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f004 f89a 	bl	80097bc <USB_ReadInterrupts>
 8005688:	4603      	mov	r3, r0
 800568a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800568e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005692:	d123      	bne.n	80056dc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f004 f930 	bl	80098fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f003 f9e7 	bl	8008a76 <USB_GetDevSpeed>
 80056a8:	4603      	mov	r3, r0
 80056aa:	461a      	mov	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681c      	ldr	r4, [r3, #0]
 80056b4:	f001 fa0a 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 80056b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80056be:	461a      	mov	r2, r3
 80056c0:	4620      	mov	r0, r4
 80056c2:	f002 feeb 	bl	800849c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f009 fa11 	bl	800eaee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80056da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f004 f86b 	bl	80097bc <USB_ReadInterrupts>
 80056e6:	4603      	mov	r3, r0
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d10a      	bne.n	8005706 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f009 f9ee 	bl	800ead2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f002 0208 	and.w	r2, r2, #8
 8005704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f004 f856 	bl	80097bc <USB_ReadInterrupts>
 8005710:	4603      	mov	r3, r0
 8005712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005716:	2b80      	cmp	r3, #128	@ 0x80
 8005718:	d123      	bne.n	8005762 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005726:	2301      	movs	r3, #1
 8005728:	627b      	str	r3, [r7, #36]	@ 0x24
 800572a:	e014      	b.n	8005756 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	4613      	mov	r3, r2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d105      	bne.n	8005750 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005746:	b2db      	uxtb	r3, r3
 8005748:	4619      	mov	r1, r3
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 fb0a 	bl	8005d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	3301      	adds	r3, #1
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	791b      	ldrb	r3, [r3, #4]
 800575a:	461a      	mov	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	4293      	cmp	r3, r2
 8005760:	d3e4      	bcc.n	800572c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f004 f828 	bl	80097bc <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005776:	d13c      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005778:	2301      	movs	r3, #1
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
 800577c:	e02b      	b.n	80057d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005792:	4613      	mov	r3, r2
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	3318      	adds	r3, #24
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d115      	bne.n	80057d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da12      	bge.n	80057d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	3317      	adds	r3, #23
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4619      	mov	r1, r3
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 faca 	bl	8005d64 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	3301      	adds	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	791b      	ldrb	r3, [r3, #4]
 80057da:	461a      	mov	r2, r3
 80057dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057de:	4293      	cmp	r3, r2
 80057e0:	d3cd      	bcc.n	800577e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80057f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f003 ffe0 	bl	80097bc <USB_ReadInterrupts>
 80057fc:	4603      	mov	r3, r0
 80057fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005802:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005806:	d156      	bne.n	80058b6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005808:	2301      	movs	r3, #1
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
 800580c:	e045      	b.n	800589a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	4413      	add	r3, r2
 8005816:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005822:	4613      	mov	r3, r2
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d12e      	bne.n	8005894 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005836:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005838:	2b00      	cmp	r3, #0
 800583a:	da2b      	bge.n	8005894 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005848:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800584c:	429a      	cmp	r2, r3
 800584e:	d121      	bne.n	8005894 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005854:	4613      	mov	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10a      	bne.n	8005894 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800588c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005890:	6053      	str	r3, [r2, #4]
            break;
 8005892:	e008      	b.n	80058a6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005896:	3301      	adds	r3, #1
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	791b      	ldrb	r3, [r3, #4]
 800589e:	461a      	mov	r2, r3
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d3b3      	bcc.n	800580e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695a      	ldr	r2, [r3, #20]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80058b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f003 ff7e 	bl	80097bc <USB_ReadInterrupts>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ca:	d10a      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f009 f98f 	bl	800ebf0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f003 ff68 	bl	80097bc <USB_ReadInterrupts>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d115      	bne.n	8005922 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f009 f97f 	bl	800ec0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6859      	ldr	r1, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	e000      	b.n	8005922 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005920:	bf00      	nop
    }
  }
}
 8005922:	3734      	adds	r7, #52	@ 0x34
 8005924:	46bd      	mov	sp, r7
 8005926:	bd90      	pop	{r4, r7, pc}

08005928 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	460b      	mov	r3, r1
 8005932:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_PCD_SetAddress+0x1a>
 800593e:	2302      	movs	r3, #2
 8005940:	e012      	b.n	8005968 <HAL_PCD_SetAddress+0x40>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	78fa      	ldrb	r2, [r7, #3]
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f003 fec7 	bl	80096ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	4608      	mov	r0, r1
 800597a:	4611      	mov	r1, r2
 800597c:	461a      	mov	r2, r3
 800597e:	4603      	mov	r3, r0
 8005980:	70fb      	strb	r3, [r7, #3]
 8005982:	460b      	mov	r3, r1
 8005984:	803b      	strh	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800598e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005992:	2b00      	cmp	r3, #0
 8005994:	da0f      	bge.n	80059b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	f003 020f 	and.w	r2, r3, #15
 800599c:	4613      	mov	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	3310      	adds	r3, #16
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4413      	add	r3, r2
 80059aa:	3304      	adds	r3, #4
 80059ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	705a      	strb	r2, [r3, #1]
 80059b4:	e00f      	b.n	80059d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	f003 020f 	and.w	r2, r3, #15
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	4413      	add	r3, r2
 80059cc:	3304      	adds	r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	f003 030f 	and.w	r3, r3, #15
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80059e2:	883b      	ldrh	r3, [r7, #0]
 80059e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	78ba      	ldrb	r2, [r7, #2]
 80059f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	785b      	ldrb	r3, [r3, #1]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a04:	78bb      	ldrb	r3, [r7, #2]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d102      	bne.n	8005a10 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d101      	bne.n	8005a1e <HAL_PCD_EP_Open+0xae>
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e00e      	b.n	8005a3c <HAL_PCD_EP_Open+0xcc>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f003 f847 	bl	8008ac0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	da0f      	bge.n	8005a78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a58:	78fb      	ldrb	r3, [r7, #3]
 8005a5a:	f003 020f 	and.w	r2, r3, #15
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	3310      	adds	r3, #16
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	705a      	strb	r2, [r3, #1]
 8005a76:	e00f      	b.n	8005a98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	f003 020f 	and.w	r2, r3, #15
 8005a7e:	4613      	mov	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d101      	bne.n	8005ab2 <HAL_PCD_EP_Close+0x6e>
 8005aae:	2302      	movs	r3, #2
 8005ab0:	e00e      	b.n	8005ad0 <HAL_PCD_EP_Close+0x8c>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f003 f885 	bl	8008bd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	607a      	str	r2, [r7, #4]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ae8:	7afb      	ldrb	r3, [r7, #11]
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	3304      	adds	r3, #4
 8005b00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2200      	movs	r2, #0
 8005b18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	799b      	ldrb	r3, [r3, #6]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d102      	bne.n	8005b34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	799b      	ldrb	r3, [r3, #6]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	f003 f922 	bl	8008d88 <USB_EPStartXfer>

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b5a:	78fb      	ldrb	r3, [r7, #3]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005b70:	681b      	ldr	r3, [r3, #0]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	607a      	str	r2, [r7, #4]
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b8e:	7afb      	ldrb	r3, [r7, #11]
 8005b90:	f003 020f 	and.w	r2, r3, #15
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	3310      	adds	r3, #16
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	799b      	ldrb	r3, [r3, #6]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d102      	bne.n	8005bd8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6818      	ldr	r0, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	799b      	ldrb	r3, [r3, #6]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6979      	ldr	r1, [r7, #20]
 8005be4:	f003 f8d0 	bl	8008d88 <USB_EPStartXfer>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	7912      	ldrb	r2, [r2, #4]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e04f      	b.n	8005cb0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da0f      	bge.n	8005c38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	f003 020f 	and.w	r2, r3, #15
 8005c1e:	4613      	mov	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	3310      	adds	r3, #16
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	705a      	strb	r2, [r3, #1]
 8005c36:	e00d      	b.n	8005c54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_PCD_EP_SetStall+0x82>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e01d      	b.n	8005cb0 <HAL_PCD_EP_SetStall+0xbe>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f003 fc5e 	bl	8009544 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d109      	bne.n	8005ca6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7999      	ldrb	r1, [r3, #6]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f003 fe4f 	bl	8009944 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	7912      	ldrb	r2, [r2, #4]
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e042      	b.n	8005d5c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	da0f      	bge.n	8005cfe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	4413      	add	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	3310      	adds	r3, #16
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	705a      	strb	r2, [r3, #1]
 8005cfc:	e00f      	b.n	8005d1e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	4613      	mov	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	4413      	add	r3, r2
 8005d14:	3304      	adds	r3, #4
 8005d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d101      	bne.n	8005d3e <HAL_PCD_EP_ClrStall+0x86>
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	e00e      	b.n	8005d5c <HAL_PCD_EP_ClrStall+0xa4>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68f9      	ldr	r1, [r7, #12]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f003 fc67 	bl	8009620 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	da0c      	bge.n	8005d92 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	3310      	adds	r3, #16
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	e00c      	b.n	8005dac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	4613      	mov	r3, r2
 8005d9a:	00db      	lsls	r3, r3, #3
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	3304      	adds	r3, #4
 8005daa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68f9      	ldr	r1, [r7, #12]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f003 fa86 	bl	80092c4 <USB_EPStopXfer>
 8005db8:	4603      	mov	r3, r0
 8005dba:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b08a      	sub	sp, #40	@ 0x28
 8005dca:	af02      	add	r7, sp, #8
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	3310      	adds	r3, #16
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	4413      	add	r3, r2
 8005dea:	3304      	adds	r3, #4
 8005dec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d901      	bls.n	8005dfe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e06b      	b.n	8005ed6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d902      	bls.n	8005e1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	3303      	adds	r3, #3
 8005e1e:	089b      	lsrs	r3, r3, #2
 8005e20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e22:	e02a      	b.n	8005e7a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	69fa      	ldr	r2, [r7, #28]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d902      	bls.n	8005e40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	3303      	adds	r3, #3
 8005e44:	089b      	lsrs	r3, r3, #2
 8005e46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	68d9      	ldr	r1, [r3, #12]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	6978      	ldr	r0, [r7, #20]
 8005e5e:	f003 fadb 	bl	8009418 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	441a      	add	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	695a      	ldr	r2, [r3, #20]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d809      	bhi.n	8005ea4 <PCD_WriteEmptyTxFifo+0xde>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	695a      	ldr	r2, [r3, #20]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d203      	bcs.n	8005ea4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1bf      	bne.n	8005e24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d811      	bhi.n	8005ed4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ec4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	6939      	ldr	r1, [r7, #16]
 8005ecc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3720      	adds	r7, #32
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	333c      	adds	r3, #60	@ 0x3c
 8005ef8:	3304      	adds	r3, #4
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	799b      	ldrb	r3, [r3, #6]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d17b      	bne.n	800600e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d015      	beq.n	8005f4c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4a61      	ldr	r2, [pc, #388]	@ (80060a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	f240 80b9 	bls.w	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80b3 	beq.w	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f48:	6093      	str	r3, [r2, #8]
 8005f4a:	e0a7      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0320 	and.w	r3, r3, #32
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f62:	461a      	mov	r2, r3
 8005f64:	2320      	movs	r3, #32
 8005f66:	6093      	str	r3, [r2, #8]
 8005f68:	e098      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f040 8093 	bne.w	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	4a4b      	ldr	r2, [pc, #300]	@ (80060a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d90f      	bls.n	8005f9e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00a      	beq.n	8005f9e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f9a:	6093      	str	r3, [r2, #8]
 8005f9c:	e07e      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	00db      	lsls	r3, r3, #3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	4413      	add	r3, r2
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a1a      	ldr	r2, [r3, #32]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	0159      	lsls	r1, r3, #5
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d114      	bne.n	8006000 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6818      	ldr	r0, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2101      	movs	r1, #1
 8005fec:	f003 fcaa 	bl	8009944 <USB_EP0_OutStart>
 8005ff0:	e006      	b.n	8006000 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f008 fd2e 	bl	800ea68 <HAL_PCD_DataOutStageCallback>
 800600c:	e046      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4a26      	ldr	r2, [pc, #152]	@ (80060ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d124      	bne.n	8006060 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800602c:	461a      	mov	r2, r3
 800602e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006032:	6093      	str	r3, [r2, #8]
 8006034:	e032      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	461a      	mov	r2, r3
 800604e:	2320      	movs	r3, #32
 8006050:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f008 fd05 	bl	800ea68 <HAL_PCD_DataOutStageCallback>
 800605e:	e01d      	b.n	800609c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d114      	bne.n	8006090 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d108      	bne.n	8006090 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006088:	461a      	mov	r2, r3
 800608a:	2100      	movs	r1, #0
 800608c:	f003 fc5a 	bl	8009944 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	b2db      	uxtb	r3, r3
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f008 fce6 	bl	800ea68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	4f54300a 	.word	0x4f54300a
 80060ac:	4f54310a 	.word	0x4f54310a

080060b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	333c      	adds	r3, #60	@ 0x3c
 80060c8:	3304      	adds	r3, #4
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4a15      	ldr	r2, [pc, #84]	@ (8006138 <PCD_EP_OutSetupPacket_int+0x88>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d90e      	bls.n	8006104 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d009      	beq.n	8006104 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060fc:	461a      	mov	r2, r3
 80060fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006102:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f008 fc9d 	bl	800ea44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	4a0a      	ldr	r2, [pc, #40]	@ (8006138 <PCD_EP_OutSetupPacket_int+0x88>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d90c      	bls.n	800612c <PCD_EP_OutSetupPacket_int+0x7c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	799b      	ldrb	r3, [r3, #6]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d108      	bne.n	800612c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006124:	461a      	mov	r2, r3
 8006126:	2101      	movs	r1, #1
 8006128:	f003 fc0c 	bl	8009944 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	4f54300a 	.word	0x4f54300a

0800613c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	460b      	mov	r3, r1
 8006146:	70fb      	strb	r3, [r7, #3]
 8006148:	4613      	mov	r3, r2
 800614a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800615a:	883b      	ldrh	r3, [r7, #0]
 800615c:	0419      	lsls	r1, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	430a      	orrs	r2, r1
 8006166:	629a      	str	r2, [r3, #40]	@ 0x28
 8006168:	e028      	b.n	80061bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	0c1b      	lsrs	r3, r3, #16
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006178:	2300      	movs	r3, #0
 800617a:	73fb      	strb	r3, [r7, #15]
 800617c:	e00d      	b.n	800619a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3340      	adds	r3, #64	@ 0x40
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	4413      	add	r3, r2
 8006192:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	3301      	adds	r3, #1
 8006198:	73fb      	strb	r3, [r7, #15]
 800619a:	7bfa      	ldrb	r2, [r7, #15]
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	3b01      	subs	r3, #1
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d3ec      	bcc.n	800617e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a4:	883b      	ldrh	r3, [r7, #0]
 80061a6:	0418      	lsls	r0, r3, #16
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	4302      	orrs	r2, r0
 80061b4:	3340      	adds	r3, #64	@ 0x40
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	460b      	mov	r3, r1
 80061d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	887a      	ldrh	r2, [r7, #2]
 80061dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e267      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d075      	beq.n	800630e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006222:	4b88      	ldr	r3, [pc, #544]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f003 030c 	and.w	r3, r3, #12
 800622a:	2b04      	cmp	r3, #4
 800622c:	d00c      	beq.n	8006248 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622e:	4b85      	ldr	r3, [pc, #532]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006236:	2b08      	cmp	r3, #8
 8006238:	d112      	bne.n	8006260 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800623a:	4b82      	ldr	r3, [pc, #520]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006242:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006246:	d10b      	bne.n	8006260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006248:	4b7e      	ldr	r3, [pc, #504]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d05b      	beq.n	800630c <HAL_RCC_OscConfig+0x108>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d157      	bne.n	800630c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e242      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006268:	d106      	bne.n	8006278 <HAL_RCC_OscConfig+0x74>
 800626a:	4b76      	ldr	r3, [pc, #472]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a75      	ldr	r2, [pc, #468]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006274:	6013      	str	r3, [r2, #0]
 8006276:	e01d      	b.n	80062b4 <HAL_RCC_OscConfig+0xb0>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006280:	d10c      	bne.n	800629c <HAL_RCC_OscConfig+0x98>
 8006282:	4b70      	ldr	r3, [pc, #448]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a6f      	ldr	r2, [pc, #444]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	4b6d      	ldr	r3, [pc, #436]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a6c      	ldr	r2, [pc, #432]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0xb0>
 800629c:	4b69      	ldr	r3, [pc, #420]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a68      	ldr	r2, [pc, #416]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80062a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4b66      	ldr	r3, [pc, #408]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a65      	ldr	r2, [pc, #404]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80062ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d013      	beq.n	80062e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062bc:	f7fd fb4a 	bl	8003954 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	e008      	b.n	80062d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c4:	f7fd fb46 	bl	8003954 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b64      	cmp	r3, #100	@ 0x64
 80062d0:	d901      	bls.n	80062d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e207      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d6:	4b5b      	ldr	r3, [pc, #364]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f0      	beq.n	80062c4 <HAL_RCC_OscConfig+0xc0>
 80062e2:	e014      	b.n	800630e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e4:	f7fd fb36 	bl	8003954 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ec:	f7fd fb32 	bl	8003954 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b64      	cmp	r3, #100	@ 0x64
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e1f3      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fe:	4b51      	ldr	r3, [pc, #324]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1f0      	bne.n	80062ec <HAL_RCC_OscConfig+0xe8>
 800630a:	e000      	b.n	800630e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800630c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d063      	beq.n	80063e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800631a:	4b4a      	ldr	r3, [pc, #296]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 030c 	and.w	r3, r3, #12
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006326:	4b47      	ldr	r3, [pc, #284]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800632e:	2b08      	cmp	r3, #8
 8006330:	d11c      	bne.n	800636c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006332:	4b44      	ldr	r3, [pc, #272]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d116      	bne.n	800636c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633e:	4b41      	ldr	r3, [pc, #260]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d005      	beq.n	8006356 <HAL_RCC_OscConfig+0x152>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d001      	beq.n	8006356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e1c7      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006356:	4b3b      	ldr	r3, [pc, #236]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4937      	ldr	r1, [pc, #220]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006366:	4313      	orrs	r3, r2
 8006368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800636a:	e03a      	b.n	80063e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d020      	beq.n	80063b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006374:	4b34      	ldr	r3, [pc, #208]	@ (8006448 <HAL_RCC_OscConfig+0x244>)
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637a:	f7fd faeb 	bl	8003954 <HAL_GetTick>
 800637e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006382:	f7fd fae7 	bl	8003954 <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e1a8      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006394:	4b2b      	ldr	r3, [pc, #172]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0f0      	beq.n	8006382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a0:	4b28      	ldr	r3, [pc, #160]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4925      	ldr	r1, [pc, #148]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
 80063b4:	e015      	b.n	80063e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b6:	4b24      	ldr	r3, [pc, #144]	@ (8006448 <HAL_RCC_OscConfig+0x244>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fd faca 	bl	8003954 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c4:	f7fd fac6 	bl	8003954 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e187      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0308 	and.w	r3, r3, #8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d036      	beq.n	800645c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f6:	4b15      	ldr	r3, [pc, #84]	@ (800644c <HAL_RCC_OscConfig+0x248>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063fc:	f7fd faaa 	bl	8003954 <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006402:	e008      	b.n	8006416 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006404:	f7fd faa6 	bl	8003954 <HAL_GetTick>
 8006408:	4602      	mov	r2, r0
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d901      	bls.n	8006416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e167      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006416:	4b0b      	ldr	r3, [pc, #44]	@ (8006444 <HAL_RCC_OscConfig+0x240>)
 8006418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f0      	beq.n	8006404 <HAL_RCC_OscConfig+0x200>
 8006422:	e01b      	b.n	800645c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006424:	4b09      	ldr	r3, [pc, #36]	@ (800644c <HAL_RCC_OscConfig+0x248>)
 8006426:	2200      	movs	r2, #0
 8006428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800642a:	f7fd fa93 	bl	8003954 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006430:	e00e      	b.n	8006450 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006432:	f7fd fa8f 	bl	8003954 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d907      	bls.n	8006450 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e150      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
 8006444:	40023800 	.word	0x40023800
 8006448:	42470000 	.word	0x42470000
 800644c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006450:	4b88      	ldr	r3, [pc, #544]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1ea      	bne.n	8006432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8097 	beq.w	8006598 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646e:	4b81      	ldr	r3, [pc, #516]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10f      	bne.n	800649a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	60bb      	str	r3, [r7, #8]
 800647e:	4b7d      	ldr	r3, [pc, #500]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006482:	4a7c      	ldr	r2, [pc, #496]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006488:	6413      	str	r3, [r2, #64]	@ 0x40
 800648a:	4b7a      	ldr	r3, [pc, #488]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 800648c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800649a:	4b77      	ldr	r3, [pc, #476]	@ (8006678 <HAL_RCC_OscConfig+0x474>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d118      	bne.n	80064d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a6:	4b74      	ldr	r3, [pc, #464]	@ (8006678 <HAL_RCC_OscConfig+0x474>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a73      	ldr	r2, [pc, #460]	@ (8006678 <HAL_RCC_OscConfig+0x474>)
 80064ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064b2:	f7fd fa4f 	bl	8003954 <HAL_GetTick>
 80064b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b8:	e008      	b.n	80064cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ba:	f7fd fa4b 	bl	8003954 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e10c      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064cc:	4b6a      	ldr	r3, [pc, #424]	@ (8006678 <HAL_RCC_OscConfig+0x474>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d106      	bne.n	80064ee <HAL_RCC_OscConfig+0x2ea>
 80064e0:	4b64      	ldr	r3, [pc, #400]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 80064e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e4:	4a63      	ldr	r2, [pc, #396]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80064ec:	e01c      	b.n	8006528 <HAL_RCC_OscConfig+0x324>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b05      	cmp	r3, #5
 80064f4:	d10c      	bne.n	8006510 <HAL_RCC_OscConfig+0x30c>
 80064f6:	4b5f      	ldr	r3, [pc, #380]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	4a5e      	ldr	r2, [pc, #376]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 80064fc:	f043 0304 	orr.w	r3, r3, #4
 8006500:	6713      	str	r3, [r2, #112]	@ 0x70
 8006502:	4b5c      	ldr	r3, [pc, #368]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006506:	4a5b      	ldr	r2, [pc, #364]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	6713      	str	r3, [r2, #112]	@ 0x70
 800650e:	e00b      	b.n	8006528 <HAL_RCC_OscConfig+0x324>
 8006510:	4b58      	ldr	r3, [pc, #352]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006514:	4a57      	ldr	r2, [pc, #348]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	6713      	str	r3, [r2, #112]	@ 0x70
 800651c:	4b55      	ldr	r3, [pc, #340]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 800651e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006520:	4a54      	ldr	r2, [pc, #336]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006522:	f023 0304 	bic.w	r3, r3, #4
 8006526:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d015      	beq.n	800655c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006530:	f7fd fa10 	bl	8003954 <HAL_GetTick>
 8006534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006536:	e00a      	b.n	800654e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006538:	f7fd fa0c 	bl	8003954 <HAL_GetTick>
 800653c:	4602      	mov	r2, r0
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e0cb      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654e:	4b49      	ldr	r3, [pc, #292]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0ee      	beq.n	8006538 <HAL_RCC_OscConfig+0x334>
 800655a:	e014      	b.n	8006586 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655c:	f7fd f9fa 	bl	8003954 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006562:	e00a      	b.n	800657a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006564:	f7fd f9f6 	bl	8003954 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e0b5      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800657a:	4b3e      	ldr	r3, [pc, #248]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 800657c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1ee      	bne.n	8006564 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006586:	7dfb      	ldrb	r3, [r7, #23]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d105      	bne.n	8006598 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800658c:	4b39      	ldr	r3, [pc, #228]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 800658e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006590:	4a38      	ldr	r2, [pc, #224]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006592:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006596:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80a1 	beq.w	80066e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065a2:	4b34      	ldr	r3, [pc, #208]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b08      	cmp	r3, #8
 80065ac:	d05c      	beq.n	8006668 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d141      	bne.n	800663a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b6:	4b31      	ldr	r3, [pc, #196]	@ (800667c <HAL_RCC_OscConfig+0x478>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fd f9ca 	bl	8003954 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fd f9c6 	bl	8003954 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e087      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d6:	4b27      	ldr	r3, [pc, #156]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69da      	ldr	r2, [r3, #28]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	3b01      	subs	r3, #1
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	431a      	orrs	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006604:	061b      	lsls	r3, r3, #24
 8006606:	491b      	ldr	r1, [pc, #108]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 8006608:	4313      	orrs	r3, r2
 800660a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800660c:	4b1b      	ldr	r3, [pc, #108]	@ (800667c <HAL_RCC_OscConfig+0x478>)
 800660e:	2201      	movs	r2, #1
 8006610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006612:	f7fd f99f 	bl	8003954 <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661a:	f7fd f99b 	bl	8003954 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b02      	cmp	r3, #2
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e05c      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662c:	4b11      	ldr	r3, [pc, #68]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d0f0      	beq.n	800661a <HAL_RCC_OscConfig+0x416>
 8006638:	e054      	b.n	80066e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663a:	4b10      	ldr	r3, [pc, #64]	@ (800667c <HAL_RCC_OscConfig+0x478>)
 800663c:	2200      	movs	r2, #0
 800663e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006640:	f7fd f988 	bl	8003954 <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006648:	f7fd f984 	bl	8003954 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e045      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800665a:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <HAL_RCC_OscConfig+0x470>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f0      	bne.n	8006648 <HAL_RCC_OscConfig+0x444>
 8006666:	e03d      	b.n	80066e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d107      	bne.n	8006680 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e038      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
 8006674:	40023800 	.word	0x40023800
 8006678:	40007000 	.word	0x40007000
 800667c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006680:	4b1b      	ldr	r3, [pc, #108]	@ (80066f0 <HAL_RCC_OscConfig+0x4ec>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d028      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006698:	429a      	cmp	r2, r3
 800669a:	d121      	bne.n	80066e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d11a      	bne.n	80066e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d111      	bne.n	80066e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	3b01      	subs	r3, #1
 80066ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d107      	bne.n	80066e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d001      	beq.n	80066e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e000      	b.n	80066e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40023800 	.word	0x40023800

080066f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e0cc      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006708:	4b68      	ldr	r3, [pc, #416]	@ (80068ac <HAL_RCC_ClockConfig+0x1b8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d90c      	bls.n	8006730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006716:	4b65      	ldr	r3, [pc, #404]	@ (80068ac <HAL_RCC_ClockConfig+0x1b8>)
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671e:	4b63      	ldr	r3, [pc, #396]	@ (80068ac <HAL_RCC_ClockConfig+0x1b8>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 030f 	and.w	r3, r3, #15
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d001      	beq.n	8006730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0b8      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b00      	cmp	r3, #0
 800673a:	d020      	beq.n	800677e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006748:	4b59      	ldr	r3, [pc, #356]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	4a58      	ldr	r2, [pc, #352]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006752:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006760:	4b53      	ldr	r3, [pc, #332]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	4a52      	ldr	r2, [pc, #328]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006766:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800676a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800676c:	4b50      	ldr	r3, [pc, #320]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	494d      	ldr	r1, [pc, #308]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 800677a:	4313      	orrs	r3, r2
 800677c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d044      	beq.n	8006814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d107      	bne.n	80067a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006792:	4b47      	ldr	r3, [pc, #284]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d119      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e07f      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d003      	beq.n	80067b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d107      	bne.n	80067c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b2:	4b3f      	ldr	r3, [pc, #252]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d109      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e06f      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067c2:	4b3b      	ldr	r3, [pc, #236]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e067      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067d2:	4b37      	ldr	r3, [pc, #220]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f023 0203 	bic.w	r2, r3, #3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4934      	ldr	r1, [pc, #208]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e4:	f7fd f8b6 	bl	8003954 <HAL_GetTick>
 80067e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067ea:	e00a      	b.n	8006802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067ec:	f7fd f8b2 	bl	8003954 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e04f      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	4b2b      	ldr	r3, [pc, #172]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 020c 	and.w	r2, r3, #12
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	429a      	cmp	r2, r3
 8006812:	d1eb      	bne.n	80067ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006814:	4b25      	ldr	r3, [pc, #148]	@ (80068ac <HAL_RCC_ClockConfig+0x1b8>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d20c      	bcs.n	800683c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006822:	4b22      	ldr	r3, [pc, #136]	@ (80068ac <HAL_RCC_ClockConfig+0x1b8>)
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	4b20      	ldr	r3, [pc, #128]	@ (80068ac <HAL_RCC_ClockConfig+0x1b8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d001      	beq.n	800683c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e032      	b.n	80068a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006848:	4b19      	ldr	r3, [pc, #100]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	4916      	ldr	r1, [pc, #88]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006856:	4313      	orrs	r3, r2
 8006858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0308 	and.w	r3, r3, #8
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006866:	4b12      	ldr	r3, [pc, #72]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	490e      	ldr	r1, [pc, #56]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	4313      	orrs	r3, r2
 8006878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800687a:	f000 f821 	bl	80068c0 <HAL_RCC_GetSysClockFreq>
 800687e:	4602      	mov	r2, r0
 8006880:	4b0b      	ldr	r3, [pc, #44]	@ (80068b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	091b      	lsrs	r3, r3, #4
 8006886:	f003 030f 	and.w	r3, r3, #15
 800688a:	490a      	ldr	r1, [pc, #40]	@ (80068b4 <HAL_RCC_ClockConfig+0x1c0>)
 800688c:	5ccb      	ldrb	r3, [r1, r3]
 800688e:	fa22 f303 	lsr.w	r3, r2, r3
 8006892:	4a09      	ldr	r2, [pc, #36]	@ (80068b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006896:	4b09      	ldr	r3, [pc, #36]	@ (80068bc <HAL_RCC_ClockConfig+0x1c8>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f7fa fef0 	bl	8001680 <HAL_InitTick>

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40023c00 	.word	0x40023c00
 80068b0:	40023800 	.word	0x40023800
 80068b4:	08011db8 	.word	0x08011db8
 80068b8:	20000010 	.word	0x20000010
 80068bc:	20000090 	.word	0x20000090

080068c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c4:	b094      	sub	sp, #80	@ 0x50
 80068c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d8:	4b79      	ldr	r3, [pc, #484]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 030c 	and.w	r3, r3, #12
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d00d      	beq.n	8006900 <HAL_RCC_GetSysClockFreq+0x40>
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	f200 80e1 	bhi.w	8006aac <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0x34>
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	d003      	beq.n	80068fa <HAL_RCC_GetSysClockFreq+0x3a>
 80068f2:	e0db      	b.n	8006aac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f4:	4b73      	ldr	r3, [pc, #460]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 80068f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068f8:	e0db      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068fa:	4b73      	ldr	r3, [pc, #460]	@ (8006ac8 <HAL_RCC_GetSysClockFreq+0x208>)
 80068fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068fe:	e0d8      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006900:	4b6f      	ldr	r3, [pc, #444]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006908:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800690a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d063      	beq.n	80069de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006916:	4b6a      	ldr	r3, [pc, #424]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	099b      	lsrs	r3, r3, #6
 800691c:	2200      	movs	r2, #0
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006920:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006928:	633b      	str	r3, [r7, #48]	@ 0x30
 800692a:	2300      	movs	r3, #0
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
 800692e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006932:	4622      	mov	r2, r4
 8006934:	462b      	mov	r3, r5
 8006936:	f04f 0000 	mov.w	r0, #0
 800693a:	f04f 0100 	mov.w	r1, #0
 800693e:	0159      	lsls	r1, r3, #5
 8006940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006944:	0150      	lsls	r0, r2, #5
 8006946:	4602      	mov	r2, r0
 8006948:	460b      	mov	r3, r1
 800694a:	4621      	mov	r1, r4
 800694c:	1a51      	subs	r1, r2, r1
 800694e:	6139      	str	r1, [r7, #16]
 8006950:	4629      	mov	r1, r5
 8006952:	eb63 0301 	sbc.w	r3, r3, r1
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006964:	4659      	mov	r1, fp
 8006966:	018b      	lsls	r3, r1, #6
 8006968:	4651      	mov	r1, sl
 800696a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800696e:	4651      	mov	r1, sl
 8006970:	018a      	lsls	r2, r1, #6
 8006972:	4651      	mov	r1, sl
 8006974:	ebb2 0801 	subs.w	r8, r2, r1
 8006978:	4659      	mov	r1, fp
 800697a:	eb63 0901 	sbc.w	r9, r3, r1
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800698a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006992:	4690      	mov	r8, r2
 8006994:	4699      	mov	r9, r3
 8006996:	4623      	mov	r3, r4
 8006998:	eb18 0303 	adds.w	r3, r8, r3
 800699c:	60bb      	str	r3, [r7, #8]
 800699e:	462b      	mov	r3, r5
 80069a0:	eb49 0303 	adc.w	r3, r9, r3
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	f04f 0300 	mov.w	r3, #0
 80069ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069b2:	4629      	mov	r1, r5
 80069b4:	024b      	lsls	r3, r1, #9
 80069b6:	4621      	mov	r1, r4
 80069b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069bc:	4621      	mov	r1, r4
 80069be:	024a      	lsls	r2, r1, #9
 80069c0:	4610      	mov	r0, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069c6:	2200      	movs	r2, #0
 80069c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069d0:	f7fa f94a 	bl	8000c68 <__aeabi_uldivmod>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4613      	mov	r3, r2
 80069da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069dc:	e058      	b.n	8006a90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069de:	4b38      	ldr	r3, [pc, #224]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	099b      	lsrs	r3, r3, #6
 80069e4:	2200      	movs	r2, #0
 80069e6:	4618      	mov	r0, r3
 80069e8:	4611      	mov	r1, r2
 80069ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ee:	623b      	str	r3, [r7, #32]
 80069f0:	2300      	movs	r3, #0
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80069f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	f04f 0000 	mov.w	r0, #0
 8006a00:	f04f 0100 	mov.w	r1, #0
 8006a04:	0159      	lsls	r1, r3, #5
 8006a06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0a:	0150      	lsls	r0, r2, #5
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4641      	mov	r1, r8
 8006a12:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a16:	4649      	mov	r1, r9
 8006a18:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a30:	ebb2 040a 	subs.w	r4, r2, sl
 8006a34:	eb63 050b 	sbc.w	r5, r3, fp
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	00eb      	lsls	r3, r5, #3
 8006a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a46:	00e2      	lsls	r2, r4, #3
 8006a48:	4614      	mov	r4, r2
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	4643      	mov	r3, r8
 8006a4e:	18e3      	adds	r3, r4, r3
 8006a50:	603b      	str	r3, [r7, #0]
 8006a52:	464b      	mov	r3, r9
 8006a54:	eb45 0303 	adc.w	r3, r5, r3
 8006a58:	607b      	str	r3, [r7, #4]
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a66:	4629      	mov	r1, r5
 8006a68:	028b      	lsls	r3, r1, #10
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a70:	4621      	mov	r1, r4
 8006a72:	028a      	lsls	r2, r1, #10
 8006a74:	4610      	mov	r0, r2
 8006a76:	4619      	mov	r1, r3
 8006a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
 8006a7e:	61fa      	str	r2, [r7, #28]
 8006a80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a84:	f7fa f8f0 	bl	8000c68 <__aeabi_uldivmod>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a90:	4b0b      	ldr	r3, [pc, #44]	@ (8006ac0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	0c1b      	lsrs	r3, r3, #16
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006aa0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006aa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006aaa:	e002      	b.n	8006ab2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aac:	4b05      	ldr	r3, [pc, #20]	@ (8006ac4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3750      	adds	r7, #80	@ 0x50
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800
 8006ac4:	00f42400 	.word	0x00f42400
 8006ac8:	007a1200 	.word	0x007a1200

08006acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad0:	4b03      	ldr	r3, [pc, #12]	@ (8006ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000010 	.word	0x20000010

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ae8:	f7ff fff0 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	@ (8006b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	0a9b      	lsrs	r3, r3, #10
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	@ (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40023800 	.word	0x40023800
 8006b08:	08011dc8 	.word	0x08011dc8

08006b0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	220f      	movs	r2, #15
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b1c:	4b12      	ldr	r3, [pc, #72]	@ (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0203 	and.w	r2, r3, #3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b28:	4b0f      	ldr	r3, [pc, #60]	@ (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b34:	4b0c      	ldr	r3, [pc, #48]	@ (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b40:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <HAL_RCC_GetClockConfig+0x5c>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b4e:	4b07      	ldr	r3, [pc, #28]	@ (8006b6c <HAL_RCC_GetClockConfig+0x60>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 020f 	and.w	r2, r3, #15
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	601a      	str	r2, [r3, #0]
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	40023c00 	.word	0x40023c00

08006b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d105      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d075      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ba4:	4b91      	ldr	r3, [pc, #580]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006baa:	f7fc fed3 	bl	8003954 <HAL_GetTick>
 8006bae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bb2:	f7fc fecf 	bl	8003954 <HAL_GetTick>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	1ad3      	subs	r3, r2, r3
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d901      	bls.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e189      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1f0      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d009      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	019a      	lsls	r2, r3, #6
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	071b      	lsls	r3, r3, #28
 8006be8:	4981      	ldr	r1, [pc, #516]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01f      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bfc:	4b7c      	ldr	r3, [pc, #496]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c02:	0f1b      	lsrs	r3, r3, #28
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	019a      	lsls	r2, r3, #6
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	431a      	orrs	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	071b      	lsls	r3, r3, #28
 8006c1c:	4974      	ldr	r1, [pc, #464]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c24:	4b72      	ldr	r3, [pc, #456]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c2a:	f023 021f 	bic.w	r2, r3, #31
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	69db      	ldr	r3, [r3, #28]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	496e      	ldr	r1, [pc, #440]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	019a      	lsls	r2, r3, #6
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	061b      	lsls	r3, r3, #24
 8006c54:	431a      	orrs	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	071b      	lsls	r3, r3, #28
 8006c5c:	4964      	ldr	r1, [pc, #400]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c64:	4b61      	ldr	r3, [pc, #388]	@ (8006dec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c6a:	f7fc fe73 	bl	8003954 <HAL_GetTick>
 8006c6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c70:	e008      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c72:	f7fc fe6f 	bl	8003954 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e129      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c84:	4b5a      	ldr	r3, [pc, #360]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0f0      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d105      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d079      	beq.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ca8:	4b52      	ldr	r3, [pc, #328]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cae:	f7fc fe51 	bl	8003954 <HAL_GetTick>
 8006cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cb4:	e008      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006cb6:	f7fc fe4d 	bl	8003954 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	d901      	bls.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e107      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cc8:	4b49      	ldr	r3, [pc, #292]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cd4:	d0ef      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d020      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ce2:	4b43      	ldr	r3, [pc, #268]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce8:	0f1b      	lsrs	r3, r3, #28
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	019a      	lsls	r2, r3, #6
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	061b      	lsls	r3, r3, #24
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	071b      	lsls	r3, r3, #28
 8006d02:	493b      	ldr	r1, [pc, #236]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d0a:	4b39      	ldr	r3, [pc, #228]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d10:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	4934      	ldr	r1, [pc, #208]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0308 	and.w	r3, r3, #8
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01e      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d30:	4b2f      	ldr	r3, [pc, #188]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d36:	0e1b      	lsrs	r3, r3, #24
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	019a      	lsls	r2, r3, #6
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	061b      	lsls	r3, r3, #24
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	071b      	lsls	r3, r3, #28
 8006d50:	4927      	ldr	r1, [pc, #156]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d58:	4b25      	ldr	r3, [pc, #148]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d5e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d66:	4922      	ldr	r1, [pc, #136]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d6e:	4b21      	ldr	r3, [pc, #132]	@ (8006df4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d74:	f7fc fdee 	bl	8003954 <HAL_GetTick>
 8006d78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d7c:	f7fc fdea 	bl	8003954 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e0a4      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d8e:	4b18      	ldr	r3, [pc, #96]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d9a:	d1ef      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 808b 	beq.w	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	4b10      	ldr	r3, [pc, #64]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db2:	4a0f      	ldr	r2, [pc, #60]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006db4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a0b      	ldr	r2, [pc, #44]	@ (8006df8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd2:	f7fc fdbf 	bl	8003954 <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dd8:	e010      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dda:	f7fc fdbb 	bl	8003954 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d909      	bls.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e075      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006dec:	42470068 	.word	0x42470068
 8006df0:	40023800 	.word	0x40023800
 8006df4:	42470070 	.word	0x42470070
 8006df8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006dfc:	4b38      	ldr	r3, [pc, #224]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0e8      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e08:	4b36      	ldr	r3, [pc, #216]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e10:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d02f      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d028      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e26:	4b2f      	ldr	r3, [pc, #188]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e2e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e30:	4b2d      	ldr	r3, [pc, #180]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e36:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e3c:	4a29      	ldr	r2, [pc, #164]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e42:	4b28      	ldr	r3, [pc, #160]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e46:	f003 0301 	and.w	r3, r3, #1
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d114      	bne.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e4e:	f7fc fd81 	bl	8003954 <HAL_GetTick>
 8006e52:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e54:	e00a      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e56:	f7fc fd7d 	bl	8003954 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e035      	b.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0ee      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e84:	d10d      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006e86:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e92:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e9a:	4912      	ldr	r1, [pc, #72]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	608b      	str	r3, [r1, #8]
 8006ea0:	e005      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006ea2:	4b10      	ldr	r3, [pc, #64]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006eac:	6093      	str	r3, [r2, #8]
 8006eae:	4b0d      	ldr	r3, [pc, #52]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eb0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eba:	490a      	ldr	r1, [pc, #40]	@ (8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006ed2:	4b06      	ldr	r3, [pc, #24]	@ (8006eec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006ed4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40007000 	.word	0x40007000
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	42470e40 	.word	0x42470e40
 8006eec:	424711e0 	.word	0x424711e0

08006ef0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e025      	b.n	8006f50 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f81d 	bl	8006f58 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4610      	mov	r0, r2
 8006f32:	f001 f935 	bl	80081a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6818      	ldr	r0, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	f001 f98a 	bl	800825a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006f7e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d101      	bne.n	8006f8a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006f86:	2302      	movs	r3, #2
 8006f88:	e021      	b.n	8006fce <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006f8a:	7dfb      	ldrb	r3, [r7, #23]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d002      	beq.n	8006f96 <HAL_SDRAM_SendCommand+0x2a>
 8006f90:	7dfb      	ldrb	r3, [r7, #23]
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d118      	bne.n	8006fc8 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f9c0 	bl	800832c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d104      	bne.n	8006fbe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2205      	movs	r2, #5
 8006fb8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fbc:	e006      	b.n	8006fcc <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fc6:	e001      	b.n	8006fcc <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d101      	bne.n	8006ff0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006fec:	2302      	movs	r3, #2
 8006fee:	e016      	b.n	800701e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d10f      	bne.n	800701c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2202      	movs	r2, #2
 8007000:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	4618      	mov	r0, r3
 800700c:	f001 f9cb 	bl	80083a6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	e000      	b.n	800701e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e07b      	b.n	8007130 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800703c:	2b00      	cmp	r3, #0
 800703e:	d108      	bne.n	8007052 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007048:	d009      	beq.n	800705e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	61da      	str	r2, [r3, #28]
 8007050:	e005      	b.n	800705e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d106      	bne.n	800707e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f885 	bl	8007188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007094:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070e2:	ea42 0103 	orr.w	r1, r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	0c1b      	lsrs	r3, r3, #16
 80070fc:	f003 0104 	and.w	r1, r3, #4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	f003 0210 	and.w	r2, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	69da      	ldr	r2, [r3, #28]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800711e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e01a      	b.n	8007180 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2202      	movs	r2, #2
 800714e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007160:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f81a 	bl	800719c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3708      	adds	r7, #8
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	603b      	str	r3, [r7, #0]
 80071bc:	4613      	mov	r3, r2
 80071be:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c0:	f7fc fbc8 	bl	8003954 <HAL_GetTick>
 80071c4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d001      	beq.n	80071da <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80071d6:	2302      	movs	r3, #2
 80071d8:	e12a      	b.n	8007430 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <HAL_SPI_Transmit+0x36>
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e122      	b.n	8007430 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_SPI_Transmit+0x48>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e11b      	b.n	8007430 <HAL_SPI_Transmit+0x280>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2203      	movs	r2, #3
 8007204:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	88fa      	ldrh	r2, [r7, #6]
 800721e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007246:	d10f      	bne.n	8007268 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007256:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007266:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d007      	beq.n	8007286 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800728e:	d152      	bne.n	8007336 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d002      	beq.n	800729e <HAL_SPI_Transmit+0xee>
 8007298:	8b7b      	ldrh	r3, [r7, #26]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d145      	bne.n	800732a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a2:	881a      	ldrh	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072c2:	e032      	b.n	800732a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b02      	cmp	r3, #2
 80072d0:	d112      	bne.n	80072f8 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e2:	1c9a      	adds	r2, r3, #2
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80072f6:	e018      	b.n	800732a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f8:	f7fc fb2c 	bl	8003954 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	429a      	cmp	r2, r3
 8007306:	d803      	bhi.n	8007310 <HAL_SPI_Transmit+0x160>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d102      	bne.n	8007316 <HAL_SPI_Transmit+0x166>
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d109      	bne.n	800732a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007326:	2303      	movs	r3, #3
 8007328:	e082      	b.n	8007430 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1c7      	bne.n	80072c4 <HAL_SPI_Transmit+0x114>
 8007334:	e053      	b.n	80073de <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_SPI_Transmit+0x194>
 800733e:	8b7b      	ldrh	r3, [r7, #26]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d147      	bne.n	80073d4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	330c      	adds	r3, #12
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007360:	b29b      	uxth	r3, r3
 8007362:	3b01      	subs	r3, #1
 8007364:	b29a      	uxth	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800736a:	e033      	b.n	80073d4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b02      	cmp	r3, #2
 8007378:	d113      	bne.n	80073a2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	330c      	adds	r3, #12
 8007384:	7812      	ldrb	r2, [r2, #0]
 8007386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80073a0:	e018      	b.n	80073d4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a2:	f7fc fad7 	bl	8003954 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d803      	bhi.n	80073ba <HAL_SPI_Transmit+0x20a>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b8:	d102      	bne.n	80073c0 <HAL_SPI_Transmit+0x210>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d109      	bne.n	80073d4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e02d      	b.n	8007430 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073d8:	b29b      	uxth	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1c6      	bne.n	800736c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 fbe6 	bl	8007bb4 <SPI_EndRxTxTransaction>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073fc:	2300      	movs	r3, #0
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800742e:	2300      	movs	r3, #0
  }
}
 8007430:	4618      	mov	r0, r3
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af02      	add	r7, sp, #8
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	603b      	str	r3, [r7, #0]
 8007444:	4613      	mov	r3, r2
 8007446:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d001      	beq.n	8007458 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
 8007456:	e104      	b.n	8007662 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007460:	d112      	bne.n	8007488 <HAL_SPI_Receive+0x50>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10e      	bne.n	8007488 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2204      	movs	r2, #4
 800746e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007472:	88fa      	ldrh	r2, [r7, #6]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f8f3 	bl	800766a <HAL_SPI_TransmitReceive>
 8007484:	4603      	mov	r3, r0
 8007486:	e0ec      	b.n	8007662 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007488:	f7fc fa64 	bl	8003954 <HAL_GetTick>
 800748c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_SPI_Receive+0x62>
 8007494:	88fb      	ldrh	r3, [r7, #6]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e0e1      	b.n	8007662 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d101      	bne.n	80074ac <HAL_SPI_Receive+0x74>
 80074a8:	2302      	movs	r3, #2
 80074aa:	e0da      	b.n	8007662 <HAL_SPI_Receive+0x22a>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2204      	movs	r2, #4
 80074b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074fa:	d10f      	bne.n	800751c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800750a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800751a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007526:	2b40      	cmp	r3, #64	@ 0x40
 8007528:	d007      	beq.n	800753a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007538:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d170      	bne.n	8007624 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007542:	e035      	b.n	80075b0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b01      	cmp	r3, #1
 8007550:	d115      	bne.n	800757e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f103 020c 	add.w	r2, r3, #12
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755e:	7812      	ldrb	r2, [r2, #0]
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800757c:	e018      	b.n	80075b0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800757e:	f7fc f9e9 	bl	8003954 <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	429a      	cmp	r2, r3
 800758c:	d803      	bhi.n	8007596 <HAL_SPI_Receive+0x15e>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d102      	bne.n	800759c <HAL_SPI_Receive+0x164>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e058      	b.n	8007662 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1c4      	bne.n	8007544 <HAL_SPI_Receive+0x10c>
 80075ba:	e038      	b.n	800762e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d113      	bne.n	80075f2 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075d4:	b292      	uxth	r2, r2
 80075d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075f0:	e018      	b.n	8007624 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f2:	f7fc f9af 	bl	8003954 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d803      	bhi.n	800760a <HAL_SPI_Receive+0x1d2>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d102      	bne.n	8007610 <HAL_SPI_Receive+0x1d8>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e01e      	b.n	8007662 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1c6      	bne.n	80075bc <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	6839      	ldr	r1, [r7, #0]
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 fa58 	bl	8007ae8 <SPI_EndRxTransaction>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007660:	2300      	movs	r3, #0
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	3718      	adds	r7, #24
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b08a      	sub	sp, #40	@ 0x28
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	60b9      	str	r1, [r7, #8]
 8007674:	607a      	str	r2, [r7, #4]
 8007676:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007678:	2301      	movs	r3, #1
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800767c:	f7fc f96a 	bl	8003954 <HAL_GetTick>
 8007680:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007688:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007690:	887b      	ldrh	r3, [r7, #2]
 8007692:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007694:	7ffb      	ldrb	r3, [r7, #31]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d00c      	beq.n	80076b4 <HAL_SPI_TransmitReceive+0x4a>
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a0:	d106      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <HAL_SPI_TransmitReceive+0x46>
 80076aa:	7ffb      	ldrb	r3, [r7, #31]
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d001      	beq.n	80076b4 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e17f      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d005      	beq.n	80076c6 <HAL_SPI_TransmitReceive+0x5c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <HAL_SPI_TransmitReceive+0x5c>
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e174      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_SPI_TransmitReceive+0x6e>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e16d      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b04      	cmp	r3, #4
 80076ea:	d003      	beq.n	80076f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2205      	movs	r2, #5
 80076f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	887a      	ldrh	r2, [r7, #2]
 8007704:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	887a      	ldrh	r2, [r7, #2]
 800770a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	887a      	ldrh	r2, [r7, #2]
 8007716:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	887a      	ldrh	r2, [r7, #2]
 800771c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2200      	movs	r2, #0
 8007728:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007734:	2b40      	cmp	r3, #64	@ 0x40
 8007736:	d007      	beq.n	8007748 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007746:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007750:	d17e      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <HAL_SPI_TransmitReceive+0xf6>
 800775a:	8afb      	ldrh	r3, [r7, #22]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d16c      	bne.n	800783a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007764:	881a      	ldrh	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007770:	1c9a      	adds	r2, r3, #2
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007784:	e059      	b.n	800783a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b02      	cmp	r3, #2
 8007792:	d11b      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x162>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d016      	beq.n	80077cc <HAL_SPI_TransmitReceive+0x162>
 800779e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d113      	bne.n	80077cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b4:	1c9a      	adds	r2, r3, #2
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077be:	b29b      	uxth	r3, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d119      	bne.n	800780e <HAL_SPI_TransmitReceive+0x1a4>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d014      	beq.n	800780e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ee:	b292      	uxth	r2, r2
 80077f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f6:	1c9a      	adds	r2, r3, #2
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007800:	b29b      	uxth	r3, r3
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800780a:	2301      	movs	r3, #1
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800780e:	f7fc f8a1 	bl	8003954 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800781a:	429a      	cmp	r2, r3
 800781c:	d80d      	bhi.n	800783a <HAL_SPI_TransmitReceive+0x1d0>
 800781e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007824:	d009      	beq.n	800783a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e0bc      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1a0      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x11c>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d19b      	bne.n	8007786 <HAL_SPI_TransmitReceive+0x11c>
 800784e:	e082      	b.n	8007956 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <HAL_SPI_TransmitReceive+0x1f4>
 8007858:	8afb      	ldrh	r3, [r7, #22]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d171      	bne.n	8007942 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	330c      	adds	r3, #12
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800787a:	b29b      	uxth	r3, r3
 800787c:	3b01      	subs	r3, #1
 800787e:	b29a      	uxth	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007884:	e05d      	b.n	8007942 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b02      	cmp	r3, #2
 8007892:	d11c      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x264>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <HAL_SPI_TransmitReceive+0x264>
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d114      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	330c      	adds	r3, #12
 80078ae:	7812      	ldrb	r2, [r2, #0]
 80078b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d119      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x2a6>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d014      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	68da      	ldr	r2, [r3, #12]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800790c:	2301      	movs	r3, #1
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007910:	f7fc f820 	bl	8003954 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800791c:	429a      	cmp	r2, r3
 800791e:	d803      	bhi.n	8007928 <HAL_SPI_TransmitReceive+0x2be>
 8007920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d102      	bne.n	800792e <HAL_SPI_TransmitReceive+0x2c4>
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	2b00      	cmp	r3, #0
 800792c:	d109      	bne.n	8007942 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e038      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007946:	b29b      	uxth	r3, r3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d19c      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x21c>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d197      	bne.n	8007886 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007956:	6a3a      	ldr	r2, [r7, #32]
 8007958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f000 f92a 	bl	8007bb4 <SPI_EndRxTxTransaction>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2220      	movs	r2, #32
 800796a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e01d      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007980:	2300      	movs	r3, #0
 8007982:	613b      	str	r3, [r7, #16]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	613b      	str	r3, [r7, #16]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	613b      	str	r3, [r7, #16]
 8007994:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80079b2:	2300      	movs	r3, #0
  }
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3728      	adds	r7, #40	@ 0x28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079ca:	b2db      	uxtb	r3, r3
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b088      	sub	sp, #32
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	4613      	mov	r3, r2
 80079e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079e8:	f7fb ffb4 	bl	8003954 <HAL_GetTick>
 80079ec:	4602      	mov	r2, r0
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079f8:	f7fb ffac 	bl	8003954 <HAL_GetTick>
 80079fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079fe:	4b39      	ldr	r3, [pc, #228]	@ (8007ae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	015b      	lsls	r3, r3, #5
 8007a04:	0d1b      	lsrs	r3, r3, #20
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	fb02 f303 	mul.w	r3, r2, r3
 8007a0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a0e:	e054      	b.n	8007aba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a16:	d050      	beq.n	8007aba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a18:	f7fb ff9c 	bl	8003954 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d902      	bls.n	8007a2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d13d      	bne.n	8007aaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	685a      	ldr	r2, [r3, #4]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a46:	d111      	bne.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a50:	d004      	beq.n	8007a5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a5a:	d107      	bne.n	8007a6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a74:	d10f      	bne.n	8007a96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e017      	b.n	8007ada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d19b      	bne.n	8007a10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000010 	.word	0x20000010

08007ae8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af02      	add	r7, sp, #8
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007afc:	d111      	bne.n	8007b22 <SPI_EndRxTransaction+0x3a>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b06:	d004      	beq.n	8007b12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b10:	d107      	bne.n	8007b22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b2a:	d12a      	bne.n	8007b82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b34:	d012      	beq.n	8007b5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2180      	movs	r1, #128	@ 0x80
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff ff49 	bl	80079d8 <SPI_WaitFlagStateUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d02d      	beq.n	8007ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b50:	f043 0220 	orr.w	r2, r3, #32
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e026      	b.n	8007baa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	2200      	movs	r2, #0
 8007b64:	2101      	movs	r1, #1
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff ff36 	bl	80079d8 <SPI_WaitFlagStateUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01a      	beq.n	8007ba8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	f043 0220 	orr.w	r2, r3, #32
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e013      	b.n	8007baa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f7ff ff23 	bl	80079d8 <SPI_WaitFlagStateUntilTimeout>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b9c:	f043 0220 	orr.w	r2, r3, #32
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e000      	b.n	8007baa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af02      	add	r7, sp, #8
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	2102      	movs	r1, #2
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff ff04 	bl	80079d8 <SPI_WaitFlagStateUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bda:	f043 0220 	orr.w	r2, r3, #32
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e032      	b.n	8007c4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007be6:	4b1b      	ldr	r3, [pc, #108]	@ (8007c54 <SPI_EndRxTxTransaction+0xa0>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a1b      	ldr	r2, [pc, #108]	@ (8007c58 <SPI_EndRxTxTransaction+0xa4>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	0d5b      	lsrs	r3, r3, #21
 8007bf2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
 8007bfa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c04:	d112      	bne.n	8007c2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2180      	movs	r1, #128	@ 0x80
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff fee1 	bl	80079d8 <SPI_WaitFlagStateUntilTimeout>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d016      	beq.n	8007c4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c20:	f043 0220 	orr.w	r2, r3, #32
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e00f      	b.n	8007c4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c42:	2b80      	cmp	r3, #128	@ 0x80
 8007c44:	d0f2      	beq.n	8007c2c <SPI_EndRxTxTransaction+0x78>
 8007c46:	e000      	b.n	8007c4a <SPI_EndRxTxTransaction+0x96>
        break;
 8007c48:	bf00      	nop
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000010 	.word	0x20000010
 8007c58:	165e9f81 	.word	0x165e9f81

08007c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e041      	b.n	8007cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d106      	bne.n	8007c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f839 	bl	8007cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3304      	adds	r3, #4
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	f000 f9c0 	bl	8008020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}

08007cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d001      	beq.n	8007d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e04e      	b.n	8007dc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a23      	ldr	r2, [pc, #140]	@ (8007dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d022      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d52:	d01d      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d018      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1e      	ldr	r2, [pc, #120]	@ (8007ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d013      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8007de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d00e      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1b      	ldr	r2, [pc, #108]	@ (8007de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d009      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a19      	ldr	r2, [pc, #100]	@ (8007de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d004      	beq.n	8007d90 <HAL_TIM_Base_Start_IT+0x80>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a18      	ldr	r2, [pc, #96]	@ (8007dec <HAL_TIM_Base_Start_IT+0xdc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d111      	bne.n	8007db4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b06      	cmp	r3, #6
 8007da0:	d010      	beq.n	8007dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db2:	e007      	b.n	8007dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f042 0201 	orr.w	r2, r2, #1
 8007dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40010000 	.word	0x40010000
 8007dd8:	40000400 	.word	0x40000400
 8007ddc:	40000800 	.word	0x40000800
 8007de0:	40000c00 	.word	0x40000c00
 8007de4:	40010400 	.word	0x40010400
 8007de8:	40014000 	.word	0x40014000
 8007dec:	40001800 	.word	0x40001800

08007df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d020      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f06f 0202 	mvn.w	r2, #2
 8007e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f8d2 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007e40:	e005      	b.n	8007e4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f8c4 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f8d5 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f003 0304 	and.w	r3, r3, #4
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d020      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d01b      	beq.n	8007ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0204 	mvn.w	r2, #4
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f8ac 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f89e 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8af 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d020      	beq.n	8007eec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f003 0308 	and.w	r3, r3, #8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f06f 0208 	mvn.w	r2, #8
 8007ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f886 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007ed8:	e005      	b.n	8007ee6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f878 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f889 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f003 0310 	and.w	r3, r3, #16
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d020      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f003 0310 	and.w	r3, r3, #16
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d01b      	beq.n	8007f38 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f06f 0210 	mvn.w	r2, #16
 8007f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f860 	bl	8007fe4 <HAL_TIM_IC_CaptureCallback>
 8007f24:	e005      	b.n	8007f32 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f852 	bl	8007fd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f863 	bl	8007ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00c      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d007      	beq.n	8007f5c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f06f 0201 	mvn.w	r2, #1
 8007f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7f9 fb4e 	bl	80015f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00c      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d007      	beq.n	8007f80 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f906 	bl	800818c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00c      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d007      	beq.n	8007fa4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f834 	bl	800800c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 0320 	and.w	r3, r3, #32
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00c      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0220 	mvn.w	r2, #32
 8007fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f8d8 	bl	8008178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fc8:	bf00      	nop
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	4a46      	ldr	r2, [pc, #280]	@ (800814c <TIM_Base_SetConfig+0x12c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d013      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800803e:	d00f      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a43      	ldr	r2, [pc, #268]	@ (8008150 <TIM_Base_SetConfig+0x130>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00b      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a42      	ldr	r2, [pc, #264]	@ (8008154 <TIM_Base_SetConfig+0x134>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d007      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a41      	ldr	r2, [pc, #260]	@ (8008158 <TIM_Base_SetConfig+0x138>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d003      	beq.n	8008060 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a40      	ldr	r2, [pc, #256]	@ (800815c <TIM_Base_SetConfig+0x13c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d108      	bne.n	8008072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a35      	ldr	r2, [pc, #212]	@ (800814c <TIM_Base_SetConfig+0x12c>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d02b      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008080:	d027      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a32      	ldr	r2, [pc, #200]	@ (8008150 <TIM_Base_SetConfig+0x130>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d023      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a31      	ldr	r2, [pc, #196]	@ (8008154 <TIM_Base_SetConfig+0x134>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d01f      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a30      	ldr	r2, [pc, #192]	@ (8008158 <TIM_Base_SetConfig+0x138>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01b      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a2f      	ldr	r2, [pc, #188]	@ (800815c <TIM_Base_SetConfig+0x13c>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d017      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a2e      	ldr	r2, [pc, #184]	@ (8008160 <TIM_Base_SetConfig+0x140>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2d      	ldr	r2, [pc, #180]	@ (8008164 <TIM_Base_SetConfig+0x144>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00f      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a2c      	ldr	r2, [pc, #176]	@ (8008168 <TIM_Base_SetConfig+0x148>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a2b      	ldr	r2, [pc, #172]	@ (800816c <TIM_Base_SetConfig+0x14c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008170 <TIM_Base_SetConfig+0x150>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a29      	ldr	r2, [pc, #164]	@ (8008174 <TIM_Base_SetConfig+0x154>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d108      	bne.n	80080e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a10      	ldr	r2, [pc, #64]	@ (800814c <TIM_Base_SetConfig+0x12c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d003      	beq.n	8008118 <TIM_Base_SetConfig+0xf8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4a12      	ldr	r2, [pc, #72]	@ (800815c <TIM_Base_SetConfig+0x13c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d103      	bne.n	8008120 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b01      	cmp	r3, #1
 8008130:	d105      	bne.n	800813e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f023 0201 	bic.w	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	611a      	str	r2, [r3, #16]
  }
}
 800813e:	bf00      	nop
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40000400 	.word	0x40000400
 8008154:	40000800 	.word	0x40000800
 8008158:	40000c00 	.word	0x40000c00
 800815c:	40010400 	.word	0x40010400
 8008160:	40014000 	.word	0x40014000
 8008164:	40014400 	.word	0x40014400
 8008168:	40014800 	.word	0x40014800
 800816c:	40001800 	.word	0x40001800
 8008170:	40001c00 	.word	0x40001c00
 8008174:	40002000 	.word	0x40002000

08008178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d123      	bne.n	80081fa <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80081ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80081be:	683a      	ldr	r2, [r7, #0]
 80081c0:	6851      	ldr	r1, [r2, #4]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	6892      	ldr	r2, [r2, #8]
 80081c6:	4311      	orrs	r1, r2
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	68d2      	ldr	r2, [r2, #12]
 80081cc:	4311      	orrs	r1, r2
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	6912      	ldr	r2, [r2, #16]
 80081d2:	4311      	orrs	r1, r2
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	6952      	ldr	r2, [r2, #20]
 80081d8:	4311      	orrs	r1, r2
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	6992      	ldr	r2, [r2, #24]
 80081de:	4311      	orrs	r1, r2
 80081e0:	683a      	ldr	r2, [r7, #0]
 80081e2:	69d2      	ldr	r2, [r2, #28]
 80081e4:	4311      	orrs	r1, r2
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	6a12      	ldr	r2, [r2, #32]
 80081ea:	4311      	orrs	r1, r2
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80081f0:	430a      	orrs	r2, r1
 80081f2:	431a      	orrs	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e028      	b.n	800824c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	69d9      	ldr	r1, [r3, #28]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	4319      	orrs	r1, r3
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	430b      	orrs	r3, r1
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008220:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	6851      	ldr	r1, [r2, #4]
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	6892      	ldr	r2, [r2, #8]
 800822c:	4311      	orrs	r1, r2
 800822e:	683a      	ldr	r2, [r7, #0]
 8008230:	68d2      	ldr	r2, [r2, #12]
 8008232:	4311      	orrs	r1, r2
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	6912      	ldr	r2, [r2, #16]
 8008238:	4311      	orrs	r1, r2
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	6952      	ldr	r2, [r2, #20]
 800823e:	4311      	orrs	r1, r2
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	6992      	ldr	r2, [r2, #24]
 8008244:	430a      	orrs	r2, r1
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d128      	bne.n	80082be <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	1e59      	subs	r1, r3, #1
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	3b01      	subs	r3, #1
 8008280:	011b      	lsls	r3, r3, #4
 8008282:	4319      	orrs	r1, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	3b01      	subs	r3, #1
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	4319      	orrs	r1, r3
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	3b01      	subs	r3, #1
 8008294:	031b      	lsls	r3, r3, #12
 8008296:	4319      	orrs	r1, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	3b01      	subs	r3, #1
 800829e:	041b      	lsls	r3, r3, #16
 80082a0:	4319      	orrs	r1, r3
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	051b      	lsls	r3, r3, #20
 80082aa:	4319      	orrs	r1, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	3b01      	subs	r3, #1
 80082b2:	061b      	lsls	r3, r3, #24
 80082b4:	430b      	orrs	r3, r1
 80082b6:	431a      	orrs	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	e02f      	b.n	800831e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80082c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	68d2      	ldr	r2, [r2, #12]
 80082ce:	3a01      	subs	r2, #1
 80082d0:	0311      	lsls	r1, r2, #12
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	6952      	ldr	r2, [r2, #20]
 80082d6:	3a01      	subs	r2, #1
 80082d8:	0512      	lsls	r2, r2, #20
 80082da:	430a      	orrs	r2, r1
 80082dc:	431a      	orrs	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	1e59      	subs	r1, r3, #1
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	4319      	orrs	r1, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	3b01      	subs	r3, #1
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	4319      	orrs	r1, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	3b01      	subs	r3, #1
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	4319      	orrs	r1, r3
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	3b01      	subs	r3, #1
 8008314:	061b      	lsls	r3, r3, #24
 8008316:	430b      	orrs	r3, r1
 8008318:	431a      	orrs	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	0d9b      	lsrs	r3, r3, #22
 8008342:	059b      	lsls	r3, r3, #22
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	6811      	ldr	r1, [r2, #0]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	6852      	ldr	r2, [r2, #4]
 800834c:	4311      	orrs	r1, r2
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	6892      	ldr	r2, [r2, #8]
 8008352:	3a01      	subs	r2, #1
 8008354:	0152      	lsls	r2, r2, #5
 8008356:	4311      	orrs	r1, r2
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	68d2      	ldr	r2, [r2, #12]
 800835c:	0252      	lsls	r2, r2, #9
 800835e:	430a      	orrs	r2, r1
 8008360:	431a      	orrs	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008366:	f7fb faf5 	bl	8003954 <HAL_GetTick>
 800836a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800836c:	e010      	b.n	8008390 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d00c      	beq.n	8008390 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d007      	beq.n	800838c <FMC_SDRAM_SendCommand+0x60>
 800837c:	f7fb faea 	bl	8003954 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	429a      	cmp	r2, r3
 800838a:	d201      	bcs.n	8008390 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e006      	b.n	800839e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f003 0320 	and.w	r3, r3, #32
 8008398:	2b20      	cmp	r3, #32
 800839a:	d0e8      	beq.n	800836e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80083a6:	b480      	push	{r7}
 80083a8:	b083      	sub	sp, #12
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80083b8:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80083bc:	683a      	ldr	r2, [r7, #0]
 80083be:	0052      	lsls	r2, r2, #1
 80083c0:	431a      	orrs	r2, r3
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083d4:	b084      	sub	sp, #16
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	f107 001c 	add.w	r0, r7, #28
 80083e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d123      	bne.n	8008436 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008402:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008416:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800841a:	2b01      	cmp	r3, #1
 800841c:	d105      	bne.n	800842a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 fae8 	bl	8009a00 <USB_CoreReset>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
 8008434:	e01b      	b.n	800846e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fadc 	bl	8009a00 <USB_CoreReset>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800844c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008458:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008460:	e005      	b.n	800846e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008466:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800846e:	7fbb      	ldrb	r3, [r7, #30]
 8008470:	2b01      	cmp	r3, #1
 8008472:	d10b      	bne.n	800848c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f043 0206 	orr.w	r2, r3, #6
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f043 0220 	orr.w	r2, r3, #32
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800848c:	7bfb      	ldrb	r3, [r7, #15]
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008498:	b004      	add	sp, #16
 800849a:	4770      	bx	lr

0800849c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d165      	bne.n	800857c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4a41      	ldr	r2, [pc, #260]	@ (80085b8 <USB_SetTurnaroundTime+0x11c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d906      	bls.n	80084c6 <USB_SetTurnaroundTime+0x2a>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	4a40      	ldr	r2, [pc, #256]	@ (80085bc <USB_SetTurnaroundTime+0x120>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d202      	bcs.n	80084c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80084c0:	230f      	movs	r3, #15
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e062      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	4a3c      	ldr	r2, [pc, #240]	@ (80085bc <USB_SetTurnaroundTime+0x120>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d306      	bcc.n	80084dc <USB_SetTurnaroundTime+0x40>
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	4a3b      	ldr	r2, [pc, #236]	@ (80085c0 <USB_SetTurnaroundTime+0x124>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d202      	bcs.n	80084dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80084d6:	230e      	movs	r3, #14
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	e057      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4a38      	ldr	r2, [pc, #224]	@ (80085c0 <USB_SetTurnaroundTime+0x124>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d306      	bcc.n	80084f2 <USB_SetTurnaroundTime+0x56>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4a37      	ldr	r2, [pc, #220]	@ (80085c4 <USB_SetTurnaroundTime+0x128>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d202      	bcs.n	80084f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80084ec:	230d      	movs	r3, #13
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e04c      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4a33      	ldr	r2, [pc, #204]	@ (80085c4 <USB_SetTurnaroundTime+0x128>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d306      	bcc.n	8008508 <USB_SetTurnaroundTime+0x6c>
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	4a32      	ldr	r2, [pc, #200]	@ (80085c8 <USB_SetTurnaroundTime+0x12c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d802      	bhi.n	8008508 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008502:	230c      	movs	r3, #12
 8008504:	617b      	str	r3, [r7, #20]
 8008506:	e041      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4a2f      	ldr	r2, [pc, #188]	@ (80085c8 <USB_SetTurnaroundTime+0x12c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d906      	bls.n	800851e <USB_SetTurnaroundTime+0x82>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	4a2e      	ldr	r2, [pc, #184]	@ (80085cc <USB_SetTurnaroundTime+0x130>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d802      	bhi.n	800851e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008518:	230b      	movs	r3, #11
 800851a:	617b      	str	r3, [r7, #20]
 800851c:	e036      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	4a2a      	ldr	r2, [pc, #168]	@ (80085cc <USB_SetTurnaroundTime+0x130>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d906      	bls.n	8008534 <USB_SetTurnaroundTime+0x98>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	4a29      	ldr	r2, [pc, #164]	@ (80085d0 <USB_SetTurnaroundTime+0x134>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d802      	bhi.n	8008534 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800852e:	230a      	movs	r3, #10
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	e02b      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4a26      	ldr	r2, [pc, #152]	@ (80085d0 <USB_SetTurnaroundTime+0x134>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d906      	bls.n	800854a <USB_SetTurnaroundTime+0xae>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4a25      	ldr	r2, [pc, #148]	@ (80085d4 <USB_SetTurnaroundTime+0x138>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d202      	bcs.n	800854a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008544:	2309      	movs	r3, #9
 8008546:	617b      	str	r3, [r7, #20]
 8008548:	e020      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4a21      	ldr	r2, [pc, #132]	@ (80085d4 <USB_SetTurnaroundTime+0x138>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d306      	bcc.n	8008560 <USB_SetTurnaroundTime+0xc4>
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	4a20      	ldr	r2, [pc, #128]	@ (80085d8 <USB_SetTurnaroundTime+0x13c>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d802      	bhi.n	8008560 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800855a:	2308      	movs	r3, #8
 800855c:	617b      	str	r3, [r7, #20]
 800855e:	e015      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	4a1d      	ldr	r2, [pc, #116]	@ (80085d8 <USB_SetTurnaroundTime+0x13c>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d906      	bls.n	8008576 <USB_SetTurnaroundTime+0xda>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	4a1c      	ldr	r2, [pc, #112]	@ (80085dc <USB_SetTurnaroundTime+0x140>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d202      	bcs.n	8008576 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008570:	2307      	movs	r3, #7
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	e00a      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008576:	2306      	movs	r3, #6
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e007      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008582:	2309      	movs	r3, #9
 8008584:	617b      	str	r3, [r7, #20]
 8008586:	e001      	b.n	800858c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008588:	2309      	movs	r3, #9
 800858a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	68da      	ldr	r2, [r3, #12]
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	029b      	lsls	r3, r3, #10
 80085a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80085a4:	431a      	orrs	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	00d8acbf 	.word	0x00d8acbf
 80085bc:	00e4e1c0 	.word	0x00e4e1c0
 80085c0:	00f42400 	.word	0x00f42400
 80085c4:	01067380 	.word	0x01067380
 80085c8:	011a499f 	.word	0x011a499f
 80085cc:	01312cff 	.word	0x01312cff
 80085d0:	014ca43f 	.word	0x014ca43f
 80085d4:	016e3600 	.word	0x016e3600
 80085d8:	01a6ab1f 	.word	0x01a6ab1f
 80085dc:	01e84800 	.word	0x01e84800

080085e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f043 0201 	orr.w	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f023 0201 	bic.w	r2, r3, #1
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	460b      	mov	r3, r1
 800862e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008640:	78fb      	ldrb	r3, [r7, #3]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d115      	bne.n	8008672 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008652:	200a      	movs	r0, #10
 8008654:	f7fb f98a 	bl	800396c <HAL_Delay>
      ms += 10U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	330a      	adds	r3, #10
 800865c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f001 f93f 	bl	80098e2 <USB_GetMode>
 8008664:	4603      	mov	r3, r0
 8008666:	2b01      	cmp	r3, #1
 8008668:	d01e      	beq.n	80086a8 <USB_SetCurrentMode+0x84>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2bc7      	cmp	r3, #199	@ 0xc7
 800866e:	d9f0      	bls.n	8008652 <USB_SetCurrentMode+0x2e>
 8008670:	e01a      	b.n	80086a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008672:	78fb      	ldrb	r3, [r7, #3]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d115      	bne.n	80086a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008684:	200a      	movs	r0, #10
 8008686:	f7fb f971 	bl	800396c <HAL_Delay>
      ms += 10U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	330a      	adds	r3, #10
 800868e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f001 f926 	bl	80098e2 <USB_GetMode>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <USB_SetCurrentMode+0x84>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2bc7      	cmp	r3, #199	@ 0xc7
 80086a0:	d9f0      	bls.n	8008684 <USB_SetCurrentMode+0x60>
 80086a2:	e001      	b.n	80086a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e005      	b.n	80086b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80086ac:	d101      	bne.n	80086b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e000      	b.n	80086b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80086bc:	b084      	sub	sp, #16
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
 80086c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80086ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80086d6:	2300      	movs	r3, #0
 80086d8:	613b      	str	r3, [r7, #16]
 80086da:	e009      	b.n	80086f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	3340      	adds	r3, #64	@ 0x40
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	3301      	adds	r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b0e      	cmp	r3, #14
 80086f4:	d9f2      	bls.n	80086dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80086f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d11c      	bne.n	8008738 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800870c:	f043 0302 	orr.w	r3, r3, #2
 8008710:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008716:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008722:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800872e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	639a      	str	r2, [r3, #56]	@ 0x38
 8008736:	e00b      	b.n	8008750 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800873c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008756:	461a      	mov	r2, r3
 8008758:	2300      	movs	r3, #0
 800875a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800875c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008760:	2b01      	cmp	r3, #1
 8008762:	d10d      	bne.n	8008780 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008764:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008768:	2b00      	cmp	r3, #0
 800876a:	d104      	bne.n	8008776 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800876c:	2100      	movs	r1, #0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f968 	bl	8008a44 <USB_SetDevSpeed>
 8008774:	e008      	b.n	8008788 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008776:	2101      	movs	r1, #1
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f963 	bl	8008a44 <USB_SetDevSpeed>
 800877e:	e003      	b.n	8008788 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008780:	2103      	movs	r1, #3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f95e 	bl	8008a44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008788:	2110      	movs	r1, #16
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f8fa 	bl	8008984 <USB_FlushTxFifo>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f924 	bl	80089e8 <USB_FlushRxFifo>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b0:	461a      	mov	r2, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087bc:	461a      	mov	r2, r3
 80087be:	2300      	movs	r3, #0
 80087c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c8:	461a      	mov	r2, r3
 80087ca:	2300      	movs	r3, #0
 80087cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80087ce:	2300      	movs	r3, #0
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	e043      	b.n	800885c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	015a      	lsls	r2, r3, #5
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4413      	add	r3, r2
 80087dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ea:	d118      	bne.n	800881e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10a      	bne.n	8008808 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087fe:	461a      	mov	r2, r3
 8008800:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	e013      	b.n	8008830 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4413      	add	r3, r2
 8008810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008814:	461a      	mov	r2, r3
 8008816:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800881a:	6013      	str	r3, [r2, #0]
 800881c:	e008      	b.n	8008830 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800882a:	461a      	mov	r2, r3
 800882c:	2300      	movs	r3, #0
 800882e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	015a      	lsls	r2, r3, #5
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4413      	add	r3, r2
 800884a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800884e:	461a      	mov	r2, r3
 8008850:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008854:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	3301      	adds	r3, #1
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008860:	461a      	mov	r2, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4293      	cmp	r3, r2
 8008866:	d3b5      	bcc.n	80087d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008868:	2300      	movs	r3, #0
 800886a:	613b      	str	r3, [r7, #16]
 800886c:	e043      	b.n	80088f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008880:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008884:	d118      	bne.n	80088b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	015a      	lsls	r2, r3, #5
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4413      	add	r3, r2
 8008894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008898:	461a      	mov	r2, r3
 800889a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	e013      	b.n	80088ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ae:	461a      	mov	r2, r3
 80088b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	e008      	b.n	80088ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088c4:	461a      	mov	r2, r3
 80088c6:	2300      	movs	r3, #0
 80088c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d6:	461a      	mov	r2, r3
 80088d8:	2300      	movs	r3, #0
 80088da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088e8:	461a      	mov	r2, r3
 80088ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	3301      	adds	r3, #1
 80088f4:	613b      	str	r3, [r7, #16]
 80088f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088fa:	461a      	mov	r2, r3
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	4293      	cmp	r3, r2
 8008900:	d3b5      	bcc.n	800886e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008910:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008914:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008922:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008924:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008928:	2b00      	cmp	r3, #0
 800892a:	d105      	bne.n	8008938 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	f043 0210 	orr.w	r2, r3, #16
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	4b10      	ldr	r3, [pc, #64]	@ (8008980 <USB_DevInit+0x2c4>)
 800893e:	4313      	orrs	r3, r2
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008944:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008948:	2b00      	cmp	r3, #0
 800894a:	d005      	beq.n	8008958 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	f043 0208 	orr.w	r2, r3, #8
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008958:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800895c:	2b01      	cmp	r3, #1
 800895e:	d107      	bne.n	8008970 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008968:	f043 0304 	orr.w	r3, r3, #4
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008970:	7dfb      	ldrb	r3, [r7, #23]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800897c:	b004      	add	sp, #16
 800897e:	4770      	bx	lr
 8008980:	803c3800 	.word	0x803c3800

08008984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3301      	adds	r3, #1
 8008996:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800899e:	d901      	bls.n	80089a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80089a0:	2303      	movs	r3, #3
 80089a2:	e01b      	b.n	80089dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	691b      	ldr	r3, [r3, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	daf2      	bge.n	8008992 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	019b      	lsls	r3, r3, #6
 80089b4:	f043 0220 	orr.w	r2, r3, #32
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	3301      	adds	r3, #1
 80089c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80089c8:	d901      	bls.n	80089ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e006      	b.n	80089dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	f003 0320 	and.w	r3, r3, #32
 80089d6:	2b20      	cmp	r3, #32
 80089d8:	d0f0      	beq.n	80089bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a00:	d901      	bls.n	8008a06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e018      	b.n	8008a38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	daf2      	bge.n	80089f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2210      	movs	r2, #16
 8008a16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a24:	d901      	bls.n	8008a2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e006      	b.n	8008a38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	f003 0310 	and.w	r3, r3, #16
 8008a32:	2b10      	cmp	r3, #16
 8008a34:	d0f0      	beq.n	8008a18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	78fb      	ldrb	r3, [r7, #3]
 8008a5e:	68f9      	ldr	r1, [r7, #12]
 8008a60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a64:	4313      	orrs	r3, r2
 8008a66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b087      	sub	sp, #28
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 0306 	and.w	r3, r3, #6
 8008a8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d102      	bne.n	8008a9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]
 8008a9a:	e00a      	b.n	8008ab2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d002      	beq.n	8008aa8 <USB_GetDevSpeed+0x32>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b06      	cmp	r3, #6
 8008aa6:	d102      	bne.n	8008aae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	75fb      	strb	r3, [r7, #23]
 8008aac:	e001      	b.n	8008ab2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008aae:	230f      	movs	r3, #15
 8008ab0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	371c      	adds	r7, #28
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	785b      	ldrb	r3, [r3, #1]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d13a      	bne.n	8008b52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ae2:	69da      	ldr	r2, [r3, #28]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	2101      	movs	r1, #1
 8008aee:	fa01 f303 	lsl.w	r3, r1, r3
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	68f9      	ldr	r1, [r7, #12]
 8008af6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008afa:	4313      	orrs	r3, r2
 8008afc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	015a      	lsls	r2, r3, #5
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	4413      	add	r3, r2
 8008b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d155      	bne.n	8008bc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	015a      	lsls	r2, r3, #5
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	791b      	ldrb	r3, [r3, #4]
 8008b2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	059b      	lsls	r3, r3, #22
 8008b36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	0151      	lsls	r1, r2, #5
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	440a      	add	r2, r1
 8008b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	e036      	b.n	8008bc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	f003 030f 	and.w	r3, r3, #15
 8008b62:	2101      	movs	r1, #1
 8008b64:	fa01 f303 	lsl.w	r3, r1, r3
 8008b68:	041b      	lsls	r3, r3, #16
 8008b6a:	68f9      	ldr	r1, [r7, #12]
 8008b6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b70:	4313      	orrs	r3, r2
 8008b72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d11a      	bne.n	8008bc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	791b      	ldrb	r3, [r3, #4]
 8008ba4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
	...

08008bd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b085      	sub	sp, #20
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d161      	bne.n	8008cb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c02:	d11f      	bne.n	8008c44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	0151      	lsls	r1, r2, #5
 8008c16:	68fa      	ldr	r2, [r7, #12]
 8008c18:	440a      	add	r2, r1
 8008c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	0151      	lsls	r1, r2, #5
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	440a      	add	r2, r1
 8008c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	f003 030f 	and.w	r3, r3, #15
 8008c54:	2101      	movs	r1, #1
 8008c56:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	68f9      	ldr	r1, [r7, #12]
 8008c60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c64:	4013      	ands	r3, r2
 8008c66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c6e:	69da      	ldr	r2, [r3, #28]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	2101      	movs	r1, #1
 8008c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	43db      	mvns	r3, r3
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008c88:	4013      	ands	r3, r2
 8008c8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	0159      	lsls	r1, r3, #5
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	440b      	add	r3, r1
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4b35      	ldr	r3, [pc, #212]	@ (8008d80 <USB_DeactivateEndpoint+0x1b0>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	600b      	str	r3, [r1, #0]
 8008cae:	e060      	b.n	8008d72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cc6:	d11f      	bne.n	8008d08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	0151      	lsls	r1, r2, #5
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	440a      	add	r2, r1
 8008cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ce2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ce6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	0151      	lsls	r1, r2, #5
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	2101      	movs	r1, #1
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	041b      	lsls	r3, r3, #16
 8008d20:	43db      	mvns	r3, r3
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d28:	4013      	ands	r3, r2
 8008d2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d32:	69da      	ldr	r2, [r3, #28]
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	2101      	movs	r1, #1
 8008d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d42:	041b      	lsls	r3, r3, #16
 8008d44:	43db      	mvns	r3, r3
 8008d46:	68f9      	ldr	r1, [r7, #12]
 8008d48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	0159      	lsls	r1, r3, #5
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	440b      	add	r3, r1
 8008d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <USB_DeactivateEndpoint+0x1b4>)
 8008d6e:	4013      	ands	r3, r2
 8008d70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	ec337800 	.word	0xec337800
 8008d84:	eff37800 	.word	0xeff37800

08008d88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	@ 0x28
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4613      	mov	r3, r2
 8008d94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	f040 817f 	bne.w	80090a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d132      	bne.n	8008e18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dcc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008dd0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008dd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008de2:	691b      	ldr	r3, [r3, #16]
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	0151      	lsls	r1, r2, #5
 8008de8:	69fa      	ldr	r2, [r7, #28]
 8008dea:	440a      	add	r2, r1
 8008dec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008df0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008df4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	69ba      	ldr	r2, [r7, #24]
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e10:	0cdb      	lsrs	r3, r3, #19
 8008e12:	04db      	lsls	r3, r3, #19
 8008e14:	6113      	str	r3, [r2, #16]
 8008e16:	e097      	b.n	8008f48 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e18:	69bb      	ldr	r3, [r7, #24]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	69fa      	ldr	r2, [r7, #28]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e32:	0cdb      	lsrs	r3, r3, #19
 8008e34:	04db      	lsls	r3, r3, #19
 8008e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	69ba      	ldr	r2, [r7, #24]
 8008e48:	0151      	lsls	r1, r2, #5
 8008e4a:	69fa      	ldr	r2, [r7, #28]
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e5a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d11a      	bne.n	8008e98 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	691a      	ldr	r2, [r3, #16]
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d903      	bls.n	8008e76 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	69ba      	ldr	r2, [r7, #24]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e94:	6113      	str	r3, [r2, #16]
 8008e96:	e044      	b.n	8008f22 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	1e5a      	subs	r2, r3, #1
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	8afb      	ldrh	r3, [r7, #22]
 8008ebe:	04d9      	lsls	r1, r3, #19
 8008ec0:	4ba4      	ldr	r3, [pc, #656]	@ (8009154 <USB_EPStartXfer+0x3cc>)
 8008ec2:	400b      	ands	r3, r1
 8008ec4:	69b9      	ldr	r1, [r7, #24]
 8008ec6:	0148      	lsls	r0, r1, #5
 8008ec8:	69f9      	ldr	r1, [r7, #28]
 8008eca:	4401      	add	r1, r0
 8008ecc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	791b      	ldrb	r3, [r3, #4]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d122      	bne.n	8008f22 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ef6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008efa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008efc:	69bb      	ldr	r3, [r7, #24]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f08:	691a      	ldr	r2, [r3, #16]
 8008f0a:	8afb      	ldrh	r3, [r7, #22]
 8008f0c:	075b      	lsls	r3, r3, #29
 8008f0e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f12:	69b9      	ldr	r1, [r7, #24]
 8008f14:	0148      	lsls	r0, r1, #5
 8008f16:	69f9      	ldr	r1, [r7, #28]
 8008f18:	4401      	add	r1, r0
 8008f1a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2e:	691a      	ldr	r2, [r3, #16]
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f38:	69b9      	ldr	r1, [r7, #24]
 8008f3a:	0148      	lsls	r0, r1, #5
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	4401      	add	r1, r0
 8008f40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f44:	4313      	orrs	r3, r2
 8008f46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f48:	79fb      	ldrb	r3, [r7, #7]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d14b      	bne.n	8008fe6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	69db      	ldr	r3, [r3, #28]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d009      	beq.n	8008f6a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f62:	461a      	mov	r2, r3
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	791b      	ldrb	r3, [r3, #4]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d128      	bne.n	8008fc4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d110      	bne.n	8008fa4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	015a      	lsls	r2, r3, #5
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	0151      	lsls	r1, r2, #5
 8008f94:	69fa      	ldr	r2, [r7, #28]
 8008f96:	440a      	add	r2, r1
 8008f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	e00f      	b.n	8008fc4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	69fb      	ldr	r3, [r7, #28]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69ba      	ldr	r2, [r7, #24]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	69fa      	ldr	r2, [r7, #28]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fc2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fc4:	69bb      	ldr	r3, [r7, #24]
 8008fc6:	015a      	lsls	r2, r3, #5
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	4413      	add	r3, r2
 8008fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69ba      	ldr	r2, [r7, #24]
 8008fd4:	0151      	lsls	r1, r2, #5
 8008fd6:	69fa      	ldr	r2, [r7, #28]
 8008fd8:	440a      	add	r2, r1
 8008fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fde:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008fe2:	6013      	str	r3, [r2, #0]
 8008fe4:	e166      	b.n	80092b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	0151      	lsls	r1, r2, #5
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	440a      	add	r2, r1
 8008ffc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009000:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009004:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	791b      	ldrb	r3, [r3, #4]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d015      	beq.n	800903a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 814e 	beq.w	80092b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800901e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 030f 	and.w	r3, r3, #15
 8009028:	2101      	movs	r1, #1
 800902a:	fa01 f303 	lsl.w	r3, r1, r3
 800902e:	69f9      	ldr	r1, [r7, #28]
 8009030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009034:	4313      	orrs	r3, r2
 8009036:	634b      	str	r3, [r1, #52]	@ 0x34
 8009038:	e13c      	b.n	80092b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009046:	2b00      	cmp	r3, #0
 8009048:	d110      	bne.n	800906c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	015a      	lsls	r2, r3, #5
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	0151      	lsls	r1, r2, #5
 800905c:	69fa      	ldr	r2, [r7, #28]
 800905e:	440a      	add	r2, r1
 8009060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009064:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	e00f      	b.n	800908c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69ba      	ldr	r2, [r7, #24]
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009086:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800908a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	68d9      	ldr	r1, [r3, #12]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	b298      	uxth	r0, r3
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	4603      	mov	r3, r0
 80090a0:	68f8      	ldr	r0, [r7, #12]
 80090a2:	f000 f9b9 	bl	8009418 <USB_WritePacket>
 80090a6:	e105      	b.n	80092b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	015a      	lsls	r2, r3, #5
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	4413      	add	r3, r2
 80090b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	0151      	lsls	r1, r2, #5
 80090ba:	69fa      	ldr	r2, [r7, #28]
 80090bc:	440a      	add	r2, r1
 80090be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090c2:	0cdb      	lsrs	r3, r3, #19
 80090c4:	04db      	lsls	r3, r3, #19
 80090c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	0151      	lsls	r1, r2, #5
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	440a      	add	r2, r1
 80090de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d132      	bne.n	8009158 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	0148      	lsls	r0, r1, #5
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	4401      	add	r1, r0
 8009128:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800912c:	4313      	orrs	r3, r2
 800912e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	440a      	add	r2, r1
 8009146:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800914a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800914e:	6113      	str	r3, [r2, #16]
 8009150:	e062      	b.n	8009218 <USB_EPStartXfer+0x490>
 8009152:	bf00      	nop
 8009154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d123      	bne.n	80091a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	4413      	add	r3, r2
 8009168:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800916c:	691a      	ldr	r2, [r3, #16]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	0148      	lsls	r0, r1, #5
 800917a:	69f9      	ldr	r1, [r7, #28]
 800917c:	4401      	add	r1, r0
 800917e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009182:	4313      	orrs	r3, r2
 8009184:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	69fa      	ldr	r2, [r7, #28]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091a4:	6113      	str	r3, [r2, #16]
 80091a6:	e037      	b.n	8009218 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	691a      	ldr	r2, [r3, #16]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	4413      	add	r3, r2
 80091b2:	1e5a      	subs	r2, r3, #1
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80091bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	8afa      	ldrh	r2, [r7, #22]
 80091c4:	fb03 f202 	mul.w	r2, r3, r2
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	69fb      	ldr	r3, [r7, #28]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d8:	691a      	ldr	r2, [r3, #16]
 80091da:	8afb      	ldrh	r3, [r7, #22]
 80091dc:	04d9      	lsls	r1, r3, #19
 80091de:	4b38      	ldr	r3, [pc, #224]	@ (80092c0 <USB_EPStartXfer+0x538>)
 80091e0:	400b      	ands	r3, r1
 80091e2:	69b9      	ldr	r1, [r7, #24]
 80091e4:	0148      	lsls	r0, r1, #5
 80091e6:	69f9      	ldr	r1, [r7, #28]
 80091e8:	4401      	add	r1, r0
 80091ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091ee:	4313      	orrs	r3, r2
 80091f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80091f2:	69bb      	ldr	r3, [r7, #24]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091fe:	691a      	ldr	r2, [r3, #16]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009208:	69b9      	ldr	r1, [r7, #24]
 800920a:	0148      	lsls	r0, r1, #5
 800920c:	69f9      	ldr	r1, [r7, #28]
 800920e:	4401      	add	r1, r0
 8009210:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009214:	4313      	orrs	r3, r2
 8009216:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10d      	bne.n	800923a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	68d9      	ldr	r1, [r3, #12]
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009236:	460a      	mov	r2, r1
 8009238:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	791b      	ldrb	r3, [r3, #4]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d128      	bne.n	8009294 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924e:	2b00      	cmp	r3, #0
 8009250:	d110      	bne.n	8009274 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	69ba      	ldr	r2, [r7, #24]
 8009262:	0151      	lsls	r1, r2, #5
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	440a      	add	r2, r1
 8009268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800926c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	e00f      	b.n	8009294 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	015a      	lsls	r2, r3, #5
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	4413      	add	r3, r2
 800927c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	0151      	lsls	r1, r2, #5
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	440a      	add	r2, r1
 800928a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800928e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009292:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	0151      	lsls	r1, r2, #5
 80092a6:	69fa      	ldr	r2, [r7, #28]
 80092a8:	440a      	add	r2, r1
 80092aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80092b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3720      	adds	r7, #32
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	1ff80000 	.word	0x1ff80000

080092c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	785b      	ldrb	r3, [r3, #1]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d14a      	bne.n	8009378 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	693b      	ldr	r3, [r7, #16]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092fa:	f040 8086 	bne.w	800940a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	7812      	ldrb	r2, [r2, #0]
 8009312:	0151      	lsls	r1, r2, #5
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	440a      	add	r2, r1
 8009318:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800931c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009320:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	7812      	ldrb	r2, [r2, #0]
 8009336:	0151      	lsls	r1, r2, #5
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	440a      	add	r2, r1
 800933c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009340:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009344:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009352:	4293      	cmp	r3, r2
 8009354:	d902      	bls.n	800935c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	75fb      	strb	r3, [r7, #23]
          break;
 800935a:	e056      	b.n	800940a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009374:	d0e7      	beq.n	8009346 <USB_EPStopXfer+0x82>
 8009376:	e048      	b.n	800940a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800938c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009390:	d13b      	bne.n	800940a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	683a      	ldr	r2, [r7, #0]
 80093a4:	7812      	ldrb	r2, [r2, #0]
 80093a6:	0151      	lsls	r1, r2, #5
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	440a      	add	r2, r1
 80093ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80093b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	7812      	ldrb	r2, [r2, #0]
 80093ca:	0151      	lsls	r1, r2, #5
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	440a      	add	r2, r1
 80093d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d902      	bls.n	80093f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	75fb      	strb	r3, [r7, #23]
          break;
 80093ee:	e00c      	b.n	800940a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009408:	d0e7      	beq.n	80093da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
}
 800940c:	4618      	mov	r0, r3
 800940e:	371c      	adds	r7, #28
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009418:	b480      	push	{r7}
 800941a:	b089      	sub	sp, #36	@ 0x24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	4611      	mov	r1, r2
 8009424:	461a      	mov	r2, r3
 8009426:	460b      	mov	r3, r1
 8009428:	71fb      	strb	r3, [r7, #7]
 800942a:	4613      	mov	r3, r2
 800942c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009436:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800943a:	2b00      	cmp	r3, #0
 800943c:	d123      	bne.n	8009486 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800943e:	88bb      	ldrh	r3, [r7, #4]
 8009440:	3303      	adds	r3, #3
 8009442:	089b      	lsrs	r3, r3, #2
 8009444:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009446:	2300      	movs	r3, #0
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	e018      	b.n	800947e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800944c:	79fb      	ldrb	r3, [r7, #7]
 800944e:	031a      	lsls	r2, r3, #12
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	4413      	add	r3, r2
 8009454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009458:	461a      	mov	r2, r3
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	3301      	adds	r3, #1
 8009464:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	3301      	adds	r3, #1
 800946a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	3301      	adds	r3, #1
 8009476:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	3301      	adds	r3, #1
 800947c:	61bb      	str	r3, [r7, #24]
 800947e:	69ba      	ldr	r2, [r7, #24]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	429a      	cmp	r2, r3
 8009484:	d3e2      	bcc.n	800944c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3724      	adds	r7, #36	@ 0x24
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr

08009494 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009494:	b480      	push	{r7}
 8009496:	b08b      	sub	sp, #44	@ 0x2c
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	089b      	lsrs	r3, r3, #2
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094b2:	88fb      	ldrh	r3, [r7, #6]
 80094b4:	f003 0303 	and.w	r3, r3, #3
 80094b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094ba:	2300      	movs	r3, #0
 80094bc:	623b      	str	r3, [r7, #32]
 80094be:	e014      	b.n	80094ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094c6:	681a      	ldr	r2, [r3, #0]
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80094cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ce:	3301      	adds	r3, #1
 80094d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	3301      	adds	r3, #1
 80094d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094da:	3301      	adds	r3, #1
 80094dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e0:	3301      	adds	r3, #1
 80094e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	3301      	adds	r3, #1
 80094e8:	623b      	str	r3, [r7, #32]
 80094ea:	6a3a      	ldr	r2, [r7, #32]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d3e6      	bcc.n	80094c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80094f2:	8bfb      	ldrh	r3, [r7, #30]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d01e      	beq.n	8009536 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009502:	461a      	mov	r2, r3
 8009504:	f107 0310 	add.w	r3, r7, #16
 8009508:	6812      	ldr	r2, [r2, #0]
 800950a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800950c:	693a      	ldr	r2, [r7, #16]
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	b2db      	uxtb	r3, r3
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	fa22 f303 	lsr.w	r3, r2, r3
 8009518:	b2da      	uxtb	r2, r3
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	701a      	strb	r2, [r3, #0]
      i++;
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	3301      	adds	r3, #1
 8009522:	623b      	str	r3, [r7, #32]
      pDest++;
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	3301      	adds	r3, #1
 8009528:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800952a:	8bfb      	ldrh	r3, [r7, #30]
 800952c:	3b01      	subs	r3, #1
 800952e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009530:	8bfb      	ldrh	r3, [r7, #30]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1ea      	bne.n	800950c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009538:	4618      	mov	r0, r3
 800953a:	372c      	adds	r7, #44	@ 0x2c
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d12c      	bne.n	80095ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	db12      	blt.n	8009598 <USB_EPSetStall+0x54>
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00f      	beq.n	8009598 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	68fa      	ldr	r2, [r7, #12]
 800958c:	440a      	add	r2, r1
 800958e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009592:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009596:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	e02b      	b.n	8009612 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	015a      	lsls	r2, r3, #5
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	db12      	blt.n	80095f2 <USB_EPSetStall+0xae>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00f      	beq.n	80095f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	015a      	lsls	r2, r3, #5
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	4413      	add	r3, r2
 80095da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	0151      	lsls	r1, r2, #5
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	440a      	add	r2, r1
 80095e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80095f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	015a      	lsls	r2, r3, #5
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	0151      	lsls	r1, r2, #5
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	440a      	add	r2, r1
 8009608:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800960c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009610:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d128      	bne.n	800968e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	015a      	lsls	r2, r3, #5
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	4413      	add	r3, r2
 8009644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	0151      	lsls	r1, r2, #5
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	440a      	add	r2, r1
 8009652:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009656:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800965a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	791b      	ldrb	r3, [r3, #4]
 8009660:	2b03      	cmp	r3, #3
 8009662:	d003      	beq.n	800966c <USB_EPClearStall+0x4c>
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	791b      	ldrb	r3, [r3, #4]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d138      	bne.n	80096de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	015a      	lsls	r2, r3, #5
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	4413      	add	r3, r2
 8009674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e027      	b.n	80096de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	791b      	ldrb	r3, [r3, #4]
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d003      	beq.n	80096be <USB_EPClearStall+0x9e>
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	791b      	ldrb	r3, [r3, #4]
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	d10f      	bne.n	80096de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	0151      	lsls	r1, r2, #5
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	440a      	add	r2, r1
 80096d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	460b      	mov	r3, r1
 80096f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800970a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800970e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	78fb      	ldrb	r3, [r7, #3]
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009720:	68f9      	ldr	r1, [r7, #12]
 8009722:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009726:	4313      	orrs	r3, r2
 8009728:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009752:	f023 0303 	bic.w	r3, r3, #3
 8009756:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009766:	f023 0302 	bic.w	r3, r3, #2
 800976a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3714      	adds	r7, #20
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009794:	f023 0303 	bic.w	r3, r3, #3
 8009798:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	68fa      	ldr	r2, [r7, #12]
 80097a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097a8:	f043 0302 	orr.w	r3, r3, #2
 80097ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3714      	adds	r7, #20
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	699b      	ldr	r3, [r3, #24]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	4013      	ands	r3, r2
 80097d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097d4:	68fb      	ldr	r3, [r7, #12]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80097e2:	b480      	push	{r7}
 80097e4:	b085      	sub	sp, #20
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097f4:	699b      	ldr	r3, [r3, #24]
 80097f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	68ba      	ldr	r2, [r7, #8]
 8009802:	4013      	ands	r3, r2
 8009804:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	0c1b      	lsrs	r3, r3, #16
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009816:	b480      	push	{r7}
 8009818:	b085      	sub	sp, #20
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	68ba      	ldr	r2, [r7, #8]
 8009836:	4013      	ands	r3, r2
 8009838:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	b29b      	uxth	r3, r3
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800984a:	b480      	push	{r7}
 800984c:	b085      	sub	sp, #20
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	460b      	mov	r3, r1
 8009854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	4013      	ands	r3, r2
 8009876:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009878:	68bb      	ldr	r3, [r7, #8]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009886:	b480      	push	{r7}
 8009888:	b087      	sub	sp, #28
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	fa22 f303 	lsr.w	r3, r2, r3
 80098b6:	01db      	lsls	r3, r3, #7
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	4313      	orrs	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80098c0:	78fb      	ldrb	r3, [r7, #3]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	693a      	ldr	r2, [r7, #16]
 80098d0:	4013      	ands	r3, r2
 80098d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098d4:	68bb      	ldr	r3, [r7, #8]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr

080098e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	695b      	ldr	r3, [r3, #20]
 80098ee:	f003 0301 	and.w	r3, r3, #1
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	370c      	adds	r7, #12
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr

080098fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009918:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800991c:	f023 0307 	bic.w	r3, r3, #7
 8009920:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009934:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	460b      	mov	r3, r1
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	333c      	adds	r3, #60	@ 0x3c
 800995a:	3304      	adds	r3, #4
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4a26      	ldr	r2, [pc, #152]	@ (80099fc <USB_EP0_OutStart+0xb8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d90a      	bls.n	800997e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009978:	d101      	bne.n	800997e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800997a:	2300      	movs	r3, #0
 800997c:	e037      	b.n	80099ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009984:	461a      	mov	r2, r3
 8009986:	2300      	movs	r3, #0
 8009988:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009998:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800999c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	697a      	ldr	r2, [r7, #20]
 80099a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ac:	f043 0318 	orr.w	r3, r3, #24
 80099b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80099c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099c6:	7afb      	ldrb	r3, [r7, #11]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d10f      	bne.n	80099ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099d2:	461a      	mov	r2, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80099ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	4f54300a 	.word	0x4f54300a

08009a00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a18:	d901      	bls.n	8009a1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e01b      	b.n	8009a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	daf2      	bge.n	8009a0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	f043 0201 	orr.w	r2, r3, #1
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a42:	d901      	bls.n	8009a48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	e006      	b.n	8009a56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d0f0      	beq.n	8009a36 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
	...

08009a64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a70:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009a74:	f005 fa68 	bl	800ef48 <USBD_static_malloc>
 8009a78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32b0      	adds	r2, #176	@ 0xb0
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a90:	2302      	movs	r3, #2
 8009a92:	e0d4      	b.n	8009c3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a94:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009a98:	2100      	movs	r1, #0
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f006 f815 	bl	800faca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	32b0      	adds	r2, #176	@ 0xb0
 8009aaa:	68f9      	ldr	r1, [r7, #12]
 8009aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	32b0      	adds	r2, #176	@ 0xb0
 8009aba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7c1b      	ldrb	r3, [r3, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d138      	bne.n	8009b3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009acc:	4b5e      	ldr	r3, [pc, #376]	@ (8009c48 <USBD_CDC_Init+0x1e4>)
 8009ace:	7819      	ldrb	r1, [r3, #0]
 8009ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f005 f913 	bl	800ed02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009adc:	4b5a      	ldr	r3, [pc, #360]	@ (8009c48 <USBD_CDC_Init+0x1e4>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	f003 020f 	and.w	r2, r3, #15
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4413      	add	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	440b      	add	r3, r1
 8009af0:	3324      	adds	r3, #36	@ 0x24
 8009af2:	2201      	movs	r2, #1
 8009af4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009af6:	4b55      	ldr	r3, [pc, #340]	@ (8009c4c <USBD_CDC_Init+0x1e8>)
 8009af8:	7819      	ldrb	r1, [r3, #0]
 8009afa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009afe:	2202      	movs	r2, #2
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f005 f8fe 	bl	800ed02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b06:	4b51      	ldr	r3, [pc, #324]	@ (8009c4c <USBD_CDC_Init+0x1e8>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	f003 020f 	and.w	r2, r3, #15
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b1e:	2201      	movs	r2, #1
 8009b20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009b22:	4b4b      	ldr	r3, [pc, #300]	@ (8009c50 <USBD_CDC_Init+0x1ec>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 020f 	and.w	r2, r3, #15
 8009b2a:	6879      	ldr	r1, [r7, #4]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	3326      	adds	r3, #38	@ 0x26
 8009b38:	2210      	movs	r2, #16
 8009b3a:	801a      	strh	r2, [r3, #0]
 8009b3c:	e035      	b.n	8009baa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b3e:	4b42      	ldr	r3, [pc, #264]	@ (8009c48 <USBD_CDC_Init+0x1e4>)
 8009b40:	7819      	ldrb	r1, [r3, #0]
 8009b42:	2340      	movs	r3, #64	@ 0x40
 8009b44:	2202      	movs	r2, #2
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f005 f8db 	bl	800ed02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b4c:	4b3e      	ldr	r3, [pc, #248]	@ (8009c48 <USBD_CDC_Init+0x1e4>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	f003 020f 	and.w	r2, r3, #15
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	440b      	add	r3, r1
 8009b60:	3324      	adds	r3, #36	@ 0x24
 8009b62:	2201      	movs	r2, #1
 8009b64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b66:	4b39      	ldr	r3, [pc, #228]	@ (8009c4c <USBD_CDC_Init+0x1e8>)
 8009b68:	7819      	ldrb	r1, [r3, #0]
 8009b6a:	2340      	movs	r3, #64	@ 0x40
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f005 f8c7 	bl	800ed02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b74:	4b35      	ldr	r3, [pc, #212]	@ (8009c4c <USBD_CDC_Init+0x1e8>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	f003 020f 	and.w	r2, r3, #15
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	4413      	add	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	440b      	add	r3, r1
 8009b88:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b90:	4b2f      	ldr	r3, [pc, #188]	@ (8009c50 <USBD_CDC_Init+0x1ec>)
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	f003 020f 	and.w	r2, r3, #15
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3326      	adds	r3, #38	@ 0x26
 8009ba6:	2210      	movs	r2, #16
 8009ba8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009baa:	4b29      	ldr	r3, [pc, #164]	@ (8009c50 <USBD_CDC_Init+0x1ec>)
 8009bac:	7819      	ldrb	r1, [r3, #0]
 8009bae:	2308      	movs	r3, #8
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f005 f8a5 	bl	800ed02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009bb8:	4b25      	ldr	r3, [pc, #148]	@ (8009c50 <USBD_CDC_Init+0x1ec>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f003 020f 	and.w	r2, r3, #15
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	3324      	adds	r3, #36	@ 0x24
 8009bce:	2201      	movs	r2, #1
 8009bd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	33b0      	adds	r3, #176	@ 0xb0
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	e018      	b.n	8009c3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7c1b      	ldrb	r3, [r3, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c14:	4b0d      	ldr	r3, [pc, #52]	@ (8009c4c <USBD_CDC_Init+0x1e8>)
 8009c16:	7819      	ldrb	r1, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f005 f95c 	bl	800eee0 <USBD_LL_PrepareReceive>
 8009c28:	e008      	b.n	8009c3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c2a:	4b08      	ldr	r3, [pc, #32]	@ (8009c4c <USBD_CDC_Init+0x1e8>)
 8009c2c:	7819      	ldrb	r1, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c34:	2340      	movs	r3, #64	@ 0x40
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f005 f952 	bl	800eee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000011f 	.word	0x2000011f
 8009c4c:	20000120 	.word	0x20000120
 8009c50:	20000121 	.word	0x20000121

08009c54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c60:	4b3a      	ldr	r3, [pc, #232]	@ (8009d4c <USBD_CDC_DeInit+0xf8>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f005 f871 	bl	800ed4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c6c:	4b37      	ldr	r3, [pc, #220]	@ (8009d4c <USBD_CDC_DeInit+0xf8>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	f003 020f 	and.w	r2, r3, #15
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	3324      	adds	r3, #36	@ 0x24
 8009c82:	2200      	movs	r2, #0
 8009c84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c86:	4b32      	ldr	r3, [pc, #200]	@ (8009d50 <USBD_CDC_DeInit+0xfc>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f005 f85e 	bl	800ed4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c92:	4b2f      	ldr	r3, [pc, #188]	@ (8009d50 <USBD_CDC_DeInit+0xfc>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	f003 020f 	and.w	r2, r3, #15
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009caa:	2200      	movs	r2, #0
 8009cac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009cae:	4b29      	ldr	r3, [pc, #164]	@ (8009d54 <USBD_CDC_DeInit+0x100>)
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f005 f84a 	bl	800ed4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009cba:	4b26      	ldr	r3, [pc, #152]	@ (8009d54 <USBD_CDC_DeInit+0x100>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	f003 020f 	and.w	r2, r3, #15
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	3324      	adds	r3, #36	@ 0x24
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d54 <USBD_CDC_DeInit+0x100>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 020f 	and.w	r2, r3, #15
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	3326      	adds	r3, #38	@ 0x26
 8009cea:	2200      	movs	r2, #0
 8009cec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	32b0      	adds	r2, #176	@ 0xb0
 8009cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d01f      	beq.n	8009d40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d06:	687a      	ldr	r2, [r7, #4]
 8009d08:	33b0      	adds	r3, #176	@ 0xb0
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	32b0      	adds	r2, #176	@ 0xb0
 8009d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f005 f91e 	bl	800ef64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	32b0      	adds	r2, #176	@ 0xb0
 8009d32:	2100      	movs	r1, #0
 8009d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	2000011f 	.word	0x2000011f
 8009d50:	20000120 	.word	0x20000120
 8009d54:	20000121 	.word	0x20000121

08009d58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	32b0      	adds	r2, #176	@ 0xb0
 8009d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d84:	2303      	movs	r3, #3
 8009d86:	e0bf      	b.n	8009f08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d050      	beq.n	8009e36 <USBD_CDC_Setup+0xde>
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	f040 80af 	bne.w	8009ef8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	88db      	ldrh	r3, [r3, #6]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d03a      	beq.n	8009e18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	b25b      	sxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	da1b      	bge.n	8009de4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	33b0      	adds	r3, #176	@ 0xb0
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009dc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	88d2      	ldrh	r2, [r2, #6]
 8009dc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	88db      	ldrh	r3, [r3, #6]
 8009dce:	2b07      	cmp	r3, #7
 8009dd0:	bf28      	it	cs
 8009dd2:	2307      	movcs	r3, #7
 8009dd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	89fa      	ldrh	r2, [r7, #14]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 fd93 	bl	800b908 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009de2:	e090      	b.n	8009f06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	785a      	ldrb	r2, [r3, #1]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	88db      	ldrh	r3, [r3, #6]
 8009df2:	2b3f      	cmp	r3, #63	@ 0x3f
 8009df4:	d803      	bhi.n	8009dfe <USBD_CDC_Setup+0xa6>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	88db      	ldrh	r3, [r3, #6]
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	e000      	b.n	8009e00 <USBD_CDC_Setup+0xa8>
 8009dfe:	2240      	movs	r2, #64	@ 0x40
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e06:	6939      	ldr	r1, [r7, #16]
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 fda5 	bl	800b960 <USBD_CtlPrepareRx>
      break;
 8009e16:	e076      	b.n	8009f06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	33b0      	adds	r3, #176	@ 0xb0
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	7850      	ldrb	r0, [r2, #1]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	4798      	blx	r3
      break;
 8009e34:	e067      	b.n	8009f06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	785b      	ldrb	r3, [r3, #1]
 8009e3a:	2b0b      	cmp	r3, #11
 8009e3c:	d851      	bhi.n	8009ee2 <USBD_CDC_Setup+0x18a>
 8009e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e44 <USBD_CDC_Setup+0xec>)
 8009e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e44:	08009e75 	.word	0x08009e75
 8009e48:	08009ef1 	.word	0x08009ef1
 8009e4c:	08009ee3 	.word	0x08009ee3
 8009e50:	08009ee3 	.word	0x08009ee3
 8009e54:	08009ee3 	.word	0x08009ee3
 8009e58:	08009ee3 	.word	0x08009ee3
 8009e5c:	08009ee3 	.word	0x08009ee3
 8009e60:	08009ee3 	.word	0x08009ee3
 8009e64:	08009ee3 	.word	0x08009ee3
 8009e68:	08009ee3 	.word	0x08009ee3
 8009e6c:	08009e9f 	.word	0x08009e9f
 8009e70:	08009ec9 	.word	0x08009ec9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b03      	cmp	r3, #3
 8009e7e:	d107      	bne.n	8009e90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e80:	f107 030a 	add.w	r3, r7, #10
 8009e84:	2202      	movs	r2, #2
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f001 fd3d 	bl	800b908 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e8e:	e032      	b.n	8009ef6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 fcbb 	bl	800b80e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009e9c:	e02b      	b.n	8009ef6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d107      	bne.n	8009eba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009eaa:	f107 030d 	add.w	r3, r7, #13
 8009eae:	2201      	movs	r2, #1
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 fd28 	bl	800b908 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eb8:	e01d      	b.n	8009ef6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009eba:	6839      	ldr	r1, [r7, #0]
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 fca6 	bl	800b80e <USBD_CtlError>
            ret = USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ec6:	e016      	b.n	8009ef6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d00f      	beq.n	8009ef4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ed4:	6839      	ldr	r1, [r7, #0]
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f001 fc99 	bl	800b80e <USBD_CtlError>
            ret = USBD_FAIL;
 8009edc:	2303      	movs	r3, #3
 8009ede:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ee0:	e008      	b.n	8009ef4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 fc92 	bl	800b80e <USBD_CtlError>
          ret = USBD_FAIL;
 8009eea:	2303      	movs	r3, #3
 8009eec:	75fb      	strb	r3, [r7, #23]
          break;
 8009eee:	e002      	b.n	8009ef6 <USBD_CDC_Setup+0x19e>
          break;
 8009ef0:	bf00      	nop
 8009ef2:	e008      	b.n	8009f06 <USBD_CDC_Setup+0x1ae>
          break;
 8009ef4:	bf00      	nop
      }
      break;
 8009ef6:	e006      	b.n	8009f06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 fc87 	bl	800b80e <USBD_CtlError>
      ret = USBD_FAIL;
 8009f00:	2303      	movs	r3, #3
 8009f02:	75fb      	strb	r3, [r7, #23]
      break;
 8009f04:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32b0      	adds	r2, #176	@ 0xb0
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d101      	bne.n	8009f3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e065      	b.n	800a006 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	32b0      	adds	r2, #176	@ 0xb0
 8009f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f4a:	78fb      	ldrb	r3, [r7, #3]
 8009f4c:	f003 020f 	and.w	r2, r3, #15
 8009f50:	6879      	ldr	r1, [r7, #4]
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3318      	adds	r3, #24
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d02f      	beq.n	8009fc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	f003 020f 	and.w	r2, r3, #15
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	3318      	adds	r3, #24
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	78fb      	ldrb	r3, [r7, #3]
 8009f7c:	f003 010f 	and.w	r1, r3, #15
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	460b      	mov	r3, r1
 8009f84:	00db      	lsls	r3, r3, #3
 8009f86:	440b      	add	r3, r1
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4403      	add	r3, r0
 8009f8c:	331c      	adds	r3, #28
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f94:	fb01 f303 	mul.w	r3, r1, r3
 8009f98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d112      	bne.n	8009fc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f9e:	78fb      	ldrb	r3, [r7, #3]
 8009fa0:	f003 020f 	and.w	r2, r3, #15
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	3318      	adds	r3, #24
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009fb6:	78f9      	ldrb	r1, [r7, #3]
 8009fb8:	2300      	movs	r3, #0
 8009fba:	2200      	movs	r2, #0
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f004 ff6e 	bl	800ee9e <USBD_LL_Transmit>
 8009fc2:	e01f      	b.n	800a004 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	33b0      	adds	r3, #176	@ 0xb0
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d010      	beq.n	800a004 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	33b0      	adds	r3, #176	@ 0xb0
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	691b      	ldr	r3, [r3, #16]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a000:	78fa      	ldrb	r2, [r7, #3]
 800a002:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a004:	2300      	movs	r3, #0
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	b084      	sub	sp, #16
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	460b      	mov	r3, r1
 800a018:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	32b0      	adds	r2, #176	@ 0xb0
 800a024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a028:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	32b0      	adds	r2, #176	@ 0xb0
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e01a      	b.n	800a076 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	4619      	mov	r1, r3
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f004 ff6c 	bl	800ef22 <USBD_LL_GetRxDataSize>
 800a04a:	4602      	mov	r2, r0
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	33b0      	adds	r3, #176	@ 0xb0
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a070:	4611      	mov	r1, r2
 800a072:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	32b0      	adds	r2, #176	@ 0xb0
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a09c:	2303      	movs	r3, #3
 800a09e:	e024      	b.n	800a0ea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	33b0      	adds	r3, #176	@ 0xb0
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d019      	beq.n	800a0e8 <USBD_CDC_EP0_RxReady+0x6a>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a0ba:	2bff      	cmp	r3, #255	@ 0xff
 800a0bc:	d014      	beq.n	800a0e8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	33b0      	adds	r3, #176	@ 0xb0
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a0d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a0de:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	22ff      	movs	r2, #255	@ 0xff
 800a0e4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
	...

0800a0f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0fc:	2182      	movs	r1, #130	@ 0x82
 800a0fe:	4818      	ldr	r0, [pc, #96]	@ (800a160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a100:	f000 fd4f 	bl	800aba2 <USBD_GetEpDesc>
 800a104:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a106:	2101      	movs	r1, #1
 800a108:	4815      	ldr	r0, [pc, #84]	@ (800a160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a10a:	f000 fd4a 	bl	800aba2 <USBD_GetEpDesc>
 800a10e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a110:	2181      	movs	r1, #129	@ 0x81
 800a112:	4813      	ldr	r0, [pc, #76]	@ (800a160 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a114:	f000 fd45 	bl	800aba2 <USBD_GetEpDesc>
 800a118:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d002      	beq.n	800a126 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2210      	movs	r2, #16
 800a124:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d006      	beq.n	800a13a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	2200      	movs	r2, #0
 800a130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a134:	711a      	strb	r2, [r3, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d006      	beq.n	800a14e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a148:	711a      	strb	r2, [r3, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2243      	movs	r2, #67	@ 0x43
 800a152:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a154:	4b02      	ldr	r3, [pc, #8]	@ (800a160 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	200000dc 	.word	0x200000dc

0800a164 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a16c:	2182      	movs	r1, #130	@ 0x82
 800a16e:	4818      	ldr	r0, [pc, #96]	@ (800a1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a170:	f000 fd17 	bl	800aba2 <USBD_GetEpDesc>
 800a174:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a176:	2101      	movs	r1, #1
 800a178:	4815      	ldr	r0, [pc, #84]	@ (800a1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a17a:	f000 fd12 	bl	800aba2 <USBD_GetEpDesc>
 800a17e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a180:	2181      	movs	r1, #129	@ 0x81
 800a182:	4813      	ldr	r0, [pc, #76]	@ (800a1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a184:	f000 fd0d 	bl	800aba2 <USBD_GetEpDesc>
 800a188:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d002      	beq.n	800a196 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	2210      	movs	r2, #16
 800a194:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d006      	beq.n	800a1aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	711a      	strb	r2, [r3, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f042 0202 	orr.w	r2, r2, #2
 800a1a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d006      	beq.n	800a1be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	711a      	strb	r2, [r3, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f042 0202 	orr.w	r2, r2, #2
 800a1bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2243      	movs	r2, #67	@ 0x43
 800a1c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1c4:	4b02      	ldr	r3, [pc, #8]	@ (800a1d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200000dc 	.word	0x200000dc

0800a1d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1dc:	2182      	movs	r1, #130	@ 0x82
 800a1de:	4818      	ldr	r0, [pc, #96]	@ (800a240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1e0:	f000 fcdf 	bl	800aba2 <USBD_GetEpDesc>
 800a1e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	4815      	ldr	r0, [pc, #84]	@ (800a240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1ea:	f000 fcda 	bl	800aba2 <USBD_GetEpDesc>
 800a1ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1f0:	2181      	movs	r1, #129	@ 0x81
 800a1f2:	4813      	ldr	r0, [pc, #76]	@ (800a240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1f4:	f000 fcd5 	bl	800aba2 <USBD_GetEpDesc>
 800a1f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d002      	beq.n	800a206 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	2210      	movs	r2, #16
 800a204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d006      	beq.n	800a21a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	2200      	movs	r2, #0
 800a210:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a214:	711a      	strb	r2, [r3, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d006      	beq.n	800a22e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a228:	711a      	strb	r2, [r3, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2243      	movs	r2, #67	@ 0x43
 800a232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a234:	4b02      	ldr	r3, [pc, #8]	@ (800a240 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a236:	4618      	mov	r0, r3
 800a238:	3718      	adds	r7, #24
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	200000dc 	.word	0x200000dc

0800a244 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	220a      	movs	r2, #10
 800a250:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a252:	4b03      	ldr	r3, [pc, #12]	@ (800a260 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a254:	4618      	mov	r0, r3
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	20000098 	.word	0x20000098

0800a264 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d101      	bne.n	800a278 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a274:	2303      	movs	r3, #3
 800a276:	e009      	b.n	800a28c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	33b0      	adds	r3, #176	@ 0xb0
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a298:	b480      	push	{r7}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	32b0      	adds	r2, #176	@ 0xb0
 800a2ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	e008      	b.n	800a2d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	371c      	adds	r7, #28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	32b0      	adds	r2, #176	@ 0xb0
 800a2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d101      	bne.n	800a300 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e004      	b.n	800a30a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3714      	adds	r7, #20
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr
	...

0800a318 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	32b0      	adds	r2, #176	@ 0xb0
 800a32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a32e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e025      	b.n	800a38a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a344:	2b00      	cmp	r3, #0
 800a346:	d11f      	bne.n	800a388 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a350:	4b10      	ldr	r3, [pc, #64]	@ (800a394 <USBD_CDC_TransmitPacket+0x7c>)
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	f003 020f 	and.w	r2, r3, #15
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4403      	add	r3, r0
 800a36a:	3318      	adds	r3, #24
 800a36c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a36e:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <USBD_CDC_TransmitPacket+0x7c>)
 800a370:	7819      	ldrb	r1, [r3, #0]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f004 fd8d 	bl	800ee9e <USBD_LL_Transmit>

    ret = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	2000011f 	.word	0x2000011f

0800a398 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	32b0      	adds	r2, #176	@ 0xb0
 800a3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	32b0      	adds	r2, #176	@ 0xb0
 800a3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e018      	b.n	800a3f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	7c1b      	ldrb	r3, [r3, #16]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10a      	bne.n	800a3e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a400 <USBD_CDC_ReceivePacket+0x68>)
 800a3d0:	7819      	ldrb	r1, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f004 fd7f 	bl	800eee0 <USBD_LL_PrepareReceive>
 800a3e2:	e008      	b.n	800a3f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a3e4:	4b06      	ldr	r3, [pc, #24]	@ (800a400 <USBD_CDC_ReceivePacket+0x68>)
 800a3e6:	7819      	ldrb	r1, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a3ee:	2340      	movs	r3, #64	@ 0x40
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f004 fd75 	bl	800eee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	20000120 	.word	0x20000120

0800a404 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	4613      	mov	r3, r2
 800a410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	e01f      	b.n	800a45c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68ba      	ldr	r2, [r7, #8]
 800a43e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2201      	movs	r2, #1
 800a446:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	79fa      	ldrb	r2, [r7, #7]
 800a44e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f004 fbe9 	bl	800ec28 <USBD_LL_Init>
 800a456:	4603      	mov	r3, r0
 800a458:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a478:	2303      	movs	r3, #3
 800a47a:	e025      	b.n	800a4c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	683a      	ldr	r2, [r7, #0]
 800a480:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	32ae      	adds	r2, #174	@ 0xae
 800a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00f      	beq.n	800a4b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	32ae      	adds	r2, #174	@ 0xae
 800a4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4a8:	f107 020e 	add.w	r2, r7, #14
 800a4ac:	4610      	mov	r0, r2
 800a4ae:	4798      	blx	r3
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3710      	adds	r7, #16
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f004 fbf7 	bl	800eccc <USBD_LL_Start>
 800a4de:	4603      	mov	r3, r0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a514:	2b00      	cmp	r3, #0
 800a516:	d009      	beq.n	800a52c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	78fa      	ldrb	r2, [r7, #3]
 800a522:	4611      	mov	r1, r2
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	4798      	blx	r3
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	460b      	mov	r3, r1
 800a540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	78fa      	ldrb	r2, [r7, #3]
 800a550:	4611      	mov	r1, r2
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a55c:	2303      	movs	r3, #3
 800a55e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b084      	sub	sp, #16
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 f90c 	bl	800b79a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a590:	461a      	mov	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a59e:	f003 031f 	and.w	r3, r3, #31
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d01a      	beq.n	800a5dc <USBD_LL_SetupStage+0x72>
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d822      	bhi.n	800a5f0 <USBD_LL_SetupStage+0x86>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <USBD_LL_SetupStage+0x4a>
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d00a      	beq.n	800a5c8 <USBD_LL_SetupStage+0x5e>
 800a5b2:	e01d      	b.n	800a5f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fb63 	bl	800ac88 <USBD_StdDevReq>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c6:	e020      	b.n	800a60a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 fbcb 	bl	800ad6c <USBD_StdItfReq>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5da:	e016      	b.n	800a60a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 fc2d 	bl	800ae44 <USBD_StdEPReq>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ee:	e00c      	b.n	800a60a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a5f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f004 fbc4 	bl	800ed8c <USBD_LL_StallEP>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]
      break;
 800a608:	bf00      	nop
  }

  return ret;
 800a60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	460b      	mov	r3, r1
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a626:	7afb      	ldrb	r3, [r7, #11]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d16e      	bne.n	800a70a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a632:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a63a:	2b03      	cmp	r3, #3
 800a63c:	f040 8098 	bne.w	800a770 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d913      	bls.n	800a674 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	1ad2      	subs	r2, r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	4293      	cmp	r3, r2
 800a664:	bf28      	it	cs
 800a666:	4613      	movcs	r3, r2
 800a668:	461a      	mov	r2, r3
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f001 f994 	bl	800b99a <USBD_CtlContinueRx>
 800a672:	e07d      	b.n	800a770 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a67a:	f003 031f 	and.w	r3, r3, #31
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d014      	beq.n	800a6ac <USBD_LL_DataOutStage+0x98>
 800a682:	2b02      	cmp	r3, #2
 800a684:	d81d      	bhi.n	800a6c2 <USBD_LL_DataOutStage+0xae>
 800a686:	2b00      	cmp	r3, #0
 800a688:	d002      	beq.n	800a690 <USBD_LL_DataOutStage+0x7c>
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d003      	beq.n	800a696 <USBD_LL_DataOutStage+0x82>
 800a68e:	e018      	b.n	800a6c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a690:	2300      	movs	r3, #0
 800a692:	75bb      	strb	r3, [r7, #22]
            break;
 800a694:	e018      	b.n	800a6c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	4619      	mov	r1, r3
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fa64 	bl	800ab6e <USBD_CoreFindIF>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a6aa:	e00d      	b.n	800a6c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 fa66 	bl	800ab88 <USBD_CoreFindEP>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c0:	e002      	b.n	800a6c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a6c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a6c8:	7dbb      	ldrb	r3, [r7, #22]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d119      	bne.n	800a702 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d113      	bne.n	800a702 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a6da:	7dba      	ldrb	r2, [r7, #22]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	32ae      	adds	r2, #174	@ 0xae
 800a6e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e4:	691b      	ldr	r3, [r3, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00b      	beq.n	800a702 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a6ea:	7dba      	ldrb	r2, [r7, #22]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a6f2:	7dba      	ldrb	r2, [r7, #22]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	32ae      	adds	r2, #174	@ 0xae
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f001 f95a 	bl	800b9bc <USBD_CtlSendStatus>
 800a708:	e032      	b.n	800a770 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a70a:	7afb      	ldrb	r3, [r7, #11]
 800a70c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a710:	b2db      	uxtb	r3, r3
 800a712:	4619      	mov	r1, r3
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 fa37 	bl	800ab88 <USBD_CoreFindEP>
 800a71a:	4603      	mov	r3, r0
 800a71c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a71e:	7dbb      	ldrb	r3, [r7, #22]
 800a720:	2bff      	cmp	r3, #255	@ 0xff
 800a722:	d025      	beq.n	800a770 <USBD_LL_DataOutStage+0x15c>
 800a724:	7dbb      	ldrb	r3, [r7, #22]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d122      	bne.n	800a770 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b03      	cmp	r3, #3
 800a734:	d117      	bne.n	800a766 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a736:	7dba      	ldrb	r2, [r7, #22]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	32ae      	adds	r2, #174	@ 0xae
 800a73c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00f      	beq.n	800a766 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a746:	7dba      	ldrb	r2, [r7, #22]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a74e:	7dba      	ldrb	r2, [r7, #22]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	32ae      	adds	r2, #174	@ 0xae
 800a754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	7afa      	ldrb	r2, [r7, #11]
 800a75c:	4611      	mov	r1, r2
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	4798      	blx	r3
 800a762:	4603      	mov	r3, r0
 800a764:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a76c:	7dfb      	ldrb	r3, [r7, #23]
 800a76e:	e000      	b.n	800a772 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3718      	adds	r7, #24
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	460b      	mov	r3, r1
 800a784:	607a      	str	r2, [r7, #4]
 800a786:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d16f      	bne.n	800a86e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3314      	adds	r3, #20
 800a792:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	d15a      	bne.n	800a854 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d914      	bls.n	800a7d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	689a      	ldr	r2, [r3, #8]
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	1ad2      	subs	r2, r2, r3
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	689b      	ldr	r3, [r3, #8]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f001 f8bc 	bl	800b93e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	68f8      	ldr	r0, [r7, #12]
 800a7ce:	f004 fb87 	bl	800eee0 <USBD_LL_PrepareReceive>
 800a7d2:	e03f      	b.n	800a854 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	68da      	ldr	r2, [r3, #12]
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d11c      	bne.n	800a81a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d316      	bcc.n	800a81a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d20f      	bcs.n	800a81a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2100      	movs	r1, #0
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f001 f89d 	bl	800b93e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a80c:	2300      	movs	r3, #0
 800a80e:	2200      	movs	r2, #0
 800a810:	2100      	movs	r1, #0
 800a812:	68f8      	ldr	r0, [r7, #12]
 800a814:	f004 fb64 	bl	800eee0 <USBD_LL_PrepareReceive>
 800a818:	e01c      	b.n	800a854 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b03      	cmp	r3, #3
 800a824:	d10f      	bne.n	800a846 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a846:	2180      	movs	r1, #128	@ 0x80
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f004 fa9f 	bl	800ed8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f001 f8c7 	bl	800b9e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d03a      	beq.n	800a8d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f7ff fe42 	bl	800a4e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2200      	movs	r2, #0
 800a868:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a86c:	e032      	b.n	800a8d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a86e:	7afb      	ldrb	r3, [r7, #11]
 800a870:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a874:	b2db      	uxtb	r3, r3
 800a876:	4619      	mov	r1, r3
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f000 f985 	bl	800ab88 <USBD_CoreFindEP>
 800a87e:	4603      	mov	r3, r0
 800a880:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	2bff      	cmp	r3, #255	@ 0xff
 800a886:	d025      	beq.n	800a8d4 <USBD_LL_DataInStage+0x15a>
 800a888:	7dfb      	ldrb	r3, [r7, #23]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d122      	bne.n	800a8d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b03      	cmp	r3, #3
 800a898:	d11c      	bne.n	800a8d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a89a:	7dfa      	ldrb	r2, [r7, #23]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	32ae      	adds	r2, #174	@ 0xae
 800a8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8a4:	695b      	ldr	r3, [r3, #20]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d014      	beq.n	800a8d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a8aa:	7dfa      	ldrb	r2, [r7, #23]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a8b2:	7dfa      	ldrb	r2, [r7, #23]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	32ae      	adds	r2, #174	@ 0xae
 800a8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	7afa      	ldrb	r2, [r7, #11]
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	4798      	blx	r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a8ca:	7dbb      	ldrb	r3, [r7, #22]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d001      	beq.n	800a8d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a8d0:	7dbb      	ldrb	r3, [r7, #22]
 800a8d2:	e000      	b.n	800a8d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b084      	sub	sp, #16
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a916:	2b00      	cmp	r3, #0
 800a918:	d014      	beq.n	800a944 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00e      	beq.n	800a944 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	6852      	ldr	r2, [r2, #4]
 800a932:	b2d2      	uxtb	r2, r2
 800a934:	4611      	mov	r1, r2
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	4798      	blx	r3
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d001      	beq.n	800a944 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a940:	2303      	movs	r3, #3
 800a942:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a944:	2340      	movs	r3, #64	@ 0x40
 800a946:	2200      	movs	r2, #0
 800a948:	2100      	movs	r1, #0
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f004 f9d9 	bl	800ed02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2240      	movs	r2, #64	@ 0x40
 800a95c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a960:	2340      	movs	r3, #64	@ 0x40
 800a962:	2200      	movs	r2, #0
 800a964:	2180      	movs	r1, #128	@ 0x80
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f004 f9cb 	bl	800ed02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2240      	movs	r2, #64	@ 0x40
 800a976:	621a      	str	r2, [r3, #32]

  return ret;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
 800a98a:	460b      	mov	r3, r1
 800a98c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	78fa      	ldrb	r2, [r7, #3]
 800a992:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b083      	sub	sp, #12
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b04      	cmp	r3, #4
 800a9b4:	d006      	beq.n	800a9c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9bc:	b2da      	uxtb	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2204      	movs	r2, #4
 800a9c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	2b04      	cmp	r3, #4
 800a9ec:	d106      	bne.n	800a9fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a9f4:	b2da      	uxtb	r2, r3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	370c      	adds	r7, #12
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr

0800aa0a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d110      	bne.n	800aa40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00b      	beq.n	800aa40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d005      	beq.n	800aa40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3708      	adds	r7, #8
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	32ae      	adds	r2, #174	@ 0xae
 800aa60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d101      	bne.n	800aa6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aa68:	2303      	movs	r3, #3
 800aa6a:	e01c      	b.n	800aaa6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	2b03      	cmp	r3, #3
 800aa76:	d115      	bne.n	800aaa4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	32ae      	adds	r2, #174	@ 0xae
 800aa82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	32ae      	adds	r2, #174	@ 0xae
 800aa96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	78fa      	ldrb	r2, [r7, #3]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}

0800aaae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b082      	sub	sp, #8
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	32ae      	adds	r2, #174	@ 0xae
 800aac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d101      	bne.n	800aad0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	e01c      	b.n	800ab0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b03      	cmp	r3, #3
 800aada:	d115      	bne.n	800ab08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	32ae      	adds	r2, #174	@ 0xae
 800aae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00b      	beq.n	800ab08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	32ae      	adds	r2, #174	@ 0xae
 800aafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab00:	78fa      	ldrb	r2, [r7, #3]
 800ab02:	4611      	mov	r1, r2
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3708      	adds	r7, #8
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ab30:	2300      	movs	r3, #0
 800ab32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00e      	beq.n	800ab64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	6852      	ldr	r2, [r2, #4]
 800ab52:	b2d2      	uxtb	r2, r2
 800ab54:	4611      	mov	r1, r2
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	4798      	blx	r3
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ab60:	2303      	movs	r3, #3
 800ab62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b083      	sub	sp, #12
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
 800ab76:	460b      	mov	r3, r1
 800ab78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	460b      	mov	r3, r1
 800ab92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ab94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b086      	sub	sp, #24
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	460b      	mov	r3, r1
 800abac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	885b      	ldrh	r3, [r3, #2]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	7812      	ldrb	r2, [r2, #0]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d91f      	bls.n	800ac08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800abce:	e013      	b.n	800abf8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800abd0:	f107 030a 	add.w	r3, r7, #10
 800abd4:	4619      	mov	r1, r3
 800abd6:	6978      	ldr	r0, [r7, #20]
 800abd8:	f000 f81b 	bl	800ac12 <USBD_GetNextDesc>
 800abdc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	785b      	ldrb	r3, [r3, #1]
 800abe2:	2b05      	cmp	r3, #5
 800abe4:	d108      	bne.n	800abf8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	789b      	ldrb	r3, [r3, #2]
 800abee:	78fa      	ldrb	r2, [r7, #3]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d008      	beq.n	800ac06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800abf4:	2300      	movs	r3, #0
 800abf6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	885b      	ldrh	r3, [r3, #2]
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	897b      	ldrh	r3, [r7, #10]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d8e5      	bhi.n	800abd0 <USBD_GetEpDesc+0x2e>
 800ac04:	e000      	b.n	800ac08 <USBD_GetEpDesc+0x66>
          break;
 800ac06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac08:	693b      	ldr	r3, [r7, #16]
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b085      	sub	sp, #20
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	7812      	ldrb	r2, [r2, #0]
 800ac28:	4413      	add	r3, r2
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	461a      	mov	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4413      	add	r3, r2
 800ac3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac4a:	b480      	push	{r7}
 800ac4c:	b087      	sub	sp, #28
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ac68:	8a3b      	ldrh	r3, [r7, #16]
 800ac6a:	021b      	lsls	r3, r3, #8
 800ac6c:	b21a      	sxth	r2, r3
 800ac6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	b21b      	sxth	r3, r3
 800ac76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ac78:	89fb      	ldrh	r3, [r7, #14]
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr
	...

0800ac88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac9e:	2b40      	cmp	r3, #64	@ 0x40
 800aca0:	d005      	beq.n	800acae <USBD_StdDevReq+0x26>
 800aca2:	2b40      	cmp	r3, #64	@ 0x40
 800aca4:	d857      	bhi.n	800ad56 <USBD_StdDevReq+0xce>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00f      	beq.n	800acca <USBD_StdDevReq+0x42>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d153      	bne.n	800ad56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	32ae      	adds	r2, #174	@ 0xae
 800acb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
 800acc4:	4603      	mov	r3, r0
 800acc6:	73fb      	strb	r3, [r7, #15]
      break;
 800acc8:	e04a      	b.n	800ad60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	785b      	ldrb	r3, [r3, #1]
 800acce:	2b09      	cmp	r3, #9
 800acd0:	d83b      	bhi.n	800ad4a <USBD_StdDevReq+0xc2>
 800acd2:	a201      	add	r2, pc, #4	@ (adr r2, 800acd8 <USBD_StdDevReq+0x50>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800ad2d 	.word	0x0800ad2d
 800acdc:	0800ad41 	.word	0x0800ad41
 800ace0:	0800ad4b 	.word	0x0800ad4b
 800ace4:	0800ad37 	.word	0x0800ad37
 800ace8:	0800ad4b 	.word	0x0800ad4b
 800acec:	0800ad0b 	.word	0x0800ad0b
 800acf0:	0800ad01 	.word	0x0800ad01
 800acf4:	0800ad4b 	.word	0x0800ad4b
 800acf8:	0800ad23 	.word	0x0800ad23
 800acfc:	0800ad15 	.word	0x0800ad15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa3c 	bl	800b180 <USBD_GetDescriptor>
          break;
 800ad08:	e024      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad0a:	6839      	ldr	r1, [r7, #0]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fba1 	bl	800b454 <USBD_SetAddress>
          break;
 800ad12:	e01f      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fbe0 	bl	800b4dc <USBD_SetConfig>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad20:	e018      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fc83 	bl	800b630 <USBD_GetConfig>
          break;
 800ad2a:	e013      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 fcb4 	bl	800b69c <USBD_GetStatus>
          break;
 800ad34:	e00e      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fce3 	bl	800b704 <USBD_SetFeature>
          break;
 800ad3e:	e009      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fd07 	bl	800b756 <USBD_ClrFeature>
          break;
 800ad48:	e004      	b.n	800ad54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fd5e 	bl	800b80e <USBD_CtlError>
          break;
 800ad52:	bf00      	nop
      }
      break;
 800ad54:	e004      	b.n	800ad60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fd58 	bl	800b80e <USBD_CtlError>
      break;
 800ad5e:	bf00      	nop
  }

  return ret;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop

0800ad6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad82:	2b40      	cmp	r3, #64	@ 0x40
 800ad84:	d005      	beq.n	800ad92 <USBD_StdItfReq+0x26>
 800ad86:	2b40      	cmp	r3, #64	@ 0x40
 800ad88:	d852      	bhi.n	800ae30 <USBD_StdItfReq+0xc4>
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <USBD_StdItfReq+0x26>
 800ad8e:	2b20      	cmp	r3, #32
 800ad90:	d14e      	bne.n	800ae30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d840      	bhi.n	800ae22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	889b      	ldrh	r3, [r3, #4]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d836      	bhi.n	800ae18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	889b      	ldrh	r3, [r3, #4]
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff fedb 	bl	800ab6e <USBD_CoreFindIF>
 800adb8:	4603      	mov	r3, r0
 800adba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2bff      	cmp	r3, #255	@ 0xff
 800adc0:	d01d      	beq.n	800adfe <USBD_StdItfReq+0x92>
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11a      	bne.n	800adfe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800adc8:	7bba      	ldrb	r2, [r7, #14]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	32ae      	adds	r2, #174	@ 0xae
 800adce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d00f      	beq.n	800adf8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800add8:	7bba      	ldrb	r2, [r7, #14]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ade0:	7bba      	ldrb	r2, [r7, #14]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	32ae      	adds	r2, #174	@ 0xae
 800ade6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adf6:	e004      	b.n	800ae02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800adf8:	2303      	movs	r3, #3
 800adfa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800adfc:	e001      	b.n	800ae02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800adfe:	2303      	movs	r3, #3
 800ae00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	88db      	ldrh	r3, [r3, #6]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d110      	bne.n	800ae2c <USBD_StdItfReq+0xc0>
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10d      	bne.n	800ae2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fdd3 	bl	800b9bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae16:	e009      	b.n	800ae2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fcf7 	bl	800b80e <USBD_CtlError>
          break;
 800ae20:	e004      	b.n	800ae2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fcf2 	bl	800b80e <USBD_CtlError>
          break;
 800ae2a:	e000      	b.n	800ae2e <USBD_StdItfReq+0xc2>
          break;
 800ae2c:	bf00      	nop
      }
      break;
 800ae2e:	e004      	b.n	800ae3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 fceb 	bl	800b80e <USBD_CtlError>
      break;
 800ae38:	bf00      	nop
  }

  return ret;
 800ae3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	889b      	ldrh	r3, [r3, #4]
 800ae56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae60:	2b40      	cmp	r3, #64	@ 0x40
 800ae62:	d007      	beq.n	800ae74 <USBD_StdEPReq+0x30>
 800ae64:	2b40      	cmp	r3, #64	@ 0x40
 800ae66:	f200 817f 	bhi.w	800b168 <USBD_StdEPReq+0x324>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d02a      	beq.n	800aec4 <USBD_StdEPReq+0x80>
 800ae6e:	2b20      	cmp	r3, #32
 800ae70:	f040 817a 	bne.w	800b168 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff fe85 	bl	800ab88 <USBD_CoreFindEP>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae82:	7b7b      	ldrb	r3, [r7, #13]
 800ae84:	2bff      	cmp	r3, #255	@ 0xff
 800ae86:	f000 8174 	beq.w	800b172 <USBD_StdEPReq+0x32e>
 800ae8a:	7b7b      	ldrb	r3, [r7, #13]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f040 8170 	bne.w	800b172 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ae92:	7b7a      	ldrb	r2, [r7, #13]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ae9a:	7b7a      	ldrb	r2, [r7, #13]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	32ae      	adds	r2, #174	@ 0xae
 800aea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 8163 	beq.w	800b172 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aeac:	7b7a      	ldrb	r2, [r7, #13]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	32ae      	adds	r2, #174	@ 0xae
 800aeb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	4798      	blx	r3
 800aebe:	4603      	mov	r3, r0
 800aec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aec2:	e156      	b.n	800b172 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d008      	beq.n	800aede <USBD_StdEPReq+0x9a>
 800aecc:	2b03      	cmp	r3, #3
 800aece:	f300 8145 	bgt.w	800b15c <USBD_StdEPReq+0x318>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f000 809b 	beq.w	800b00e <USBD_StdEPReq+0x1ca>
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d03c      	beq.n	800af56 <USBD_StdEPReq+0x112>
 800aedc:	e13e      	b.n	800b15c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d002      	beq.n	800aef0 <USBD_StdEPReq+0xac>
 800aeea:	2b03      	cmp	r3, #3
 800aeec:	d016      	beq.n	800af1c <USBD_StdEPReq+0xd8>
 800aeee:	e02c      	b.n	800af4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00d      	beq.n	800af12 <USBD_StdEPReq+0xce>
 800aef6:	7bbb      	ldrb	r3, [r7, #14]
 800aef8:	2b80      	cmp	r3, #128	@ 0x80
 800aefa:	d00a      	beq.n	800af12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f003 ff43 	bl	800ed8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af06:	2180      	movs	r1, #128	@ 0x80
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f003 ff3f 	bl	800ed8c <USBD_LL_StallEP>
 800af0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af10:	e020      	b.n	800af54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fc7a 	bl	800b80e <USBD_CtlError>
              break;
 800af1a:	e01b      	b.n	800af54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	885b      	ldrh	r3, [r3, #2]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d10e      	bne.n	800af42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00b      	beq.n	800af42 <USBD_StdEPReq+0xfe>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	@ 0x80
 800af2e:	d008      	beq.n	800af42 <USBD_StdEPReq+0xfe>
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	88db      	ldrh	r3, [r3, #6]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d104      	bne.n	800af42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	4619      	mov	r1, r3
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f003 ff25 	bl	800ed8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 fd3a 	bl	800b9bc <USBD_CtlSendStatus>

              break;
 800af48:	e004      	b.n	800af54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fc5e 	bl	800b80e <USBD_CtlError>
              break;
 800af52:	bf00      	nop
          }
          break;
 800af54:	e107      	b.n	800b166 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d002      	beq.n	800af68 <USBD_StdEPReq+0x124>
 800af62:	2b03      	cmp	r3, #3
 800af64:	d016      	beq.n	800af94 <USBD_StdEPReq+0x150>
 800af66:	e04b      	b.n	800b000 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <USBD_StdEPReq+0x146>
 800af6e:	7bbb      	ldrb	r3, [r7, #14]
 800af70:	2b80      	cmp	r3, #128	@ 0x80
 800af72:	d00a      	beq.n	800af8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af74:	7bbb      	ldrb	r3, [r7, #14]
 800af76:	4619      	mov	r1, r3
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f003 ff07 	bl	800ed8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af7e:	2180      	movs	r1, #128	@ 0x80
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f003 ff03 	bl	800ed8c <USBD_LL_StallEP>
 800af86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af88:	e040      	b.n	800b00c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fc3e 	bl	800b80e <USBD_CtlError>
              break;
 800af92:	e03b      	b.n	800b00c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	885b      	ldrh	r3, [r3, #2]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d136      	bne.n	800b00a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d004      	beq.n	800afb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f003 ff0d 	bl	800edca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fd03 	bl	800b9bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800afb6:	7bbb      	ldrb	r3, [r7, #14]
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff fde4 	bl	800ab88 <USBD_CoreFindEP>
 800afc0:	4603      	mov	r3, r0
 800afc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800afc4:	7b7b      	ldrb	r3, [r7, #13]
 800afc6:	2bff      	cmp	r3, #255	@ 0xff
 800afc8:	d01f      	beq.n	800b00a <USBD_StdEPReq+0x1c6>
 800afca:	7b7b      	ldrb	r3, [r7, #13]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11c      	bne.n	800b00a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800afd0:	7b7a      	ldrb	r2, [r7, #13]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800afd8:	7b7a      	ldrb	r2, [r7, #13]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	32ae      	adds	r2, #174	@ 0xae
 800afde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d010      	beq.n	800b00a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800afe8:	7b7a      	ldrb	r2, [r7, #13]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	32ae      	adds	r2, #174	@ 0xae
 800afee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	4798      	blx	r3
 800affa:	4603      	mov	r3, r0
 800affc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800affe:	e004      	b.n	800b00a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fc03 	bl	800b80e <USBD_CtlError>
              break;
 800b008:	e000      	b.n	800b00c <USBD_StdEPReq+0x1c8>
              break;
 800b00a:	bf00      	nop
          }
          break;
 800b00c:	e0ab      	b.n	800b166 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b02      	cmp	r3, #2
 800b018:	d002      	beq.n	800b020 <USBD_StdEPReq+0x1dc>
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d032      	beq.n	800b084 <USBD_StdEPReq+0x240>
 800b01e:	e097      	b.n	800b150 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b020:	7bbb      	ldrb	r3, [r7, #14]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d007      	beq.n	800b036 <USBD_StdEPReq+0x1f2>
 800b026:	7bbb      	ldrb	r3, [r7, #14]
 800b028:	2b80      	cmp	r3, #128	@ 0x80
 800b02a:	d004      	beq.n	800b036 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fbed 	bl	800b80e <USBD_CtlError>
                break;
 800b034:	e091      	b.n	800b15a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	da0b      	bge.n	800b056 <USBD_StdEPReq+0x212>
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	3310      	adds	r3, #16
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	4413      	add	r3, r2
 800b052:	3304      	adds	r3, #4
 800b054:	e00b      	b.n	800b06e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b056:	7bbb      	ldrb	r3, [r7, #14]
 800b058:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b05c:	4613      	mov	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	3304      	adds	r3, #4
 800b06e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2202      	movs	r2, #2
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fc43 	bl	800b908 <USBD_CtlSendData>
              break;
 800b082:	e06a      	b.n	800b15a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b084:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	da11      	bge.n	800b0b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	f003 020f 	and.w	r2, r3, #15
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	4613      	mov	r3, r2
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	4413      	add	r3, r2
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	440b      	add	r3, r1
 800b09e:	3324      	adds	r3, #36	@ 0x24
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d117      	bne.n	800b0d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fbb0 	bl	800b80e <USBD_CtlError>
                  break;
 800b0ae:	e054      	b.n	800b15a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b0b0:	7bbb      	ldrb	r3, [r7, #14]
 800b0b2:	f003 020f 	and.w	r2, r3, #15
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	440b      	add	r3, r1
 800b0c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b0c6:	881b      	ldrh	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d104      	bne.n	800b0d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fb9d 	bl	800b80e <USBD_CtlError>
                  break;
 800b0d4:	e041      	b.n	800b15a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da0b      	bge.n	800b0f6 <USBD_StdEPReq+0x2b2>
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	3310      	adds	r3, #16
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	e00b      	b.n	800b10e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0f6:	7bbb      	ldrb	r3, [r7, #14]
 800b0f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4413      	add	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	4413      	add	r3, r2
 800b10c:	3304      	adds	r3, #4
 800b10e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b110:	7bbb      	ldrb	r3, [r7, #14]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d002      	beq.n	800b11c <USBD_StdEPReq+0x2d8>
 800b116:	7bbb      	ldrb	r3, [r7, #14]
 800b118:	2b80      	cmp	r3, #128	@ 0x80
 800b11a:	d103      	bne.n	800b124 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	2200      	movs	r2, #0
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	e00e      	b.n	800b142 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f003 fe6d 	bl	800ee08 <USBD_LL_IsStallEP>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d003      	beq.n	800b13c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2201      	movs	r2, #1
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	e002      	b.n	800b142 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2202      	movs	r2, #2
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 fbdd 	bl	800b908 <USBD_CtlSendData>
              break;
 800b14e:	e004      	b.n	800b15a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fb5b 	bl	800b80e <USBD_CtlError>
              break;
 800b158:	bf00      	nop
          }
          break;
 800b15a:	e004      	b.n	800b166 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fb55 	bl	800b80e <USBD_CtlError>
          break;
 800b164:	bf00      	nop
      }
      break;
 800b166:	e005      	b.n	800b174 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fb4f 	bl	800b80e <USBD_CtlError>
      break;
 800b170:	e000      	b.n	800b174 <USBD_StdEPReq+0x330>
      break;
 800b172:	bf00      	nop
  }

  return ret;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b18e:	2300      	movs	r3, #0
 800b190:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b192:	2300      	movs	r3, #0
 800b194:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	885b      	ldrh	r3, [r3, #2]
 800b19a:	0a1b      	lsrs	r3, r3, #8
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	2b06      	cmp	r3, #6
 800b1a2:	f200 8128 	bhi.w	800b3f6 <USBD_GetDescriptor+0x276>
 800b1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1ac <USBD_GetDescriptor+0x2c>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1c9 	.word	0x0800b1c9
 800b1b0:	0800b1e1 	.word	0x0800b1e1
 800b1b4:	0800b221 	.word	0x0800b221
 800b1b8:	0800b3f7 	.word	0x0800b3f7
 800b1bc:	0800b3f7 	.word	0x0800b3f7
 800b1c0:	0800b397 	.word	0x0800b397
 800b1c4:	0800b3c3 	.word	0x0800b3c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	7c12      	ldrb	r2, [r2, #16]
 800b1d4:	f107 0108 	add.w	r1, r7, #8
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	60f8      	str	r0, [r7, #12]
      break;
 800b1de:	e112      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7c1b      	ldrb	r3, [r3, #16]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10d      	bne.n	800b204 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f0:	f107 0208 	add.w	r2, r7, #8
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
 800b1f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	2202      	movs	r2, #2
 800b200:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b202:	e100      	b.n	800b406 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20c:	f107 0208 	add.w	r2, r7, #8
 800b210:	4610      	mov	r0, r2
 800b212:	4798      	blx	r3
 800b214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	3301      	adds	r3, #1
 800b21a:	2202      	movs	r2, #2
 800b21c:	701a      	strb	r2, [r3, #0]
      break;
 800b21e:	e0f2      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	885b      	ldrh	r3, [r3, #2]
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b05      	cmp	r3, #5
 800b228:	f200 80ac 	bhi.w	800b384 <USBD_GetDescriptor+0x204>
 800b22c:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <USBD_GetDescriptor+0xb4>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b24d 	.word	0x0800b24d
 800b238:	0800b281 	.word	0x0800b281
 800b23c:	0800b2b5 	.word	0x0800b2b5
 800b240:	0800b2e9 	.word	0x0800b2e9
 800b244:	0800b31d 	.word	0x0800b31d
 800b248:	0800b351 	.word	0x0800b351
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00b      	beq.n	800b270 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	7c12      	ldrb	r2, [r2, #16]
 800b264:	f107 0108 	add.w	r1, r7, #8
 800b268:	4610      	mov	r0, r2
 800b26a:	4798      	blx	r3
 800b26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b26e:	e091      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 facb 	bl	800b80e <USBD_CtlError>
            err++;
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	3301      	adds	r3, #1
 800b27c:	72fb      	strb	r3, [r7, #11]
          break;
 800b27e:	e089      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d00b      	beq.n	800b2a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	7c12      	ldrb	r2, [r2, #16]
 800b298:	f107 0108 	add.w	r1, r7, #8
 800b29c:	4610      	mov	r0, r2
 800b29e:	4798      	blx	r3
 800b2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2a2:	e077      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2a4:	6839      	ldr	r1, [r7, #0]
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 fab1 	bl	800b80e <USBD_CtlError>
            err++;
 800b2ac:	7afb      	ldrb	r3, [r7, #11]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2b2:	e06f      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00b      	beq.n	800b2d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2c6:	68db      	ldr	r3, [r3, #12]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	7c12      	ldrb	r2, [r2, #16]
 800b2cc:	f107 0108 	add.w	r1, r7, #8
 800b2d0:	4610      	mov	r0, r2
 800b2d2:	4798      	blx	r3
 800b2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2d6:	e05d      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 fa97 	bl	800b80e <USBD_CtlError>
            err++;
 800b2e0:	7afb      	ldrb	r3, [r7, #11]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800b2e6:	e055      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7c12      	ldrb	r2, [r2, #16]
 800b300:	f107 0108 	add.w	r1, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b30a:	e043      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa7d 	bl	800b80e <USBD_CtlError>
            err++;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3301      	adds	r3, #1
 800b318:	72fb      	strb	r3, [r7, #11]
          break;
 800b31a:	e03b      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b32e:	695b      	ldr	r3, [r3, #20]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	7c12      	ldrb	r2, [r2, #16]
 800b334:	f107 0108 	add.w	r1, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33e:	e029      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fa63 	bl	800b80e <USBD_CtlError>
            err++;
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	3301      	adds	r3, #1
 800b34c:	72fb      	strb	r3, [r7, #11]
          break;
 800b34e:	e021      	b.n	800b394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b356:	699b      	ldr	r3, [r3, #24]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b372:	e00f      	b.n	800b394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa49 	bl	800b80e <USBD_CtlError>
            err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
          break;
 800b382:	e007      	b.n	800b394 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa41 	bl	800b80e <USBD_CtlError>
          err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b392:	bf00      	nop
      }
      break;
 800b394:	e037      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	7c1b      	ldrb	r3, [r3, #16]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d109      	bne.n	800b3b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3a6:	f107 0208 	add.w	r2, r7, #8
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	4798      	blx	r3
 800b3ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3b0:	e029      	b.n	800b406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 fa2a 	bl	800b80e <USBD_CtlError>
        err++;
 800b3ba:	7afb      	ldrb	r3, [r7, #11]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	72fb      	strb	r3, [r7, #11]
      break;
 800b3c0:	e021      	b.n	800b406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	7c1b      	ldrb	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d10d      	bne.n	800b3e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d2:	f107 0208 	add.w	r2, r7, #8
 800b3d6:	4610      	mov	r0, r2
 800b3d8:	4798      	blx	r3
 800b3da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3e4:	e00f      	b.n	800b406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fa10 	bl	800b80e <USBD_CtlError>
        err++;
 800b3ee:	7afb      	ldrb	r3, [r7, #11]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b3f4:	e007      	b.n	800b406 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fa08 	bl	800b80e <USBD_CtlError>
      err++;
 800b3fe:	7afb      	ldrb	r3, [r7, #11]
 800b400:	3301      	adds	r3, #1
 800b402:	72fb      	strb	r3, [r7, #11]
      break;
 800b404:	bf00      	nop
  }

  if (err != 0U)
 800b406:	7afb      	ldrb	r3, [r7, #11]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d11e      	bne.n	800b44a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	88db      	ldrh	r3, [r3, #6]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d016      	beq.n	800b442 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b414:	893b      	ldrh	r3, [r7, #8]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00e      	beq.n	800b438 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	88da      	ldrh	r2, [r3, #6]
 800b41e:	893b      	ldrh	r3, [r7, #8]
 800b420:	4293      	cmp	r3, r2
 800b422:	bf28      	it	cs
 800b424:	4613      	movcs	r3, r2
 800b426:	b29b      	uxth	r3, r3
 800b428:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b42a:	893b      	ldrh	r3, [r7, #8]
 800b42c:	461a      	mov	r2, r3
 800b42e:	68f9      	ldr	r1, [r7, #12]
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa69 	bl	800b908 <USBD_CtlSendData>
 800b436:	e009      	b.n	800b44c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f000 f9e7 	bl	800b80e <USBD_CtlError>
 800b440:	e004      	b.n	800b44c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 faba 	bl	800b9bc <USBD_CtlSendStatus>
 800b448:	e000      	b.n	800b44c <USBD_GetDescriptor+0x2cc>
    return;
 800b44a:	bf00      	nop
  }
}
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop

0800b454 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	889b      	ldrh	r3, [r3, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d131      	bne.n	800b4ca <USBD_SetAddress+0x76>
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	88db      	ldrh	r3, [r3, #6]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d12d      	bne.n	800b4ca <USBD_SetAddress+0x76>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	885b      	ldrh	r3, [r3, #2]
 800b472:	2b7f      	cmp	r3, #127	@ 0x7f
 800b474:	d829      	bhi.n	800b4ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	885b      	ldrh	r3, [r3, #2]
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d104      	bne.n	800b498 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b48e:	6839      	ldr	r1, [r7, #0]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f9bc 	bl	800b80e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b496:	e01d      	b.n	800b4d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	7bfa      	ldrb	r2, [r7, #15]
 800b49c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f003 fcdb 	bl	800ee60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fa86 	bl	800b9bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b4b0:	7bfb      	ldrb	r3, [r7, #15]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d004      	beq.n	800b4c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4be:	e009      	b.n	800b4d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4c8:	e004      	b.n	800b4d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4ca:	6839      	ldr	r1, [r7, #0]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f99e 	bl	800b80e <USBD_CtlError>
  }
}
 800b4d2:	bf00      	nop
 800b4d4:	bf00      	nop
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	4b4e      	ldr	r3, [pc, #312]	@ (800b62c <USBD_SetConfig+0x150>)
 800b4f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4f4:	4b4d      	ldr	r3, [pc, #308]	@ (800b62c <USBD_SetConfig+0x150>)
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d905      	bls.n	800b508 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f985 	bl	800b80e <USBD_CtlError>
    return USBD_FAIL;
 800b504:	2303      	movs	r3, #3
 800b506:	e08c      	b.n	800b622 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d002      	beq.n	800b51a <USBD_SetConfig+0x3e>
 800b514:	2b03      	cmp	r3, #3
 800b516:	d029      	beq.n	800b56c <USBD_SetConfig+0x90>
 800b518:	e075      	b.n	800b606 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b51a:	4b44      	ldr	r3, [pc, #272]	@ (800b62c <USBD_SetConfig+0x150>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d020      	beq.n	800b564 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b522:	4b42      	ldr	r3, [pc, #264]	@ (800b62c <USBD_SetConfig+0x150>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b52c:	4b3f      	ldr	r3, [pc, #252]	@ (800b62c <USBD_SetConfig+0x150>)
 800b52e:	781b      	ldrb	r3, [r3, #0]
 800b530:	4619      	mov	r1, r3
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fe ffe3 	bl	800a4fe <USBD_SetClassConfig>
 800b538:	4603      	mov	r3, r0
 800b53a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d008      	beq.n	800b554 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 f962 	bl	800b80e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2202      	movs	r2, #2
 800b54e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b552:	e065      	b.n	800b620 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fa31 	bl	800b9bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2203      	movs	r2, #3
 800b55e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b562:	e05d      	b.n	800b620 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fa29 	bl	800b9bc <USBD_CtlSendStatus>
      break;
 800b56a:	e059      	b.n	800b620 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b56c:	4b2f      	ldr	r3, [pc, #188]	@ (800b62c <USBD_SetConfig+0x150>)
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d112      	bne.n	800b59a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b57c:	4b2b      	ldr	r3, [pc, #172]	@ (800b62c <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b586:	4b29      	ldr	r3, [pc, #164]	@ (800b62c <USBD_SetConfig+0x150>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	4619      	mov	r1, r3
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7fe ffd2 	bl	800a536 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 fa12 	bl	800b9bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b598:	e042      	b.n	800b620 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b59a:	4b24      	ldr	r3, [pc, #144]	@ (800b62c <USBD_SetConfig+0x150>)
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d02a      	beq.n	800b5fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7fe ffc0 	bl	800a536 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b5b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b62c <USBD_SetConfig+0x150>)
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b62c <USBD_SetConfig+0x150>)
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7fe ff99 	bl	800a4fe <USBD_SetClassConfig>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5d0:	7bfb      	ldrb	r3, [r7, #15]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d00f      	beq.n	800b5f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f918 	bl	800b80e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f7fe ffa5 	bl	800a536 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2202      	movs	r2, #2
 800b5f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5f4:	e014      	b.n	800b620 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 f9e0 	bl	800b9bc <USBD_CtlSendStatus>
      break;
 800b5fc:	e010      	b.n	800b620 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f9dc 	bl	800b9bc <USBD_CtlSendStatus>
      break;
 800b604:	e00c      	b.n	800b620 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f900 	bl	800b80e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b60e:	4b07      	ldr	r3, [pc, #28]	@ (800b62c <USBD_SetConfig+0x150>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7fe ff8e 	bl	800a536 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b61a:	2303      	movs	r3, #3
 800b61c:	73fb      	strb	r3, [r7, #15]
      break;
 800b61e:	bf00      	nop
  }

  return ret;
 800b620:	7bfb      	ldrb	r3, [r7, #15]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000630 	.word	0x20000630

0800b630 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	88db      	ldrh	r3, [r3, #6]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d004      	beq.n	800b64c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f000 f8e2 	bl	800b80e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b64a:	e023      	b.n	800b694 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b652:	b2db      	uxtb	r3, r3
 800b654:	2b02      	cmp	r3, #2
 800b656:	dc02      	bgt.n	800b65e <USBD_GetConfig+0x2e>
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dc03      	bgt.n	800b664 <USBD_GetConfig+0x34>
 800b65c:	e015      	b.n	800b68a <USBD_GetConfig+0x5a>
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d00b      	beq.n	800b67a <USBD_GetConfig+0x4a>
 800b662:	e012      	b.n	800b68a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3308      	adds	r3, #8
 800b66e:	2201      	movs	r2, #1
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f948 	bl	800b908 <USBD_CtlSendData>
        break;
 800b678:	e00c      	b.n	800b694 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	3304      	adds	r3, #4
 800b67e:	2201      	movs	r2, #1
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f940 	bl	800b908 <USBD_CtlSendData>
        break;
 800b688:	e004      	b.n	800b694 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b68a:	6839      	ldr	r1, [r7, #0]
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 f8be 	bl	800b80e <USBD_CtlError>
        break;
 800b692:	bf00      	nop
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d81e      	bhi.n	800b6f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	88db      	ldrh	r3, [r3, #6]
 800b6b8:	2b02      	cmp	r3, #2
 800b6ba:	d004      	beq.n	800b6c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b6bc:	6839      	ldr	r1, [r7, #0]
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f8a5 	bl	800b80e <USBD_CtlError>
        break;
 800b6c4:	e01a      	b.n	800b6fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d005      	beq.n	800b6e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f043 0202 	orr.w	r2, r3, #2
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	330c      	adds	r3, #12
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f90c 	bl	800b908 <USBD_CtlSendData>
      break;
 800b6f0:	e004      	b.n	800b6fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b6f2:	6839      	ldr	r1, [r7, #0]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f88a 	bl	800b80e <USBD_CtlError>
      break;
 800b6fa:	bf00      	nop
  }
}
 800b6fc:	bf00      	nop
 800b6fe:	3708      	adds	r7, #8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	885b      	ldrh	r3, [r3, #2]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d107      	bne.n	800b726 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f94c 	bl	800b9bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b724:	e013      	b.n	800b74e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	885b      	ldrh	r3, [r3, #2]
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d10b      	bne.n	800b746 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	889b      	ldrh	r3, [r3, #4]
 800b732:	0a1b      	lsrs	r3, r3, #8
 800b734:	b29b      	uxth	r3, r3
 800b736:	b2da      	uxtb	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 f93c 	bl	800b9bc <USBD_CtlSendStatus>
}
 800b744:	e003      	b.n	800b74e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f000 f860 	bl	800b80e <USBD_CtlError>
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b766:	b2db      	uxtb	r3, r3
 800b768:	3b01      	subs	r3, #1
 800b76a:	2b02      	cmp	r3, #2
 800b76c:	d80b      	bhi.n	800b786 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	885b      	ldrh	r3, [r3, #2]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d10c      	bne.n	800b790 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2200      	movs	r2, #0
 800b77a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f91c 	bl	800b9bc <USBD_CtlSendStatus>
      }
      break;
 800b784:	e004      	b.n	800b790 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f840 	bl	800b80e <USBD_CtlError>
      break;
 800b78e:	e000      	b.n	800b792 <USBD_ClrFeature+0x3c>
      break;
 800b790:	bf00      	nop
  }
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	781a      	ldrb	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7ff fa40 	bl	800ac4a <SWAPBYTE>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f7ff fa33 	bl	800ac4a <SWAPBYTE>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7ff fa26 	bl	800ac4a <SWAPBYTE>
 800b7fe:	4603      	mov	r3, r0
 800b800:	461a      	mov	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	80da      	strh	r2, [r3, #6]
}
 800b806:	bf00      	nop
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}

0800b80e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b80e:	b580      	push	{r7, lr}
 800b810:	b082      	sub	sp, #8
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
 800b816:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b818:	2180      	movs	r1, #128	@ 0x80
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f003 fab6 	bl	800ed8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b820:	2100      	movs	r1, #0
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f003 fab2 	bl	800ed8c <USBD_LL_StallEP>
}
 800b828:	bf00      	nop
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b086      	sub	sp, #24
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b83c:	2300      	movs	r3, #0
 800b83e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d042      	beq.n	800b8cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b84a:	6938      	ldr	r0, [r7, #16]
 800b84c:	f000 f842 	bl	800b8d4 <USBD_GetLen>
 800b850:	4603      	mov	r3, r0
 800b852:	3301      	adds	r3, #1
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b85a:	d808      	bhi.n	800b86e <USBD_GetString+0x3e>
 800b85c:	6938      	ldr	r0, [r7, #16]
 800b85e:	f000 f839 	bl	800b8d4 <USBD_GetLen>
 800b862:	4603      	mov	r3, r0
 800b864:	3301      	adds	r3, #1
 800b866:	b29b      	uxth	r3, r3
 800b868:	005b      	lsls	r3, r3, #1
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	e001      	b.n	800b872 <USBD_GetString+0x42>
 800b86e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b876:	7dfb      	ldrb	r3, [r7, #23]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	4413      	add	r3, r2
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7812      	ldrb	r2, [r2, #0]
 800b880:	701a      	strb	r2, [r3, #0]
  idx++;
 800b882:	7dfb      	ldrb	r3, [r7, #23]
 800b884:	3301      	adds	r3, #1
 800b886:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b888:	7dfb      	ldrb	r3, [r7, #23]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4413      	add	r3, r2
 800b88e:	2203      	movs	r2, #3
 800b890:	701a      	strb	r2, [r3, #0]
  idx++;
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	3301      	adds	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b898:	e013      	b.n	800b8c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	4413      	add	r3, r2
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	7812      	ldrb	r2, [r2, #0]
 800b8a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	613b      	str	r3, [r7, #16]
    idx++;
 800b8ac:	7dfb      	ldrb	r3, [r7, #23]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b8b2:	7dfb      	ldrb	r3, [r7, #23]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800b8bc:	7dfb      	ldrb	r3, [r7, #23]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1e7      	bne.n	800b89a <USBD_GetString+0x6a>
 800b8ca:	e000      	b.n	800b8ce <USBD_GetString+0x9e>
    return;
 800b8cc:	bf00      	nop
  }
}
 800b8ce:	3718      	adds	r7, #24
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b8e4:	e005      	b.n	800b8f2 <USBD_GetLen+0x1e>
  {
    len++;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1f5      	bne.n	800b8e6 <USBD_GetLen+0x12>
  }

  return len;
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3714      	adds	r7, #20
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2202      	movs	r2, #2
 800b918:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	2100      	movs	r1, #0
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f003 fab5 	bl	800ee9e <USBD_LL_Transmit>

  return USBD_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	60f8      	str	r0, [r7, #12]
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	2100      	movs	r1, #0
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f003 faa4 	bl	800ee9e <USBD_LL_Transmit>

  return USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3710      	adds	r7, #16
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	2203      	movs	r2, #3
 800b970:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	2100      	movs	r1, #0
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f003 faa8 	bl	800eee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b084      	sub	sp, #16
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	60f8      	str	r0, [r7, #12]
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	2100      	movs	r1, #0
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f003 fa97 	bl	800eee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2204      	movs	r2, #4
 800b9c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f003 fa63 	bl	800ee9e <USBD_LL_Transmit>

  return USBD_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3708      	adds	r7, #8
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f003 fa71 	bl	800eee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <__NVIC_SetPriority>:
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	6039      	str	r1, [r7, #0]
 800ba12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ba14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	db0a      	blt.n	800ba32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	490c      	ldr	r1, [pc, #48]	@ (800ba54 <__NVIC_SetPriority+0x4c>)
 800ba22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba26:	0112      	lsls	r2, r2, #4
 800ba28:	b2d2      	uxtb	r2, r2
 800ba2a:	440b      	add	r3, r1
 800ba2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ba30:	e00a      	b.n	800ba48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	b2da      	uxtb	r2, r3
 800ba36:	4908      	ldr	r1, [pc, #32]	@ (800ba58 <__NVIC_SetPriority+0x50>)
 800ba38:	79fb      	ldrb	r3, [r7, #7]
 800ba3a:	f003 030f 	and.w	r3, r3, #15
 800ba3e:	3b04      	subs	r3, #4
 800ba40:	0112      	lsls	r2, r2, #4
 800ba42:	b2d2      	uxtb	r2, r2
 800ba44:	440b      	add	r3, r1
 800ba46:	761a      	strb	r2, [r3, #24]
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr
 800ba54:	e000e100 	.word	0xe000e100
 800ba58:	e000ed00 	.word	0xe000ed00

0800ba5c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba60:	4b05      	ldr	r3, [pc, #20]	@ (800ba78 <SysTick_Handler+0x1c>)
 800ba62:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba64:	f001 fd18 	bl	800d498 <xTaskGetSchedulerState>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d001      	beq.n	800ba72 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba6e:	f002 fb13 	bl	800e098 <xPortSysTickHandler>
  }
}
 800ba72:	bf00      	nop
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	e000e010 	.word	0xe000e010

0800ba7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ba80:	2100      	movs	r1, #0
 800ba82:	f06f 0004 	mvn.w	r0, #4
 800ba86:	f7ff ffbf 	bl	800ba08 <__NVIC_SetPriority>
#endif
}
 800ba8a:	bf00      	nop
 800ba8c:	bd80      	pop	{r7, pc}
	...

0800ba90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba90:	b480      	push	{r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba96:	f3ef 8305 	mrs	r3, IPSR
 800ba9a:	603b      	str	r3, [r7, #0]
  return(result);
 800ba9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d003      	beq.n	800baaa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800baa2:	f06f 0305 	mvn.w	r3, #5
 800baa6:	607b      	str	r3, [r7, #4]
 800baa8:	e00c      	b.n	800bac4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800baaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bad4 <osKernelInitialize+0x44>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d105      	bne.n	800babe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bab2:	4b08      	ldr	r3, [pc, #32]	@ (800bad4 <osKernelInitialize+0x44>)
 800bab4:	2201      	movs	r2, #1
 800bab6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bab8:	2300      	movs	r3, #0
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	e002      	b.n	800bac4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800babe:	f04f 33ff 	mov.w	r3, #4294967295
 800bac2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bac4:	687b      	ldr	r3, [r7, #4]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20000634 	.word	0x20000634

0800bad8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bade:	f3ef 8305 	mrs	r3, IPSR
 800bae2:	603b      	str	r3, [r7, #0]
  return(result);
 800bae4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800baea:	f06f 0305 	mvn.w	r3, #5
 800baee:	607b      	str	r3, [r7, #4]
 800baf0:	e010      	b.n	800bb14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800baf2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb20 <osKernelStart+0x48>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d109      	bne.n	800bb0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bafa:	f7ff ffbf 	bl	800ba7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bafe:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <osKernelStart+0x48>)
 800bb00:	2202      	movs	r2, #2
 800bb02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bb04:	f001 f87a 	bl	800cbfc <vTaskStartScheduler>
      stat = osOK;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	607b      	str	r3, [r7, #4]
 800bb0c:	e002      	b.n	800bb14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bb0e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bb14:	687b      	ldr	r3, [r7, #4]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	20000634 	.word	0x20000634

0800bb24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b08e      	sub	sp, #56	@ 0x38
 800bb28:	af04      	add	r7, sp, #16
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bb30:	2300      	movs	r3, #0
 800bb32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb34:	f3ef 8305 	mrs	r3, IPSR
 800bb38:	617b      	str	r3, [r7, #20]
  return(result);
 800bb3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d17e      	bne.n	800bc3e <osThreadNew+0x11a>
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d07b      	beq.n	800bc3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb46:	2380      	movs	r3, #128	@ 0x80
 800bb48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb4a:	2318      	movs	r3, #24
 800bb4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bb52:	f04f 33ff 	mov.w	r3, #4294967295
 800bb56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d045      	beq.n	800bbea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d002      	beq.n	800bb6c <osThreadNew+0x48>
        name = attr->name;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	699b      	ldr	r3, [r3, #24]
 800bb78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d008      	beq.n	800bb92 <osThreadNew+0x6e>
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	2b38      	cmp	r3, #56	@ 0x38
 800bb84:	d805      	bhi.n	800bb92 <osThreadNew+0x6e>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	f003 0301 	and.w	r3, r3, #1
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <osThreadNew+0x72>
        return (NULL);
 800bb92:	2300      	movs	r3, #0
 800bb94:	e054      	b.n	800bc40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	089b      	lsrs	r3, r3, #2
 800bba4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	689b      	ldr	r3, [r3, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00e      	beq.n	800bbcc <osThreadNew+0xa8>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	2b5b      	cmp	r3, #91	@ 0x5b
 800bbb4:	d90a      	bls.n	800bbcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d006      	beq.n	800bbcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <osThreadNew+0xa8>
        mem = 1;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	61bb      	str	r3, [r7, #24]
 800bbca:	e010      	b.n	800bbee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10c      	bne.n	800bbee <osThreadNew+0xca>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d108      	bne.n	800bbee <osThreadNew+0xca>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d104      	bne.n	800bbee <osThreadNew+0xca>
          mem = 0;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	61bb      	str	r3, [r7, #24]
 800bbe8:	e001      	b.n	800bbee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bbea:	2300      	movs	r3, #0
 800bbec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d110      	bne.n	800bc16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbfc:	9202      	str	r2, [sp, #8]
 800bbfe:	9301      	str	r3, [sp, #4]
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	6a3a      	ldr	r2, [r7, #32]
 800bc08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f000 fe1a 	bl	800c844 <xTaskCreateStatic>
 800bc10:	4603      	mov	r3, r0
 800bc12:	613b      	str	r3, [r7, #16]
 800bc14:	e013      	b.n	800bc3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d110      	bne.n	800bc3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bc1c:	6a3b      	ldr	r3, [r7, #32]
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	f107 0310 	add.w	r3, r7, #16
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 fe68 	bl	800c904 <xTaskCreate>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b01      	cmp	r3, #1
 800bc38:	d001      	beq.n	800bc3e <osThreadNew+0x11a>
            hTask = NULL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc3e:	693b      	ldr	r3, [r7, #16]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3728      	adds	r7, #40	@ 0x28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc50:	f3ef 8305 	mrs	r3, IPSR
 800bc54:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <osDelay+0x1c>
    stat = osErrorISR;
 800bc5c:	f06f 0305 	mvn.w	r3, #5
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	e007      	b.n	800bc74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 ff8e 	bl	800cb90 <vTaskDelay>
    }
  }

  return (stat);
 800bc74:	68fb      	ldr	r3, [r7, #12]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4a07      	ldr	r2, [pc, #28]	@ (800bcac <vApplicationGetIdleTaskMemory+0x2c>)
 800bc90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	4a06      	ldr	r2, [pc, #24]	@ (800bcb0 <vApplicationGetIdleTaskMemory+0x30>)
 800bc96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2280      	movs	r2, #128	@ 0x80
 800bc9c:	601a      	str	r2, [r3, #0]
}
 800bc9e:	bf00      	nop
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	20000638 	.word	0x20000638
 800bcb0:	20000694 	.word	0x20000694

0800bcb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	4a07      	ldr	r2, [pc, #28]	@ (800bce0 <vApplicationGetTimerTaskMemory+0x2c>)
 800bcc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	4a06      	ldr	r2, [pc, #24]	@ (800bce4 <vApplicationGetTimerTaskMemory+0x30>)
 800bcca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bcd2:	601a      	str	r2, [r3, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr
 800bce0:	20000894 	.word	0x20000894
 800bce4:	200008f0 	.word	0x200008f0

0800bce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f103 0208 	add.w	r2, r3, #8
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f103 0208 	add.w	r2, r3, #8
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f103 0208 	add.w	r2, r3, #8
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2200      	movs	r2, #0
 800bd34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd36:	bf00      	nop
 800bd38:	370c      	adds	r7, #12
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	6078      	str	r0, [r7, #4]
 800bd4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	689a      	ldr	r2, [r3, #8]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	683a      	ldr	r2, [r7, #0]
 800bd6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	1c5a      	adds	r2, r3, #1
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	601a      	str	r2, [r3, #0]
}
 800bd7e:	bf00      	nop
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b085      	sub	sp, #20
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bda0:	d103      	bne.n	800bdaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	e00c      	b.n	800bdc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	3308      	adds	r3, #8
 800bdae:	60fb      	str	r3, [r7, #12]
 800bdb0:	e002      	b.n	800bdb8 <vListInsert+0x2e>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	60fb      	str	r3, [r7, #12]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	68ba      	ldr	r2, [r7, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d2f6      	bcs.n	800bdb2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	683a      	ldr	r2, [r7, #0]
 800bdd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	683a      	ldr	r2, [r7, #0]
 800bdde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	1c5a      	adds	r2, r3, #1
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	601a      	str	r2, [r3, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	6892      	ldr	r2, [r2, #8]
 800be12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	6852      	ldr	r2, [r2, #4]
 800be1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	685b      	ldr	r3, [r3, #4]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	429a      	cmp	r2, r3
 800be26:	d103      	bne.n	800be30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	1e5a      	subs	r2, r3, #1
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d10b      	bne.n	800be7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800be76:	bf00      	nop
 800be78:	bf00      	nop
 800be7a:	e7fd      	b.n	800be78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800be7c:	f002 f87c 	bl	800df78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be88:	68f9      	ldr	r1, [r7, #12]
 800be8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800be8c:	fb01 f303 	mul.w	r3, r1, r3
 800be90:	441a      	add	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2200      	movs	r2, #0
 800be9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800beac:	3b01      	subs	r3, #1
 800beae:	68f9      	ldr	r1, [r7, #12]
 800beb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800beb2:	fb01 f303 	mul.w	r3, r1, r3
 800beb6:	441a      	add	r2, r3
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	22ff      	movs	r2, #255	@ 0xff
 800bec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	22ff      	movs	r2, #255	@ 0xff
 800bec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d114      	bne.n	800befc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d01a      	beq.n	800bf10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	3310      	adds	r3, #16
 800bede:	4618      	mov	r0, r3
 800bee0:	f001 f91a 	bl	800d118 <xTaskRemoveFromEventList>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d012      	beq.n	800bf10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800beea:	4b0d      	ldr	r3, [pc, #52]	@ (800bf20 <xQueueGenericReset+0xd0>)
 800beec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bef0:	601a      	str	r2, [r3, #0]
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	e009      	b.n	800bf10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	3310      	adds	r3, #16
 800bf00:	4618      	mov	r0, r3
 800bf02:	f7ff fef1 	bl	800bce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	3324      	adds	r3, #36	@ 0x24
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f7ff feec 	bl	800bce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bf10:	f002 f864 	bl	800dfdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bf14:	2301      	movs	r3, #1
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08e      	sub	sp, #56	@ 0x38
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10b      	bne.n	800bf50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bf4a:	bf00      	nop
 800bf4c:	bf00      	nop
 800bf4e:	e7fd      	b.n	800bf4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10b      	bne.n	800bf6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5a:	f383 8811 	msr	BASEPRI, r3
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f3bf 8f4f 	dsb	sy
 800bf66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bf68:	bf00      	nop
 800bf6a:	bf00      	nop
 800bf6c:	e7fd      	b.n	800bf6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d002      	beq.n	800bf7a <xQueueGenericCreateStatic+0x56>
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <xQueueGenericCreateStatic+0x5a>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e000      	b.n	800bf80 <xQueueGenericCreateStatic+0x5c>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10b      	bne.n	800bf9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	623b      	str	r3, [r7, #32]
}
 800bf96:	bf00      	nop
 800bf98:	bf00      	nop
 800bf9a:	e7fd      	b.n	800bf98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <xQueueGenericCreateStatic+0x84>
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <xQueueGenericCreateStatic+0x88>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <xQueueGenericCreateStatic+0x8a>
 800bfac:	2300      	movs	r3, #0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d10b      	bne.n	800bfca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb6:	f383 8811 	msr	BASEPRI, r3
 800bfba:	f3bf 8f6f 	isb	sy
 800bfbe:	f3bf 8f4f 	dsb	sy
 800bfc2:	61fb      	str	r3, [r7, #28]
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	e7fd      	b.n	800bfc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bfca:	2350      	movs	r3, #80	@ 0x50
 800bfcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	2b50      	cmp	r3, #80	@ 0x50
 800bfd2:	d00b      	beq.n	800bfec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	61bb      	str	r3, [r7, #24]
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	e7fd      	b.n	800bfe8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00d      	beq.n	800c014 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c000:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c006:	9300      	str	r3, [sp, #0]
 800c008:	4613      	mov	r3, r2
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	68b9      	ldr	r1, [r7, #8]
 800c00e:	68f8      	ldr	r0, [r7, #12]
 800c010:	f000 f805 	bl	800c01e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c016:	4618      	mov	r0, r3
 800c018:	3730      	adds	r7, #48	@ 0x30
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
 800c02a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	e002      	b.n	800c040 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	687a      	ldr	r2, [r7, #4]
 800c03e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c046:	69bb      	ldr	r3, [r7, #24]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c04c:	2101      	movs	r1, #1
 800c04e:	69b8      	ldr	r0, [r7, #24]
 800c050:	f7ff fefe 	bl	800be50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	78fa      	ldrb	r2, [r7, #3]
 800c058:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08e      	sub	sp, #56	@ 0x38
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c072:	2300      	movs	r3, #0
 800c074:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d10b      	bne.n	800c098 <xQueueGenericSend+0x34>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c092:	bf00      	nop
 800c094:	bf00      	nop
 800c096:	e7fd      	b.n	800c094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d103      	bne.n	800c0a6 <xQueueGenericSend+0x42>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <xQueueGenericSend+0x46>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e000      	b.n	800c0ac <xQueueGenericSend+0x48>
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <xQueueGenericSend+0x64>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c0c2:	bf00      	nop
 800c0c4:	bf00      	nop
 800c0c6:	e7fd      	b.n	800c0c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b02      	cmp	r3, #2
 800c0cc:	d103      	bne.n	800c0d6 <xQueueGenericSend+0x72>
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d101      	bne.n	800c0da <xQueueGenericSend+0x76>
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e000      	b.n	800c0dc <xQueueGenericSend+0x78>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10b      	bne.n	800c0f8 <xQueueGenericSend+0x94>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	623b      	str	r3, [r7, #32]
}
 800c0f2:	bf00      	nop
 800c0f4:	bf00      	nop
 800c0f6:	e7fd      	b.n	800c0f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0f8:	f001 f9ce 	bl	800d498 <xTaskGetSchedulerState>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d102      	bne.n	800c108 <xQueueGenericSend+0xa4>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <xQueueGenericSend+0xa8>
 800c108:	2301      	movs	r3, #1
 800c10a:	e000      	b.n	800c10e <xQueueGenericSend+0xaa>
 800c10c:	2300      	movs	r3, #0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <xQueueGenericSend+0xc6>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	61fb      	str	r3, [r7, #28]
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c12a:	f001 ff25 	bl	800df78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c136:	429a      	cmp	r2, r3
 800c138:	d302      	bcc.n	800c140 <xQueueGenericSend+0xdc>
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d129      	bne.n	800c194 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	68b9      	ldr	r1, [r7, #8]
 800c144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c146:	f000 fa0f 	bl	800c568 <prvCopyDataToQueue>
 800c14a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c14e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c150:	2b00      	cmp	r3, #0
 800c152:	d010      	beq.n	800c176 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c156:	3324      	adds	r3, #36	@ 0x24
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 ffdd 	bl	800d118 <xTaskRemoveFromEventList>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d013      	beq.n	800c18c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c164:	4b3f      	ldr	r3, [pc, #252]	@ (800c264 <xQueueGenericSend+0x200>)
 800c166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c16a:	601a      	str	r2, [r3, #0]
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	f3bf 8f6f 	isb	sy
 800c174:	e00a      	b.n	800c18c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d007      	beq.n	800c18c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c17c:	4b39      	ldr	r3, [pc, #228]	@ (800c264 <xQueueGenericSend+0x200>)
 800c17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c182:	601a      	str	r2, [r3, #0]
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c18c:	f001 ff26 	bl	800dfdc <vPortExitCritical>
				return pdPASS;
 800c190:	2301      	movs	r3, #1
 800c192:	e063      	b.n	800c25c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d103      	bne.n	800c1a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c19a:	f001 ff1f 	bl	800dfdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	e05c      	b.n	800c25c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d106      	bne.n	800c1b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1a8:	f107 0314 	add.w	r3, r7, #20
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f001 f817 	bl	800d1e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1b6:	f001 ff11 	bl	800dfdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1ba:	f000 fd87 	bl	800cccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1be:	f001 fedb 	bl	800df78 <vPortEnterCritical>
 800c1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c1c8:	b25b      	sxtb	r3, r3
 800c1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ce:	d103      	bne.n	800c1d8 <xQueueGenericSend+0x174>
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c1de:	b25b      	sxtb	r3, r3
 800c1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e4:	d103      	bne.n	800c1ee <xQueueGenericSend+0x18a>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c1ee:	f001 fef5 	bl	800dfdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c1f2:	1d3a      	adds	r2, r7, #4
 800c1f4:	f107 0314 	add.w	r3, r7, #20
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f001 f806 	bl	800d20c <xTaskCheckForTimeOut>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d124      	bne.n	800c250 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c208:	f000 faa6 	bl	800c758 <prvIsQueueFull>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d018      	beq.n	800c244 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c214:	3310      	adds	r3, #16
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	4611      	mov	r1, r2
 800c21a:	4618      	mov	r0, r3
 800c21c:	f000 ff2a 	bl	800d074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c222:	f000 fa31 	bl	800c688 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c226:	f000 fd5f 	bl	800cce8 <xTaskResumeAll>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f47f af7c 	bne.w	800c12a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c232:	4b0c      	ldr	r3, [pc, #48]	@ (800c264 <xQueueGenericSend+0x200>)
 800c234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	f3bf 8f6f 	isb	sy
 800c242:	e772      	b.n	800c12a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c246:	f000 fa1f 	bl	800c688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c24a:	f000 fd4d 	bl	800cce8 <xTaskResumeAll>
 800c24e:	e76c      	b.n	800c12a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c252:	f000 fa19 	bl	800c688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c256:	f000 fd47 	bl	800cce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c25a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3738      	adds	r7, #56	@ 0x38
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	e000ed04 	.word	0xe000ed04

0800c268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b090      	sub	sp, #64	@ 0x40
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10b      	bne.n	800c298 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d103      	bne.n	800c2a6 <xQueueGenericSendFromISR+0x3e>
 800c29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <xQueueGenericSendFromISR+0x42>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e000      	b.n	800c2ac <xQueueGenericSendFromISR+0x44>
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d10b      	bne.n	800c2c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b4:	f383 8811 	msr	BASEPRI, r3
 800c2b8:	f3bf 8f6f 	isb	sy
 800c2bc:	f3bf 8f4f 	dsb	sy
 800c2c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c2c2:	bf00      	nop
 800c2c4:	bf00      	nop
 800c2c6:	e7fd      	b.n	800c2c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	2b02      	cmp	r3, #2
 800c2cc:	d103      	bne.n	800c2d6 <xQueueGenericSendFromISR+0x6e>
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2d2:	2b01      	cmp	r3, #1
 800c2d4:	d101      	bne.n	800c2da <xQueueGenericSendFromISR+0x72>
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e000      	b.n	800c2dc <xQueueGenericSendFromISR+0x74>
 800c2da:	2300      	movs	r3, #0
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10b      	bne.n	800c2f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	623b      	str	r3, [r7, #32]
}
 800c2f2:	bf00      	nop
 800c2f4:	bf00      	nop
 800c2f6:	e7fd      	b.n	800c2f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2f8:	f001 ff1e 	bl	800e138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c2fc:	f3ef 8211 	mrs	r2, BASEPRI
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	61fa      	str	r2, [r7, #28]
 800c312:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c314:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c316:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c320:	429a      	cmp	r2, r3
 800c322:	d302      	bcc.n	800c32a <xQueueGenericSendFromISR+0xc2>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b02      	cmp	r3, #2
 800c328:	d12f      	bne.n	800c38a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c32a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c32c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c338:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c340:	f000 f912 	bl	800c568 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c344:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34c:	d112      	bne.n	800c374 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c34e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c352:	2b00      	cmp	r3, #0
 800c354:	d016      	beq.n	800c384 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c358:	3324      	adds	r3, #36	@ 0x24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f000 fedc 	bl	800d118 <xTaskRemoveFromEventList>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00e      	beq.n	800c384 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2201      	movs	r2, #1
 800c370:	601a      	str	r2, [r3, #0]
 800c372:	e007      	b.n	800c384 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c374:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c378:	3301      	adds	r3, #1
 800c37a:	b2db      	uxtb	r3, r3
 800c37c:	b25a      	sxtb	r2, r3
 800c37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c384:	2301      	movs	r3, #1
 800c386:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c388:	e001      	b.n	800c38e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c390:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c39a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3740      	adds	r7, #64	@ 0x40
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08c      	sub	sp, #48	@ 0x30
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10b      	bne.n	800c3d6 <xQueueReceive+0x32>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	623b      	str	r3, [r7, #32]
}
 800c3d0:	bf00      	nop
 800c3d2:	bf00      	nop
 800c3d4:	e7fd      	b.n	800c3d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d103      	bne.n	800c3e4 <xQueueReceive+0x40>
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <xQueueReceive+0x44>
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e000      	b.n	800c3ea <xQueueReceive+0x46>
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10b      	bne.n	800c406 <xQueueReceive+0x62>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	61fb      	str	r3, [r7, #28]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c406:	f001 f847 	bl	800d498 <xTaskGetSchedulerState>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <xQueueReceive+0x72>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <xQueueReceive+0x76>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xQueueReceive+0x78>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10b      	bne.n	800c438 <xQueueReceive+0x94>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	61bb      	str	r3, [r7, #24]
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	e7fd      	b.n	800c434 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c438:	f001 fd9e 	bl	800df78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c43e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c440:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01f      	beq.n	800c488 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c448:	68b9      	ldr	r1, [r7, #8]
 800c44a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c44c:	f000 f8f6 	bl	800c63c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	1e5a      	subs	r2, r3, #1
 800c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c456:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c45a:	691b      	ldr	r3, [r3, #16]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00f      	beq.n	800c480 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c462:	3310      	adds	r3, #16
 800c464:	4618      	mov	r0, r3
 800c466:	f000 fe57 	bl	800d118 <xTaskRemoveFromEventList>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d007      	beq.n	800c480 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c470:	4b3c      	ldr	r3, [pc, #240]	@ (800c564 <xQueueReceive+0x1c0>)
 800c472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c480:	f001 fdac 	bl	800dfdc <vPortExitCritical>
				return pdPASS;
 800c484:	2301      	movs	r3, #1
 800c486:	e069      	b.n	800c55c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d103      	bne.n	800c496 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c48e:	f001 fda5 	bl	800dfdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c492:	2300      	movs	r3, #0
 800c494:	e062      	b.n	800c55c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d106      	bne.n	800c4aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c49c:	f107 0310 	add.w	r3, r7, #16
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f000 fe9d 	bl	800d1e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4aa:	f001 fd97 	bl	800dfdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4ae:	f000 fc0d 	bl	800cccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4b2:	f001 fd61 	bl	800df78 <vPortEnterCritical>
 800c4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c4bc:	b25b      	sxtb	r3, r3
 800c4be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4c2:	d103      	bne.n	800c4cc <xQueueReceive+0x128>
 800c4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4d2:	b25b      	sxtb	r3, r3
 800c4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d8:	d103      	bne.n	800c4e2 <xQueueReceive+0x13e>
 800c4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c4e2:	f001 fd7b 	bl	800dfdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4e6:	1d3a      	adds	r2, r7, #4
 800c4e8:	f107 0310 	add.w	r3, r7, #16
 800c4ec:	4611      	mov	r1, r2
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 fe8c 	bl	800d20c <xTaskCheckForTimeOut>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d123      	bne.n	800c542 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4fc:	f000 f916 	bl	800c72c <prvIsQueueEmpty>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d017      	beq.n	800c536 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c508:	3324      	adds	r3, #36	@ 0x24
 800c50a:	687a      	ldr	r2, [r7, #4]
 800c50c:	4611      	mov	r1, r2
 800c50e:	4618      	mov	r0, r3
 800c510:	f000 fdb0 	bl	800d074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c516:	f000 f8b7 	bl	800c688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c51a:	f000 fbe5 	bl	800cce8 <xTaskResumeAll>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d189      	bne.n	800c438 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c524:	4b0f      	ldr	r3, [pc, #60]	@ (800c564 <xQueueReceive+0x1c0>)
 800c526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c52a:	601a      	str	r2, [r3, #0]
 800c52c:	f3bf 8f4f 	dsb	sy
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	e780      	b.n	800c438 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c538:	f000 f8a6 	bl	800c688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c53c:	f000 fbd4 	bl	800cce8 <xTaskResumeAll>
 800c540:	e77a      	b.n	800c438 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c544:	f000 f8a0 	bl	800c688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c548:	f000 fbce 	bl	800cce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c54c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c54e:	f000 f8ed 	bl	800c72c <prvIsQueueEmpty>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	f43f af6f 	beq.w	800c438 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c55a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3730      	adds	r7, #48	@ 0x30
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	e000ed04 	.word	0xe000ed04

0800c568 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b086      	sub	sp, #24
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c574:	2300      	movs	r3, #0
 800c576:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c57c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10d      	bne.n	800c5a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d14d      	bne.n	800c62a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	4618      	mov	r0, r3
 800c594:	f000 ff9e 	bl	800d4d4 <xTaskPriorityDisinherit>
 800c598:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	609a      	str	r2, [r3, #8]
 800c5a0:	e043      	b.n	800c62a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d119      	bne.n	800c5dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6858      	ldr	r0, [r3, #4]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	68b9      	ldr	r1, [r7, #8]
 800c5b4:	f003 fb09 	bl	800fbca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5c0:	441a      	add	r2, r3
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	685a      	ldr	r2, [r3, #4]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d32b      	bcc.n	800c62a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	605a      	str	r2, [r3, #4]
 800c5da:	e026      	b.n	800c62a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	68d8      	ldr	r0, [r3, #12]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	68b9      	ldr	r1, [r7, #8]
 800c5e8:	f003 faef 	bl	800fbca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	68da      	ldr	r2, [r3, #12]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f4:	425b      	negs	r3, r3
 800c5f6:	441a      	add	r2, r3
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	68da      	ldr	r2, [r3, #12]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d207      	bcs.n	800c618 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c610:	425b      	negs	r3, r3
 800c612:	441a      	add	r2, r3
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	d105      	bne.n	800c62a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d002      	beq.n	800c62a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	3b01      	subs	r3, #1
 800c628:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1c5a      	adds	r2, r3, #1
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c632:	697b      	ldr	r3, [r7, #20]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3718      	adds	r7, #24
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d018      	beq.n	800c680 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68da      	ldr	r2, [r3, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c656:	441a      	add	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68da      	ldr	r2, [r3, #12]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	429a      	cmp	r2, r3
 800c666:	d303      	bcc.n	800c670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	68d9      	ldr	r1, [r3, #12]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c678:	461a      	mov	r2, r3
 800c67a:	6838      	ldr	r0, [r7, #0]
 800c67c:	f003 faa5 	bl	800fbca <memcpy>
	}
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c690:	f001 fc72 	bl	800df78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c69a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c69c:	e011      	b.n	800c6c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d012      	beq.n	800c6cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3324      	adds	r3, #36	@ 0x24
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fd34 	bl	800d118 <xTaskRemoveFromEventList>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6b6:	f000 fe0d 	bl	800d2d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6ba:	7bfb      	ldrb	r3, [r7, #15]
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	dce9      	bgt.n	800c69e <prvUnlockQueue+0x16>
 800c6ca:	e000      	b.n	800c6ce <prvUnlockQueue+0x46>
					break;
 800c6cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	22ff      	movs	r2, #255	@ 0xff
 800c6d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c6d6:	f001 fc81 	bl	800dfdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6da:	f001 fc4d 	bl	800df78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c6e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6e6:	e011      	b.n	800c70c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d012      	beq.n	800c716 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3310      	adds	r3, #16
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 fd0f 	bl	800d118 <xTaskRemoveFromEventList>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c700:	f000 fde8 	bl	800d2d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c704:	7bbb      	ldrb	r3, [r7, #14]
 800c706:	3b01      	subs	r3, #1
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c70c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c710:	2b00      	cmp	r3, #0
 800c712:	dce9      	bgt.n	800c6e8 <prvUnlockQueue+0x60>
 800c714:	e000      	b.n	800c718 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c716:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	22ff      	movs	r2, #255	@ 0xff
 800c71c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c720:	f001 fc5c 	bl	800dfdc <vPortExitCritical>
}
 800c724:	bf00      	nop
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c734:	f001 fc20 	bl	800df78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d102      	bne.n	800c746 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c740:	2301      	movs	r3, #1
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e001      	b.n	800c74a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c746:	2300      	movs	r3, #0
 800c748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c74a:	f001 fc47 	bl	800dfdc <vPortExitCritical>

	return xReturn;
 800c74e:	68fb      	ldr	r3, [r7, #12]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3710      	adds	r7, #16
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b084      	sub	sp, #16
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c760:	f001 fc0a 	bl	800df78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d102      	bne.n	800c776 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c770:	2301      	movs	r3, #1
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	e001      	b.n	800c77a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c776:	2300      	movs	r3, #0
 800c778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c77a:	f001 fc2f 	bl	800dfdc <vPortExitCritical>

	return xReturn;
 800c77e:	68fb      	ldr	r3, [r7, #12]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c792:	2300      	movs	r3, #0
 800c794:	60fb      	str	r3, [r7, #12]
 800c796:	e014      	b.n	800c7c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c798:	4a0f      	ldr	r2, [pc, #60]	@ (800c7d8 <vQueueAddToRegistry+0x50>)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10b      	bne.n	800c7bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7a4:	490c      	ldr	r1, [pc, #48]	@ (800c7d8 <vQueueAddToRegistry+0x50>)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	683a      	ldr	r2, [r7, #0]
 800c7aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c7d8 <vQueueAddToRegistry+0x50>)
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	00db      	lsls	r3, r3, #3
 800c7b4:	4413      	add	r3, r2
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7ba:	e006      	b.n	800c7ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b07      	cmp	r3, #7
 800c7c6:	d9e7      	bls.n	800c798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	20000cf0 	.word	0x20000cf0

0800c7dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b086      	sub	sp, #24
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7ec:	f001 fbc4 	bl	800df78 <vPortEnterCritical>
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c7f6:	b25b      	sxtb	r3, r3
 800c7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fc:	d103      	bne.n	800c806 <vQueueWaitForMessageRestricted+0x2a>
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c80c:	b25b      	sxtb	r3, r3
 800c80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c812:	d103      	bne.n	800c81c <vQueueWaitForMessageRestricted+0x40>
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2200      	movs	r2, #0
 800c818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c81c:	f001 fbde 	bl	800dfdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	3324      	adds	r3, #36	@ 0x24
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	68b9      	ldr	r1, [r7, #8]
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fc45 	bl	800d0c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c836:	6978      	ldr	r0, [r7, #20]
 800c838:	f7ff ff26 	bl	800c688 <prvUnlockQueue>
	}
 800c83c:	bf00      	nop
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c844:	b580      	push	{r7, lr}
 800c846:	b08e      	sub	sp, #56	@ 0x38
 800c848:	af04      	add	r7, sp, #16
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10b      	bne.n	800c870 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	f3bf 8f6f 	isb	sy
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	623b      	str	r3, [r7, #32]
}
 800c86a:	bf00      	nop
 800c86c:	bf00      	nop
 800c86e:	e7fd      	b.n	800c86c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c872:	2b00      	cmp	r3, #0
 800c874:	d10b      	bne.n	800c88e <xTaskCreateStatic+0x4a>
	__asm volatile
 800c876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87a:	f383 8811 	msr	BASEPRI, r3
 800c87e:	f3bf 8f6f 	isb	sy
 800c882:	f3bf 8f4f 	dsb	sy
 800c886:	61fb      	str	r3, [r7, #28]
}
 800c888:	bf00      	nop
 800c88a:	bf00      	nop
 800c88c:	e7fd      	b.n	800c88a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c88e:	235c      	movs	r3, #92	@ 0x5c
 800c890:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	2b5c      	cmp	r3, #92	@ 0x5c
 800c896:	d00b      	beq.n	800c8b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	61bb      	str	r3, [r7, #24]
}
 800c8aa:	bf00      	nop
 800c8ac:	bf00      	nop
 800c8ae:	e7fd      	b.n	800c8ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c8b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d01e      	beq.n	800c8f6 <xTaskCreateStatic+0xb2>
 800c8b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d01b      	beq.n	800c8f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ca:	2202      	movs	r2, #2
 800c8cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	9303      	str	r3, [sp, #12]
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d6:	9302      	str	r3, [sp, #8]
 800c8d8:	f107 0314 	add.w	r3, r7, #20
 800c8dc:	9301      	str	r3, [sp, #4]
 800c8de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e0:	9300      	str	r3, [sp, #0]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	68b9      	ldr	r1, [r7, #8]
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f000 f850 	bl	800c98e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c8f0:	f000 f8de 	bl	800cab0 <prvAddNewTaskToReadyList>
 800c8f4:	e001      	b.n	800c8fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8fa:	697b      	ldr	r3, [r7, #20]
	}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3728      	adds	r7, #40	@ 0x28
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c904:	b580      	push	{r7, lr}
 800c906:	b08c      	sub	sp, #48	@ 0x30
 800c908:	af04      	add	r7, sp, #16
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	4613      	mov	r3, r2
 800c912:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c914:	88fb      	ldrh	r3, [r7, #6]
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4618      	mov	r0, r3
 800c91a:	f001 fc4f 	bl	800e1bc <pvPortMalloc>
 800c91e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d00e      	beq.n	800c944 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c926:	205c      	movs	r0, #92	@ 0x5c
 800c928:	f001 fc48 	bl	800e1bc <pvPortMalloc>
 800c92c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d003      	beq.n	800c93c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	631a      	str	r2, [r3, #48]	@ 0x30
 800c93a:	e005      	b.n	800c948 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c93c:	6978      	ldr	r0, [r7, #20]
 800c93e:	f001 fd0b 	bl	800e358 <vPortFree>
 800c942:	e001      	b.n	800c948 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c944:	2300      	movs	r3, #0
 800c946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c948:	69fb      	ldr	r3, [r7, #28]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d017      	beq.n	800c97e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	2300      	movs	r3, #0
 800c95a:	9303      	str	r3, [sp, #12]
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	9302      	str	r3, [sp, #8]
 800c960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c962:	9301      	str	r3, [sp, #4]
 800c964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c966:	9300      	str	r3, [sp, #0]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	68b9      	ldr	r1, [r7, #8]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 f80e 	bl	800c98e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c972:	69f8      	ldr	r0, [r7, #28]
 800c974:	f000 f89c 	bl	800cab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c978:	2301      	movs	r3, #1
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	e002      	b.n	800c984 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c97e:	f04f 33ff 	mov.w	r3, #4294967295
 800c982:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c984:	69bb      	ldr	r3, [r7, #24]
	}
 800c986:	4618      	mov	r0, r3
 800c988:	3720      	adds	r7, #32
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b088      	sub	sp, #32
 800c992:	af00      	add	r7, sp, #0
 800c994:	60f8      	str	r0, [r7, #12]
 800c996:	60b9      	str	r1, [r7, #8]
 800c998:	607a      	str	r2, [r7, #4]
 800c99a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	21a5      	movs	r1, #165	@ 0xa5
 800c9a8:	f003 f88f 	bl	800faca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	4413      	add	r3, r2
 800c9bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c9c6:	69bb      	ldr	r3, [r7, #24]
 800c9c8:	f003 0307 	and.w	r3, r3, #7
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00b      	beq.n	800c9e8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d4:	f383 8811 	msr	BASEPRI, r3
 800c9d8:	f3bf 8f6f 	isb	sy
 800c9dc:	f3bf 8f4f 	dsb	sy
 800c9e0:	617b      	str	r3, [r7, #20]
}
 800c9e2:	bf00      	nop
 800c9e4:	bf00      	nop
 800c9e6:	e7fd      	b.n	800c9e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d01f      	beq.n	800ca2e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	61fb      	str	r3, [r7, #28]
 800c9f2:	e012      	b.n	800ca1a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	7819      	ldrb	r1, [r3, #0]
 800c9fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	4413      	add	r3, r2
 800ca02:	3334      	adds	r3, #52	@ 0x34
 800ca04:	460a      	mov	r2, r1
 800ca06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	4413      	add	r3, r2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d006      	beq.n	800ca22 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	3301      	adds	r3, #1
 800ca18:	61fb      	str	r3, [r7, #28]
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	2b0f      	cmp	r3, #15
 800ca1e:	d9e9      	bls.n	800c9f4 <prvInitialiseNewTask+0x66>
 800ca20:	e000      	b.n	800ca24 <prvInitialiseNewTask+0x96>
			{
				break;
 800ca22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ca24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ca2c:	e003      	b.n	800ca36 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca30:	2200      	movs	r2, #0
 800ca32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ca36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca38:	2b37      	cmp	r3, #55	@ 0x37
 800ca3a:	d901      	bls.n	800ca40 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca3c:	2337      	movs	r3, #55	@ 0x37
 800ca3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca4a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca4e:	2200      	movs	r2, #0
 800ca50:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca54:	3304      	adds	r3, #4
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff f966 	bl	800bd28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5e:	3318      	adds	r3, #24
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7ff f961 	bl	800bd28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7e:	2200      	movs	r2, #0
 800ca80:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	68f9      	ldr	r1, [r7, #12]
 800ca8e:	69b8      	ldr	r0, [r7, #24]
 800ca90:	f001 f93e 	bl	800dd10 <pxPortInitialiseStack>
 800ca94:	4602      	mov	r2, r0
 800ca96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800caa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caa6:	bf00      	nop
 800caa8:	3720      	adds	r7, #32
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cab8:	f001 fa5e 	bl	800df78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cabc:	4b2d      	ldr	r3, [pc, #180]	@ (800cb74 <prvAddNewTaskToReadyList+0xc4>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3301      	adds	r3, #1
 800cac2:	4a2c      	ldr	r2, [pc, #176]	@ (800cb74 <prvAddNewTaskToReadyList+0xc4>)
 800cac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cac6:	4b2c      	ldr	r3, [pc, #176]	@ (800cb78 <prvAddNewTaskToReadyList+0xc8>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cace:	4a2a      	ldr	r2, [pc, #168]	@ (800cb78 <prvAddNewTaskToReadyList+0xc8>)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cad4:	4b27      	ldr	r3, [pc, #156]	@ (800cb74 <prvAddNewTaskToReadyList+0xc4>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d110      	bne.n	800cafe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cadc:	f000 fc1e 	bl	800d31c <prvInitialiseTaskLists>
 800cae0:	e00d      	b.n	800cafe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cae2:	4b26      	ldr	r3, [pc, #152]	@ (800cb7c <prvAddNewTaskToReadyList+0xcc>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d109      	bne.n	800cafe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800caea:	4b23      	ldr	r3, [pc, #140]	@ (800cb78 <prvAddNewTaskToReadyList+0xc8>)
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d802      	bhi.n	800cafe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800caf8:	4a1f      	ldr	r2, [pc, #124]	@ (800cb78 <prvAddNewTaskToReadyList+0xc8>)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cafe:	4b20      	ldr	r3, [pc, #128]	@ (800cb80 <prvAddNewTaskToReadyList+0xd0>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	3301      	adds	r3, #1
 800cb04:	4a1e      	ldr	r2, [pc, #120]	@ (800cb80 <prvAddNewTaskToReadyList+0xd0>)
 800cb06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cb08:	4b1d      	ldr	r3, [pc, #116]	@ (800cb80 <prvAddNewTaskToReadyList+0xd0>)
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb14:	4b1b      	ldr	r3, [pc, #108]	@ (800cb84 <prvAddNewTaskToReadyList+0xd4>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d903      	bls.n	800cb24 <prvAddNewTaskToReadyList+0x74>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb20:	4a18      	ldr	r2, [pc, #96]	@ (800cb84 <prvAddNewTaskToReadyList+0xd4>)
 800cb22:	6013      	str	r3, [r2, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb28:	4613      	mov	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4a15      	ldr	r2, [pc, #84]	@ (800cb88 <prvAddNewTaskToReadyList+0xd8>)
 800cb32:	441a      	add	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3304      	adds	r3, #4
 800cb38:	4619      	mov	r1, r3
 800cb3a:	4610      	mov	r0, r2
 800cb3c:	f7ff f901 	bl	800bd42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb40:	f001 fa4c 	bl	800dfdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb44:	4b0d      	ldr	r3, [pc, #52]	@ (800cb7c <prvAddNewTaskToReadyList+0xcc>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00e      	beq.n	800cb6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb78 <prvAddNewTaskToReadyList+0xc8>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d207      	bcs.n	800cb6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb8c <prvAddNewTaskToReadyList+0xdc>)
 800cb5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb60:	601a      	str	r2, [r3, #0]
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb6a:	bf00      	nop
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	20001204 	.word	0x20001204
 800cb78:	20000d30 	.word	0x20000d30
 800cb7c:	20001210 	.word	0x20001210
 800cb80:	20001220 	.word	0x20001220
 800cb84:	2000120c 	.word	0x2000120c
 800cb88:	20000d34 	.word	0x20000d34
 800cb8c:	e000ed04 	.word	0xe000ed04

0800cb90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d018      	beq.n	800cbd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cba2:	4b14      	ldr	r3, [pc, #80]	@ (800cbf4 <vTaskDelay+0x64>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00b      	beq.n	800cbc2 <vTaskDelay+0x32>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	60bb      	str	r3, [r7, #8]
}
 800cbbc:	bf00      	nop
 800cbbe:	bf00      	nop
 800cbc0:	e7fd      	b.n	800cbbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cbc2:	f000 f883 	bl	800cccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fcf3 	bl	800d5b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbce:	f000 f88b 	bl	800cce8 <xTaskResumeAll>
 800cbd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d107      	bne.n	800cbea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cbda:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <vTaskDelay+0x68>)
 800cbdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cbea:	bf00      	nop
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	2000122c 	.word	0x2000122c
 800cbf8:	e000ed04 	.word	0xe000ed04

0800cbfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	@ 0x28
 800cc00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc02:	2300      	movs	r3, #0
 800cc04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc06:	2300      	movs	r3, #0
 800cc08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc0a:	463a      	mov	r2, r7
 800cc0c:	1d39      	adds	r1, r7, #4
 800cc0e:	f107 0308 	add.w	r3, r7, #8
 800cc12:	4618      	mov	r0, r3
 800cc14:	f7ff f834 	bl	800bc80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	68ba      	ldr	r2, [r7, #8]
 800cc1e:	9202      	str	r2, [sp, #8]
 800cc20:	9301      	str	r3, [sp, #4]
 800cc22:	2300      	movs	r3, #0
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	2300      	movs	r3, #0
 800cc28:	460a      	mov	r2, r1
 800cc2a:	4922      	ldr	r1, [pc, #136]	@ (800ccb4 <vTaskStartScheduler+0xb8>)
 800cc2c:	4822      	ldr	r0, [pc, #136]	@ (800ccb8 <vTaskStartScheduler+0xbc>)
 800cc2e:	f7ff fe09 	bl	800c844 <xTaskCreateStatic>
 800cc32:	4603      	mov	r3, r0
 800cc34:	4a21      	ldr	r2, [pc, #132]	@ (800ccbc <vTaskStartScheduler+0xc0>)
 800cc36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cc38:	4b20      	ldr	r3, [pc, #128]	@ (800ccbc <vTaskStartScheduler+0xc0>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cc40:	2301      	movs	r3, #1
 800cc42:	617b      	str	r3, [r7, #20]
 800cc44:	e001      	b.n	800cc4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d102      	bne.n	800cc56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cc50:	f000 fd04 	bl	800d65c <xTimerCreateTimerTask>
 800cc54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	2b01      	cmp	r3, #1
 800cc5a:	d116      	bne.n	800cc8a <vTaskStartScheduler+0x8e>
	__asm volatile
 800cc5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc60:	f383 8811 	msr	BASEPRI, r3
 800cc64:	f3bf 8f6f 	isb	sy
 800cc68:	f3bf 8f4f 	dsb	sy
 800cc6c:	613b      	str	r3, [r7, #16]
}
 800cc6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cc70:	4b13      	ldr	r3, [pc, #76]	@ (800ccc0 <vTaskStartScheduler+0xc4>)
 800cc72:	f04f 32ff 	mov.w	r2, #4294967295
 800cc76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cc78:	4b12      	ldr	r3, [pc, #72]	@ (800ccc4 <vTaskStartScheduler+0xc8>)
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cc7e:	4b12      	ldr	r3, [pc, #72]	@ (800ccc8 <vTaskStartScheduler+0xcc>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cc84:	f001 f8d4 	bl	800de30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cc88:	e00f      	b.n	800ccaa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc90:	d10b      	bne.n	800ccaa <vTaskStartScheduler+0xae>
	__asm volatile
 800cc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc96:	f383 8811 	msr	BASEPRI, r3
 800cc9a:	f3bf 8f6f 	isb	sy
 800cc9e:	f3bf 8f4f 	dsb	sy
 800cca2:	60fb      	str	r3, [r7, #12]
}
 800cca4:	bf00      	nop
 800cca6:	bf00      	nop
 800cca8:	e7fd      	b.n	800cca6 <vTaskStartScheduler+0xaa>
}
 800ccaa:	bf00      	nop
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	08011cc8 	.word	0x08011cc8
 800ccb8:	0800d2ed 	.word	0x0800d2ed
 800ccbc:	20001228 	.word	0x20001228
 800ccc0:	20001224 	.word	0x20001224
 800ccc4:	20001210 	.word	0x20001210
 800ccc8:	20001208 	.word	0x20001208

0800cccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cccc:	b480      	push	{r7}
 800ccce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ccd0:	4b04      	ldr	r3, [pc, #16]	@ (800cce4 <vTaskSuspendAll+0x18>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	4a03      	ldr	r2, [pc, #12]	@ (800cce4 <vTaskSuspendAll+0x18>)
 800ccd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ccda:	bf00      	nop
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	2000122c 	.word	0x2000122c

0800cce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ccf6:	4b42      	ldr	r3, [pc, #264]	@ (800ce00 <xTaskResumeAll+0x118>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d10b      	bne.n	800cd16 <xTaskResumeAll+0x2e>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	603b      	str	r3, [r7, #0]
}
 800cd10:	bf00      	nop
 800cd12:	bf00      	nop
 800cd14:	e7fd      	b.n	800cd12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd16:	f001 f92f 	bl	800df78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd1a:	4b39      	ldr	r3, [pc, #228]	@ (800ce00 <xTaskResumeAll+0x118>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	4a37      	ldr	r2, [pc, #220]	@ (800ce00 <xTaskResumeAll+0x118>)
 800cd22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd24:	4b36      	ldr	r3, [pc, #216]	@ (800ce00 <xTaskResumeAll+0x118>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d162      	bne.n	800cdf2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cd2c:	4b35      	ldr	r3, [pc, #212]	@ (800ce04 <xTaskResumeAll+0x11c>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d05e      	beq.n	800cdf2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd34:	e02f      	b.n	800cd96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd36:	4b34      	ldr	r3, [pc, #208]	@ (800ce08 <xTaskResumeAll+0x120>)
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	3318      	adds	r3, #24
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7ff f85a 	bl	800bdfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	3304      	adds	r3, #4
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff f855 	bl	800bdfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd56:	4b2d      	ldr	r3, [pc, #180]	@ (800ce0c <xTaskResumeAll+0x124>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d903      	bls.n	800cd66 <xTaskResumeAll+0x7e>
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd62:	4a2a      	ldr	r2, [pc, #168]	@ (800ce0c <xTaskResumeAll+0x124>)
 800cd64:	6013      	str	r3, [r2, #0]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4a27      	ldr	r2, [pc, #156]	@ (800ce10 <xTaskResumeAll+0x128>)
 800cd74:	441a      	add	r2, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	3304      	adds	r3, #4
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	f7fe ffe0 	bl	800bd42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd86:	4b23      	ldr	r3, [pc, #140]	@ (800ce14 <xTaskResumeAll+0x12c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d302      	bcc.n	800cd96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cd90:	4b21      	ldr	r3, [pc, #132]	@ (800ce18 <xTaskResumeAll+0x130>)
 800cd92:	2201      	movs	r2, #1
 800cd94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cd96:	4b1c      	ldr	r3, [pc, #112]	@ (800ce08 <xTaskResumeAll+0x120>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d1cb      	bne.n	800cd36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cda4:	f000 fb58 	bl	800d458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cda8:	4b1c      	ldr	r3, [pc, #112]	@ (800ce1c <xTaskResumeAll+0x134>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d010      	beq.n	800cdd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cdb4:	f000 f846 	bl	800ce44 <xTaskIncrementTick>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cdbe:	4b16      	ldr	r3, [pc, #88]	@ (800ce18 <xTaskResumeAll+0x130>)
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d1f1      	bne.n	800cdb4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800cdd0:	4b12      	ldr	r3, [pc, #72]	@ (800ce1c <xTaskResumeAll+0x134>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cdd6:	4b10      	ldr	r3, [pc, #64]	@ (800ce18 <xTaskResumeAll+0x130>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d009      	beq.n	800cdf2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cdde:	2301      	movs	r3, #1
 800cde0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cde2:	4b0f      	ldr	r3, [pc, #60]	@ (800ce20 <xTaskResumeAll+0x138>)
 800cde4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	f3bf 8f4f 	dsb	sy
 800cdee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cdf2:	f001 f8f3 	bl	800dfdc <vPortExitCritical>

	return xAlreadyYielded;
 800cdf6:	68bb      	ldr	r3, [r7, #8]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	2000122c 	.word	0x2000122c
 800ce04:	20001204 	.word	0x20001204
 800ce08:	200011c4 	.word	0x200011c4
 800ce0c:	2000120c 	.word	0x2000120c
 800ce10:	20000d34 	.word	0x20000d34
 800ce14:	20000d30 	.word	0x20000d30
 800ce18:	20001218 	.word	0x20001218
 800ce1c:	20001214 	.word	0x20001214
 800ce20:	e000ed04 	.word	0xe000ed04

0800ce24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ce24:	b480      	push	{r7}
 800ce26:	b083      	sub	sp, #12
 800ce28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ce2a:	4b05      	ldr	r3, [pc, #20]	@ (800ce40 <xTaskGetTickCount+0x1c>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ce30:	687b      	ldr	r3, [r7, #4]
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	370c      	adds	r7, #12
 800ce36:	46bd      	mov	sp, r7
 800ce38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3c:	4770      	bx	lr
 800ce3e:	bf00      	nop
 800ce40:	20001208 	.word	0x20001208

0800ce44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4e:	4b4f      	ldr	r3, [pc, #316]	@ (800cf8c <xTaskIncrementTick+0x148>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f040 8090 	bne.w	800cf78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ce58:	4b4d      	ldr	r3, [pc, #308]	@ (800cf90 <xTaskIncrementTick+0x14c>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ce60:	4a4b      	ldr	r2, [pc, #300]	@ (800cf90 <xTaskIncrementTick+0x14c>)
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d121      	bne.n	800ceb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ce6c:	4b49      	ldr	r3, [pc, #292]	@ (800cf94 <xTaskIncrementTick+0x150>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00b      	beq.n	800ce8e <xTaskIncrementTick+0x4a>
	__asm volatile
 800ce76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce7a:	f383 8811 	msr	BASEPRI, r3
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f3bf 8f4f 	dsb	sy
 800ce86:	603b      	str	r3, [r7, #0]
}
 800ce88:	bf00      	nop
 800ce8a:	bf00      	nop
 800ce8c:	e7fd      	b.n	800ce8a <xTaskIncrementTick+0x46>
 800ce8e:	4b41      	ldr	r3, [pc, #260]	@ (800cf94 <xTaskIncrementTick+0x150>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	60fb      	str	r3, [r7, #12]
 800ce94:	4b40      	ldr	r3, [pc, #256]	@ (800cf98 <xTaskIncrementTick+0x154>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	4a3e      	ldr	r2, [pc, #248]	@ (800cf94 <xTaskIncrementTick+0x150>)
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	4a3e      	ldr	r2, [pc, #248]	@ (800cf98 <xTaskIncrementTick+0x154>)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	4b3e      	ldr	r3, [pc, #248]	@ (800cf9c <xTaskIncrementTick+0x158>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	4a3c      	ldr	r2, [pc, #240]	@ (800cf9c <xTaskIncrementTick+0x158>)
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	f000 fad4 	bl	800d458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ceb0:	4b3b      	ldr	r3, [pc, #236]	@ (800cfa0 <xTaskIncrementTick+0x15c>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	693a      	ldr	r2, [r7, #16]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d349      	bcc.n	800cf4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ceba:	4b36      	ldr	r3, [pc, #216]	@ (800cf94 <xTaskIncrementTick+0x150>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d104      	bne.n	800cece <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cec4:	4b36      	ldr	r3, [pc, #216]	@ (800cfa0 <xTaskIncrementTick+0x15c>)
 800cec6:	f04f 32ff 	mov.w	r2, #4294967295
 800ceca:	601a      	str	r2, [r3, #0]
					break;
 800cecc:	e03f      	b.n	800cf4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cece:	4b31      	ldr	r3, [pc, #196]	@ (800cf94 <xTaskIncrementTick+0x150>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d203      	bcs.n	800ceee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cee6:	4a2e      	ldr	r2, [pc, #184]	@ (800cfa0 <xTaskIncrementTick+0x15c>)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ceec:	e02f      	b.n	800cf4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	3304      	adds	r3, #4
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe ff82 	bl	800bdfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d004      	beq.n	800cf0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	3318      	adds	r3, #24
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7fe ff79 	bl	800bdfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf0e:	4b25      	ldr	r3, [pc, #148]	@ (800cfa4 <xTaskIncrementTick+0x160>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d903      	bls.n	800cf1e <xTaskIncrementTick+0xda>
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf1a:	4a22      	ldr	r2, [pc, #136]	@ (800cfa4 <xTaskIncrementTick+0x160>)
 800cf1c:	6013      	str	r3, [r2, #0]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	4a1f      	ldr	r2, [pc, #124]	@ (800cfa8 <xTaskIncrementTick+0x164>)
 800cf2c:	441a      	add	r2, r3
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	3304      	adds	r3, #4
 800cf32:	4619      	mov	r1, r3
 800cf34:	4610      	mov	r0, r2
 800cf36:	f7fe ff04 	bl	800bd42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf3e:	4b1b      	ldr	r3, [pc, #108]	@ (800cfac <xTaskIncrementTick+0x168>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d3b8      	bcc.n	800ceba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf4c:	e7b5      	b.n	800ceba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cf4e:	4b17      	ldr	r3, [pc, #92]	@ (800cfac <xTaskIncrementTick+0x168>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf54:	4914      	ldr	r1, [pc, #80]	@ (800cfa8 <xTaskIncrementTick+0x164>)
 800cf56:	4613      	mov	r3, r2
 800cf58:	009b      	lsls	r3, r3, #2
 800cf5a:	4413      	add	r3, r2
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	440b      	add	r3, r1
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d901      	bls.n	800cf6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800cf66:	2301      	movs	r3, #1
 800cf68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cf6a:	4b11      	ldr	r3, [pc, #68]	@ (800cfb0 <xTaskIncrementTick+0x16c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d007      	beq.n	800cf82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800cf72:	2301      	movs	r3, #1
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	e004      	b.n	800cf82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cf78:	4b0e      	ldr	r3, [pc, #56]	@ (800cfb4 <xTaskIncrementTick+0x170>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	4a0d      	ldr	r2, [pc, #52]	@ (800cfb4 <xTaskIncrementTick+0x170>)
 800cf80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cf82:	697b      	ldr	r3, [r7, #20]
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3718      	adds	r7, #24
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	2000122c 	.word	0x2000122c
 800cf90:	20001208 	.word	0x20001208
 800cf94:	200011bc 	.word	0x200011bc
 800cf98:	200011c0 	.word	0x200011c0
 800cf9c:	2000121c 	.word	0x2000121c
 800cfa0:	20001224 	.word	0x20001224
 800cfa4:	2000120c 	.word	0x2000120c
 800cfa8:	20000d34 	.word	0x20000d34
 800cfac:	20000d30 	.word	0x20000d30
 800cfb0:	20001218 	.word	0x20001218
 800cfb4:	20001214 	.word	0x20001214

0800cfb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cfbe:	4b28      	ldr	r3, [pc, #160]	@ (800d060 <vTaskSwitchContext+0xa8>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d003      	beq.n	800cfce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cfc6:	4b27      	ldr	r3, [pc, #156]	@ (800d064 <vTaskSwitchContext+0xac>)
 800cfc8:	2201      	movs	r2, #1
 800cfca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cfcc:	e042      	b.n	800d054 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800cfce:	4b25      	ldr	r3, [pc, #148]	@ (800d064 <vTaskSwitchContext+0xac>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfd4:	4b24      	ldr	r3, [pc, #144]	@ (800d068 <vTaskSwitchContext+0xb0>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e011      	b.n	800d000 <vTaskSwitchContext+0x48>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d10b      	bne.n	800cffa <vTaskSwitchContext+0x42>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	607b      	str	r3, [r7, #4]
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
 800cff8:	e7fd      	b.n	800cff6 <vTaskSwitchContext+0x3e>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	491a      	ldr	r1, [pc, #104]	@ (800d06c <vTaskSwitchContext+0xb4>)
 800d002:	68fa      	ldr	r2, [r7, #12]
 800d004:	4613      	mov	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4413      	add	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	440b      	add	r3, r1
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d0e3      	beq.n	800cfdc <vTaskSwitchContext+0x24>
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	4a13      	ldr	r2, [pc, #76]	@ (800d06c <vTaskSwitchContext+0xb4>)
 800d020:	4413      	add	r3, r2
 800d022:	60bb      	str	r3, [r7, #8]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	605a      	str	r2, [r3, #4]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	685a      	ldr	r2, [r3, #4]
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	3308      	adds	r3, #8
 800d036:	429a      	cmp	r2, r3
 800d038:	d104      	bne.n	800d044 <vTaskSwitchContext+0x8c>
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	685b      	ldr	r3, [r3, #4]
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	605a      	str	r2, [r3, #4]
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	4a09      	ldr	r2, [pc, #36]	@ (800d070 <vTaskSwitchContext+0xb8>)
 800d04c:	6013      	str	r3, [r2, #0]
 800d04e:	4a06      	ldr	r2, [pc, #24]	@ (800d068 <vTaskSwitchContext+0xb0>)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6013      	str	r3, [r2, #0]
}
 800d054:	bf00      	nop
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	2000122c 	.word	0x2000122c
 800d064:	20001218 	.word	0x20001218
 800d068:	2000120c 	.word	0x2000120c
 800d06c:	20000d34 	.word	0x20000d34
 800d070:	20000d30 	.word	0x20000d30

0800d074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10b      	bne.n	800d09c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	60fb      	str	r3, [r7, #12]
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	e7fd      	b.n	800d098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d09c:	4b07      	ldr	r3, [pc, #28]	@ (800d0bc <vTaskPlaceOnEventList+0x48>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3318      	adds	r3, #24
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7fe fe70 	bl	800bd8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d0aa:	2101      	movs	r1, #1
 800d0ac:	6838      	ldr	r0, [r7, #0]
 800d0ae:	f000 fa81 	bl	800d5b4 <prvAddCurrentTaskToDelayedList>
}
 800d0b2:	bf00      	nop
 800d0b4:	3710      	adds	r7, #16
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	bf00      	nop
 800d0bc:	20000d30 	.word	0x20000d30

0800d0c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b086      	sub	sp, #24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10b      	bne.n	800d0ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	617b      	str	r3, [r7, #20]
}
 800d0e4:	bf00      	nop
 800d0e6:	bf00      	nop
 800d0e8:	e7fd      	b.n	800d0e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800d114 <vTaskPlaceOnEventListRestricted+0x54>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3318      	adds	r3, #24
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	68f8      	ldr	r0, [r7, #12]
 800d0f4:	f7fe fe25 	bl	800bd42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d102:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	68b8      	ldr	r0, [r7, #8]
 800d108:	f000 fa54 	bl	800d5b4 <prvAddCurrentTaskToDelayedList>
	}
 800d10c:	bf00      	nop
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	20000d30 	.word	0x20000d30

0800d118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68db      	ldr	r3, [r3, #12]
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d10b      	bne.n	800d146 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	60fb      	str	r3, [r7, #12]
}
 800d140:	bf00      	nop
 800d142:	bf00      	nop
 800d144:	e7fd      	b.n	800d142 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	3318      	adds	r3, #24
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fe fe56 	bl	800bdfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d150:	4b1d      	ldr	r3, [pc, #116]	@ (800d1c8 <xTaskRemoveFromEventList+0xb0>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d11d      	bne.n	800d194 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fe4d 	bl	800bdfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d166:	4b19      	ldr	r3, [pc, #100]	@ (800d1cc <xTaskRemoveFromEventList+0xb4>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d903      	bls.n	800d176 <xTaskRemoveFromEventList+0x5e>
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d172:	4a16      	ldr	r2, [pc, #88]	@ (800d1cc <xTaskRemoveFromEventList+0xb4>)
 800d174:	6013      	str	r3, [r2, #0]
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d17a:	4613      	mov	r3, r2
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	4413      	add	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	4a13      	ldr	r2, [pc, #76]	@ (800d1d0 <xTaskRemoveFromEventList+0xb8>)
 800d184:	441a      	add	r2, r3
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	3304      	adds	r3, #4
 800d18a:	4619      	mov	r1, r3
 800d18c:	4610      	mov	r0, r2
 800d18e:	f7fe fdd8 	bl	800bd42 <vListInsertEnd>
 800d192:	e005      	b.n	800d1a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	3318      	adds	r3, #24
 800d198:	4619      	mov	r1, r3
 800d19a:	480e      	ldr	r0, [pc, #56]	@ (800d1d4 <xTaskRemoveFromEventList+0xbc>)
 800d19c:	f7fe fdd1 	bl	800bd42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1a4:	4b0c      	ldr	r3, [pc, #48]	@ (800d1d8 <xTaskRemoveFromEventList+0xc0>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d905      	bls.n	800d1ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d1dc <xTaskRemoveFromEventList+0xc4>)
 800d1b4:	2201      	movs	r2, #1
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	e001      	b.n	800d1be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1be:	697b      	ldr	r3, [r7, #20]
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3718      	adds	r7, #24
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	2000122c 	.word	0x2000122c
 800d1cc:	2000120c 	.word	0x2000120c
 800d1d0:	20000d34 	.word	0x20000d34
 800d1d4:	200011c4 	.word	0x200011c4
 800d1d8:	20000d30 	.word	0x20000d30
 800d1dc:	20001218 	.word	0x20001218

0800d1e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d1e8:	4b06      	ldr	r3, [pc, #24]	@ (800d204 <vTaskInternalSetTimeOutState+0x24>)
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d1f0:	4b05      	ldr	r3, [pc, #20]	@ (800d208 <vTaskInternalSetTimeOutState+0x28>)
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	605a      	str	r2, [r3, #4]
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr
 800d204:	2000121c 	.word	0x2000121c
 800d208:	20001208 	.word	0x20001208

0800d20c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b088      	sub	sp, #32
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d10b      	bne.n	800d234 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d220:	f383 8811 	msr	BASEPRI, r3
 800d224:	f3bf 8f6f 	isb	sy
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	613b      	str	r3, [r7, #16]
}
 800d22e:	bf00      	nop
 800d230:	bf00      	nop
 800d232:	e7fd      	b.n	800d230 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10b      	bne.n	800d252 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	60fb      	str	r3, [r7, #12]
}
 800d24c:	bf00      	nop
 800d24e:	bf00      	nop
 800d250:	e7fd      	b.n	800d24e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d252:	f000 fe91 	bl	800df78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d256:	4b1d      	ldr	r3, [pc, #116]	@ (800d2cc <xTaskCheckForTimeOut+0xc0>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	69ba      	ldr	r2, [r7, #24]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26e:	d102      	bne.n	800d276 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d270:	2300      	movs	r3, #0
 800d272:	61fb      	str	r3, [r7, #28]
 800d274:	e023      	b.n	800d2be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	4b15      	ldr	r3, [pc, #84]	@ (800d2d0 <xTaskCheckForTimeOut+0xc4>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d007      	beq.n	800d292 <xTaskCheckForTimeOut+0x86>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d302      	bcc.n	800d292 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d28c:	2301      	movs	r3, #1
 800d28e:	61fb      	str	r3, [r7, #28]
 800d290:	e015      	b.n	800d2be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	697a      	ldr	r2, [r7, #20]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d20b      	bcs.n	800d2b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	1ad2      	subs	r2, r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f7ff ff99 	bl	800d1e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	61fb      	str	r3, [r7, #28]
 800d2b2:	e004      	b.n	800d2be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2be:	f000 fe8d 	bl	800dfdc <vPortExitCritical>

	return xReturn;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3720      	adds	r7, #32
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	20001208 	.word	0x20001208
 800d2d0:	2000121c 	.word	0x2000121c

0800d2d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2d8:	4b03      	ldr	r3, [pc, #12]	@ (800d2e8 <vTaskMissedYield+0x14>)
 800d2da:	2201      	movs	r2, #1
 800d2dc:	601a      	str	r2, [r3, #0]
}
 800d2de:	bf00      	nop
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr
 800d2e8:	20001218 	.word	0x20001218

0800d2ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b082      	sub	sp, #8
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d2f4:	f000 f852 	bl	800d39c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d2f8:	4b06      	ldr	r3, [pc, #24]	@ (800d314 <prvIdleTask+0x28>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d9f9      	bls.n	800d2f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d300:	4b05      	ldr	r3, [pc, #20]	@ (800d318 <prvIdleTask+0x2c>)
 800d302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d306:	601a      	str	r2, [r3, #0]
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d310:	e7f0      	b.n	800d2f4 <prvIdleTask+0x8>
 800d312:	bf00      	nop
 800d314:	20000d34 	.word	0x20000d34
 800d318:	e000ed04 	.word	0xe000ed04

0800d31c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d322:	2300      	movs	r3, #0
 800d324:	607b      	str	r3, [r7, #4]
 800d326:	e00c      	b.n	800d342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	4613      	mov	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4a12      	ldr	r2, [pc, #72]	@ (800d37c <prvInitialiseTaskLists+0x60>)
 800d334:	4413      	add	r3, r2
 800d336:	4618      	mov	r0, r3
 800d338:	f7fe fcd6 	bl	800bce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	3301      	adds	r3, #1
 800d340:	607b      	str	r3, [r7, #4]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b37      	cmp	r3, #55	@ 0x37
 800d346:	d9ef      	bls.n	800d328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d348:	480d      	ldr	r0, [pc, #52]	@ (800d380 <prvInitialiseTaskLists+0x64>)
 800d34a:	f7fe fccd 	bl	800bce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d34e:	480d      	ldr	r0, [pc, #52]	@ (800d384 <prvInitialiseTaskLists+0x68>)
 800d350:	f7fe fcca 	bl	800bce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d354:	480c      	ldr	r0, [pc, #48]	@ (800d388 <prvInitialiseTaskLists+0x6c>)
 800d356:	f7fe fcc7 	bl	800bce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d35a:	480c      	ldr	r0, [pc, #48]	@ (800d38c <prvInitialiseTaskLists+0x70>)
 800d35c:	f7fe fcc4 	bl	800bce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d360:	480b      	ldr	r0, [pc, #44]	@ (800d390 <prvInitialiseTaskLists+0x74>)
 800d362:	f7fe fcc1 	bl	800bce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d366:	4b0b      	ldr	r3, [pc, #44]	@ (800d394 <prvInitialiseTaskLists+0x78>)
 800d368:	4a05      	ldr	r2, [pc, #20]	@ (800d380 <prvInitialiseTaskLists+0x64>)
 800d36a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d36c:	4b0a      	ldr	r3, [pc, #40]	@ (800d398 <prvInitialiseTaskLists+0x7c>)
 800d36e:	4a05      	ldr	r2, [pc, #20]	@ (800d384 <prvInitialiseTaskLists+0x68>)
 800d370:	601a      	str	r2, [r3, #0]
}
 800d372:	bf00      	nop
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20000d34 	.word	0x20000d34
 800d380:	20001194 	.word	0x20001194
 800d384:	200011a8 	.word	0x200011a8
 800d388:	200011c4 	.word	0x200011c4
 800d38c:	200011d8 	.word	0x200011d8
 800d390:	200011f0 	.word	0x200011f0
 800d394:	200011bc 	.word	0x200011bc
 800d398:	200011c0 	.word	0x200011c0

0800d39c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b082      	sub	sp, #8
 800d3a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3a2:	e019      	b.n	800d3d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3a4:	f000 fde8 	bl	800df78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a8:	4b10      	ldr	r3, [pc, #64]	@ (800d3ec <prvCheckTasksWaitingTermination+0x50>)
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fd21 	bl	800bdfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f0 <prvCheckTasksWaitingTermination+0x54>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3b01      	subs	r3, #1
 800d3c0:	4a0b      	ldr	r2, [pc, #44]	@ (800d3f0 <prvCheckTasksWaitingTermination+0x54>)
 800d3c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	@ (800d3f4 <prvCheckTasksWaitingTermination+0x58>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	4a0a      	ldr	r2, [pc, #40]	@ (800d3f4 <prvCheckTasksWaitingTermination+0x58>)
 800d3cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3ce:	f000 fe05 	bl	800dfdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f000 f810 	bl	800d3f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3d8:	4b06      	ldr	r3, [pc, #24]	@ (800d3f4 <prvCheckTasksWaitingTermination+0x58>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1e1      	bne.n	800d3a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	200011d8 	.word	0x200011d8
 800d3f0:	20001204 	.word	0x20001204
 800d3f4:	200011ec 	.word	0x200011ec

0800d3f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d406:	2b00      	cmp	r3, #0
 800d408:	d108      	bne.n	800d41c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 ffa2 	bl	800e358 <vPortFree>
				vPortFree( pxTCB );
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f000 ff9f 	bl	800e358 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d41a:	e019      	b.n	800d450 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d422:	2b01      	cmp	r3, #1
 800d424:	d103      	bne.n	800d42e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 ff96 	bl	800e358 <vPortFree>
	}
 800d42c:	e010      	b.n	800d450 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d434:	2b02      	cmp	r3, #2
 800d436:	d00b      	beq.n	800d450 <prvDeleteTCB+0x58>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	60fb      	str	r3, [r7, #12]
}
 800d44a:	bf00      	nop
 800d44c:	bf00      	nop
 800d44e:	e7fd      	b.n	800d44c <prvDeleteTCB+0x54>
	}
 800d450:	bf00      	nop
 800d452:	3710      	adds	r7, #16
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d45e:	4b0c      	ldr	r3, [pc, #48]	@ (800d490 <prvResetNextTaskUnblockTime+0x38>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d104      	bne.n	800d472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d468:	4b0a      	ldr	r3, [pc, #40]	@ (800d494 <prvResetNextTaskUnblockTime+0x3c>)
 800d46a:	f04f 32ff 	mov.w	r2, #4294967295
 800d46e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d470:	e008      	b.n	800d484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d472:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <prvResetNextTaskUnblockTime+0x38>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	4a04      	ldr	r2, [pc, #16]	@ (800d494 <prvResetNextTaskUnblockTime+0x3c>)
 800d482:	6013      	str	r3, [r2, #0]
}
 800d484:	bf00      	nop
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	200011bc 	.word	0x200011bc
 800d494:	20001224 	.word	0x20001224

0800d498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d49e:	4b0b      	ldr	r3, [pc, #44]	@ (800d4cc <xTaskGetSchedulerState+0x34>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d102      	bne.n	800d4ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	607b      	str	r3, [r7, #4]
 800d4aa:	e008      	b.n	800d4be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4ac:	4b08      	ldr	r3, [pc, #32]	@ (800d4d0 <xTaskGetSchedulerState+0x38>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d102      	bne.n	800d4ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4b4:	2302      	movs	r3, #2
 800d4b6:	607b      	str	r3, [r7, #4]
 800d4b8:	e001      	b.n	800d4be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4be:	687b      	ldr	r3, [r7, #4]
	}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr
 800d4cc:	20001210 	.word	0x20001210
 800d4d0:	2000122c 	.word	0x2000122c

0800d4d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d058      	beq.n	800d59c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800d5a8 <xTaskPriorityDisinherit+0xd4>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	693a      	ldr	r2, [r7, #16]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d00b      	beq.n	800d50c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	60fb      	str	r3, [r7, #12]
}
 800d506:	bf00      	nop
 800d508:	bf00      	nop
 800d50a:	e7fd      	b.n	800d508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10b      	bne.n	800d52c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	60bb      	str	r3, [r7, #8]
}
 800d526:	bf00      	nop
 800d528:	bf00      	nop
 800d52a:	e7fd      	b.n	800d528 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d530:	1e5a      	subs	r2, r3, #1
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d53a:	693b      	ldr	r3, [r7, #16]
 800d53c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d53e:	429a      	cmp	r2, r3
 800d540:	d02c      	beq.n	800d59c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d546:	2b00      	cmp	r3, #0
 800d548:	d128      	bne.n	800d59c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	3304      	adds	r3, #4
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fe fc54 	bl	800bdfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d558:	693b      	ldr	r3, [r7, #16]
 800d55a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d55c:	693b      	ldr	r3, [r7, #16]
 800d55e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d560:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d568:	693b      	ldr	r3, [r7, #16]
 800d56a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d56c:	4b0f      	ldr	r3, [pc, #60]	@ (800d5ac <xTaskPriorityDisinherit+0xd8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	429a      	cmp	r2, r3
 800d572:	d903      	bls.n	800d57c <xTaskPriorityDisinherit+0xa8>
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d578:	4a0c      	ldr	r2, [pc, #48]	@ (800d5ac <xTaskPriorityDisinherit+0xd8>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4a09      	ldr	r2, [pc, #36]	@ (800d5b0 <xTaskPriorityDisinherit+0xdc>)
 800d58a:	441a      	add	r2, r3
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	3304      	adds	r3, #4
 800d590:	4619      	mov	r1, r3
 800d592:	4610      	mov	r0, r2
 800d594:	f7fe fbd5 	bl	800bd42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d598:	2301      	movs	r3, #1
 800d59a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d59c:	697b      	ldr	r3, [r7, #20]
	}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	20000d30 	.word	0x20000d30
 800d5ac:	2000120c 	.word	0x2000120c
 800d5b0:	20000d34 	.word	0x20000d34

0800d5b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5be:	4b21      	ldr	r3, [pc, #132]	@ (800d644 <prvAddCurrentTaskToDelayedList+0x90>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5c4:	4b20      	ldr	r3, [pc, #128]	@ (800d648 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f7fe fc16 	bl	800bdfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d6:	d10a      	bne.n	800d5ee <prvAddCurrentTaskToDelayedList+0x3a>
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d007      	beq.n	800d5ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5de:	4b1a      	ldr	r3, [pc, #104]	@ (800d648 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4819      	ldr	r0, [pc, #100]	@ (800d64c <prvAddCurrentTaskToDelayedList+0x98>)
 800d5e8:	f7fe fbab 	bl	800bd42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5ec:	e026      	b.n	800d63c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5ee:	68fa      	ldr	r2, [r7, #12]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5f6:	4b14      	ldr	r3, [pc, #80]	@ (800d648 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	429a      	cmp	r2, r3
 800d604:	d209      	bcs.n	800d61a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d606:	4b12      	ldr	r3, [pc, #72]	@ (800d650 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d608:	681a      	ldr	r2, [r3, #0]
 800d60a:	4b0f      	ldr	r3, [pc, #60]	@ (800d648 <prvAddCurrentTaskToDelayedList+0x94>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	3304      	adds	r3, #4
 800d610:	4619      	mov	r1, r3
 800d612:	4610      	mov	r0, r2
 800d614:	f7fe fbb9 	bl	800bd8a <vListInsert>
}
 800d618:	e010      	b.n	800d63c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d61a:	4b0e      	ldr	r3, [pc, #56]	@ (800d654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4b0a      	ldr	r3, [pc, #40]	@ (800d648 <prvAddCurrentTaskToDelayedList+0x94>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3304      	adds	r3, #4
 800d624:	4619      	mov	r1, r3
 800d626:	4610      	mov	r0, r2
 800d628:	f7fe fbaf 	bl	800bd8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d62c:	4b0a      	ldr	r3, [pc, #40]	@ (800d658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	429a      	cmp	r2, r3
 800d634:	d202      	bcs.n	800d63c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d636:	4a08      	ldr	r2, [pc, #32]	@ (800d658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	6013      	str	r3, [r2, #0]
}
 800d63c:	bf00      	nop
 800d63e:	3710      	adds	r7, #16
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	20001208 	.word	0x20001208
 800d648:	20000d30 	.word	0x20000d30
 800d64c:	200011f0 	.word	0x200011f0
 800d650:	200011c0 	.word	0x200011c0
 800d654:	200011bc 	.word	0x200011bc
 800d658:	20001224 	.word	0x20001224

0800d65c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b08a      	sub	sp, #40	@ 0x28
 800d660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d662:	2300      	movs	r3, #0
 800d664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d666:	f000 fb13 	bl	800dc90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d66a:	4b1d      	ldr	r3, [pc, #116]	@ (800d6e0 <xTimerCreateTimerTask+0x84>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d021      	beq.n	800d6b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d672:	2300      	movs	r3, #0
 800d674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d676:	2300      	movs	r3, #0
 800d678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d67a:	1d3a      	adds	r2, r7, #4
 800d67c:	f107 0108 	add.w	r1, r7, #8
 800d680:	f107 030c 	add.w	r3, r7, #12
 800d684:	4618      	mov	r0, r3
 800d686:	f7fe fb15 	bl	800bcb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d68a:	6879      	ldr	r1, [r7, #4]
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	9202      	str	r2, [sp, #8]
 800d692:	9301      	str	r3, [sp, #4]
 800d694:	2302      	movs	r3, #2
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	2300      	movs	r3, #0
 800d69a:	460a      	mov	r2, r1
 800d69c:	4911      	ldr	r1, [pc, #68]	@ (800d6e4 <xTimerCreateTimerTask+0x88>)
 800d69e:	4812      	ldr	r0, [pc, #72]	@ (800d6e8 <xTimerCreateTimerTask+0x8c>)
 800d6a0:	f7ff f8d0 	bl	800c844 <xTaskCreateStatic>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	4a11      	ldr	r2, [pc, #68]	@ (800d6ec <xTimerCreateTimerTask+0x90>)
 800d6a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d6aa:	4b10      	ldr	r3, [pc, #64]	@ (800d6ec <xTimerCreateTimerTask+0x90>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10b      	bne.n	800d6d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	613b      	str	r3, [r7, #16]
}
 800d6ce:	bf00      	nop
 800d6d0:	bf00      	nop
 800d6d2:	e7fd      	b.n	800d6d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d6d4:	697b      	ldr	r3, [r7, #20]
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20001260 	.word	0x20001260
 800d6e4:	08011cd0 	.word	0x08011cd0
 800d6e8:	0800d829 	.word	0x0800d829
 800d6ec:	20001264 	.word	0x20001264

0800d6f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b08a      	sub	sp, #40	@ 0x28
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	60b9      	str	r1, [r7, #8]
 800d6fa:	607a      	str	r2, [r7, #4]
 800d6fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d6fe:	2300      	movs	r3, #0
 800d700:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10b      	bne.n	800d720 <xTimerGenericCommand+0x30>
	__asm volatile
 800d708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70c:	f383 8811 	msr	BASEPRI, r3
 800d710:	f3bf 8f6f 	isb	sy
 800d714:	f3bf 8f4f 	dsb	sy
 800d718:	623b      	str	r3, [r7, #32]
}
 800d71a:	bf00      	nop
 800d71c:	bf00      	nop
 800d71e:	e7fd      	b.n	800d71c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d720:	4b19      	ldr	r3, [pc, #100]	@ (800d788 <xTimerGenericCommand+0x98>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d02a      	beq.n	800d77e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	2b05      	cmp	r3, #5
 800d738:	dc18      	bgt.n	800d76c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d73a:	f7ff fead 	bl	800d498 <xTaskGetSchedulerState>
 800d73e:	4603      	mov	r3, r0
 800d740:	2b02      	cmp	r3, #2
 800d742:	d109      	bne.n	800d758 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d744:	4b10      	ldr	r3, [pc, #64]	@ (800d788 <xTimerGenericCommand+0x98>)
 800d746:	6818      	ldr	r0, [r3, #0]
 800d748:	f107 0110 	add.w	r1, r7, #16
 800d74c:	2300      	movs	r3, #0
 800d74e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d750:	f7fe fc88 	bl	800c064 <xQueueGenericSend>
 800d754:	6278      	str	r0, [r7, #36]	@ 0x24
 800d756:	e012      	b.n	800d77e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d758:	4b0b      	ldr	r3, [pc, #44]	@ (800d788 <xTimerGenericCommand+0x98>)
 800d75a:	6818      	ldr	r0, [r3, #0]
 800d75c:	f107 0110 	add.w	r1, r7, #16
 800d760:	2300      	movs	r3, #0
 800d762:	2200      	movs	r2, #0
 800d764:	f7fe fc7e 	bl	800c064 <xQueueGenericSend>
 800d768:	6278      	str	r0, [r7, #36]	@ 0x24
 800d76a:	e008      	b.n	800d77e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d76c:	4b06      	ldr	r3, [pc, #24]	@ (800d788 <xTimerGenericCommand+0x98>)
 800d76e:	6818      	ldr	r0, [r3, #0]
 800d770:	f107 0110 	add.w	r1, r7, #16
 800d774:	2300      	movs	r3, #0
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	f7fe fd76 	bl	800c268 <xQueueGenericSendFromISR>
 800d77c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d780:	4618      	mov	r0, r3
 800d782:	3728      	adds	r7, #40	@ 0x28
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20001260 	.word	0x20001260

0800d78c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b088      	sub	sp, #32
 800d790:	af02      	add	r7, sp, #8
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d796:	4b23      	ldr	r3, [pc, #140]	@ (800d824 <prvProcessExpiredTimer+0x98>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	68db      	ldr	r3, [r3, #12]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fe fb29 	bl	800bdfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d7b0:	f003 0304 	and.w	r3, r3, #4
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d023      	beq.n	800d800 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	699a      	ldr	r2, [r3, #24]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	18d1      	adds	r1, r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	683a      	ldr	r2, [r7, #0]
 800d7c4:	6978      	ldr	r0, [r7, #20]
 800d7c6:	f000 f8d5 	bl	800d974 <prvInsertTimerInActiveList>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d020      	beq.n	800d812 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	9300      	str	r3, [sp, #0]
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	2100      	movs	r1, #0
 800d7da:	6978      	ldr	r0, [r7, #20]
 800d7dc:	f7ff ff88 	bl	800d6f0 <xTimerGenericCommand>
 800d7e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d114      	bne.n	800d812 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ec:	f383 8811 	msr	BASEPRI, r3
 800d7f0:	f3bf 8f6f 	isb	sy
 800d7f4:	f3bf 8f4f 	dsb	sy
 800d7f8:	60fb      	str	r3, [r7, #12]
}
 800d7fa:	bf00      	nop
 800d7fc:	bf00      	nop
 800d7fe:	e7fd      	b.n	800d7fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d806:	f023 0301 	bic.w	r3, r3, #1
 800d80a:	b2da      	uxtb	r2, r3
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	6978      	ldr	r0, [r7, #20]
 800d818:	4798      	blx	r3
}
 800d81a:	bf00      	nop
 800d81c:	3718      	adds	r7, #24
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	20001258 	.word	0x20001258

0800d828 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d830:	f107 0308 	add.w	r3, r7, #8
 800d834:	4618      	mov	r0, r3
 800d836:	f000 f859 	bl	800d8ec <prvGetNextExpireTime>
 800d83a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	4619      	mov	r1, r3
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f000 f805 	bl	800d850 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d846:	f000 f8d7 	bl	800d9f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d84a:	bf00      	nop
 800d84c:	e7f0      	b.n	800d830 <prvTimerTask+0x8>
	...

0800d850 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d85a:	f7ff fa37 	bl	800cccc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d85e:	f107 0308 	add.w	r3, r7, #8
 800d862:	4618      	mov	r0, r3
 800d864:	f000 f866 	bl	800d934 <prvSampleTimeNow>
 800d868:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d130      	bne.n	800d8d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10a      	bne.n	800d88c <prvProcessTimerOrBlockTask+0x3c>
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d806      	bhi.n	800d88c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d87e:	f7ff fa33 	bl	800cce8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d882:	68f9      	ldr	r1, [r7, #12]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff ff81 	bl	800d78c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d88a:	e024      	b.n	800d8d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d008      	beq.n	800d8a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d892:	4b13      	ldr	r3, [pc, #76]	@ (800d8e0 <prvProcessTimerOrBlockTask+0x90>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <prvProcessTimerOrBlockTask+0x50>
 800d89c:	2301      	movs	r3, #1
 800d89e:	e000      	b.n	800d8a2 <prvProcessTimerOrBlockTask+0x52>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d8a4:	4b0f      	ldr	r3, [pc, #60]	@ (800d8e4 <prvProcessTimerOrBlockTask+0x94>)
 800d8a6:	6818      	ldr	r0, [r3, #0]
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	1ad3      	subs	r3, r2, r3
 800d8ae:	683a      	ldr	r2, [r7, #0]
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	f7fe ff93 	bl	800c7dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d8b6:	f7ff fa17 	bl	800cce8 <xTaskResumeAll>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d10a      	bne.n	800d8d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d8c0:	4b09      	ldr	r3, [pc, #36]	@ (800d8e8 <prvProcessTimerOrBlockTask+0x98>)
 800d8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
}
 800d8d0:	e001      	b.n	800d8d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8d2:	f7ff fa09 	bl	800cce8 <xTaskResumeAll>
}
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	2000125c 	.word	0x2000125c
 800d8e4:	20001260 	.word	0x20001260
 800d8e8:	e000ed04 	.word	0xe000ed04

0800d8ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b085      	sub	sp, #20
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d8f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d930 <prvGetNextExpireTime+0x44>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d101      	bne.n	800d902 <prvGetNextExpireTime+0x16>
 800d8fe:	2201      	movs	r2, #1
 800d900:	e000      	b.n	800d904 <prvGetNextExpireTime+0x18>
 800d902:	2200      	movs	r2, #0
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d105      	bne.n	800d91c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d910:	4b07      	ldr	r3, [pc, #28]	@ (800d930 <prvGetNextExpireTime+0x44>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	60fb      	str	r3, [r7, #12]
 800d91a:	e001      	b.n	800d920 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d91c:	2300      	movs	r3, #0
 800d91e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d920:	68fb      	ldr	r3, [r7, #12]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3714      	adds	r7, #20
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	20001258 	.word	0x20001258

0800d934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b084      	sub	sp, #16
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d93c:	f7ff fa72 	bl	800ce24 <xTaskGetTickCount>
 800d940:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d942:	4b0b      	ldr	r3, [pc, #44]	@ (800d970 <prvSampleTimeNow+0x3c>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d205      	bcs.n	800d958 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d94c:	f000 f93a 	bl	800dbc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	e002      	b.n	800d95e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d95e:	4a04      	ldr	r2, [pc, #16]	@ (800d970 <prvSampleTimeNow+0x3c>)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d964:	68fb      	ldr	r3, [r7, #12]
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	20001268 	.word	0x20001268

0800d974 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b086      	sub	sp, #24
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	607a      	str	r2, [r7, #4]
 800d980:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d982:	2300      	movs	r3, #0
 800d984:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	68ba      	ldr	r2, [r7, #8]
 800d98a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	68fa      	ldr	r2, [r7, #12]
 800d990:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	429a      	cmp	r2, r3
 800d998:	d812      	bhi.n	800d9c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	1ad2      	subs	r2, r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d302      	bcc.n	800d9ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	617b      	str	r3, [r7, #20]
 800d9ac:	e01b      	b.n	800d9e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9ae:	4b10      	ldr	r3, [pc, #64]	@ (800d9f0 <prvInsertTimerInActiveList+0x7c>)
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	f7fe f9e6 	bl	800bd8a <vListInsert>
 800d9be:	e012      	b.n	800d9e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d206      	bcs.n	800d9d6 <prvInsertTimerInActiveList+0x62>
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d302      	bcc.n	800d9d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	e007      	b.n	800d9e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9d6:	4b07      	ldr	r3, [pc, #28]	@ (800d9f4 <prvInsertTimerInActiveList+0x80>)
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f7fe f9d2 	bl	800bd8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d9e6:	697b      	ldr	r3, [r7, #20]
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	2000125c 	.word	0x2000125c
 800d9f4:	20001258 	.word	0x20001258

0800d9f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08e      	sub	sp, #56	@ 0x38
 800d9fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d9fe:	e0ce      	b.n	800db9e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	da19      	bge.n	800da3a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da06:	1d3b      	adds	r3, r7, #4
 800da08:	3304      	adds	r3, #4
 800da0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10b      	bne.n	800da2a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	61fb      	str	r3, [r7, #28]
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	e7fd      	b.n	800da26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da30:	6850      	ldr	r0, [r2, #4]
 800da32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da34:	6892      	ldr	r2, [r2, #8]
 800da36:	4611      	mov	r1, r2
 800da38:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f2c0 80ae 	blt.w	800db9e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d004      	beq.n	800da58 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da50:	3304      	adds	r3, #4
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe f9d2 	bl	800bdfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da58:	463b      	mov	r3, r7
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff ff6a 	bl	800d934 <prvSampleTimeNow>
 800da60:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b09      	cmp	r3, #9
 800da66:	f200 8097 	bhi.w	800db98 <prvProcessReceivedCommands+0x1a0>
 800da6a:	a201      	add	r2, pc, #4	@ (adr r2, 800da70 <prvProcessReceivedCommands+0x78>)
 800da6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da70:	0800da99 	.word	0x0800da99
 800da74:	0800da99 	.word	0x0800da99
 800da78:	0800da99 	.word	0x0800da99
 800da7c:	0800db0f 	.word	0x0800db0f
 800da80:	0800db23 	.word	0x0800db23
 800da84:	0800db6f 	.word	0x0800db6f
 800da88:	0800da99 	.word	0x0800da99
 800da8c:	0800da99 	.word	0x0800da99
 800da90:	0800db0f 	.word	0x0800db0f
 800da94:	0800db23 	.word	0x0800db23
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800da98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da9e:	f043 0301 	orr.w	r3, r3, #1
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	18d1      	adds	r1, r2, r3
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dab8:	f7ff ff5c 	bl	800d974 <prvInsertTimerInActiveList>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d06c      	beq.n	800db9c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dac8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800daca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dacc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d061      	beq.n	800db9c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dad8:	68ba      	ldr	r2, [r7, #8]
 800dada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	441a      	add	r2, r3
 800dae0:	2300      	movs	r3, #0
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	2300      	movs	r3, #0
 800dae6:	2100      	movs	r1, #0
 800dae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daea:	f7ff fe01 	bl	800d6f0 <xTimerGenericCommand>
 800daee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800daf0:	6a3b      	ldr	r3, [r7, #32]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d152      	bne.n	800db9c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	61bb      	str	r3, [r7, #24]
}
 800db08:	bf00      	nop
 800db0a:	bf00      	nop
 800db0c:	e7fd      	b.n	800db0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db14:	f023 0301 	bic.w	r3, r3, #1
 800db18:	b2da      	uxtb	r2, r3
 800db1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db20:	e03d      	b.n	800db9e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db28:	f043 0301 	orr.w	r3, r3, #1
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db38:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d10b      	bne.n	800db5a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800db42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	617b      	str	r3, [r7, #20]
}
 800db54:	bf00      	nop
 800db56:	bf00      	nop
 800db58:	e7fd      	b.n	800db56 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5c:	699a      	ldr	r2, [r3, #24]
 800db5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db60:	18d1      	adds	r1, r2, r3
 800db62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db68:	f7ff ff04 	bl	800d974 <prvInsertTimerInActiveList>
					break;
 800db6c:	e017      	b.n	800db9e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d103      	bne.n	800db84 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800db7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db7e:	f000 fbeb 	bl	800e358 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800db82:	e00c      	b.n	800db9e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800db8a:	f023 0301 	bic.w	r3, r3, #1
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800db96:	e002      	b.n	800db9e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800db98:	bf00      	nop
 800db9a:	e000      	b.n	800db9e <prvProcessReceivedCommands+0x1a6>
					break;
 800db9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db9e:	4b08      	ldr	r3, [pc, #32]	@ (800dbc0 <prvProcessReceivedCommands+0x1c8>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	1d39      	adds	r1, r7, #4
 800dba4:	2200      	movs	r2, #0
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fbfc 	bl	800c3a4 <xQueueReceive>
 800dbac:	4603      	mov	r3, r0
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f47f af26 	bne.w	800da00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dbb4:	bf00      	nop
 800dbb6:	bf00      	nop
 800dbb8:	3730      	adds	r7, #48	@ 0x30
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	20001260 	.word	0x20001260

0800dbc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbca:	e049      	b.n	800dc60 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbcc:	4b2e      	ldr	r3, [pc, #184]	@ (800dc88 <prvSwitchTimerLists+0xc4>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd6:	4b2c      	ldr	r3, [pc, #176]	@ (800dc88 <prvSwitchTimerLists+0xc4>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe f909 	bl	800bdfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dbf8:	f003 0304 	and.w	r3, r3, #4
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d02f      	beq.n	800dc60 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	693a      	ldr	r2, [r7, #16]
 800dc06:	4413      	add	r3, r2
 800dc08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d90e      	bls.n	800dc30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	68fa      	ldr	r2, [r7, #12]
 800dc1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc1e:	4b1a      	ldr	r3, [pc, #104]	@ (800dc88 <prvSwitchTimerLists+0xc4>)
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fe f8ae 	bl	800bd8a <vListInsert>
 800dc2e:	e017      	b.n	800dc60 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc30:	2300      	movs	r3, #0
 800dc32:	9300      	str	r3, [sp, #0]
 800dc34:	2300      	movs	r3, #0
 800dc36:	693a      	ldr	r2, [r7, #16]
 800dc38:	2100      	movs	r1, #0
 800dc3a:	68f8      	ldr	r0, [r7, #12]
 800dc3c:	f7ff fd58 	bl	800d6f0 <xTimerGenericCommand>
 800dc40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10b      	bne.n	800dc60 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800dc48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc4c:	f383 8811 	msr	BASEPRI, r3
 800dc50:	f3bf 8f6f 	isb	sy
 800dc54:	f3bf 8f4f 	dsb	sy
 800dc58:	603b      	str	r3, [r7, #0]
}
 800dc5a:	bf00      	nop
 800dc5c:	bf00      	nop
 800dc5e:	e7fd      	b.n	800dc5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc60:	4b09      	ldr	r3, [pc, #36]	@ (800dc88 <prvSwitchTimerLists+0xc4>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1b0      	bne.n	800dbcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc6a:	4b07      	ldr	r3, [pc, #28]	@ (800dc88 <prvSwitchTimerLists+0xc4>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc70:	4b06      	ldr	r3, [pc, #24]	@ (800dc8c <prvSwitchTimerLists+0xc8>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a04      	ldr	r2, [pc, #16]	@ (800dc88 <prvSwitchTimerLists+0xc4>)
 800dc76:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc78:	4a04      	ldr	r2, [pc, #16]	@ (800dc8c <prvSwitchTimerLists+0xc8>)
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	6013      	str	r3, [r2, #0]
}
 800dc7e:	bf00      	nop
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20001258 	.word	0x20001258
 800dc8c:	2000125c 	.word	0x2000125c

0800dc90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dc96:	f000 f96f 	bl	800df78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dc9a:	4b15      	ldr	r3, [pc, #84]	@ (800dcf0 <prvCheckForValidListAndQueue+0x60>)
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d120      	bne.n	800dce4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dca2:	4814      	ldr	r0, [pc, #80]	@ (800dcf4 <prvCheckForValidListAndQueue+0x64>)
 800dca4:	f7fe f820 	bl	800bce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dca8:	4813      	ldr	r0, [pc, #76]	@ (800dcf8 <prvCheckForValidListAndQueue+0x68>)
 800dcaa:	f7fe f81d 	bl	800bce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcae:	4b13      	ldr	r3, [pc, #76]	@ (800dcfc <prvCheckForValidListAndQueue+0x6c>)
 800dcb0:	4a10      	ldr	r2, [pc, #64]	@ (800dcf4 <prvCheckForValidListAndQueue+0x64>)
 800dcb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dcb4:	4b12      	ldr	r3, [pc, #72]	@ (800dd00 <prvCheckForValidListAndQueue+0x70>)
 800dcb6:	4a10      	ldr	r2, [pc, #64]	@ (800dcf8 <prvCheckForValidListAndQueue+0x68>)
 800dcb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dcba:	2300      	movs	r3, #0
 800dcbc:	9300      	str	r3, [sp, #0]
 800dcbe:	4b11      	ldr	r3, [pc, #68]	@ (800dd04 <prvCheckForValidListAndQueue+0x74>)
 800dcc0:	4a11      	ldr	r2, [pc, #68]	@ (800dd08 <prvCheckForValidListAndQueue+0x78>)
 800dcc2:	2110      	movs	r1, #16
 800dcc4:	200a      	movs	r0, #10
 800dcc6:	f7fe f92d 	bl	800bf24 <xQueueGenericCreateStatic>
 800dcca:	4603      	mov	r3, r0
 800dccc:	4a08      	ldr	r2, [pc, #32]	@ (800dcf0 <prvCheckForValidListAndQueue+0x60>)
 800dcce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dcd0:	4b07      	ldr	r3, [pc, #28]	@ (800dcf0 <prvCheckForValidListAndQueue+0x60>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d005      	beq.n	800dce4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dcd8:	4b05      	ldr	r3, [pc, #20]	@ (800dcf0 <prvCheckForValidListAndQueue+0x60>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	490b      	ldr	r1, [pc, #44]	@ (800dd0c <prvCheckForValidListAndQueue+0x7c>)
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe fd52 	bl	800c788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dce4:	f000 f97a 	bl	800dfdc <vPortExitCritical>
}
 800dce8:	bf00      	nop
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	20001260 	.word	0x20001260
 800dcf4:	20001230 	.word	0x20001230
 800dcf8:	20001244 	.word	0x20001244
 800dcfc:	20001258 	.word	0x20001258
 800dd00:	2000125c 	.word	0x2000125c
 800dd04:	2000130c 	.word	0x2000130c
 800dd08:	2000126c 	.word	0x2000126c
 800dd0c:	08011cd8 	.word	0x08011cd8

0800dd10 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd10:	b480      	push	{r7}
 800dd12:	b085      	sub	sp, #20
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	60f8      	str	r0, [r7, #12]
 800dd18:	60b9      	str	r1, [r7, #8]
 800dd1a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	3b04      	subs	r3, #4
 800dd20:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800dd28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3b04      	subs	r3, #4
 800dd2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	f023 0201 	bic.w	r2, r3, #1
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3b04      	subs	r3, #4
 800dd3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd40:	4a0c      	ldr	r2, [pc, #48]	@ (800dd74 <pxPortInitialiseStack+0x64>)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	3b14      	subs	r3, #20
 800dd4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd4c:	687a      	ldr	r2, [r7, #4]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3b04      	subs	r3, #4
 800dd56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f06f 0202 	mvn.w	r2, #2
 800dd5e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3b20      	subs	r3, #32
 800dd64:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd66:	68fb      	ldr	r3, [r7, #12]
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr
 800dd74:	0800dd79 	.word	0x0800dd79

0800dd78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd82:	4b13      	ldr	r3, [pc, #76]	@ (800ddd0 <prvTaskExitError+0x58>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8a:	d00b      	beq.n	800dda4 <prvTaskExitError+0x2c>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd90:	f383 8811 	msr	BASEPRI, r3
 800dd94:	f3bf 8f6f 	isb	sy
 800dd98:	f3bf 8f4f 	dsb	sy
 800dd9c:	60fb      	str	r3, [r7, #12]
}
 800dd9e:	bf00      	nop
 800dda0:	bf00      	nop
 800dda2:	e7fd      	b.n	800dda0 <prvTaskExitError+0x28>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	60bb      	str	r3, [r7, #8]
}
 800ddb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ddb8:	bf00      	nop
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d0fc      	beq.n	800ddba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ddc0:	bf00      	nop
 800ddc2:	bf00      	nop
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	20000124 	.word	0x20000124
	...

0800dde0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dde0:	4b07      	ldr	r3, [pc, #28]	@ (800de00 <pxCurrentTCBConst2>)
 800dde2:	6819      	ldr	r1, [r3, #0]
 800dde4:	6808      	ldr	r0, [r1, #0]
 800dde6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddea:	f380 8809 	msr	PSP, r0
 800ddee:	f3bf 8f6f 	isb	sy
 800ddf2:	f04f 0000 	mov.w	r0, #0
 800ddf6:	f380 8811 	msr	BASEPRI, r0
 800ddfa:	4770      	bx	lr
 800ddfc:	f3af 8000 	nop.w

0800de00 <pxCurrentTCBConst2>:
 800de00:	20000d30 	.word	0x20000d30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de04:	bf00      	nop
 800de06:	bf00      	nop

0800de08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de08:	4808      	ldr	r0, [pc, #32]	@ (800de2c <prvPortStartFirstTask+0x24>)
 800de0a:	6800      	ldr	r0, [r0, #0]
 800de0c:	6800      	ldr	r0, [r0, #0]
 800de0e:	f380 8808 	msr	MSP, r0
 800de12:	f04f 0000 	mov.w	r0, #0
 800de16:	f380 8814 	msr	CONTROL, r0
 800de1a:	b662      	cpsie	i
 800de1c:	b661      	cpsie	f
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	f3bf 8f6f 	isb	sy
 800de26:	df00      	svc	0
 800de28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de2a:	bf00      	nop
 800de2c:	e000ed08 	.word	0xe000ed08

0800de30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de36:	4b47      	ldr	r3, [pc, #284]	@ (800df54 <xPortStartScheduler+0x124>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4a47      	ldr	r2, [pc, #284]	@ (800df58 <xPortStartScheduler+0x128>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d10b      	bne.n	800de58 <xPortStartScheduler+0x28>
	__asm volatile
 800de40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de44:	f383 8811 	msr	BASEPRI, r3
 800de48:	f3bf 8f6f 	isb	sy
 800de4c:	f3bf 8f4f 	dsb	sy
 800de50:	613b      	str	r3, [r7, #16]
}
 800de52:	bf00      	nop
 800de54:	bf00      	nop
 800de56:	e7fd      	b.n	800de54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de58:	4b3e      	ldr	r3, [pc, #248]	@ (800df54 <xPortStartScheduler+0x124>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a3f      	ldr	r2, [pc, #252]	@ (800df5c <xPortStartScheduler+0x12c>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d10b      	bne.n	800de7a <xPortStartScheduler+0x4a>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	60fb      	str	r3, [r7, #12]
}
 800de74:	bf00      	nop
 800de76:	bf00      	nop
 800de78:	e7fd      	b.n	800de76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de7a:	4b39      	ldr	r3, [pc, #228]	@ (800df60 <xPortStartScheduler+0x130>)
 800de7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	b2db      	uxtb	r3, r3
 800de84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	22ff      	movs	r2, #255	@ 0xff
 800de8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	b2db      	uxtb	r3, r3
 800de92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800de94:	78fb      	ldrb	r3, [r7, #3]
 800de96:	b2db      	uxtb	r3, r3
 800de98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800de9c:	b2da      	uxtb	r2, r3
 800de9e:	4b31      	ldr	r3, [pc, #196]	@ (800df64 <xPortStartScheduler+0x134>)
 800dea0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dea2:	4b31      	ldr	r3, [pc, #196]	@ (800df68 <xPortStartScheduler+0x138>)
 800dea4:	2207      	movs	r2, #7
 800dea6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dea8:	e009      	b.n	800debe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800deaa:	4b2f      	ldr	r3, [pc, #188]	@ (800df68 <xPortStartScheduler+0x138>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	3b01      	subs	r3, #1
 800deb0:	4a2d      	ldr	r2, [pc, #180]	@ (800df68 <xPortStartScheduler+0x138>)
 800deb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800deb4:	78fb      	ldrb	r3, [r7, #3]
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	b2db      	uxtb	r3, r3
 800debc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800debe:	78fb      	ldrb	r3, [r7, #3]
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dec6:	2b80      	cmp	r3, #128	@ 0x80
 800dec8:	d0ef      	beq.n	800deaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800deca:	4b27      	ldr	r3, [pc, #156]	@ (800df68 <xPortStartScheduler+0x138>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f1c3 0307 	rsb	r3, r3, #7
 800ded2:	2b04      	cmp	r3, #4
 800ded4:	d00b      	beq.n	800deee <xPortStartScheduler+0xbe>
	__asm volatile
 800ded6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	60bb      	str	r3, [r7, #8]
}
 800dee8:	bf00      	nop
 800deea:	bf00      	nop
 800deec:	e7fd      	b.n	800deea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800deee:	4b1e      	ldr	r3, [pc, #120]	@ (800df68 <xPortStartScheduler+0x138>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	021b      	lsls	r3, r3, #8
 800def4:	4a1c      	ldr	r2, [pc, #112]	@ (800df68 <xPortStartScheduler+0x138>)
 800def6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800def8:	4b1b      	ldr	r3, [pc, #108]	@ (800df68 <xPortStartScheduler+0x138>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800df00:	4a19      	ldr	r2, [pc, #100]	@ (800df68 <xPortStartScheduler+0x138>)
 800df02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	b2da      	uxtb	r2, r3
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df0c:	4b17      	ldr	r3, [pc, #92]	@ (800df6c <xPortStartScheduler+0x13c>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a16      	ldr	r2, [pc, #88]	@ (800df6c <xPortStartScheduler+0x13c>)
 800df12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800df16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df18:	4b14      	ldr	r3, [pc, #80]	@ (800df6c <xPortStartScheduler+0x13c>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	4a13      	ldr	r2, [pc, #76]	@ (800df6c <xPortStartScheduler+0x13c>)
 800df1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800df22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df24:	f000 f8da 	bl	800e0dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df28:	4b11      	ldr	r3, [pc, #68]	@ (800df70 <xPortStartScheduler+0x140>)
 800df2a:	2200      	movs	r2, #0
 800df2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df2e:	f000 f8f9 	bl	800e124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df32:	4b10      	ldr	r3, [pc, #64]	@ (800df74 <xPortStartScheduler+0x144>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a0f      	ldr	r2, [pc, #60]	@ (800df74 <xPortStartScheduler+0x144>)
 800df38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800df3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df3e:	f7ff ff63 	bl	800de08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df42:	f7ff f839 	bl	800cfb8 <vTaskSwitchContext>
	prvTaskExitError();
 800df46:	f7ff ff17 	bl	800dd78 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3718      	adds	r7, #24
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	e000ed00 	.word	0xe000ed00
 800df58:	410fc271 	.word	0x410fc271
 800df5c:	410fc270 	.word	0x410fc270
 800df60:	e000e400 	.word	0xe000e400
 800df64:	2000135c 	.word	0x2000135c
 800df68:	20001360 	.word	0x20001360
 800df6c:	e000ed20 	.word	0xe000ed20
 800df70:	20000124 	.word	0x20000124
 800df74:	e000ef34 	.word	0xe000ef34

0800df78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df78:	b480      	push	{r7}
 800df7a:	b083      	sub	sp, #12
 800df7c:	af00      	add	r7, sp, #0
	__asm volatile
 800df7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df82:	f383 8811 	msr	BASEPRI, r3
 800df86:	f3bf 8f6f 	isb	sy
 800df8a:	f3bf 8f4f 	dsb	sy
 800df8e:	607b      	str	r3, [r7, #4]
}
 800df90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df92:	4b10      	ldr	r3, [pc, #64]	@ (800dfd4 <vPortEnterCritical+0x5c>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	3301      	adds	r3, #1
 800df98:	4a0e      	ldr	r2, [pc, #56]	@ (800dfd4 <vPortEnterCritical+0x5c>)
 800df9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800df9c:	4b0d      	ldr	r3, [pc, #52]	@ (800dfd4 <vPortEnterCritical+0x5c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b01      	cmp	r3, #1
 800dfa2:	d110      	bne.n	800dfc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800dfd8 <vPortEnterCritical+0x60>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d00b      	beq.n	800dfc6 <vPortEnterCritical+0x4e>
	__asm volatile
 800dfae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb2:	f383 8811 	msr	BASEPRI, r3
 800dfb6:	f3bf 8f6f 	isb	sy
 800dfba:	f3bf 8f4f 	dsb	sy
 800dfbe:	603b      	str	r3, [r7, #0]
}
 800dfc0:	bf00      	nop
 800dfc2:	bf00      	nop
 800dfc4:	e7fd      	b.n	800dfc2 <vPortEnterCritical+0x4a>
	}
}
 800dfc6:	bf00      	nop
 800dfc8:	370c      	adds	r7, #12
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop
 800dfd4:	20000124 	.word	0x20000124
 800dfd8:	e000ed04 	.word	0xe000ed04

0800dfdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfe2:	4b12      	ldr	r3, [pc, #72]	@ (800e02c <vPortExitCritical+0x50>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10b      	bne.n	800e002 <vPortExitCritical+0x26>
	__asm volatile
 800dfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfee:	f383 8811 	msr	BASEPRI, r3
 800dff2:	f3bf 8f6f 	isb	sy
 800dff6:	f3bf 8f4f 	dsb	sy
 800dffa:	607b      	str	r3, [r7, #4]
}
 800dffc:	bf00      	nop
 800dffe:	bf00      	nop
 800e000:	e7fd      	b.n	800dffe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e002:	4b0a      	ldr	r3, [pc, #40]	@ (800e02c <vPortExitCritical+0x50>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	3b01      	subs	r3, #1
 800e008:	4a08      	ldr	r2, [pc, #32]	@ (800e02c <vPortExitCritical+0x50>)
 800e00a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e00c:	4b07      	ldr	r3, [pc, #28]	@ (800e02c <vPortExitCritical+0x50>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d105      	bne.n	800e020 <vPortExitCritical+0x44>
 800e014:	2300      	movs	r3, #0
 800e016:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	f383 8811 	msr	BASEPRI, r3
}
 800e01e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e020:	bf00      	nop
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr
 800e02c:	20000124 	.word	0x20000124

0800e030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e030:	f3ef 8009 	mrs	r0, PSP
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	4b15      	ldr	r3, [pc, #84]	@ (800e090 <pxCurrentTCBConst>)
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	f01e 0f10 	tst.w	lr, #16
 800e040:	bf08      	it	eq
 800e042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04a:	6010      	str	r0, [r2, #0]
 800e04c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e050:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e054:	f380 8811 	msr	BASEPRI, r0
 800e058:	f3bf 8f4f 	dsb	sy
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f7fe ffaa 	bl	800cfb8 <vTaskSwitchContext>
 800e064:	f04f 0000 	mov.w	r0, #0
 800e068:	f380 8811 	msr	BASEPRI, r0
 800e06c:	bc09      	pop	{r0, r3}
 800e06e:	6819      	ldr	r1, [r3, #0]
 800e070:	6808      	ldr	r0, [r1, #0]
 800e072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e076:	f01e 0f10 	tst.w	lr, #16
 800e07a:	bf08      	it	eq
 800e07c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e080:	f380 8809 	msr	PSP, r0
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	f3af 8000 	nop.w

0800e090 <pxCurrentTCBConst>:
 800e090:	20000d30 	.word	0x20000d30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop

0800e098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
	__asm volatile
 800e09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	607b      	str	r3, [r7, #4]
}
 800e0b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e0b2:	f7fe fec7 	bl	800ce44 <xTaskIncrementTick>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d003      	beq.n	800e0c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0bc:	4b06      	ldr	r3, [pc, #24]	@ (800e0d8 <xPortSysTickHandler+0x40>)
 800e0be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	f383 8811 	msr	BASEPRI, r3
}
 800e0ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	e000ed04 	.word	0xe000ed04

0800e0dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0dc:	b480      	push	{r7}
 800e0de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e110 <vPortSetupTimerInterrupt+0x34>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e114 <vPortSetupTimerInterrupt+0x38>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e118 <vPortSetupTimerInterrupt+0x3c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e11c <vPortSetupTimerInterrupt+0x40>)
 800e0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f6:	099b      	lsrs	r3, r3, #6
 800e0f8:	4a09      	ldr	r2, [pc, #36]	@ (800e120 <vPortSetupTimerInterrupt+0x44>)
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0fe:	4b04      	ldr	r3, [pc, #16]	@ (800e110 <vPortSetupTimerInterrupt+0x34>)
 800e100:	2207      	movs	r2, #7
 800e102:	601a      	str	r2, [r3, #0]
}
 800e104:	bf00      	nop
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	e000e010 	.word	0xe000e010
 800e114:	e000e018 	.word	0xe000e018
 800e118:	20000010 	.word	0x20000010
 800e11c:	10624dd3 	.word	0x10624dd3
 800e120:	e000e014 	.word	0xe000e014

0800e124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e124:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e134 <vPortEnableVFP+0x10>
 800e128:	6801      	ldr	r1, [r0, #0]
 800e12a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e12e:	6001      	str	r1, [r0, #0]
 800e130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e132:	bf00      	nop
 800e134:	e000ed88 	.word	0xe000ed88

0800e138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e13e:	f3ef 8305 	mrs	r3, IPSR
 800e142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2b0f      	cmp	r3, #15
 800e148:	d915      	bls.n	800e176 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e14a:	4a18      	ldr	r2, [pc, #96]	@ (800e1ac <vPortValidateInterruptPriority+0x74>)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	4413      	add	r3, r2
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e154:	4b16      	ldr	r3, [pc, #88]	@ (800e1b0 <vPortValidateInterruptPriority+0x78>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	7afa      	ldrb	r2, [r7, #11]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d20b      	bcs.n	800e176 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e162:	f383 8811 	msr	BASEPRI, r3
 800e166:	f3bf 8f6f 	isb	sy
 800e16a:	f3bf 8f4f 	dsb	sy
 800e16e:	607b      	str	r3, [r7, #4]
}
 800e170:	bf00      	nop
 800e172:	bf00      	nop
 800e174:	e7fd      	b.n	800e172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e176:	4b0f      	ldr	r3, [pc, #60]	@ (800e1b4 <vPortValidateInterruptPriority+0x7c>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e17e:	4b0e      	ldr	r3, [pc, #56]	@ (800e1b8 <vPortValidateInterruptPriority+0x80>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	429a      	cmp	r2, r3
 800e184:	d90b      	bls.n	800e19e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	603b      	str	r3, [r7, #0]
}
 800e198:	bf00      	nop
 800e19a:	bf00      	nop
 800e19c:	e7fd      	b.n	800e19a <vPortValidateInterruptPriority+0x62>
	}
 800e19e:	bf00      	nop
 800e1a0:	3714      	adds	r7, #20
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a8:	4770      	bx	lr
 800e1aa:	bf00      	nop
 800e1ac:	e000e3f0 	.word	0xe000e3f0
 800e1b0:	2000135c 	.word	0x2000135c
 800e1b4:	e000ed0c 	.word	0xe000ed0c
 800e1b8:	20001360 	.word	0x20001360

0800e1bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	@ 0x28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e1c8:	f7fe fd80 	bl	800cccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e1cc:	4b5c      	ldr	r3, [pc, #368]	@ (800e340 <pvPortMalloc+0x184>)
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d101      	bne.n	800e1d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e1d4:	f000 f924 	bl	800e420 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e1d8:	4b5a      	ldr	r3, [pc, #360]	@ (800e344 <pvPortMalloc+0x188>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	4013      	ands	r3, r2
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f040 8095 	bne.w	800e310 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d01e      	beq.n	800e22a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e1ec:	2208      	movs	r2, #8
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f003 0307 	and.w	r3, r3, #7
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d015      	beq.n	800e22a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f023 0307 	bic.w	r3, r3, #7
 800e204:	3308      	adds	r3, #8
 800e206:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f003 0307 	and.w	r3, r3, #7
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00b      	beq.n	800e22a <pvPortMalloc+0x6e>
	__asm volatile
 800e212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e216:	f383 8811 	msr	BASEPRI, r3
 800e21a:	f3bf 8f6f 	isb	sy
 800e21e:	f3bf 8f4f 	dsb	sy
 800e222:	617b      	str	r3, [r7, #20]
}
 800e224:	bf00      	nop
 800e226:	bf00      	nop
 800e228:	e7fd      	b.n	800e226 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d06f      	beq.n	800e310 <pvPortMalloc+0x154>
 800e230:	4b45      	ldr	r3, [pc, #276]	@ (800e348 <pvPortMalloc+0x18c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	429a      	cmp	r2, r3
 800e238:	d86a      	bhi.n	800e310 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e23a:	4b44      	ldr	r3, [pc, #272]	@ (800e34c <pvPortMalloc+0x190>)
 800e23c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e23e:	4b43      	ldr	r3, [pc, #268]	@ (800e34c <pvPortMalloc+0x190>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e244:	e004      	b.n	800e250 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	429a      	cmp	r2, r3
 800e258:	d903      	bls.n	800e262 <pvPortMalloc+0xa6>
 800e25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1f1      	bne.n	800e246 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e262:	4b37      	ldr	r3, [pc, #220]	@ (800e340 <pvPortMalloc+0x184>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e268:	429a      	cmp	r2, r3
 800e26a:	d051      	beq.n	800e310 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e26c:	6a3b      	ldr	r3, [r7, #32]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2208      	movs	r2, #8
 800e272:	4413      	add	r3, r2
 800e274:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e280:	685a      	ldr	r2, [r3, #4]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	1ad2      	subs	r2, r2, r3
 800e286:	2308      	movs	r3, #8
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d920      	bls.n	800e2d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e28e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4413      	add	r3, r2
 800e294:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	f003 0307 	and.w	r3, r3, #7
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d00b      	beq.n	800e2b8 <pvPortMalloc+0xfc>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	613b      	str	r3, [r7, #16]
}
 800e2b2:	bf00      	nop
 800e2b4:	bf00      	nop
 800e2b6:	e7fd      	b.n	800e2b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	1ad2      	subs	r2, r2, r3
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2ca:	69b8      	ldr	r0, [r7, #24]
 800e2cc:	f000 f90a 	bl	800e4e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800e348 <pvPortMalloc+0x18c>)
 800e2d2:	681a      	ldr	r2, [r3, #0]
 800e2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	4a1b      	ldr	r2, [pc, #108]	@ (800e348 <pvPortMalloc+0x18c>)
 800e2dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2de:	4b1a      	ldr	r3, [pc, #104]	@ (800e348 <pvPortMalloc+0x18c>)
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e350 <pvPortMalloc+0x194>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d203      	bcs.n	800e2f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2ea:	4b17      	ldr	r3, [pc, #92]	@ (800e348 <pvPortMalloc+0x18c>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	4a18      	ldr	r2, [pc, #96]	@ (800e350 <pvPortMalloc+0x194>)
 800e2f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f4:	685a      	ldr	r2, [r3, #4]
 800e2f6:	4b13      	ldr	r3, [pc, #76]	@ (800e344 <pvPortMalloc+0x188>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e302:	2200      	movs	r2, #0
 800e304:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e306:	4b13      	ldr	r3, [pc, #76]	@ (800e354 <pvPortMalloc+0x198>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	3301      	adds	r3, #1
 800e30c:	4a11      	ldr	r2, [pc, #68]	@ (800e354 <pvPortMalloc+0x198>)
 800e30e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e310:	f7fe fcea 	bl	800cce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	f003 0307 	and.w	r3, r3, #7
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00b      	beq.n	800e336 <pvPortMalloc+0x17a>
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e322:	f383 8811 	msr	BASEPRI, r3
 800e326:	f3bf 8f6f 	isb	sy
 800e32a:	f3bf 8f4f 	dsb	sy
 800e32e:	60fb      	str	r3, [r7, #12]
}
 800e330:	bf00      	nop
 800e332:	bf00      	nop
 800e334:	e7fd      	b.n	800e332 <pvPortMalloc+0x176>
	return pvReturn;
 800e336:	69fb      	ldr	r3, [r7, #28]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3728      	adds	r7, #40	@ 0x28
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	20004f6c 	.word	0x20004f6c
 800e344:	20004f80 	.word	0x20004f80
 800e348:	20004f70 	.word	0x20004f70
 800e34c:	20004f64 	.word	0x20004f64
 800e350:	20004f74 	.word	0x20004f74
 800e354:	20004f78 	.word	0x20004f78

0800e358 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d04f      	beq.n	800e40a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e36a:	2308      	movs	r3, #8
 800e36c:	425b      	negs	r3, r3
 800e36e:	697a      	ldr	r2, [r7, #20]
 800e370:	4413      	add	r3, r2
 800e372:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	685a      	ldr	r2, [r3, #4]
 800e37c:	4b25      	ldr	r3, [pc, #148]	@ (800e414 <vPortFree+0xbc>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4013      	ands	r3, r2
 800e382:	2b00      	cmp	r3, #0
 800e384:	d10b      	bne.n	800e39e <vPortFree+0x46>
	__asm volatile
 800e386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38a:	f383 8811 	msr	BASEPRI, r3
 800e38e:	f3bf 8f6f 	isb	sy
 800e392:	f3bf 8f4f 	dsb	sy
 800e396:	60fb      	str	r3, [r7, #12]
}
 800e398:	bf00      	nop
 800e39a:	bf00      	nop
 800e39c:	e7fd      	b.n	800e39a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d00b      	beq.n	800e3be <vPortFree+0x66>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	60bb      	str	r3, [r7, #8]
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	e7fd      	b.n	800e3ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	685a      	ldr	r2, [r3, #4]
 800e3c2:	4b14      	ldr	r3, [pc, #80]	@ (800e414 <vPortFree+0xbc>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d01e      	beq.n	800e40a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e3cc:	693b      	ldr	r3, [r7, #16]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d11a      	bne.n	800e40a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	685a      	ldr	r2, [r3, #4]
 800e3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e414 <vPortFree+0xbc>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	43db      	mvns	r3, r3
 800e3de:	401a      	ands	r2, r3
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e3e4:	f7fe fc72 	bl	800cccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3e8:	693b      	ldr	r3, [r7, #16]
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e418 <vPortFree+0xc0>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4413      	add	r3, r2
 800e3f2:	4a09      	ldr	r2, [pc, #36]	@ (800e418 <vPortFree+0xc0>)
 800e3f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3f6:	6938      	ldr	r0, [r7, #16]
 800e3f8:	f000 f874 	bl	800e4e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e3fc:	4b07      	ldr	r3, [pc, #28]	@ (800e41c <vPortFree+0xc4>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	3301      	adds	r3, #1
 800e402:	4a06      	ldr	r2, [pc, #24]	@ (800e41c <vPortFree+0xc4>)
 800e404:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e406:	f7fe fc6f 	bl	800cce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e40a:	bf00      	nop
 800e40c:	3718      	adds	r7, #24
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	20004f80 	.word	0x20004f80
 800e418:	20004f70 	.word	0x20004f70
 800e41c:	20004f7c 	.word	0x20004f7c

0800e420 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e426:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800e42a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e42c:	4b27      	ldr	r3, [pc, #156]	@ (800e4cc <prvHeapInit+0xac>)
 800e42e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f003 0307 	and.w	r3, r3, #7
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00c      	beq.n	800e454 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3307      	adds	r3, #7
 800e43e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	f023 0307 	bic.w	r3, r3, #7
 800e446:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	4a1f      	ldr	r2, [pc, #124]	@ (800e4cc <prvHeapInit+0xac>)
 800e450:	4413      	add	r3, r2
 800e452:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e458:	4a1d      	ldr	r2, [pc, #116]	@ (800e4d0 <prvHeapInit+0xb0>)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e45e:	4b1c      	ldr	r3, [pc, #112]	@ (800e4d0 <prvHeapInit+0xb0>)
 800e460:	2200      	movs	r2, #0
 800e462:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	68ba      	ldr	r2, [r7, #8]
 800e468:	4413      	add	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e46c:	2208      	movs	r2, #8
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	1a9b      	subs	r3, r3, r2
 800e472:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f023 0307 	bic.w	r3, r3, #7
 800e47a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	4a15      	ldr	r2, [pc, #84]	@ (800e4d4 <prvHeapInit+0xb4>)
 800e480:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e482:	4b14      	ldr	r3, [pc, #80]	@ (800e4d4 <prvHeapInit+0xb4>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2200      	movs	r2, #0
 800e488:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e48a:	4b12      	ldr	r3, [pc, #72]	@ (800e4d4 <prvHeapInit+0xb4>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2200      	movs	r2, #0
 800e490:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	1ad2      	subs	r2, r2, r3
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4a0:	4b0c      	ldr	r3, [pc, #48]	@ (800e4d4 <prvHeapInit+0xb4>)
 800e4a2:	681a      	ldr	r2, [r3, #0]
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	4a0a      	ldr	r2, [pc, #40]	@ (800e4d8 <prvHeapInit+0xb8>)
 800e4ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	4a09      	ldr	r2, [pc, #36]	@ (800e4dc <prvHeapInit+0xbc>)
 800e4b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4b8:	4b09      	ldr	r3, [pc, #36]	@ (800e4e0 <prvHeapInit+0xc0>)
 800e4ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800e4be:	601a      	str	r2, [r3, #0]
}
 800e4c0:	bf00      	nop
 800e4c2:	3714      	adds	r7, #20
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ca:	4770      	bx	lr
 800e4cc:	20001364 	.word	0x20001364
 800e4d0:	20004f64 	.word	0x20004f64
 800e4d4:	20004f6c 	.word	0x20004f6c
 800e4d8:	20004f74 	.word	0x20004f74
 800e4dc:	20004f70 	.word	0x20004f70
 800e4e0:	20004f80 	.word	0x20004f80

0800e4e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4e4:	b480      	push	{r7}
 800e4e6:	b085      	sub	sp, #20
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4ec:	4b28      	ldr	r3, [pc, #160]	@ (800e590 <prvInsertBlockIntoFreeList+0xac>)
 800e4ee:	60fb      	str	r3, [r7, #12]
 800e4f0:	e002      	b.n	800e4f8 <prvInsertBlockIntoFreeList+0x14>
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	60fb      	str	r3, [r7, #12]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d8f7      	bhi.n	800e4f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	4413      	add	r3, r2
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	429a      	cmp	r2, r3
 800e512:	d108      	bne.n	800e526 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	685a      	ldr	r2, [r3, #4]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	441a      	add	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	441a      	add	r2, r3
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	429a      	cmp	r2, r3
 800e538:	d118      	bne.n	800e56c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	4b15      	ldr	r3, [pc, #84]	@ (800e594 <prvInsertBlockIntoFreeList+0xb0>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	429a      	cmp	r2, r3
 800e544:	d00d      	beq.n	800e562 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	685a      	ldr	r2, [r3, #4]
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	685b      	ldr	r3, [r3, #4]
 800e550:	441a      	add	r2, r3
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	601a      	str	r2, [r3, #0]
 800e560:	e008      	b.n	800e574 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e562:	4b0c      	ldr	r3, [pc, #48]	@ (800e594 <prvInsertBlockIntoFreeList+0xb0>)
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	e003      	b.n	800e574 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681a      	ldr	r2, [r3, #0]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d002      	beq.n	800e582 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e582:	bf00      	nop
 800e584:	3714      	adds	r7, #20
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr
 800e58e:	bf00      	nop
 800e590:	20004f64 	.word	0x20004f64
 800e594:	20004f6c 	.word	0x20004f6c

0800e598 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e59c:	2201      	movs	r2, #1
 800e59e:	4912      	ldr	r1, [pc, #72]	@ (800e5e8 <MX_USB_DEVICE_Init+0x50>)
 800e5a0:	4812      	ldr	r0, [pc, #72]	@ (800e5ec <MX_USB_DEVICE_Init+0x54>)
 800e5a2:	f7fb ff2f 	bl	800a404 <USBD_Init>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e5ac:	f7f3 f836 	bl	800161c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e5b0:	490f      	ldr	r1, [pc, #60]	@ (800e5f0 <MX_USB_DEVICE_Init+0x58>)
 800e5b2:	480e      	ldr	r0, [pc, #56]	@ (800e5ec <MX_USB_DEVICE_Init+0x54>)
 800e5b4:	f7fb ff56 	bl	800a464 <USBD_RegisterClass>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d001      	beq.n	800e5c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e5be:	f7f3 f82d 	bl	800161c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e5c2:	490c      	ldr	r1, [pc, #48]	@ (800e5f4 <MX_USB_DEVICE_Init+0x5c>)
 800e5c4:	4809      	ldr	r0, [pc, #36]	@ (800e5ec <MX_USB_DEVICE_Init+0x54>)
 800e5c6:	f7fb fe4d 	bl	800a264 <USBD_CDC_RegisterInterface>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d001      	beq.n	800e5d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e5d0:	f7f3 f824 	bl	800161c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e5d4:	4805      	ldr	r0, [pc, #20]	@ (800e5ec <MX_USB_DEVICE_Init+0x54>)
 800e5d6:	f7fb ff7b 	bl	800a4d0 <USBD_Start>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d001      	beq.n	800e5e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e5e0:	f7f3 f81c 	bl	800161c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e5e4:	bf00      	nop
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	2000013c 	.word	0x2000013c
 800e5ec:	20004f84 	.word	0x20004f84
 800e5f0:	200000a4 	.word	0x200000a4
 800e5f4:	20000128 	.word	0x20000128

0800e5f8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	4905      	ldr	r1, [pc, #20]	@ (800e614 <CDC_Init_HS+0x1c>)
 800e600:	4805      	ldr	r0, [pc, #20]	@ (800e618 <CDC_Init_HS+0x20>)
 800e602:	f7fb fe49 	bl	800a298 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e606:	4905      	ldr	r1, [pc, #20]	@ (800e61c <CDC_Init_HS+0x24>)
 800e608:	4803      	ldr	r0, [pc, #12]	@ (800e618 <CDC_Init_HS+0x20>)
 800e60a:	f7fb fe67 	bl	800a2dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e60e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e610:	4618      	mov	r0, r3
 800e612:	bd80      	pop	{r7, pc}
 800e614:	20005a60 	.word	0x20005a60
 800e618:	20004f84 	.word	0x20004f84
 800e61c:	20005260 	.word	0x20005260

0800e620 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e620:	b480      	push	{r7}
 800e622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e624:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e626:	4618      	mov	r0, r3
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	6039      	str	r1, [r7, #0]
 800e63a:	71fb      	strb	r3, [r7, #7]
 800e63c:	4613      	mov	r3, r2
 800e63e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	2b23      	cmp	r3, #35	@ 0x23
 800e644:	d84a      	bhi.n	800e6dc <CDC_Control_HS+0xac>
 800e646:	a201      	add	r2, pc, #4	@ (adr r2, 800e64c <CDC_Control_HS+0x1c>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e6dd 	.word	0x0800e6dd
 800e650:	0800e6dd 	.word	0x0800e6dd
 800e654:	0800e6dd 	.word	0x0800e6dd
 800e658:	0800e6dd 	.word	0x0800e6dd
 800e65c:	0800e6dd 	.word	0x0800e6dd
 800e660:	0800e6dd 	.word	0x0800e6dd
 800e664:	0800e6dd 	.word	0x0800e6dd
 800e668:	0800e6dd 	.word	0x0800e6dd
 800e66c:	0800e6dd 	.word	0x0800e6dd
 800e670:	0800e6dd 	.word	0x0800e6dd
 800e674:	0800e6dd 	.word	0x0800e6dd
 800e678:	0800e6dd 	.word	0x0800e6dd
 800e67c:	0800e6dd 	.word	0x0800e6dd
 800e680:	0800e6dd 	.word	0x0800e6dd
 800e684:	0800e6dd 	.word	0x0800e6dd
 800e688:	0800e6dd 	.word	0x0800e6dd
 800e68c:	0800e6dd 	.word	0x0800e6dd
 800e690:	0800e6dd 	.word	0x0800e6dd
 800e694:	0800e6dd 	.word	0x0800e6dd
 800e698:	0800e6dd 	.word	0x0800e6dd
 800e69c:	0800e6dd 	.word	0x0800e6dd
 800e6a0:	0800e6dd 	.word	0x0800e6dd
 800e6a4:	0800e6dd 	.word	0x0800e6dd
 800e6a8:	0800e6dd 	.word	0x0800e6dd
 800e6ac:	0800e6dd 	.word	0x0800e6dd
 800e6b0:	0800e6dd 	.word	0x0800e6dd
 800e6b4:	0800e6dd 	.word	0x0800e6dd
 800e6b8:	0800e6dd 	.word	0x0800e6dd
 800e6bc:	0800e6dd 	.word	0x0800e6dd
 800e6c0:	0800e6dd 	.word	0x0800e6dd
 800e6c4:	0800e6dd 	.word	0x0800e6dd
 800e6c8:	0800e6dd 	.word	0x0800e6dd
 800e6cc:	0800e6dd 	.word	0x0800e6dd
 800e6d0:	0800e6dd 	.word	0x0800e6dd
 800e6d4:	0800e6dd 	.word	0x0800e6dd
 800e6d8:	0800e6dd 	.word	0x0800e6dd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e6dc:	bf00      	nop
  }

  return (USBD_OK);
 800e6de:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	4805      	ldr	r0, [pc, #20]	@ (800e710 <CDC_Receive_HS+0x24>)
 800e6fa:	f7fb fdef 	bl	800a2dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e6fe:	4804      	ldr	r0, [pc, #16]	@ (800e710 <CDC_Receive_HS+0x24>)
 800e700:	f7fb fe4a 	bl	800a398 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e704:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	20004f84 	.word	0x20004f84

0800e714 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e724:	4b0d      	ldr	r3, [pc, #52]	@ (800e75c <CDC_Transmit_HS+0x48>)
 800e726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e72a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800e736:	2301      	movs	r3, #1
 800e738:	e00b      	b.n	800e752 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e73a:	887b      	ldrh	r3, [r7, #2]
 800e73c:	461a      	mov	r2, r3
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	4806      	ldr	r0, [pc, #24]	@ (800e75c <CDC_Transmit_HS+0x48>)
 800e742:	f7fb fda9 	bl	800a298 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e746:	4805      	ldr	r0, [pc, #20]	@ (800e75c <CDC_Transmit_HS+0x48>)
 800e748:	f7fb fde6 	bl	800a318 <USBD_CDC_TransmitPacket>
 800e74c:	4603      	mov	r3, r0
 800e74e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e750:	7bfb      	ldrb	r3, [r7, #15]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	20004f84 	.word	0x20004f84

0800e760 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e760:	b480      	push	{r7}
 800e762:	b087      	sub	sp, #28
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	4613      	mov	r3, r2
 800e76c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e776:	4618      	mov	r0, r3
 800e778:	371c      	adds	r7, #28
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
	...

0800e784 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	6039      	str	r1, [r7, #0]
 800e78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2212      	movs	r2, #18
 800e794:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e796:	4b03      	ldr	r3, [pc, #12]	@ (800e7a4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	20000158 	.word	0x20000158

0800e7a8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	6039      	str	r1, [r7, #0]
 800e7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2204      	movs	r2, #4
 800e7b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e7ba:	4b03      	ldr	r3, [pc, #12]	@ (800e7c8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr
 800e7c8:	2000016c 	.word	0x2000016c

0800e7cc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	6039      	str	r1, [r7, #0]
 800e7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d105      	bne.n	800e7ea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4907      	ldr	r1, [pc, #28]	@ (800e800 <USBD_HS_ProductStrDescriptor+0x34>)
 800e7e2:	4808      	ldr	r0, [pc, #32]	@ (800e804 <USBD_HS_ProductStrDescriptor+0x38>)
 800e7e4:	f7fd f824 	bl	800b830 <USBD_GetString>
 800e7e8:	e004      	b.n	800e7f4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	4904      	ldr	r1, [pc, #16]	@ (800e800 <USBD_HS_ProductStrDescriptor+0x34>)
 800e7ee:	4805      	ldr	r0, [pc, #20]	@ (800e804 <USBD_HS_ProductStrDescriptor+0x38>)
 800e7f0:	f7fd f81e 	bl	800b830 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7f4:	4b02      	ldr	r3, [pc, #8]	@ (800e800 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20006260 	.word	0x20006260
 800e804:	08011ce0 	.word	0x08011ce0

0800e808 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e814:	683a      	ldr	r2, [r7, #0]
 800e816:	4904      	ldr	r1, [pc, #16]	@ (800e828 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e818:	4804      	ldr	r0, [pc, #16]	@ (800e82c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e81a:	f7fd f809 	bl	800b830 <USBD_GetString>
  return USBD_StrDesc;
 800e81e:	4b02      	ldr	r3, [pc, #8]	@ (800e828 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e820:	4618      	mov	r0, r3
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	20006260 	.word	0x20006260
 800e82c:	08011cf8 	.word	0x08011cf8

0800e830 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	4603      	mov	r3, r0
 800e838:	6039      	str	r1, [r7, #0]
 800e83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	221a      	movs	r2, #26
 800e840:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e842:	f000 f843 	bl	800e8cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e846:	4b02      	ldr	r3, [pc, #8]	@ (800e850 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	20000170 	.word	0x20000170

0800e854 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	4603      	mov	r3, r0
 800e85c:	6039      	str	r1, [r7, #0]
 800e85e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e860:	79fb      	ldrb	r3, [r7, #7]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	4907      	ldr	r1, [pc, #28]	@ (800e888 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e86a:	4808      	ldr	r0, [pc, #32]	@ (800e88c <USBD_HS_ConfigStrDescriptor+0x38>)
 800e86c:	f7fc ffe0 	bl	800b830 <USBD_GetString>
 800e870:	e004      	b.n	800e87c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	4904      	ldr	r1, [pc, #16]	@ (800e888 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e876:	4805      	ldr	r0, [pc, #20]	@ (800e88c <USBD_HS_ConfigStrDescriptor+0x38>)
 800e878:	f7fc ffda 	bl	800b830 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e87c:	4b02      	ldr	r3, [pc, #8]	@ (800e888 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	20006260 	.word	0x20006260
 800e88c:	08011d0c 	.word	0x08011d0c

0800e890 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	4603      	mov	r3, r0
 800e898:	6039      	str	r1, [r7, #0]
 800e89a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e89c:	79fb      	ldrb	r3, [r7, #7]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d105      	bne.n	800e8ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	4907      	ldr	r1, [pc, #28]	@ (800e8c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e8a6:	4808      	ldr	r0, [pc, #32]	@ (800e8c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e8a8:	f7fc ffc2 	bl	800b830 <USBD_GetString>
 800e8ac:	e004      	b.n	800e8b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	4904      	ldr	r1, [pc, #16]	@ (800e8c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e8b2:	4805      	ldr	r0, [pc, #20]	@ (800e8c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e8b4:	f7fc ffbc 	bl	800b830 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8b8:	4b02      	ldr	r3, [pc, #8]	@ (800e8c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3708      	adds	r7, #8
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	20006260 	.word	0x20006260
 800e8c8:	08011d18 	.word	0x08011d18

0800e8cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e910 <Get_SerialNum+0x44>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e914 <Get_SerialNum+0x48>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e8de:	4b0e      	ldr	r3, [pc, #56]	@ (800e918 <Get_SerialNum+0x4c>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d009      	beq.n	800e906 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e8f2:	2208      	movs	r2, #8
 800e8f4:	4909      	ldr	r1, [pc, #36]	@ (800e91c <Get_SerialNum+0x50>)
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 f814 	bl	800e924 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	4908      	ldr	r1, [pc, #32]	@ (800e920 <Get_SerialNum+0x54>)
 800e900:	68b8      	ldr	r0, [r7, #8]
 800e902:	f000 f80f 	bl	800e924 <IntToUnicode>
  }
}
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	1fff7a10 	.word	0x1fff7a10
 800e914:	1fff7a14 	.word	0x1fff7a14
 800e918:	1fff7a18 	.word	0x1fff7a18
 800e91c:	20000172 	.word	0x20000172
 800e920:	20000182 	.word	0x20000182

0800e924 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e924:	b480      	push	{r7}
 800e926:	b087      	sub	sp, #28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e936:	2300      	movs	r3, #0
 800e938:	75fb      	strb	r3, [r7, #23]
 800e93a:	e027      	b.n	800e98c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	0f1b      	lsrs	r3, r3, #28
 800e940:	2b09      	cmp	r3, #9
 800e942:	d80b      	bhi.n	800e95c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	0f1b      	lsrs	r3, r3, #28
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	4619      	mov	r1, r3
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	440b      	add	r3, r1
 800e954:	3230      	adds	r2, #48	@ 0x30
 800e956:	b2d2      	uxtb	r2, r2
 800e958:	701a      	strb	r2, [r3, #0]
 800e95a:	e00a      	b.n	800e972 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	0f1b      	lsrs	r3, r3, #28
 800e960:	b2da      	uxtb	r2, r3
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	4619      	mov	r1, r3
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	440b      	add	r3, r1
 800e96c:	3237      	adds	r2, #55	@ 0x37
 800e96e:	b2d2      	uxtb	r2, r2
 800e970:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	011b      	lsls	r3, r3, #4
 800e976:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e978:	7dfb      	ldrb	r3, [r7, #23]
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	3301      	adds	r3, #1
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	4413      	add	r3, r2
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e986:	7dfb      	ldrb	r3, [r7, #23]
 800e988:	3301      	adds	r3, #1
 800e98a:	75fb      	strb	r3, [r7, #23]
 800e98c:	7dfa      	ldrb	r2, [r7, #23]
 800e98e:	79fb      	ldrb	r3, [r7, #7]
 800e990:	429a      	cmp	r2, r3
 800e992:	d3d3      	bcc.n	800e93c <IntToUnicode+0x18>
  }
}
 800e994:	bf00      	nop
 800e996:	bf00      	nop
 800e998:	371c      	adds	r7, #28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
	...

0800e9a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b08a      	sub	sp, #40	@ 0x28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9ac:	f107 0314 	add.w	r3, r7, #20
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	605a      	str	r2, [r3, #4]
 800e9b6:	609a      	str	r2, [r3, #8]
 800e9b8:	60da      	str	r2, [r3, #12]
 800e9ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ea38 <HAL_PCD_MspInit+0x94>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d134      	bne.n	800ea30 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	613b      	str	r3, [r7, #16]
 800e9ca:	4b1c      	ldr	r3, [pc, #112]	@ (800ea3c <HAL_PCD_MspInit+0x98>)
 800e9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9ce:	4a1b      	ldr	r2, [pc, #108]	@ (800ea3c <HAL_PCD_MspInit+0x98>)
 800e9d0:	f043 0302 	orr.w	r3, r3, #2
 800e9d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800e9d6:	4b19      	ldr	r3, [pc, #100]	@ (800ea3c <HAL_PCD_MspInit+0x98>)
 800e9d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9da:	f003 0302 	and.w	r3, r3, #2
 800e9de:	613b      	str	r3, [r7, #16]
 800e9e0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e9e2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800e9e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e9f4:	230c      	movs	r3, #12
 800e9f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e9f8:	f107 0314 	add.w	r3, r7, #20
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	4810      	ldr	r0, [pc, #64]	@ (800ea40 <HAL_PCD_MspInit+0x9c>)
 800ea00:	f7f5 fd0e 	bl	8004420 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ea04:	2300      	movs	r3, #0
 800ea06:	60fb      	str	r3, [r7, #12]
 800ea08:	4b0c      	ldr	r3, [pc, #48]	@ (800ea3c <HAL_PCD_MspInit+0x98>)
 800ea0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea0c:	4a0b      	ldr	r2, [pc, #44]	@ (800ea3c <HAL_PCD_MspInit+0x98>)
 800ea0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ea12:	6313      	str	r3, [r2, #48]	@ 0x30
 800ea14:	4b09      	ldr	r3, [pc, #36]	@ (800ea3c <HAL_PCD_MspInit+0x98>)
 800ea16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea1c:	60fb      	str	r3, [r7, #12]
 800ea1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ea20:	2200      	movs	r2, #0
 800ea22:	2105      	movs	r1, #5
 800ea24:	204d      	movs	r0, #77	@ 0x4d
 800ea26:	f7f5 f87d 	bl	8003b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ea2a:	204d      	movs	r0, #77	@ 0x4d
 800ea2c:	f7f5 f896 	bl	8003b5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ea30:	bf00      	nop
 800ea32:	3728      	adds	r7, #40	@ 0x28
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	40040000 	.word	0x40040000
 800ea3c:	40023800 	.word	0x40023800
 800ea40:	40020400 	.word	0x40020400

0800ea44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ea58:	4619      	mov	r1, r3
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	f7fb fd85 	bl	800a56a <USBD_LL_SetupStage>
}
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	460b      	mov	r3, r1
 800ea72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ea7a:	78fa      	ldrb	r2, [r7, #3]
 800ea7c:	6879      	ldr	r1, [r7, #4]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	00db      	lsls	r3, r3, #3
 800ea82:	4413      	add	r3, r2
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	440b      	add	r3, r1
 800ea88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	78fb      	ldrb	r3, [r7, #3]
 800ea90:	4619      	mov	r1, r3
 800ea92:	f7fb fdbf 	bl	800a614 <USBD_LL_DataOutStage>
}
 800ea96:	bf00      	nop
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b082      	sub	sp, #8
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eab0:	78fa      	ldrb	r2, [r7, #3]
 800eab2:	6879      	ldr	r1, [r7, #4]
 800eab4:	4613      	mov	r3, r2
 800eab6:	00db      	lsls	r3, r3, #3
 800eab8:	4413      	add	r3, r2
 800eaba:	009b      	lsls	r3, r3, #2
 800eabc:	440b      	add	r3, r1
 800eabe:	3320      	adds	r3, #32
 800eac0:	681a      	ldr	r2, [r3, #0]
 800eac2:	78fb      	ldrb	r3, [r7, #3]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f7fb fe58 	bl	800a77a <USBD_LL_DataInStage>
}
 800eaca:	bf00      	nop
 800eacc:	3708      	adds	r7, #8
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eae0:	4618      	mov	r0, r3
 800eae2:	f7fb ff92 	bl	800aa0a <USBD_LL_SOF>
}
 800eae6:	bf00      	nop
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b084      	sub	sp, #16
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	79db      	ldrb	r3, [r3, #7]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eb02:	2300      	movs	r3, #0
 800eb04:	73fb      	strb	r3, [r7, #15]
 800eb06:	e008      	b.n	800eb1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	79db      	ldrb	r3, [r3, #7]
 800eb0c:	2b02      	cmp	r3, #2
 800eb0e:	d102      	bne.n	800eb16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eb10:	2301      	movs	r3, #1
 800eb12:	73fb      	strb	r3, [r7, #15]
 800eb14:	e001      	b.n	800eb1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eb16:	f7f2 fd81 	bl	800161c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb20:	7bfa      	ldrb	r2, [r7, #15]
 800eb22:	4611      	mov	r1, r2
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fb ff2c 	bl	800a982 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fb fed4 	bl	800a8de <USBD_LL_Reset>
}
 800eb36:	bf00      	nop
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
	...

0800eb40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b082      	sub	sp, #8
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fb ff27 	bl	800a9a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	6812      	ldr	r2, [r2, #0]
 800eb62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800eb66:	f043 0301 	orr.w	r3, r3, #1
 800eb6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	7adb      	ldrb	r3, [r3, #11]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d005      	beq.n	800eb80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eb74:	4b04      	ldr	r3, [pc, #16]	@ (800eb88 <HAL_PCD_SuspendCallback+0x48>)
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	4a03      	ldr	r2, [pc, #12]	@ (800eb88 <HAL_PCD_SuspendCallback+0x48>)
 800eb7a:	f043 0306 	orr.w	r3, r3, #6
 800eb7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eb80:	bf00      	nop
 800eb82:	3708      	adds	r7, #8
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}
 800eb88:	e000ed00 	.word	0xe000ed00

0800eb8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fb ff1d 	bl	800a9da <USBD_LL_Resume>
}
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebba:	78fa      	ldrb	r2, [r7, #3]
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7fb ff75 	bl	800aaae <USBD_LL_IsoOUTIncomplete>
}
 800ebc4:	bf00      	nop
 800ebc6:	3708      	adds	r7, #8
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b082      	sub	sp, #8
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebde:	78fa      	ldrb	r2, [r7, #3]
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7fb ff31 	bl	800aa4a <USBD_LL_IsoINIncomplete>
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fb ff87 	bl	800ab12 <USBD_LL_DevConnected>
}
 800ec04:	bf00      	nop
 800ec06:	3708      	adds	r7, #8
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7fb ff84 	bl	800ab28 <USBD_LL_DevDisconnected>
}
 800ec20:	bf00      	nop
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}

0800ec28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d140      	bne.n	800ecba <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800ec38:	4a22      	ldr	r2, [pc, #136]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	4a20      	ldr	r2, [pc, #128]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec44:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ec48:	4b1e      	ldr	r3, [pc, #120]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec4a:	4a1f      	ldr	r2, [pc, #124]	@ (800ecc8 <USBD_LL_Init+0xa0>)
 800ec4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800ec4e:	4b1d      	ldr	r3, [pc, #116]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec50:	2206      	movs	r2, #6
 800ec52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800ec54:	4b1b      	ldr	r3, [pc, #108]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec56:	2202      	movs	r2, #2
 800ec58:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ec5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ec60:	4b18      	ldr	r3, [pc, #96]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec62:	2202      	movs	r2, #2
 800ec64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ec66:	4b17      	ldr	r3, [pc, #92]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec68:	2200      	movs	r2, #0
 800ec6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ec6c:	4b15      	ldr	r3, [pc, #84]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec6e:	2200      	movs	r2, #0
 800ec70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800ec72:	4b14      	ldr	r3, [pc, #80]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec74:	2200      	movs	r2, #0
 800ec76:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ec78:	4b12      	ldr	r3, [pc, #72]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800ec7e:	4b11      	ldr	r3, [pc, #68]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec80:	2200      	movs	r2, #0
 800ec82:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ec84:	4b0f      	ldr	r3, [pc, #60]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800ec8a:	480e      	ldr	r0, [pc, #56]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ec8c:	f7f6 f867 	bl	8004d5e <HAL_PCD_Init>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d001      	beq.n	800ec9a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ec96:	f7f2 fcc1 	bl	800161c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800ec9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ec9e:	4809      	ldr	r0, [pc, #36]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800eca0:	f7f7 fa93 	bl	80061ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800eca4:	2280      	movs	r2, #128	@ 0x80
 800eca6:	2100      	movs	r1, #0
 800eca8:	4806      	ldr	r0, [pc, #24]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ecaa:	f7f7 fa47 	bl	800613c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ecae:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800ecb2:	2101      	movs	r1, #1
 800ecb4:	4803      	ldr	r0, [pc, #12]	@ (800ecc4 <USBD_LL_Init+0x9c>)
 800ecb6:	f7f7 fa41 	bl	800613c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	20006460 	.word	0x20006460
 800ecc8:	40040000 	.word	0x40040000

0800eccc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7f6 f94a 	bl	8004f7c <HAL_PCD_Start>
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f000 f942 	bl	800ef78 <USBD_Get_USB_Status>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3710      	adds	r7, #16
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}

0800ed02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed02:	b580      	push	{r7, lr}
 800ed04:	b084      	sub	sp, #16
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	6078      	str	r0, [r7, #4]
 800ed0a:	4608      	mov	r0, r1
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	461a      	mov	r2, r3
 800ed10:	4603      	mov	r3, r0
 800ed12:	70fb      	strb	r3, [r7, #3]
 800ed14:	460b      	mov	r3, r1
 800ed16:	70bb      	strb	r3, [r7, #2]
 800ed18:	4613      	mov	r3, r2
 800ed1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed20:	2300      	movs	r3, #0
 800ed22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ed2a:	78bb      	ldrb	r3, [r7, #2]
 800ed2c:	883a      	ldrh	r2, [r7, #0]
 800ed2e:	78f9      	ldrb	r1, [r7, #3]
 800ed30:	f7f6 fe1e 	bl	8005970 <HAL_PCD_EP_Open>
 800ed34:	4603      	mov	r3, r0
 800ed36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f000 f91c 	bl	800ef78 <USBD_Get_USB_Status>
 800ed40:	4603      	mov	r3, r0
 800ed42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b084      	sub	sp, #16
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
 800ed56:	460b      	mov	r3, r1
 800ed58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed68:	78fa      	ldrb	r2, [r7, #3]
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7f6 fe69 	bl	8005a44 <HAL_PCD_EP_Close>
 800ed72:	4603      	mov	r3, r0
 800ed74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed76:	7bfb      	ldrb	r3, [r7, #15]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 f8fd 	bl	800ef78 <USBD_Get_USB_Status>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3710      	adds	r7, #16
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed98:	2300      	movs	r3, #0
 800ed9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eda6:	78fa      	ldrb	r2, [r7, #3]
 800eda8:	4611      	mov	r1, r2
 800edaa:	4618      	mov	r0, r3
 800edac:	f7f6 ff21 	bl	8005bf2 <HAL_PCD_EP_SetStall>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	4618      	mov	r0, r3
 800edb8:	f000 f8de 	bl	800ef78 <USBD_Get_USB_Status>
 800edbc:	4603      	mov	r3, r0
 800edbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
 800edd2:	460b      	mov	r3, r1
 800edd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edda:	2300      	movs	r3, #0
 800eddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ede4:	78fa      	ldrb	r2, [r7, #3]
 800ede6:	4611      	mov	r1, r2
 800ede8:	4618      	mov	r0, r3
 800edea:	f7f6 ff65 	bl	8005cb8 <HAL_PCD_EP_ClrStall>
 800edee:	4603      	mov	r3, r0
 800edf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edf2:	7bfb      	ldrb	r3, [r7, #15]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 f8bf 	bl	800ef78 <USBD_Get_USB_Status>
 800edfa:	4603      	mov	r3, r0
 800edfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3710      	adds	r7, #16
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b085      	sub	sp, #20
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
 800ee10:	460b      	mov	r3, r1
 800ee12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	da0b      	bge.n	800ee3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee24:	78fb      	ldrb	r3, [r7, #3]
 800ee26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee2a:	68f9      	ldr	r1, [r7, #12]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	4413      	add	r3, r2
 800ee32:	009b      	lsls	r3, r3, #2
 800ee34:	440b      	add	r3, r1
 800ee36:	3316      	adds	r3, #22
 800ee38:	781b      	ldrb	r3, [r3, #0]
 800ee3a:	e00b      	b.n	800ee54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ee3c:	78fb      	ldrb	r3, [r7, #3]
 800ee3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee42:	68f9      	ldr	r1, [r7, #12]
 800ee44:	4613      	mov	r3, r2
 800ee46:	00db      	lsls	r3, r3, #3
 800ee48:	4413      	add	r3, r2
 800ee4a:	009b      	lsls	r3, r3, #2
 800ee4c:	440b      	add	r3, r1
 800ee4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ee52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	460b      	mov	r3, r1
 800ee6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee7a:	78fa      	ldrb	r2, [r7, #3]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7f6 fd52 	bl	8005928 <HAL_PCD_SetAddress>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f000 f874 	bl	800ef78 <USBD_Get_USB_Status>
 800ee90:	4603      	mov	r3, r0
 800ee92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b086      	sub	sp, #24
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	60f8      	str	r0, [r7, #12]
 800eea6:	607a      	str	r2, [r7, #4]
 800eea8:	603b      	str	r3, [r7, #0]
 800eeaa:	460b      	mov	r3, r1
 800eeac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eebc:	7af9      	ldrb	r1, [r7, #11]
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	f7f6 fe5c 	bl	8005b7e <HAL_PCD_EP_Transmit>
 800eec6:	4603      	mov	r3, r0
 800eec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeca:	7dfb      	ldrb	r3, [r7, #23]
 800eecc:	4618      	mov	r0, r3
 800eece:	f000 f853 	bl	800ef78 <USBD_Get_USB_Status>
 800eed2:	4603      	mov	r3, r0
 800eed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eed6:	7dbb      	ldrb	r3, [r7, #22]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3718      	adds	r7, #24
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b086      	sub	sp, #24
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	607a      	str	r2, [r7, #4]
 800eeea:	603b      	str	r3, [r7, #0]
 800eeec:	460b      	mov	r3, r1
 800eeee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eef0:	2300      	movs	r3, #0
 800eef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eef4:	2300      	movs	r3, #0
 800eef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eefe:	7af9      	ldrb	r1, [r7, #11]
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	f7f6 fde8 	bl	8005ad8 <HAL_PCD_EP_Receive>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef0c:	7dfb      	ldrb	r3, [r7, #23]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 f832 	bl	800ef78 <USBD_Get_USB_Status>
 800ef14:	4603      	mov	r3, r0
 800ef16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef18:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3718      	adds	r7, #24
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}

0800ef22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef22:	b580      	push	{r7, lr}
 800ef24:	b082      	sub	sp, #8
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef34:	78fa      	ldrb	r2, [r7, #3]
 800ef36:	4611      	mov	r1, r2
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7f6 fe08 	bl	8005b4e <HAL_PCD_EP_GetRxCount>
 800ef3e:	4603      	mov	r3, r0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3708      	adds	r7, #8
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ef50:	4b03      	ldr	r3, [pc, #12]	@ (800ef60 <USBD_static_malloc+0x18>)
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	370c      	adds	r7, #12
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
 800ef5e:	bf00      	nop
 800ef60:	20006944 	.word	0x20006944

0800ef64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]

}
 800ef6c:	bf00      	nop
 800ef6e:	370c      	adds	r7, #12
 800ef70:	46bd      	mov	sp, r7
 800ef72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef76:	4770      	bx	lr

0800ef78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b085      	sub	sp, #20
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef82:	2300      	movs	r3, #0
 800ef84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ef86:	79fb      	ldrb	r3, [r7, #7]
 800ef88:	2b03      	cmp	r3, #3
 800ef8a:	d817      	bhi.n	800efbc <USBD_Get_USB_Status+0x44>
 800ef8c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef94 <USBD_Get_USB_Status+0x1c>)
 800ef8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef92:	bf00      	nop
 800ef94:	0800efa5 	.word	0x0800efa5
 800ef98:	0800efab 	.word	0x0800efab
 800ef9c:	0800efb1 	.word	0x0800efb1
 800efa0:	0800efb7 	.word	0x0800efb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
    break;
 800efa8:	e00b      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800efaa:	2303      	movs	r3, #3
 800efac:	73fb      	strb	r3, [r7, #15]
    break;
 800efae:	e008      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800efb0:	2301      	movs	r3, #1
 800efb2:	73fb      	strb	r3, [r7, #15]
    break;
 800efb4:	e005      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800efb6:	2303      	movs	r3, #3
 800efb8:	73fb      	strb	r3, [r7, #15]
    break;
 800efba:	e002      	b.n	800efc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800efbc:	2303      	movs	r3, #3
 800efbe:	73fb      	strb	r3, [r7, #15]
    break;
 800efc0:	bf00      	nop
  }
  return usb_status;
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc4:	4618      	mov	r0, r3
 800efc6:	3714      	adds	r7, #20
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <__cvt>:
 800efd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efd4:	ec57 6b10 	vmov	r6, r7, d0
 800efd8:	2f00      	cmp	r7, #0
 800efda:	460c      	mov	r4, r1
 800efdc:	4619      	mov	r1, r3
 800efde:	463b      	mov	r3, r7
 800efe0:	bfbb      	ittet	lt
 800efe2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800efe6:	461f      	movlt	r7, r3
 800efe8:	2300      	movge	r3, #0
 800efea:	232d      	movlt	r3, #45	@ 0x2d
 800efec:	700b      	strb	r3, [r1, #0]
 800efee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eff0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800eff4:	4691      	mov	r9, r2
 800eff6:	f023 0820 	bic.w	r8, r3, #32
 800effa:	bfbc      	itt	lt
 800effc:	4632      	movlt	r2, r6
 800effe:	4616      	movlt	r6, r2
 800f000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f004:	d005      	beq.n	800f012 <__cvt+0x42>
 800f006:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f00a:	d100      	bne.n	800f00e <__cvt+0x3e>
 800f00c:	3401      	adds	r4, #1
 800f00e:	2102      	movs	r1, #2
 800f010:	e000      	b.n	800f014 <__cvt+0x44>
 800f012:	2103      	movs	r1, #3
 800f014:	ab03      	add	r3, sp, #12
 800f016:	9301      	str	r3, [sp, #4]
 800f018:	ab02      	add	r3, sp, #8
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	ec47 6b10 	vmov	d0, r6, r7
 800f020:	4653      	mov	r3, sl
 800f022:	4622      	mov	r2, r4
 800f024:	f000 fe68 	bl	800fcf8 <_dtoa_r>
 800f028:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f02c:	4605      	mov	r5, r0
 800f02e:	d119      	bne.n	800f064 <__cvt+0x94>
 800f030:	f019 0f01 	tst.w	r9, #1
 800f034:	d00e      	beq.n	800f054 <__cvt+0x84>
 800f036:	eb00 0904 	add.w	r9, r0, r4
 800f03a:	2200      	movs	r2, #0
 800f03c:	2300      	movs	r3, #0
 800f03e:	4630      	mov	r0, r6
 800f040:	4639      	mov	r1, r7
 800f042:	f7f1 fd51 	bl	8000ae8 <__aeabi_dcmpeq>
 800f046:	b108      	cbz	r0, 800f04c <__cvt+0x7c>
 800f048:	f8cd 900c 	str.w	r9, [sp, #12]
 800f04c:	2230      	movs	r2, #48	@ 0x30
 800f04e:	9b03      	ldr	r3, [sp, #12]
 800f050:	454b      	cmp	r3, r9
 800f052:	d31e      	bcc.n	800f092 <__cvt+0xc2>
 800f054:	9b03      	ldr	r3, [sp, #12]
 800f056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f058:	1b5b      	subs	r3, r3, r5
 800f05a:	4628      	mov	r0, r5
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	b004      	add	sp, #16
 800f060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f064:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f068:	eb00 0904 	add.w	r9, r0, r4
 800f06c:	d1e5      	bne.n	800f03a <__cvt+0x6a>
 800f06e:	7803      	ldrb	r3, [r0, #0]
 800f070:	2b30      	cmp	r3, #48	@ 0x30
 800f072:	d10a      	bne.n	800f08a <__cvt+0xba>
 800f074:	2200      	movs	r2, #0
 800f076:	2300      	movs	r3, #0
 800f078:	4630      	mov	r0, r6
 800f07a:	4639      	mov	r1, r7
 800f07c:	f7f1 fd34 	bl	8000ae8 <__aeabi_dcmpeq>
 800f080:	b918      	cbnz	r0, 800f08a <__cvt+0xba>
 800f082:	f1c4 0401 	rsb	r4, r4, #1
 800f086:	f8ca 4000 	str.w	r4, [sl]
 800f08a:	f8da 3000 	ldr.w	r3, [sl]
 800f08e:	4499      	add	r9, r3
 800f090:	e7d3      	b.n	800f03a <__cvt+0x6a>
 800f092:	1c59      	adds	r1, r3, #1
 800f094:	9103      	str	r1, [sp, #12]
 800f096:	701a      	strb	r2, [r3, #0]
 800f098:	e7d9      	b.n	800f04e <__cvt+0x7e>

0800f09a <__exponent>:
 800f09a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f09c:	2900      	cmp	r1, #0
 800f09e:	bfba      	itte	lt
 800f0a0:	4249      	neglt	r1, r1
 800f0a2:	232d      	movlt	r3, #45	@ 0x2d
 800f0a4:	232b      	movge	r3, #43	@ 0x2b
 800f0a6:	2909      	cmp	r1, #9
 800f0a8:	7002      	strb	r2, [r0, #0]
 800f0aa:	7043      	strb	r3, [r0, #1]
 800f0ac:	dd29      	ble.n	800f102 <__exponent+0x68>
 800f0ae:	f10d 0307 	add.w	r3, sp, #7
 800f0b2:	461d      	mov	r5, r3
 800f0b4:	270a      	movs	r7, #10
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800f0bc:	fb07 1416 	mls	r4, r7, r6, r1
 800f0c0:	3430      	adds	r4, #48	@ 0x30
 800f0c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	2c63      	cmp	r4, #99	@ 0x63
 800f0ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800f0ce:	4631      	mov	r1, r6
 800f0d0:	dcf1      	bgt.n	800f0b6 <__exponent+0x1c>
 800f0d2:	3130      	adds	r1, #48	@ 0x30
 800f0d4:	1e94      	subs	r4, r2, #2
 800f0d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f0da:	1c41      	adds	r1, r0, #1
 800f0dc:	4623      	mov	r3, r4
 800f0de:	42ab      	cmp	r3, r5
 800f0e0:	d30a      	bcc.n	800f0f8 <__exponent+0x5e>
 800f0e2:	f10d 0309 	add.w	r3, sp, #9
 800f0e6:	1a9b      	subs	r3, r3, r2
 800f0e8:	42ac      	cmp	r4, r5
 800f0ea:	bf88      	it	hi
 800f0ec:	2300      	movhi	r3, #0
 800f0ee:	3302      	adds	r3, #2
 800f0f0:	4403      	add	r3, r0
 800f0f2:	1a18      	subs	r0, r3, r0
 800f0f4:	b003      	add	sp, #12
 800f0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f0fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f100:	e7ed      	b.n	800f0de <__exponent+0x44>
 800f102:	2330      	movs	r3, #48	@ 0x30
 800f104:	3130      	adds	r1, #48	@ 0x30
 800f106:	7083      	strb	r3, [r0, #2]
 800f108:	70c1      	strb	r1, [r0, #3]
 800f10a:	1d03      	adds	r3, r0, #4
 800f10c:	e7f1      	b.n	800f0f2 <__exponent+0x58>
	...

0800f110 <_printf_float>:
 800f110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f114:	b08d      	sub	sp, #52	@ 0x34
 800f116:	460c      	mov	r4, r1
 800f118:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f11c:	4616      	mov	r6, r2
 800f11e:	461f      	mov	r7, r3
 800f120:	4605      	mov	r5, r0
 800f122:	f000 fcdb 	bl	800fadc <_localeconv_r>
 800f126:	6803      	ldr	r3, [r0, #0]
 800f128:	9304      	str	r3, [sp, #16]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7f1 f8b0 	bl	8000290 <strlen>
 800f130:	2300      	movs	r3, #0
 800f132:	930a      	str	r3, [sp, #40]	@ 0x28
 800f134:	f8d8 3000 	ldr.w	r3, [r8]
 800f138:	9005      	str	r0, [sp, #20]
 800f13a:	3307      	adds	r3, #7
 800f13c:	f023 0307 	bic.w	r3, r3, #7
 800f140:	f103 0208 	add.w	r2, r3, #8
 800f144:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f148:	f8d4 b000 	ldr.w	fp, [r4]
 800f14c:	f8c8 2000 	str.w	r2, [r8]
 800f150:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f154:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f158:	9307      	str	r3, [sp, #28]
 800f15a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f15e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f166:	4b9c      	ldr	r3, [pc, #624]	@ (800f3d8 <_printf_float+0x2c8>)
 800f168:	f04f 32ff 	mov.w	r2, #4294967295
 800f16c:	f7f1 fcee 	bl	8000b4c <__aeabi_dcmpun>
 800f170:	bb70      	cbnz	r0, 800f1d0 <_printf_float+0xc0>
 800f172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f176:	4b98      	ldr	r3, [pc, #608]	@ (800f3d8 <_printf_float+0x2c8>)
 800f178:	f04f 32ff 	mov.w	r2, #4294967295
 800f17c:	f7f1 fcc8 	bl	8000b10 <__aeabi_dcmple>
 800f180:	bb30      	cbnz	r0, 800f1d0 <_printf_float+0xc0>
 800f182:	2200      	movs	r2, #0
 800f184:	2300      	movs	r3, #0
 800f186:	4640      	mov	r0, r8
 800f188:	4649      	mov	r1, r9
 800f18a:	f7f1 fcb7 	bl	8000afc <__aeabi_dcmplt>
 800f18e:	b110      	cbz	r0, 800f196 <_printf_float+0x86>
 800f190:	232d      	movs	r3, #45	@ 0x2d
 800f192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f196:	4a91      	ldr	r2, [pc, #580]	@ (800f3dc <_printf_float+0x2cc>)
 800f198:	4b91      	ldr	r3, [pc, #580]	@ (800f3e0 <_printf_float+0x2d0>)
 800f19a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f19e:	bf94      	ite	ls
 800f1a0:	4690      	movls	r8, r2
 800f1a2:	4698      	movhi	r8, r3
 800f1a4:	2303      	movs	r3, #3
 800f1a6:	6123      	str	r3, [r4, #16]
 800f1a8:	f02b 0304 	bic.w	r3, fp, #4
 800f1ac:	6023      	str	r3, [r4, #0]
 800f1ae:	f04f 0900 	mov.w	r9, #0
 800f1b2:	9700      	str	r7, [sp, #0]
 800f1b4:	4633      	mov	r3, r6
 800f1b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f1b8:	4621      	mov	r1, r4
 800f1ba:	4628      	mov	r0, r5
 800f1bc:	f000 f9d2 	bl	800f564 <_printf_common>
 800f1c0:	3001      	adds	r0, #1
 800f1c2:	f040 808d 	bne.w	800f2e0 <_printf_float+0x1d0>
 800f1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ca:	b00d      	add	sp, #52	@ 0x34
 800f1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d0:	4642      	mov	r2, r8
 800f1d2:	464b      	mov	r3, r9
 800f1d4:	4640      	mov	r0, r8
 800f1d6:	4649      	mov	r1, r9
 800f1d8:	f7f1 fcb8 	bl	8000b4c <__aeabi_dcmpun>
 800f1dc:	b140      	cbz	r0, 800f1f0 <_printf_float+0xe0>
 800f1de:	464b      	mov	r3, r9
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	bfbc      	itt	lt
 800f1e4:	232d      	movlt	r3, #45	@ 0x2d
 800f1e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f1ea:	4a7e      	ldr	r2, [pc, #504]	@ (800f3e4 <_printf_float+0x2d4>)
 800f1ec:	4b7e      	ldr	r3, [pc, #504]	@ (800f3e8 <_printf_float+0x2d8>)
 800f1ee:	e7d4      	b.n	800f19a <_printf_float+0x8a>
 800f1f0:	6863      	ldr	r3, [r4, #4]
 800f1f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f1f6:	9206      	str	r2, [sp, #24]
 800f1f8:	1c5a      	adds	r2, r3, #1
 800f1fa:	d13b      	bne.n	800f274 <_printf_float+0x164>
 800f1fc:	2306      	movs	r3, #6
 800f1fe:	6063      	str	r3, [r4, #4]
 800f200:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f204:	2300      	movs	r3, #0
 800f206:	6022      	str	r2, [r4, #0]
 800f208:	9303      	str	r3, [sp, #12]
 800f20a:	ab0a      	add	r3, sp, #40	@ 0x28
 800f20c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f210:	ab09      	add	r3, sp, #36	@ 0x24
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	6861      	ldr	r1, [r4, #4]
 800f216:	ec49 8b10 	vmov	d0, r8, r9
 800f21a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f21e:	4628      	mov	r0, r5
 800f220:	f7ff fed6 	bl	800efd0 <__cvt>
 800f224:	9b06      	ldr	r3, [sp, #24]
 800f226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f228:	2b47      	cmp	r3, #71	@ 0x47
 800f22a:	4680      	mov	r8, r0
 800f22c:	d129      	bne.n	800f282 <_printf_float+0x172>
 800f22e:	1cc8      	adds	r0, r1, #3
 800f230:	db02      	blt.n	800f238 <_printf_float+0x128>
 800f232:	6863      	ldr	r3, [r4, #4]
 800f234:	4299      	cmp	r1, r3
 800f236:	dd41      	ble.n	800f2bc <_printf_float+0x1ac>
 800f238:	f1aa 0a02 	sub.w	sl, sl, #2
 800f23c:	fa5f fa8a 	uxtb.w	sl, sl
 800f240:	3901      	subs	r1, #1
 800f242:	4652      	mov	r2, sl
 800f244:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f248:	9109      	str	r1, [sp, #36]	@ 0x24
 800f24a:	f7ff ff26 	bl	800f09a <__exponent>
 800f24e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f250:	1813      	adds	r3, r2, r0
 800f252:	2a01      	cmp	r2, #1
 800f254:	4681      	mov	r9, r0
 800f256:	6123      	str	r3, [r4, #16]
 800f258:	dc02      	bgt.n	800f260 <_printf_float+0x150>
 800f25a:	6822      	ldr	r2, [r4, #0]
 800f25c:	07d2      	lsls	r2, r2, #31
 800f25e:	d501      	bpl.n	800f264 <_printf_float+0x154>
 800f260:	3301      	adds	r3, #1
 800f262:	6123      	str	r3, [r4, #16]
 800f264:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d0a2      	beq.n	800f1b2 <_printf_float+0xa2>
 800f26c:	232d      	movs	r3, #45	@ 0x2d
 800f26e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f272:	e79e      	b.n	800f1b2 <_printf_float+0xa2>
 800f274:	9a06      	ldr	r2, [sp, #24]
 800f276:	2a47      	cmp	r2, #71	@ 0x47
 800f278:	d1c2      	bne.n	800f200 <_printf_float+0xf0>
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d1c0      	bne.n	800f200 <_printf_float+0xf0>
 800f27e:	2301      	movs	r3, #1
 800f280:	e7bd      	b.n	800f1fe <_printf_float+0xee>
 800f282:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f286:	d9db      	bls.n	800f240 <_printf_float+0x130>
 800f288:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f28c:	d118      	bne.n	800f2c0 <_printf_float+0x1b0>
 800f28e:	2900      	cmp	r1, #0
 800f290:	6863      	ldr	r3, [r4, #4]
 800f292:	dd0b      	ble.n	800f2ac <_printf_float+0x19c>
 800f294:	6121      	str	r1, [r4, #16]
 800f296:	b913      	cbnz	r3, 800f29e <_printf_float+0x18e>
 800f298:	6822      	ldr	r2, [r4, #0]
 800f29a:	07d0      	lsls	r0, r2, #31
 800f29c:	d502      	bpl.n	800f2a4 <_printf_float+0x194>
 800f29e:	3301      	adds	r3, #1
 800f2a0:	440b      	add	r3, r1
 800f2a2:	6123      	str	r3, [r4, #16]
 800f2a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f2a6:	f04f 0900 	mov.w	r9, #0
 800f2aa:	e7db      	b.n	800f264 <_printf_float+0x154>
 800f2ac:	b913      	cbnz	r3, 800f2b4 <_printf_float+0x1a4>
 800f2ae:	6822      	ldr	r2, [r4, #0]
 800f2b0:	07d2      	lsls	r2, r2, #31
 800f2b2:	d501      	bpl.n	800f2b8 <_printf_float+0x1a8>
 800f2b4:	3302      	adds	r3, #2
 800f2b6:	e7f4      	b.n	800f2a2 <_printf_float+0x192>
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	e7f2      	b.n	800f2a2 <_printf_float+0x192>
 800f2bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f2c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2c2:	4299      	cmp	r1, r3
 800f2c4:	db05      	blt.n	800f2d2 <_printf_float+0x1c2>
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	6121      	str	r1, [r4, #16]
 800f2ca:	07d8      	lsls	r0, r3, #31
 800f2cc:	d5ea      	bpl.n	800f2a4 <_printf_float+0x194>
 800f2ce:	1c4b      	adds	r3, r1, #1
 800f2d0:	e7e7      	b.n	800f2a2 <_printf_float+0x192>
 800f2d2:	2900      	cmp	r1, #0
 800f2d4:	bfd4      	ite	le
 800f2d6:	f1c1 0202 	rsble	r2, r1, #2
 800f2da:	2201      	movgt	r2, #1
 800f2dc:	4413      	add	r3, r2
 800f2de:	e7e0      	b.n	800f2a2 <_printf_float+0x192>
 800f2e0:	6823      	ldr	r3, [r4, #0]
 800f2e2:	055a      	lsls	r2, r3, #21
 800f2e4:	d407      	bmi.n	800f2f6 <_printf_float+0x1e6>
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	4628      	mov	r0, r5
 800f2ee:	47b8      	blx	r7
 800f2f0:	3001      	adds	r0, #1
 800f2f2:	d12b      	bne.n	800f34c <_printf_float+0x23c>
 800f2f4:	e767      	b.n	800f1c6 <_printf_float+0xb6>
 800f2f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f2fa:	f240 80dd 	bls.w	800f4b8 <_printf_float+0x3a8>
 800f2fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f302:	2200      	movs	r2, #0
 800f304:	2300      	movs	r3, #0
 800f306:	f7f1 fbef 	bl	8000ae8 <__aeabi_dcmpeq>
 800f30a:	2800      	cmp	r0, #0
 800f30c:	d033      	beq.n	800f376 <_printf_float+0x266>
 800f30e:	4a37      	ldr	r2, [pc, #220]	@ (800f3ec <_printf_float+0x2dc>)
 800f310:	2301      	movs	r3, #1
 800f312:	4631      	mov	r1, r6
 800f314:	4628      	mov	r0, r5
 800f316:	47b8      	blx	r7
 800f318:	3001      	adds	r0, #1
 800f31a:	f43f af54 	beq.w	800f1c6 <_printf_float+0xb6>
 800f31e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f322:	4543      	cmp	r3, r8
 800f324:	db02      	blt.n	800f32c <_printf_float+0x21c>
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	07d8      	lsls	r0, r3, #31
 800f32a:	d50f      	bpl.n	800f34c <_printf_float+0x23c>
 800f32c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f330:	4631      	mov	r1, r6
 800f332:	4628      	mov	r0, r5
 800f334:	47b8      	blx	r7
 800f336:	3001      	adds	r0, #1
 800f338:	f43f af45 	beq.w	800f1c6 <_printf_float+0xb6>
 800f33c:	f04f 0900 	mov.w	r9, #0
 800f340:	f108 38ff 	add.w	r8, r8, #4294967295
 800f344:	f104 0a1a 	add.w	sl, r4, #26
 800f348:	45c8      	cmp	r8, r9
 800f34a:	dc09      	bgt.n	800f360 <_printf_float+0x250>
 800f34c:	6823      	ldr	r3, [r4, #0]
 800f34e:	079b      	lsls	r3, r3, #30
 800f350:	f100 8103 	bmi.w	800f55a <_printf_float+0x44a>
 800f354:	68e0      	ldr	r0, [r4, #12]
 800f356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f358:	4298      	cmp	r0, r3
 800f35a:	bfb8      	it	lt
 800f35c:	4618      	movlt	r0, r3
 800f35e:	e734      	b.n	800f1ca <_printf_float+0xba>
 800f360:	2301      	movs	r3, #1
 800f362:	4652      	mov	r2, sl
 800f364:	4631      	mov	r1, r6
 800f366:	4628      	mov	r0, r5
 800f368:	47b8      	blx	r7
 800f36a:	3001      	adds	r0, #1
 800f36c:	f43f af2b 	beq.w	800f1c6 <_printf_float+0xb6>
 800f370:	f109 0901 	add.w	r9, r9, #1
 800f374:	e7e8      	b.n	800f348 <_printf_float+0x238>
 800f376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dc39      	bgt.n	800f3f0 <_printf_float+0x2e0>
 800f37c:	4a1b      	ldr	r2, [pc, #108]	@ (800f3ec <_printf_float+0x2dc>)
 800f37e:	2301      	movs	r3, #1
 800f380:	4631      	mov	r1, r6
 800f382:	4628      	mov	r0, r5
 800f384:	47b8      	blx	r7
 800f386:	3001      	adds	r0, #1
 800f388:	f43f af1d 	beq.w	800f1c6 <_printf_float+0xb6>
 800f38c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f390:	ea59 0303 	orrs.w	r3, r9, r3
 800f394:	d102      	bne.n	800f39c <_printf_float+0x28c>
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	07d9      	lsls	r1, r3, #31
 800f39a:	d5d7      	bpl.n	800f34c <_printf_float+0x23c>
 800f39c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3a0:	4631      	mov	r1, r6
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	47b8      	blx	r7
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	f43f af0d 	beq.w	800f1c6 <_printf_float+0xb6>
 800f3ac:	f04f 0a00 	mov.w	sl, #0
 800f3b0:	f104 0b1a 	add.w	fp, r4, #26
 800f3b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f3b6:	425b      	negs	r3, r3
 800f3b8:	4553      	cmp	r3, sl
 800f3ba:	dc01      	bgt.n	800f3c0 <_printf_float+0x2b0>
 800f3bc:	464b      	mov	r3, r9
 800f3be:	e793      	b.n	800f2e8 <_printf_float+0x1d8>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	465a      	mov	r2, fp
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	47b8      	blx	r7
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	f43f aefb 	beq.w	800f1c6 <_printf_float+0xb6>
 800f3d0:	f10a 0a01 	add.w	sl, sl, #1
 800f3d4:	e7ee      	b.n	800f3b4 <_printf_float+0x2a4>
 800f3d6:	bf00      	nop
 800f3d8:	7fefffff 	.word	0x7fefffff
 800f3dc:	08013890 	.word	0x08013890
 800f3e0:	08013894 	.word	0x08013894
 800f3e4:	08013898 	.word	0x08013898
 800f3e8:	0801389c 	.word	0x0801389c
 800f3ec:	080138a0 	.word	0x080138a0
 800f3f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f3f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f3f6:	4553      	cmp	r3, sl
 800f3f8:	bfa8      	it	ge
 800f3fa:	4653      	movge	r3, sl
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	4699      	mov	r9, r3
 800f400:	dc36      	bgt.n	800f470 <_printf_float+0x360>
 800f402:	f04f 0b00 	mov.w	fp, #0
 800f406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f40a:	f104 021a 	add.w	r2, r4, #26
 800f40e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f410:	9306      	str	r3, [sp, #24]
 800f412:	eba3 0309 	sub.w	r3, r3, r9
 800f416:	455b      	cmp	r3, fp
 800f418:	dc31      	bgt.n	800f47e <_printf_float+0x36e>
 800f41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41c:	459a      	cmp	sl, r3
 800f41e:	dc3a      	bgt.n	800f496 <_printf_float+0x386>
 800f420:	6823      	ldr	r3, [r4, #0]
 800f422:	07da      	lsls	r2, r3, #31
 800f424:	d437      	bmi.n	800f496 <_printf_float+0x386>
 800f426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f428:	ebaa 0903 	sub.w	r9, sl, r3
 800f42c:	9b06      	ldr	r3, [sp, #24]
 800f42e:	ebaa 0303 	sub.w	r3, sl, r3
 800f432:	4599      	cmp	r9, r3
 800f434:	bfa8      	it	ge
 800f436:	4699      	movge	r9, r3
 800f438:	f1b9 0f00 	cmp.w	r9, #0
 800f43c:	dc33      	bgt.n	800f4a6 <_printf_float+0x396>
 800f43e:	f04f 0800 	mov.w	r8, #0
 800f442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f446:	f104 0b1a 	add.w	fp, r4, #26
 800f44a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f44c:	ebaa 0303 	sub.w	r3, sl, r3
 800f450:	eba3 0309 	sub.w	r3, r3, r9
 800f454:	4543      	cmp	r3, r8
 800f456:	f77f af79 	ble.w	800f34c <_printf_float+0x23c>
 800f45a:	2301      	movs	r3, #1
 800f45c:	465a      	mov	r2, fp
 800f45e:	4631      	mov	r1, r6
 800f460:	4628      	mov	r0, r5
 800f462:	47b8      	blx	r7
 800f464:	3001      	adds	r0, #1
 800f466:	f43f aeae 	beq.w	800f1c6 <_printf_float+0xb6>
 800f46a:	f108 0801 	add.w	r8, r8, #1
 800f46e:	e7ec      	b.n	800f44a <_printf_float+0x33a>
 800f470:	4642      	mov	r2, r8
 800f472:	4631      	mov	r1, r6
 800f474:	4628      	mov	r0, r5
 800f476:	47b8      	blx	r7
 800f478:	3001      	adds	r0, #1
 800f47a:	d1c2      	bne.n	800f402 <_printf_float+0x2f2>
 800f47c:	e6a3      	b.n	800f1c6 <_printf_float+0xb6>
 800f47e:	2301      	movs	r3, #1
 800f480:	4631      	mov	r1, r6
 800f482:	4628      	mov	r0, r5
 800f484:	9206      	str	r2, [sp, #24]
 800f486:	47b8      	blx	r7
 800f488:	3001      	adds	r0, #1
 800f48a:	f43f ae9c 	beq.w	800f1c6 <_printf_float+0xb6>
 800f48e:	9a06      	ldr	r2, [sp, #24]
 800f490:	f10b 0b01 	add.w	fp, fp, #1
 800f494:	e7bb      	b.n	800f40e <_printf_float+0x2fe>
 800f496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f49a:	4631      	mov	r1, r6
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b8      	blx	r7
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d1c0      	bne.n	800f426 <_printf_float+0x316>
 800f4a4:	e68f      	b.n	800f1c6 <_printf_float+0xb6>
 800f4a6:	9a06      	ldr	r2, [sp, #24]
 800f4a8:	464b      	mov	r3, r9
 800f4aa:	4442      	add	r2, r8
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	47b8      	blx	r7
 800f4b2:	3001      	adds	r0, #1
 800f4b4:	d1c3      	bne.n	800f43e <_printf_float+0x32e>
 800f4b6:	e686      	b.n	800f1c6 <_printf_float+0xb6>
 800f4b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f4bc:	f1ba 0f01 	cmp.w	sl, #1
 800f4c0:	dc01      	bgt.n	800f4c6 <_printf_float+0x3b6>
 800f4c2:	07db      	lsls	r3, r3, #31
 800f4c4:	d536      	bpl.n	800f534 <_printf_float+0x424>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	4642      	mov	r2, r8
 800f4ca:	4631      	mov	r1, r6
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	47b8      	blx	r7
 800f4d0:	3001      	adds	r0, #1
 800f4d2:	f43f ae78 	beq.w	800f1c6 <_printf_float+0xb6>
 800f4d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4da:	4631      	mov	r1, r6
 800f4dc:	4628      	mov	r0, r5
 800f4de:	47b8      	blx	r7
 800f4e0:	3001      	adds	r0, #1
 800f4e2:	f43f ae70 	beq.w	800f1c6 <_printf_float+0xb6>
 800f4e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4f2:	f7f1 faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4f6:	b9c0      	cbnz	r0, 800f52a <_printf_float+0x41a>
 800f4f8:	4653      	mov	r3, sl
 800f4fa:	f108 0201 	add.w	r2, r8, #1
 800f4fe:	4631      	mov	r1, r6
 800f500:	4628      	mov	r0, r5
 800f502:	47b8      	blx	r7
 800f504:	3001      	adds	r0, #1
 800f506:	d10c      	bne.n	800f522 <_printf_float+0x412>
 800f508:	e65d      	b.n	800f1c6 <_printf_float+0xb6>
 800f50a:	2301      	movs	r3, #1
 800f50c:	465a      	mov	r2, fp
 800f50e:	4631      	mov	r1, r6
 800f510:	4628      	mov	r0, r5
 800f512:	47b8      	blx	r7
 800f514:	3001      	adds	r0, #1
 800f516:	f43f ae56 	beq.w	800f1c6 <_printf_float+0xb6>
 800f51a:	f108 0801 	add.w	r8, r8, #1
 800f51e:	45d0      	cmp	r8, sl
 800f520:	dbf3      	blt.n	800f50a <_printf_float+0x3fa>
 800f522:	464b      	mov	r3, r9
 800f524:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f528:	e6df      	b.n	800f2ea <_printf_float+0x1da>
 800f52a:	f04f 0800 	mov.w	r8, #0
 800f52e:	f104 0b1a 	add.w	fp, r4, #26
 800f532:	e7f4      	b.n	800f51e <_printf_float+0x40e>
 800f534:	2301      	movs	r3, #1
 800f536:	4642      	mov	r2, r8
 800f538:	e7e1      	b.n	800f4fe <_printf_float+0x3ee>
 800f53a:	2301      	movs	r3, #1
 800f53c:	464a      	mov	r2, r9
 800f53e:	4631      	mov	r1, r6
 800f540:	4628      	mov	r0, r5
 800f542:	47b8      	blx	r7
 800f544:	3001      	adds	r0, #1
 800f546:	f43f ae3e 	beq.w	800f1c6 <_printf_float+0xb6>
 800f54a:	f108 0801 	add.w	r8, r8, #1
 800f54e:	68e3      	ldr	r3, [r4, #12]
 800f550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f552:	1a5b      	subs	r3, r3, r1
 800f554:	4543      	cmp	r3, r8
 800f556:	dcf0      	bgt.n	800f53a <_printf_float+0x42a>
 800f558:	e6fc      	b.n	800f354 <_printf_float+0x244>
 800f55a:	f04f 0800 	mov.w	r8, #0
 800f55e:	f104 0919 	add.w	r9, r4, #25
 800f562:	e7f4      	b.n	800f54e <_printf_float+0x43e>

0800f564 <_printf_common>:
 800f564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f568:	4616      	mov	r6, r2
 800f56a:	4698      	mov	r8, r3
 800f56c:	688a      	ldr	r2, [r1, #8]
 800f56e:	690b      	ldr	r3, [r1, #16]
 800f570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f574:	4293      	cmp	r3, r2
 800f576:	bfb8      	it	lt
 800f578:	4613      	movlt	r3, r2
 800f57a:	6033      	str	r3, [r6, #0]
 800f57c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f580:	4607      	mov	r7, r0
 800f582:	460c      	mov	r4, r1
 800f584:	b10a      	cbz	r2, 800f58a <_printf_common+0x26>
 800f586:	3301      	adds	r3, #1
 800f588:	6033      	str	r3, [r6, #0]
 800f58a:	6823      	ldr	r3, [r4, #0]
 800f58c:	0699      	lsls	r1, r3, #26
 800f58e:	bf42      	ittt	mi
 800f590:	6833      	ldrmi	r3, [r6, #0]
 800f592:	3302      	addmi	r3, #2
 800f594:	6033      	strmi	r3, [r6, #0]
 800f596:	6825      	ldr	r5, [r4, #0]
 800f598:	f015 0506 	ands.w	r5, r5, #6
 800f59c:	d106      	bne.n	800f5ac <_printf_common+0x48>
 800f59e:	f104 0a19 	add.w	sl, r4, #25
 800f5a2:	68e3      	ldr	r3, [r4, #12]
 800f5a4:	6832      	ldr	r2, [r6, #0]
 800f5a6:	1a9b      	subs	r3, r3, r2
 800f5a8:	42ab      	cmp	r3, r5
 800f5aa:	dc26      	bgt.n	800f5fa <_printf_common+0x96>
 800f5ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f5b0:	6822      	ldr	r2, [r4, #0]
 800f5b2:	3b00      	subs	r3, #0
 800f5b4:	bf18      	it	ne
 800f5b6:	2301      	movne	r3, #1
 800f5b8:	0692      	lsls	r2, r2, #26
 800f5ba:	d42b      	bmi.n	800f614 <_printf_common+0xb0>
 800f5bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f5c0:	4641      	mov	r1, r8
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	47c8      	blx	r9
 800f5c6:	3001      	adds	r0, #1
 800f5c8:	d01e      	beq.n	800f608 <_printf_common+0xa4>
 800f5ca:	6823      	ldr	r3, [r4, #0]
 800f5cc:	6922      	ldr	r2, [r4, #16]
 800f5ce:	f003 0306 	and.w	r3, r3, #6
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	bf02      	ittt	eq
 800f5d6:	68e5      	ldreq	r5, [r4, #12]
 800f5d8:	6833      	ldreq	r3, [r6, #0]
 800f5da:	1aed      	subeq	r5, r5, r3
 800f5dc:	68a3      	ldr	r3, [r4, #8]
 800f5de:	bf0c      	ite	eq
 800f5e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f5e4:	2500      	movne	r5, #0
 800f5e6:	4293      	cmp	r3, r2
 800f5e8:	bfc4      	itt	gt
 800f5ea:	1a9b      	subgt	r3, r3, r2
 800f5ec:	18ed      	addgt	r5, r5, r3
 800f5ee:	2600      	movs	r6, #0
 800f5f0:	341a      	adds	r4, #26
 800f5f2:	42b5      	cmp	r5, r6
 800f5f4:	d11a      	bne.n	800f62c <_printf_common+0xc8>
 800f5f6:	2000      	movs	r0, #0
 800f5f8:	e008      	b.n	800f60c <_printf_common+0xa8>
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	4652      	mov	r2, sl
 800f5fe:	4641      	mov	r1, r8
 800f600:	4638      	mov	r0, r7
 800f602:	47c8      	blx	r9
 800f604:	3001      	adds	r0, #1
 800f606:	d103      	bne.n	800f610 <_printf_common+0xac>
 800f608:	f04f 30ff 	mov.w	r0, #4294967295
 800f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f610:	3501      	adds	r5, #1
 800f612:	e7c6      	b.n	800f5a2 <_printf_common+0x3e>
 800f614:	18e1      	adds	r1, r4, r3
 800f616:	1c5a      	adds	r2, r3, #1
 800f618:	2030      	movs	r0, #48	@ 0x30
 800f61a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f61e:	4422      	add	r2, r4
 800f620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f628:	3302      	adds	r3, #2
 800f62a:	e7c7      	b.n	800f5bc <_printf_common+0x58>
 800f62c:	2301      	movs	r3, #1
 800f62e:	4622      	mov	r2, r4
 800f630:	4641      	mov	r1, r8
 800f632:	4638      	mov	r0, r7
 800f634:	47c8      	blx	r9
 800f636:	3001      	adds	r0, #1
 800f638:	d0e6      	beq.n	800f608 <_printf_common+0xa4>
 800f63a:	3601      	adds	r6, #1
 800f63c:	e7d9      	b.n	800f5f2 <_printf_common+0x8e>
	...

0800f640 <_printf_i>:
 800f640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f644:	7e0f      	ldrb	r7, [r1, #24]
 800f646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f648:	2f78      	cmp	r7, #120	@ 0x78
 800f64a:	4691      	mov	r9, r2
 800f64c:	4680      	mov	r8, r0
 800f64e:	460c      	mov	r4, r1
 800f650:	469a      	mov	sl, r3
 800f652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f656:	d807      	bhi.n	800f668 <_printf_i+0x28>
 800f658:	2f62      	cmp	r7, #98	@ 0x62
 800f65a:	d80a      	bhi.n	800f672 <_printf_i+0x32>
 800f65c:	2f00      	cmp	r7, #0
 800f65e:	f000 80d2 	beq.w	800f806 <_printf_i+0x1c6>
 800f662:	2f58      	cmp	r7, #88	@ 0x58
 800f664:	f000 80b9 	beq.w	800f7da <_printf_i+0x19a>
 800f668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f66c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f670:	e03a      	b.n	800f6e8 <_printf_i+0xa8>
 800f672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f676:	2b15      	cmp	r3, #21
 800f678:	d8f6      	bhi.n	800f668 <_printf_i+0x28>
 800f67a:	a101      	add	r1, pc, #4	@ (adr r1, 800f680 <_printf_i+0x40>)
 800f67c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f680:	0800f6d9 	.word	0x0800f6d9
 800f684:	0800f6ed 	.word	0x0800f6ed
 800f688:	0800f669 	.word	0x0800f669
 800f68c:	0800f669 	.word	0x0800f669
 800f690:	0800f669 	.word	0x0800f669
 800f694:	0800f669 	.word	0x0800f669
 800f698:	0800f6ed 	.word	0x0800f6ed
 800f69c:	0800f669 	.word	0x0800f669
 800f6a0:	0800f669 	.word	0x0800f669
 800f6a4:	0800f669 	.word	0x0800f669
 800f6a8:	0800f669 	.word	0x0800f669
 800f6ac:	0800f7ed 	.word	0x0800f7ed
 800f6b0:	0800f717 	.word	0x0800f717
 800f6b4:	0800f7a7 	.word	0x0800f7a7
 800f6b8:	0800f669 	.word	0x0800f669
 800f6bc:	0800f669 	.word	0x0800f669
 800f6c0:	0800f80f 	.word	0x0800f80f
 800f6c4:	0800f669 	.word	0x0800f669
 800f6c8:	0800f717 	.word	0x0800f717
 800f6cc:	0800f669 	.word	0x0800f669
 800f6d0:	0800f669 	.word	0x0800f669
 800f6d4:	0800f7af 	.word	0x0800f7af
 800f6d8:	6833      	ldr	r3, [r6, #0]
 800f6da:	1d1a      	adds	r2, r3, #4
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	6032      	str	r2, [r6, #0]
 800f6e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e09d      	b.n	800f828 <_printf_i+0x1e8>
 800f6ec:	6833      	ldr	r3, [r6, #0]
 800f6ee:	6820      	ldr	r0, [r4, #0]
 800f6f0:	1d19      	adds	r1, r3, #4
 800f6f2:	6031      	str	r1, [r6, #0]
 800f6f4:	0606      	lsls	r6, r0, #24
 800f6f6:	d501      	bpl.n	800f6fc <_printf_i+0xbc>
 800f6f8:	681d      	ldr	r5, [r3, #0]
 800f6fa:	e003      	b.n	800f704 <_printf_i+0xc4>
 800f6fc:	0645      	lsls	r5, r0, #25
 800f6fe:	d5fb      	bpl.n	800f6f8 <_printf_i+0xb8>
 800f700:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f704:	2d00      	cmp	r5, #0
 800f706:	da03      	bge.n	800f710 <_printf_i+0xd0>
 800f708:	232d      	movs	r3, #45	@ 0x2d
 800f70a:	426d      	negs	r5, r5
 800f70c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f710:	4859      	ldr	r0, [pc, #356]	@ (800f878 <_printf_i+0x238>)
 800f712:	230a      	movs	r3, #10
 800f714:	e011      	b.n	800f73a <_printf_i+0xfa>
 800f716:	6821      	ldr	r1, [r4, #0]
 800f718:	6833      	ldr	r3, [r6, #0]
 800f71a:	0608      	lsls	r0, r1, #24
 800f71c:	f853 5b04 	ldr.w	r5, [r3], #4
 800f720:	d402      	bmi.n	800f728 <_printf_i+0xe8>
 800f722:	0649      	lsls	r1, r1, #25
 800f724:	bf48      	it	mi
 800f726:	b2ad      	uxthmi	r5, r5
 800f728:	2f6f      	cmp	r7, #111	@ 0x6f
 800f72a:	4853      	ldr	r0, [pc, #332]	@ (800f878 <_printf_i+0x238>)
 800f72c:	6033      	str	r3, [r6, #0]
 800f72e:	bf14      	ite	ne
 800f730:	230a      	movne	r3, #10
 800f732:	2308      	moveq	r3, #8
 800f734:	2100      	movs	r1, #0
 800f736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f73a:	6866      	ldr	r6, [r4, #4]
 800f73c:	60a6      	str	r6, [r4, #8]
 800f73e:	2e00      	cmp	r6, #0
 800f740:	bfa2      	ittt	ge
 800f742:	6821      	ldrge	r1, [r4, #0]
 800f744:	f021 0104 	bicge.w	r1, r1, #4
 800f748:	6021      	strge	r1, [r4, #0]
 800f74a:	b90d      	cbnz	r5, 800f750 <_printf_i+0x110>
 800f74c:	2e00      	cmp	r6, #0
 800f74e:	d04b      	beq.n	800f7e8 <_printf_i+0x1a8>
 800f750:	4616      	mov	r6, r2
 800f752:	fbb5 f1f3 	udiv	r1, r5, r3
 800f756:	fb03 5711 	mls	r7, r3, r1, r5
 800f75a:	5dc7      	ldrb	r7, [r0, r7]
 800f75c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f760:	462f      	mov	r7, r5
 800f762:	42bb      	cmp	r3, r7
 800f764:	460d      	mov	r5, r1
 800f766:	d9f4      	bls.n	800f752 <_printf_i+0x112>
 800f768:	2b08      	cmp	r3, #8
 800f76a:	d10b      	bne.n	800f784 <_printf_i+0x144>
 800f76c:	6823      	ldr	r3, [r4, #0]
 800f76e:	07df      	lsls	r7, r3, #31
 800f770:	d508      	bpl.n	800f784 <_printf_i+0x144>
 800f772:	6923      	ldr	r3, [r4, #16]
 800f774:	6861      	ldr	r1, [r4, #4]
 800f776:	4299      	cmp	r1, r3
 800f778:	bfde      	ittt	le
 800f77a:	2330      	movle	r3, #48	@ 0x30
 800f77c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f780:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f784:	1b92      	subs	r2, r2, r6
 800f786:	6122      	str	r2, [r4, #16]
 800f788:	f8cd a000 	str.w	sl, [sp]
 800f78c:	464b      	mov	r3, r9
 800f78e:	aa03      	add	r2, sp, #12
 800f790:	4621      	mov	r1, r4
 800f792:	4640      	mov	r0, r8
 800f794:	f7ff fee6 	bl	800f564 <_printf_common>
 800f798:	3001      	adds	r0, #1
 800f79a:	d14a      	bne.n	800f832 <_printf_i+0x1f2>
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	b004      	add	sp, #16
 800f7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	f043 0320 	orr.w	r3, r3, #32
 800f7ac:	6023      	str	r3, [r4, #0]
 800f7ae:	4833      	ldr	r0, [pc, #204]	@ (800f87c <_printf_i+0x23c>)
 800f7b0:	2778      	movs	r7, #120	@ 0x78
 800f7b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f7b6:	6823      	ldr	r3, [r4, #0]
 800f7b8:	6831      	ldr	r1, [r6, #0]
 800f7ba:	061f      	lsls	r7, r3, #24
 800f7bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800f7c0:	d402      	bmi.n	800f7c8 <_printf_i+0x188>
 800f7c2:	065f      	lsls	r7, r3, #25
 800f7c4:	bf48      	it	mi
 800f7c6:	b2ad      	uxthmi	r5, r5
 800f7c8:	6031      	str	r1, [r6, #0]
 800f7ca:	07d9      	lsls	r1, r3, #31
 800f7cc:	bf44      	itt	mi
 800f7ce:	f043 0320 	orrmi.w	r3, r3, #32
 800f7d2:	6023      	strmi	r3, [r4, #0]
 800f7d4:	b11d      	cbz	r5, 800f7de <_printf_i+0x19e>
 800f7d6:	2310      	movs	r3, #16
 800f7d8:	e7ac      	b.n	800f734 <_printf_i+0xf4>
 800f7da:	4827      	ldr	r0, [pc, #156]	@ (800f878 <_printf_i+0x238>)
 800f7dc:	e7e9      	b.n	800f7b2 <_printf_i+0x172>
 800f7de:	6823      	ldr	r3, [r4, #0]
 800f7e0:	f023 0320 	bic.w	r3, r3, #32
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	e7f6      	b.n	800f7d6 <_printf_i+0x196>
 800f7e8:	4616      	mov	r6, r2
 800f7ea:	e7bd      	b.n	800f768 <_printf_i+0x128>
 800f7ec:	6833      	ldr	r3, [r6, #0]
 800f7ee:	6825      	ldr	r5, [r4, #0]
 800f7f0:	6961      	ldr	r1, [r4, #20]
 800f7f2:	1d18      	adds	r0, r3, #4
 800f7f4:	6030      	str	r0, [r6, #0]
 800f7f6:	062e      	lsls	r6, r5, #24
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	d501      	bpl.n	800f800 <_printf_i+0x1c0>
 800f7fc:	6019      	str	r1, [r3, #0]
 800f7fe:	e002      	b.n	800f806 <_printf_i+0x1c6>
 800f800:	0668      	lsls	r0, r5, #25
 800f802:	d5fb      	bpl.n	800f7fc <_printf_i+0x1bc>
 800f804:	8019      	strh	r1, [r3, #0]
 800f806:	2300      	movs	r3, #0
 800f808:	6123      	str	r3, [r4, #16]
 800f80a:	4616      	mov	r6, r2
 800f80c:	e7bc      	b.n	800f788 <_printf_i+0x148>
 800f80e:	6833      	ldr	r3, [r6, #0]
 800f810:	1d1a      	adds	r2, r3, #4
 800f812:	6032      	str	r2, [r6, #0]
 800f814:	681e      	ldr	r6, [r3, #0]
 800f816:	6862      	ldr	r2, [r4, #4]
 800f818:	2100      	movs	r1, #0
 800f81a:	4630      	mov	r0, r6
 800f81c:	f7f0 fce8 	bl	80001f0 <memchr>
 800f820:	b108      	cbz	r0, 800f826 <_printf_i+0x1e6>
 800f822:	1b80      	subs	r0, r0, r6
 800f824:	6060      	str	r0, [r4, #4]
 800f826:	6863      	ldr	r3, [r4, #4]
 800f828:	6123      	str	r3, [r4, #16]
 800f82a:	2300      	movs	r3, #0
 800f82c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f830:	e7aa      	b.n	800f788 <_printf_i+0x148>
 800f832:	6923      	ldr	r3, [r4, #16]
 800f834:	4632      	mov	r2, r6
 800f836:	4649      	mov	r1, r9
 800f838:	4640      	mov	r0, r8
 800f83a:	47d0      	blx	sl
 800f83c:	3001      	adds	r0, #1
 800f83e:	d0ad      	beq.n	800f79c <_printf_i+0x15c>
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	079b      	lsls	r3, r3, #30
 800f844:	d413      	bmi.n	800f86e <_printf_i+0x22e>
 800f846:	68e0      	ldr	r0, [r4, #12]
 800f848:	9b03      	ldr	r3, [sp, #12]
 800f84a:	4298      	cmp	r0, r3
 800f84c:	bfb8      	it	lt
 800f84e:	4618      	movlt	r0, r3
 800f850:	e7a6      	b.n	800f7a0 <_printf_i+0x160>
 800f852:	2301      	movs	r3, #1
 800f854:	4632      	mov	r2, r6
 800f856:	4649      	mov	r1, r9
 800f858:	4640      	mov	r0, r8
 800f85a:	47d0      	blx	sl
 800f85c:	3001      	adds	r0, #1
 800f85e:	d09d      	beq.n	800f79c <_printf_i+0x15c>
 800f860:	3501      	adds	r5, #1
 800f862:	68e3      	ldr	r3, [r4, #12]
 800f864:	9903      	ldr	r1, [sp, #12]
 800f866:	1a5b      	subs	r3, r3, r1
 800f868:	42ab      	cmp	r3, r5
 800f86a:	dcf2      	bgt.n	800f852 <_printf_i+0x212>
 800f86c:	e7eb      	b.n	800f846 <_printf_i+0x206>
 800f86e:	2500      	movs	r5, #0
 800f870:	f104 0619 	add.w	r6, r4, #25
 800f874:	e7f5      	b.n	800f862 <_printf_i+0x222>
 800f876:	bf00      	nop
 800f878:	080138a2 	.word	0x080138a2
 800f87c:	080138b3 	.word	0x080138b3

0800f880 <std>:
 800f880:	2300      	movs	r3, #0
 800f882:	b510      	push	{r4, lr}
 800f884:	4604      	mov	r4, r0
 800f886:	e9c0 3300 	strd	r3, r3, [r0]
 800f88a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f88e:	6083      	str	r3, [r0, #8]
 800f890:	8181      	strh	r1, [r0, #12]
 800f892:	6643      	str	r3, [r0, #100]	@ 0x64
 800f894:	81c2      	strh	r2, [r0, #14]
 800f896:	6183      	str	r3, [r0, #24]
 800f898:	4619      	mov	r1, r3
 800f89a:	2208      	movs	r2, #8
 800f89c:	305c      	adds	r0, #92	@ 0x5c
 800f89e:	f000 f914 	bl	800faca <memset>
 800f8a2:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d8 <std+0x58>)
 800f8a4:	6263      	str	r3, [r4, #36]	@ 0x24
 800f8a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f8dc <std+0x5c>)
 800f8a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800f8e0 <std+0x60>)
 800f8ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f8e4 <std+0x64>)
 800f8b0:	6323      	str	r3, [r4, #48]	@ 0x30
 800f8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800f8e8 <std+0x68>)
 800f8b4:	6224      	str	r4, [r4, #32]
 800f8b6:	429c      	cmp	r4, r3
 800f8b8:	d006      	beq.n	800f8c8 <std+0x48>
 800f8ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f8be:	4294      	cmp	r4, r2
 800f8c0:	d002      	beq.n	800f8c8 <std+0x48>
 800f8c2:	33d0      	adds	r3, #208	@ 0xd0
 800f8c4:	429c      	cmp	r4, r3
 800f8c6:	d105      	bne.n	800f8d4 <std+0x54>
 800f8c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f8cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8d0:	f000 b978 	b.w	800fbc4 <__retarget_lock_init_recursive>
 800f8d4:	bd10      	pop	{r4, pc}
 800f8d6:	bf00      	nop
 800f8d8:	0800fa45 	.word	0x0800fa45
 800f8dc:	0800fa67 	.word	0x0800fa67
 800f8e0:	0800fa9f 	.word	0x0800fa9f
 800f8e4:	0800fac3 	.word	0x0800fac3
 800f8e8:	20006b64 	.word	0x20006b64

0800f8ec <stdio_exit_handler>:
 800f8ec:	4a02      	ldr	r2, [pc, #8]	@ (800f8f8 <stdio_exit_handler+0xc>)
 800f8ee:	4903      	ldr	r1, [pc, #12]	@ (800f8fc <stdio_exit_handler+0x10>)
 800f8f0:	4803      	ldr	r0, [pc, #12]	@ (800f900 <stdio_exit_handler+0x14>)
 800f8f2:	f000 b869 	b.w	800f9c8 <_fwalk_sglue>
 800f8f6:	bf00      	nop
 800f8f8:	2000018c 	.word	0x2000018c
 800f8fc:	0801153d 	.word	0x0801153d
 800f900:	2000019c 	.word	0x2000019c

0800f904 <cleanup_stdio>:
 800f904:	6841      	ldr	r1, [r0, #4]
 800f906:	4b0c      	ldr	r3, [pc, #48]	@ (800f938 <cleanup_stdio+0x34>)
 800f908:	4299      	cmp	r1, r3
 800f90a:	b510      	push	{r4, lr}
 800f90c:	4604      	mov	r4, r0
 800f90e:	d001      	beq.n	800f914 <cleanup_stdio+0x10>
 800f910:	f001 fe14 	bl	801153c <_fflush_r>
 800f914:	68a1      	ldr	r1, [r4, #8]
 800f916:	4b09      	ldr	r3, [pc, #36]	@ (800f93c <cleanup_stdio+0x38>)
 800f918:	4299      	cmp	r1, r3
 800f91a:	d002      	beq.n	800f922 <cleanup_stdio+0x1e>
 800f91c:	4620      	mov	r0, r4
 800f91e:	f001 fe0d 	bl	801153c <_fflush_r>
 800f922:	68e1      	ldr	r1, [r4, #12]
 800f924:	4b06      	ldr	r3, [pc, #24]	@ (800f940 <cleanup_stdio+0x3c>)
 800f926:	4299      	cmp	r1, r3
 800f928:	d004      	beq.n	800f934 <cleanup_stdio+0x30>
 800f92a:	4620      	mov	r0, r4
 800f92c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f930:	f001 be04 	b.w	801153c <_fflush_r>
 800f934:	bd10      	pop	{r4, pc}
 800f936:	bf00      	nop
 800f938:	20006b64 	.word	0x20006b64
 800f93c:	20006bcc 	.word	0x20006bcc
 800f940:	20006c34 	.word	0x20006c34

0800f944 <global_stdio_init.part.0>:
 800f944:	b510      	push	{r4, lr}
 800f946:	4b0b      	ldr	r3, [pc, #44]	@ (800f974 <global_stdio_init.part.0+0x30>)
 800f948:	4c0b      	ldr	r4, [pc, #44]	@ (800f978 <global_stdio_init.part.0+0x34>)
 800f94a:	4a0c      	ldr	r2, [pc, #48]	@ (800f97c <global_stdio_init.part.0+0x38>)
 800f94c:	601a      	str	r2, [r3, #0]
 800f94e:	4620      	mov	r0, r4
 800f950:	2200      	movs	r2, #0
 800f952:	2104      	movs	r1, #4
 800f954:	f7ff ff94 	bl	800f880 <std>
 800f958:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f95c:	2201      	movs	r2, #1
 800f95e:	2109      	movs	r1, #9
 800f960:	f7ff ff8e 	bl	800f880 <std>
 800f964:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f968:	2202      	movs	r2, #2
 800f96a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f96e:	2112      	movs	r1, #18
 800f970:	f7ff bf86 	b.w	800f880 <std>
 800f974:	20006c9c 	.word	0x20006c9c
 800f978:	20006b64 	.word	0x20006b64
 800f97c:	0800f8ed 	.word	0x0800f8ed

0800f980 <__sfp_lock_acquire>:
 800f980:	4801      	ldr	r0, [pc, #4]	@ (800f988 <__sfp_lock_acquire+0x8>)
 800f982:	f000 b920 	b.w	800fbc6 <__retarget_lock_acquire_recursive>
 800f986:	bf00      	nop
 800f988:	20006ca5 	.word	0x20006ca5

0800f98c <__sfp_lock_release>:
 800f98c:	4801      	ldr	r0, [pc, #4]	@ (800f994 <__sfp_lock_release+0x8>)
 800f98e:	f000 b91b 	b.w	800fbc8 <__retarget_lock_release_recursive>
 800f992:	bf00      	nop
 800f994:	20006ca5 	.word	0x20006ca5

0800f998 <__sinit>:
 800f998:	b510      	push	{r4, lr}
 800f99a:	4604      	mov	r4, r0
 800f99c:	f7ff fff0 	bl	800f980 <__sfp_lock_acquire>
 800f9a0:	6a23      	ldr	r3, [r4, #32]
 800f9a2:	b11b      	cbz	r3, 800f9ac <__sinit+0x14>
 800f9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9a8:	f7ff bff0 	b.w	800f98c <__sfp_lock_release>
 800f9ac:	4b04      	ldr	r3, [pc, #16]	@ (800f9c0 <__sinit+0x28>)
 800f9ae:	6223      	str	r3, [r4, #32]
 800f9b0:	4b04      	ldr	r3, [pc, #16]	@ (800f9c4 <__sinit+0x2c>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1f5      	bne.n	800f9a4 <__sinit+0xc>
 800f9b8:	f7ff ffc4 	bl	800f944 <global_stdio_init.part.0>
 800f9bc:	e7f2      	b.n	800f9a4 <__sinit+0xc>
 800f9be:	bf00      	nop
 800f9c0:	0800f905 	.word	0x0800f905
 800f9c4:	20006c9c 	.word	0x20006c9c

0800f9c8 <_fwalk_sglue>:
 800f9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9cc:	4607      	mov	r7, r0
 800f9ce:	4688      	mov	r8, r1
 800f9d0:	4614      	mov	r4, r2
 800f9d2:	2600      	movs	r6, #0
 800f9d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f9d8:	f1b9 0901 	subs.w	r9, r9, #1
 800f9dc:	d505      	bpl.n	800f9ea <_fwalk_sglue+0x22>
 800f9de:	6824      	ldr	r4, [r4, #0]
 800f9e0:	2c00      	cmp	r4, #0
 800f9e2:	d1f7      	bne.n	800f9d4 <_fwalk_sglue+0xc>
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f9ea:	89ab      	ldrh	r3, [r5, #12]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d907      	bls.n	800fa00 <_fwalk_sglue+0x38>
 800f9f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	d003      	beq.n	800fa00 <_fwalk_sglue+0x38>
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4638      	mov	r0, r7
 800f9fc:	47c0      	blx	r8
 800f9fe:	4306      	orrs	r6, r0
 800fa00:	3568      	adds	r5, #104	@ 0x68
 800fa02:	e7e9      	b.n	800f9d8 <_fwalk_sglue+0x10>

0800fa04 <siprintf>:
 800fa04:	b40e      	push	{r1, r2, r3}
 800fa06:	b500      	push	{lr}
 800fa08:	b09c      	sub	sp, #112	@ 0x70
 800fa0a:	ab1d      	add	r3, sp, #116	@ 0x74
 800fa0c:	9002      	str	r0, [sp, #8]
 800fa0e:	9006      	str	r0, [sp, #24]
 800fa10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fa14:	4809      	ldr	r0, [pc, #36]	@ (800fa3c <siprintf+0x38>)
 800fa16:	9107      	str	r1, [sp, #28]
 800fa18:	9104      	str	r1, [sp, #16]
 800fa1a:	4909      	ldr	r1, [pc, #36]	@ (800fa40 <siprintf+0x3c>)
 800fa1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa20:	9105      	str	r1, [sp, #20]
 800fa22:	6800      	ldr	r0, [r0, #0]
 800fa24:	9301      	str	r3, [sp, #4]
 800fa26:	a902      	add	r1, sp, #8
 800fa28:	f001 fc08 	bl	801123c <_svfiprintf_r>
 800fa2c:	9b02      	ldr	r3, [sp, #8]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	701a      	strb	r2, [r3, #0]
 800fa32:	b01c      	add	sp, #112	@ 0x70
 800fa34:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa38:	b003      	add	sp, #12
 800fa3a:	4770      	bx	lr
 800fa3c:	20000198 	.word	0x20000198
 800fa40:	ffff0208 	.word	0xffff0208

0800fa44 <__sread>:
 800fa44:	b510      	push	{r4, lr}
 800fa46:	460c      	mov	r4, r1
 800fa48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4c:	f000 f86c 	bl	800fb28 <_read_r>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	bfab      	itete	ge
 800fa54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fa56:	89a3      	ldrhlt	r3, [r4, #12]
 800fa58:	181b      	addge	r3, r3, r0
 800fa5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa5e:	bfac      	ite	ge
 800fa60:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa62:	81a3      	strhlt	r3, [r4, #12]
 800fa64:	bd10      	pop	{r4, pc}

0800fa66 <__swrite>:
 800fa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6a:	461f      	mov	r7, r3
 800fa6c:	898b      	ldrh	r3, [r1, #12]
 800fa6e:	05db      	lsls	r3, r3, #23
 800fa70:	4605      	mov	r5, r0
 800fa72:	460c      	mov	r4, r1
 800fa74:	4616      	mov	r6, r2
 800fa76:	d505      	bpl.n	800fa84 <__swrite+0x1e>
 800fa78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa7c:	2302      	movs	r3, #2
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f000 f840 	bl	800fb04 <_lseek_r>
 800fa84:	89a3      	ldrh	r3, [r4, #12]
 800fa86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa8e:	81a3      	strh	r3, [r4, #12]
 800fa90:	4632      	mov	r2, r6
 800fa92:	463b      	mov	r3, r7
 800fa94:	4628      	mov	r0, r5
 800fa96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9a:	f000 b857 	b.w	800fb4c <_write_r>

0800fa9e <__sseek>:
 800fa9e:	b510      	push	{r4, lr}
 800faa0:	460c      	mov	r4, r1
 800faa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800faa6:	f000 f82d 	bl	800fb04 <_lseek_r>
 800faaa:	1c43      	adds	r3, r0, #1
 800faac:	89a3      	ldrh	r3, [r4, #12]
 800faae:	bf15      	itete	ne
 800fab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800faba:	81a3      	strheq	r3, [r4, #12]
 800fabc:	bf18      	it	ne
 800fabe:	81a3      	strhne	r3, [r4, #12]
 800fac0:	bd10      	pop	{r4, pc}

0800fac2 <__sclose>:
 800fac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac6:	f000 b80d 	b.w	800fae4 <_close_r>

0800faca <memset>:
 800faca:	4402      	add	r2, r0
 800facc:	4603      	mov	r3, r0
 800face:	4293      	cmp	r3, r2
 800fad0:	d100      	bne.n	800fad4 <memset+0xa>
 800fad2:	4770      	bx	lr
 800fad4:	f803 1b01 	strb.w	r1, [r3], #1
 800fad8:	e7f9      	b.n	800face <memset+0x4>
	...

0800fadc <_localeconv_r>:
 800fadc:	4800      	ldr	r0, [pc, #0]	@ (800fae0 <_localeconv_r+0x4>)
 800fade:	4770      	bx	lr
 800fae0:	200002d8 	.word	0x200002d8

0800fae4 <_close_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d06      	ldr	r5, [pc, #24]	@ (800fb00 <_close_r+0x1c>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	602b      	str	r3, [r5, #0]
 800faf0:	f7f1 fece 	bl	8001890 <_close>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_close_r+0x1a>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_close_r+0x1a>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	20006ca0 	.word	0x20006ca0

0800fb04 <_lseek_r>:
 800fb04:	b538      	push	{r3, r4, r5, lr}
 800fb06:	4d07      	ldr	r5, [pc, #28]	@ (800fb24 <_lseek_r+0x20>)
 800fb08:	4604      	mov	r4, r0
 800fb0a:	4608      	mov	r0, r1
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	2200      	movs	r2, #0
 800fb10:	602a      	str	r2, [r5, #0]
 800fb12:	461a      	mov	r2, r3
 800fb14:	f7f1 fee3 	bl	80018de <_lseek>
 800fb18:	1c43      	adds	r3, r0, #1
 800fb1a:	d102      	bne.n	800fb22 <_lseek_r+0x1e>
 800fb1c:	682b      	ldr	r3, [r5, #0]
 800fb1e:	b103      	cbz	r3, 800fb22 <_lseek_r+0x1e>
 800fb20:	6023      	str	r3, [r4, #0]
 800fb22:	bd38      	pop	{r3, r4, r5, pc}
 800fb24:	20006ca0 	.word	0x20006ca0

0800fb28 <_read_r>:
 800fb28:	b538      	push	{r3, r4, r5, lr}
 800fb2a:	4d07      	ldr	r5, [pc, #28]	@ (800fb48 <_read_r+0x20>)
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	4608      	mov	r0, r1
 800fb30:	4611      	mov	r1, r2
 800fb32:	2200      	movs	r2, #0
 800fb34:	602a      	str	r2, [r5, #0]
 800fb36:	461a      	mov	r2, r3
 800fb38:	f7f1 fe71 	bl	800181e <_read>
 800fb3c:	1c43      	adds	r3, r0, #1
 800fb3e:	d102      	bne.n	800fb46 <_read_r+0x1e>
 800fb40:	682b      	ldr	r3, [r5, #0]
 800fb42:	b103      	cbz	r3, 800fb46 <_read_r+0x1e>
 800fb44:	6023      	str	r3, [r4, #0]
 800fb46:	bd38      	pop	{r3, r4, r5, pc}
 800fb48:	20006ca0 	.word	0x20006ca0

0800fb4c <_write_r>:
 800fb4c:	b538      	push	{r3, r4, r5, lr}
 800fb4e:	4d07      	ldr	r5, [pc, #28]	@ (800fb6c <_write_r+0x20>)
 800fb50:	4604      	mov	r4, r0
 800fb52:	4608      	mov	r0, r1
 800fb54:	4611      	mov	r1, r2
 800fb56:	2200      	movs	r2, #0
 800fb58:	602a      	str	r2, [r5, #0]
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	f7f1 fe7c 	bl	8001858 <_write>
 800fb60:	1c43      	adds	r3, r0, #1
 800fb62:	d102      	bne.n	800fb6a <_write_r+0x1e>
 800fb64:	682b      	ldr	r3, [r5, #0]
 800fb66:	b103      	cbz	r3, 800fb6a <_write_r+0x1e>
 800fb68:	6023      	str	r3, [r4, #0]
 800fb6a:	bd38      	pop	{r3, r4, r5, pc}
 800fb6c:	20006ca0 	.word	0x20006ca0

0800fb70 <__errno>:
 800fb70:	4b01      	ldr	r3, [pc, #4]	@ (800fb78 <__errno+0x8>)
 800fb72:	6818      	ldr	r0, [r3, #0]
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop
 800fb78:	20000198 	.word	0x20000198

0800fb7c <__libc_init_array>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	4d0d      	ldr	r5, [pc, #52]	@ (800fbb4 <__libc_init_array+0x38>)
 800fb80:	4c0d      	ldr	r4, [pc, #52]	@ (800fbb8 <__libc_init_array+0x3c>)
 800fb82:	1b64      	subs	r4, r4, r5
 800fb84:	10a4      	asrs	r4, r4, #2
 800fb86:	2600      	movs	r6, #0
 800fb88:	42a6      	cmp	r6, r4
 800fb8a:	d109      	bne.n	800fba0 <__libc_init_array+0x24>
 800fb8c:	4d0b      	ldr	r5, [pc, #44]	@ (800fbbc <__libc_init_array+0x40>)
 800fb8e:	4c0c      	ldr	r4, [pc, #48]	@ (800fbc0 <__libc_init_array+0x44>)
 800fb90:	f002 f864 	bl	8011c5c <_init>
 800fb94:	1b64      	subs	r4, r4, r5
 800fb96:	10a4      	asrs	r4, r4, #2
 800fb98:	2600      	movs	r6, #0
 800fb9a:	42a6      	cmp	r6, r4
 800fb9c:	d105      	bne.n	800fbaa <__libc_init_array+0x2e>
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba4:	4798      	blx	r3
 800fba6:	3601      	adds	r6, #1
 800fba8:	e7ee      	b.n	800fb88 <__libc_init_array+0xc>
 800fbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbae:	4798      	blx	r3
 800fbb0:	3601      	adds	r6, #1
 800fbb2:	e7f2      	b.n	800fb9a <__libc_init_array+0x1e>
 800fbb4:	08013c08 	.word	0x08013c08
 800fbb8:	08013c08 	.word	0x08013c08
 800fbbc:	08013c08 	.word	0x08013c08
 800fbc0:	08013c0c 	.word	0x08013c0c

0800fbc4 <__retarget_lock_init_recursive>:
 800fbc4:	4770      	bx	lr

0800fbc6 <__retarget_lock_acquire_recursive>:
 800fbc6:	4770      	bx	lr

0800fbc8 <__retarget_lock_release_recursive>:
 800fbc8:	4770      	bx	lr

0800fbca <memcpy>:
 800fbca:	440a      	add	r2, r1
 800fbcc:	4291      	cmp	r1, r2
 800fbce:	f100 33ff 	add.w	r3, r0, #4294967295
 800fbd2:	d100      	bne.n	800fbd6 <memcpy+0xc>
 800fbd4:	4770      	bx	lr
 800fbd6:	b510      	push	{r4, lr}
 800fbd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbe0:	4291      	cmp	r1, r2
 800fbe2:	d1f9      	bne.n	800fbd8 <memcpy+0xe>
 800fbe4:	bd10      	pop	{r4, pc}

0800fbe6 <quorem>:
 800fbe6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbea:	6903      	ldr	r3, [r0, #16]
 800fbec:	690c      	ldr	r4, [r1, #16]
 800fbee:	42a3      	cmp	r3, r4
 800fbf0:	4607      	mov	r7, r0
 800fbf2:	db7e      	blt.n	800fcf2 <quorem+0x10c>
 800fbf4:	3c01      	subs	r4, #1
 800fbf6:	f101 0814 	add.w	r8, r1, #20
 800fbfa:	00a3      	lsls	r3, r4, #2
 800fbfc:	f100 0514 	add.w	r5, r0, #20
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc06:	9301      	str	r3, [sp, #4]
 800fc08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc10:	3301      	adds	r3, #1
 800fc12:	429a      	cmp	r2, r3
 800fc14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc18:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc1c:	d32e      	bcc.n	800fc7c <quorem+0x96>
 800fc1e:	f04f 0a00 	mov.w	sl, #0
 800fc22:	46c4      	mov	ip, r8
 800fc24:	46ae      	mov	lr, r5
 800fc26:	46d3      	mov	fp, sl
 800fc28:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc2c:	b298      	uxth	r0, r3
 800fc2e:	fb06 a000 	mla	r0, r6, r0, sl
 800fc32:	0c02      	lsrs	r2, r0, #16
 800fc34:	0c1b      	lsrs	r3, r3, #16
 800fc36:	fb06 2303 	mla	r3, r6, r3, r2
 800fc3a:	f8de 2000 	ldr.w	r2, [lr]
 800fc3e:	b280      	uxth	r0, r0
 800fc40:	b292      	uxth	r2, r2
 800fc42:	1a12      	subs	r2, r2, r0
 800fc44:	445a      	add	r2, fp
 800fc46:	f8de 0000 	ldr.w	r0, [lr]
 800fc4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fc54:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fc58:	b292      	uxth	r2, r2
 800fc5a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc5e:	45e1      	cmp	r9, ip
 800fc60:	f84e 2b04 	str.w	r2, [lr], #4
 800fc64:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fc68:	d2de      	bcs.n	800fc28 <quorem+0x42>
 800fc6a:	9b00      	ldr	r3, [sp, #0]
 800fc6c:	58eb      	ldr	r3, [r5, r3]
 800fc6e:	b92b      	cbnz	r3, 800fc7c <quorem+0x96>
 800fc70:	9b01      	ldr	r3, [sp, #4]
 800fc72:	3b04      	subs	r3, #4
 800fc74:	429d      	cmp	r5, r3
 800fc76:	461a      	mov	r2, r3
 800fc78:	d32f      	bcc.n	800fcda <quorem+0xf4>
 800fc7a:	613c      	str	r4, [r7, #16]
 800fc7c:	4638      	mov	r0, r7
 800fc7e:	f001 f979 	bl	8010f74 <__mcmp>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	db25      	blt.n	800fcd2 <quorem+0xec>
 800fc86:	4629      	mov	r1, r5
 800fc88:	2000      	movs	r0, #0
 800fc8a:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc8e:	f8d1 c000 	ldr.w	ip, [r1]
 800fc92:	fa1f fe82 	uxth.w	lr, r2
 800fc96:	fa1f f38c 	uxth.w	r3, ip
 800fc9a:	eba3 030e 	sub.w	r3, r3, lr
 800fc9e:	4403      	add	r3, r0
 800fca0:	0c12      	lsrs	r2, r2, #16
 800fca2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fca6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcb0:	45c1      	cmp	r9, r8
 800fcb2:	f841 3b04 	str.w	r3, [r1], #4
 800fcb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fcba:	d2e6      	bcs.n	800fc8a <quorem+0xa4>
 800fcbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fcc4:	b922      	cbnz	r2, 800fcd0 <quorem+0xea>
 800fcc6:	3b04      	subs	r3, #4
 800fcc8:	429d      	cmp	r5, r3
 800fcca:	461a      	mov	r2, r3
 800fccc:	d30b      	bcc.n	800fce6 <quorem+0x100>
 800fcce:	613c      	str	r4, [r7, #16]
 800fcd0:	3601      	adds	r6, #1
 800fcd2:	4630      	mov	r0, r6
 800fcd4:	b003      	add	sp, #12
 800fcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcda:	6812      	ldr	r2, [r2, #0]
 800fcdc:	3b04      	subs	r3, #4
 800fcde:	2a00      	cmp	r2, #0
 800fce0:	d1cb      	bne.n	800fc7a <quorem+0x94>
 800fce2:	3c01      	subs	r4, #1
 800fce4:	e7c6      	b.n	800fc74 <quorem+0x8e>
 800fce6:	6812      	ldr	r2, [r2, #0]
 800fce8:	3b04      	subs	r3, #4
 800fcea:	2a00      	cmp	r2, #0
 800fcec:	d1ef      	bne.n	800fcce <quorem+0xe8>
 800fcee:	3c01      	subs	r4, #1
 800fcf0:	e7ea      	b.n	800fcc8 <quorem+0xe2>
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	e7ee      	b.n	800fcd4 <quorem+0xee>
	...

0800fcf8 <_dtoa_r>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	69c7      	ldr	r7, [r0, #28]
 800fcfe:	b099      	sub	sp, #100	@ 0x64
 800fd00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fd04:	ec55 4b10 	vmov	r4, r5, d0
 800fd08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800fd0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800fd0c:	4683      	mov	fp, r0
 800fd0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800fd10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd12:	b97f      	cbnz	r7, 800fd34 <_dtoa_r+0x3c>
 800fd14:	2010      	movs	r0, #16
 800fd16:	f000 fdfd 	bl	8010914 <malloc>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800fd20:	b920      	cbnz	r0, 800fd2c <_dtoa_r+0x34>
 800fd22:	4ba7      	ldr	r3, [pc, #668]	@ (800ffc0 <_dtoa_r+0x2c8>)
 800fd24:	21ef      	movs	r1, #239	@ 0xef
 800fd26:	48a7      	ldr	r0, [pc, #668]	@ (800ffc4 <_dtoa_r+0x2cc>)
 800fd28:	f001 fc5a 	bl	80115e0 <__assert_func>
 800fd2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fd30:	6007      	str	r7, [r0, #0]
 800fd32:	60c7      	str	r7, [r0, #12]
 800fd34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd38:	6819      	ldr	r1, [r3, #0]
 800fd3a:	b159      	cbz	r1, 800fd54 <_dtoa_r+0x5c>
 800fd3c:	685a      	ldr	r2, [r3, #4]
 800fd3e:	604a      	str	r2, [r1, #4]
 800fd40:	2301      	movs	r3, #1
 800fd42:	4093      	lsls	r3, r2
 800fd44:	608b      	str	r3, [r1, #8]
 800fd46:	4658      	mov	r0, fp
 800fd48:	f000 feda 	bl	8010b00 <_Bfree>
 800fd4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fd50:	2200      	movs	r2, #0
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	1e2b      	subs	r3, r5, #0
 800fd56:	bfb9      	ittee	lt
 800fd58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fd5c:	9303      	strlt	r3, [sp, #12]
 800fd5e:	2300      	movge	r3, #0
 800fd60:	6033      	strge	r3, [r6, #0]
 800fd62:	9f03      	ldr	r7, [sp, #12]
 800fd64:	4b98      	ldr	r3, [pc, #608]	@ (800ffc8 <_dtoa_r+0x2d0>)
 800fd66:	bfbc      	itt	lt
 800fd68:	2201      	movlt	r2, #1
 800fd6a:	6032      	strlt	r2, [r6, #0]
 800fd6c:	43bb      	bics	r3, r7
 800fd6e:	d112      	bne.n	800fd96 <_dtoa_r+0x9e>
 800fd70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fd72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fd76:	6013      	str	r3, [r2, #0]
 800fd78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fd7c:	4323      	orrs	r3, r4
 800fd7e:	f000 854d 	beq.w	801081c <_dtoa_r+0xb24>
 800fd82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ffdc <_dtoa_r+0x2e4>
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f000 854f 	beq.w	801082c <_dtoa_r+0xb34>
 800fd8e:	f10a 0303 	add.w	r3, sl, #3
 800fd92:	f000 bd49 	b.w	8010828 <_dtoa_r+0xb30>
 800fd96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	ec51 0b17 	vmov	r0, r1, d7
 800fda0:	2300      	movs	r3, #0
 800fda2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800fda6:	f7f0 fe9f 	bl	8000ae8 <__aeabi_dcmpeq>
 800fdaa:	4680      	mov	r8, r0
 800fdac:	b158      	cbz	r0, 800fdc6 <_dtoa_r+0xce>
 800fdae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	6013      	str	r3, [r2, #0]
 800fdb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fdb6:	b113      	cbz	r3, 800fdbe <_dtoa_r+0xc6>
 800fdb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fdba:	4b84      	ldr	r3, [pc, #528]	@ (800ffcc <_dtoa_r+0x2d4>)
 800fdbc:	6013      	str	r3, [r2, #0]
 800fdbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ffe0 <_dtoa_r+0x2e8>
 800fdc2:	f000 bd33 	b.w	801082c <_dtoa_r+0xb34>
 800fdc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800fdca:	aa16      	add	r2, sp, #88	@ 0x58
 800fdcc:	a917      	add	r1, sp, #92	@ 0x5c
 800fdce:	4658      	mov	r0, fp
 800fdd0:	f001 f980 	bl	80110d4 <__d2b>
 800fdd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fdd8:	4681      	mov	r9, r0
 800fdda:	2e00      	cmp	r6, #0
 800fddc:	d077      	beq.n	800fece <_dtoa_r+0x1d6>
 800fdde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fde0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800fde4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fde8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fdec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fdf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fdf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	4b74      	ldr	r3, [pc, #464]	@ (800ffd0 <_dtoa_r+0x2d8>)
 800fdfe:	f7f0 fa53 	bl	80002a8 <__aeabi_dsub>
 800fe02:	a369      	add	r3, pc, #420	@ (adr r3, 800ffa8 <_dtoa_r+0x2b0>)
 800fe04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe08:	f7f0 fc06 	bl	8000618 <__aeabi_dmul>
 800fe0c:	a368      	add	r3, pc, #416	@ (adr r3, 800ffb0 <_dtoa_r+0x2b8>)
 800fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe12:	f7f0 fa4b 	bl	80002ac <__adddf3>
 800fe16:	4604      	mov	r4, r0
 800fe18:	4630      	mov	r0, r6
 800fe1a:	460d      	mov	r5, r1
 800fe1c:	f7f0 fb92 	bl	8000544 <__aeabi_i2d>
 800fe20:	a365      	add	r3, pc, #404	@ (adr r3, 800ffb8 <_dtoa_r+0x2c0>)
 800fe22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe26:	f7f0 fbf7 	bl	8000618 <__aeabi_dmul>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	4620      	mov	r0, r4
 800fe30:	4629      	mov	r1, r5
 800fe32:	f7f0 fa3b 	bl	80002ac <__adddf3>
 800fe36:	4604      	mov	r4, r0
 800fe38:	460d      	mov	r5, r1
 800fe3a:	f7f0 fe9d 	bl	8000b78 <__aeabi_d2iz>
 800fe3e:	2200      	movs	r2, #0
 800fe40:	4607      	mov	r7, r0
 800fe42:	2300      	movs	r3, #0
 800fe44:	4620      	mov	r0, r4
 800fe46:	4629      	mov	r1, r5
 800fe48:	f7f0 fe58 	bl	8000afc <__aeabi_dcmplt>
 800fe4c:	b140      	cbz	r0, 800fe60 <_dtoa_r+0x168>
 800fe4e:	4638      	mov	r0, r7
 800fe50:	f7f0 fb78 	bl	8000544 <__aeabi_i2d>
 800fe54:	4622      	mov	r2, r4
 800fe56:	462b      	mov	r3, r5
 800fe58:	f7f0 fe46 	bl	8000ae8 <__aeabi_dcmpeq>
 800fe5c:	b900      	cbnz	r0, 800fe60 <_dtoa_r+0x168>
 800fe5e:	3f01      	subs	r7, #1
 800fe60:	2f16      	cmp	r7, #22
 800fe62:	d851      	bhi.n	800ff08 <_dtoa_r+0x210>
 800fe64:	4b5b      	ldr	r3, [pc, #364]	@ (800ffd4 <_dtoa_r+0x2dc>)
 800fe66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fe6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe72:	f7f0 fe43 	bl	8000afc <__aeabi_dcmplt>
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d048      	beq.n	800ff0c <_dtoa_r+0x214>
 800fe7a:	3f01      	subs	r7, #1
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800fe80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fe82:	1b9b      	subs	r3, r3, r6
 800fe84:	1e5a      	subs	r2, r3, #1
 800fe86:	bf44      	itt	mi
 800fe88:	f1c3 0801 	rsbmi	r8, r3, #1
 800fe8c:	2300      	movmi	r3, #0
 800fe8e:	9208      	str	r2, [sp, #32]
 800fe90:	bf54      	ite	pl
 800fe92:	f04f 0800 	movpl.w	r8, #0
 800fe96:	9308      	strmi	r3, [sp, #32]
 800fe98:	2f00      	cmp	r7, #0
 800fe9a:	db39      	blt.n	800ff10 <_dtoa_r+0x218>
 800fe9c:	9b08      	ldr	r3, [sp, #32]
 800fe9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800fea0:	443b      	add	r3, r7
 800fea2:	9308      	str	r3, [sp, #32]
 800fea4:	2300      	movs	r3, #0
 800fea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feaa:	2b09      	cmp	r3, #9
 800feac:	d864      	bhi.n	800ff78 <_dtoa_r+0x280>
 800feae:	2b05      	cmp	r3, #5
 800feb0:	bfc4      	itt	gt
 800feb2:	3b04      	subgt	r3, #4
 800feb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800feb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feb8:	f1a3 0302 	sub.w	r3, r3, #2
 800febc:	bfcc      	ite	gt
 800febe:	2400      	movgt	r4, #0
 800fec0:	2401      	movle	r4, #1
 800fec2:	2b03      	cmp	r3, #3
 800fec4:	d863      	bhi.n	800ff8e <_dtoa_r+0x296>
 800fec6:	e8df f003 	tbb	[pc, r3]
 800feca:	372a      	.short	0x372a
 800fecc:	5535      	.short	0x5535
 800fece:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800fed2:	441e      	add	r6, r3
 800fed4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fed8:	2b20      	cmp	r3, #32
 800feda:	bfc1      	itttt	gt
 800fedc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fee0:	409f      	lslgt	r7, r3
 800fee2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fee6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800feea:	bfd6      	itet	le
 800feec:	f1c3 0320 	rsble	r3, r3, #32
 800fef0:	ea47 0003 	orrgt.w	r0, r7, r3
 800fef4:	fa04 f003 	lslle.w	r0, r4, r3
 800fef8:	f7f0 fb14 	bl	8000524 <__aeabi_ui2d>
 800fefc:	2201      	movs	r2, #1
 800fefe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ff02:	3e01      	subs	r6, #1
 800ff04:	9214      	str	r2, [sp, #80]	@ 0x50
 800ff06:	e777      	b.n	800fdf8 <_dtoa_r+0x100>
 800ff08:	2301      	movs	r3, #1
 800ff0a:	e7b8      	b.n	800fe7e <_dtoa_r+0x186>
 800ff0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800ff0e:	e7b7      	b.n	800fe80 <_dtoa_r+0x188>
 800ff10:	427b      	negs	r3, r7
 800ff12:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff14:	2300      	movs	r3, #0
 800ff16:	eba8 0807 	sub.w	r8, r8, r7
 800ff1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ff1c:	e7c4      	b.n	800fea8 <_dtoa_r+0x1b0>
 800ff1e:	2300      	movs	r3, #0
 800ff20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	dc35      	bgt.n	800ff94 <_dtoa_r+0x29c>
 800ff28:	2301      	movs	r3, #1
 800ff2a:	9300      	str	r3, [sp, #0]
 800ff2c:	9307      	str	r3, [sp, #28]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	920e      	str	r2, [sp, #56]	@ 0x38
 800ff32:	e00b      	b.n	800ff4c <_dtoa_r+0x254>
 800ff34:	2301      	movs	r3, #1
 800ff36:	e7f3      	b.n	800ff20 <_dtoa_r+0x228>
 800ff38:	2300      	movs	r3, #0
 800ff3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff3e:	18fb      	adds	r3, r7, r3
 800ff40:	9300      	str	r3, [sp, #0]
 800ff42:	3301      	adds	r3, #1
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	9307      	str	r3, [sp, #28]
 800ff48:	bfb8      	it	lt
 800ff4a:	2301      	movlt	r3, #1
 800ff4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ff50:	2100      	movs	r1, #0
 800ff52:	2204      	movs	r2, #4
 800ff54:	f102 0514 	add.w	r5, r2, #20
 800ff58:	429d      	cmp	r5, r3
 800ff5a:	d91f      	bls.n	800ff9c <_dtoa_r+0x2a4>
 800ff5c:	6041      	str	r1, [r0, #4]
 800ff5e:	4658      	mov	r0, fp
 800ff60:	f000 fd8e 	bl	8010a80 <_Balloc>
 800ff64:	4682      	mov	sl, r0
 800ff66:	2800      	cmp	r0, #0
 800ff68:	d13c      	bne.n	800ffe4 <_dtoa_r+0x2ec>
 800ff6a:	4b1b      	ldr	r3, [pc, #108]	@ (800ffd8 <_dtoa_r+0x2e0>)
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800ff72:	e6d8      	b.n	800fd26 <_dtoa_r+0x2e>
 800ff74:	2301      	movs	r3, #1
 800ff76:	e7e0      	b.n	800ff3a <_dtoa_r+0x242>
 800ff78:	2401      	movs	r4, #1
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ff80:	f04f 33ff 	mov.w	r3, #4294967295
 800ff84:	9300      	str	r3, [sp, #0]
 800ff86:	9307      	str	r3, [sp, #28]
 800ff88:	2200      	movs	r2, #0
 800ff8a:	2312      	movs	r3, #18
 800ff8c:	e7d0      	b.n	800ff30 <_dtoa_r+0x238>
 800ff8e:	2301      	movs	r3, #1
 800ff90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ff92:	e7f5      	b.n	800ff80 <_dtoa_r+0x288>
 800ff94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	9307      	str	r3, [sp, #28]
 800ff9a:	e7d7      	b.n	800ff4c <_dtoa_r+0x254>
 800ff9c:	3101      	adds	r1, #1
 800ff9e:	0052      	lsls	r2, r2, #1
 800ffa0:	e7d8      	b.n	800ff54 <_dtoa_r+0x25c>
 800ffa2:	bf00      	nop
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	636f4361 	.word	0x636f4361
 800ffac:	3fd287a7 	.word	0x3fd287a7
 800ffb0:	8b60c8b3 	.word	0x8b60c8b3
 800ffb4:	3fc68a28 	.word	0x3fc68a28
 800ffb8:	509f79fb 	.word	0x509f79fb
 800ffbc:	3fd34413 	.word	0x3fd34413
 800ffc0:	080138d1 	.word	0x080138d1
 800ffc4:	080138e8 	.word	0x080138e8
 800ffc8:	7ff00000 	.word	0x7ff00000
 800ffcc:	080138a1 	.word	0x080138a1
 800ffd0:	3ff80000 	.word	0x3ff80000
 800ffd4:	080139e0 	.word	0x080139e0
 800ffd8:	08013940 	.word	0x08013940
 800ffdc:	080138cd 	.word	0x080138cd
 800ffe0:	080138a0 	.word	0x080138a0
 800ffe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ffe8:	6018      	str	r0, [r3, #0]
 800ffea:	9b07      	ldr	r3, [sp, #28]
 800ffec:	2b0e      	cmp	r3, #14
 800ffee:	f200 80a4 	bhi.w	801013a <_dtoa_r+0x442>
 800fff2:	2c00      	cmp	r4, #0
 800fff4:	f000 80a1 	beq.w	801013a <_dtoa_r+0x442>
 800fff8:	2f00      	cmp	r7, #0
 800fffa:	dd33      	ble.n	8010064 <_dtoa_r+0x36c>
 800fffc:	4bad      	ldr	r3, [pc, #692]	@ (80102b4 <_dtoa_r+0x5bc>)
 800fffe:	f007 020f 	and.w	r2, r7, #15
 8010002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010006:	ed93 7b00 	vldr	d7, [r3]
 801000a:	05f8      	lsls	r0, r7, #23
 801000c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010010:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010014:	d516      	bpl.n	8010044 <_dtoa_r+0x34c>
 8010016:	4ba8      	ldr	r3, [pc, #672]	@ (80102b8 <_dtoa_r+0x5c0>)
 8010018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801001c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010020:	f7f0 fc24 	bl	800086c <__aeabi_ddiv>
 8010024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010028:	f004 040f 	and.w	r4, r4, #15
 801002c:	2603      	movs	r6, #3
 801002e:	4da2      	ldr	r5, [pc, #648]	@ (80102b8 <_dtoa_r+0x5c0>)
 8010030:	b954      	cbnz	r4, 8010048 <_dtoa_r+0x350>
 8010032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801003a:	f7f0 fc17 	bl	800086c <__aeabi_ddiv>
 801003e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010042:	e028      	b.n	8010096 <_dtoa_r+0x39e>
 8010044:	2602      	movs	r6, #2
 8010046:	e7f2      	b.n	801002e <_dtoa_r+0x336>
 8010048:	07e1      	lsls	r1, r4, #31
 801004a:	d508      	bpl.n	801005e <_dtoa_r+0x366>
 801004c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010050:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010054:	f7f0 fae0 	bl	8000618 <__aeabi_dmul>
 8010058:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801005c:	3601      	adds	r6, #1
 801005e:	1064      	asrs	r4, r4, #1
 8010060:	3508      	adds	r5, #8
 8010062:	e7e5      	b.n	8010030 <_dtoa_r+0x338>
 8010064:	f000 80d2 	beq.w	801020c <_dtoa_r+0x514>
 8010068:	427c      	negs	r4, r7
 801006a:	4b92      	ldr	r3, [pc, #584]	@ (80102b4 <_dtoa_r+0x5bc>)
 801006c:	4d92      	ldr	r5, [pc, #584]	@ (80102b8 <_dtoa_r+0x5c0>)
 801006e:	f004 020f 	and.w	r2, r4, #15
 8010072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801007a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801007e:	f7f0 facb 	bl	8000618 <__aeabi_dmul>
 8010082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010086:	1124      	asrs	r4, r4, #4
 8010088:	2300      	movs	r3, #0
 801008a:	2602      	movs	r6, #2
 801008c:	2c00      	cmp	r4, #0
 801008e:	f040 80b2 	bne.w	80101f6 <_dtoa_r+0x4fe>
 8010092:	2b00      	cmp	r3, #0
 8010094:	d1d3      	bne.n	801003e <_dtoa_r+0x346>
 8010096:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010098:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	f000 80b7 	beq.w	8010210 <_dtoa_r+0x518>
 80100a2:	4b86      	ldr	r3, [pc, #536]	@ (80102bc <_dtoa_r+0x5c4>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	4620      	mov	r0, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	f7f0 fd27 	bl	8000afc <__aeabi_dcmplt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f000 80ae 	beq.w	8010210 <_dtoa_r+0x518>
 80100b4:	9b07      	ldr	r3, [sp, #28]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f000 80aa 	beq.w	8010210 <_dtoa_r+0x518>
 80100bc:	9b00      	ldr	r3, [sp, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	dd37      	ble.n	8010132 <_dtoa_r+0x43a>
 80100c2:	1e7b      	subs	r3, r7, #1
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	4620      	mov	r0, r4
 80100c8:	4b7d      	ldr	r3, [pc, #500]	@ (80102c0 <_dtoa_r+0x5c8>)
 80100ca:	2200      	movs	r2, #0
 80100cc:	4629      	mov	r1, r5
 80100ce:	f7f0 faa3 	bl	8000618 <__aeabi_dmul>
 80100d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80100d6:	9c00      	ldr	r4, [sp, #0]
 80100d8:	3601      	adds	r6, #1
 80100da:	4630      	mov	r0, r6
 80100dc:	f7f0 fa32 	bl	8000544 <__aeabi_i2d>
 80100e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100e4:	f7f0 fa98 	bl	8000618 <__aeabi_dmul>
 80100e8:	4b76      	ldr	r3, [pc, #472]	@ (80102c4 <_dtoa_r+0x5cc>)
 80100ea:	2200      	movs	r2, #0
 80100ec:	f7f0 f8de 	bl	80002ac <__adddf3>
 80100f0:	4605      	mov	r5, r0
 80100f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80100f6:	2c00      	cmp	r4, #0
 80100f8:	f040 808d 	bne.w	8010216 <_dtoa_r+0x51e>
 80100fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010100:	4b71      	ldr	r3, [pc, #452]	@ (80102c8 <_dtoa_r+0x5d0>)
 8010102:	2200      	movs	r2, #0
 8010104:	f7f0 f8d0 	bl	80002a8 <__aeabi_dsub>
 8010108:	4602      	mov	r2, r0
 801010a:	460b      	mov	r3, r1
 801010c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010110:	462a      	mov	r2, r5
 8010112:	4633      	mov	r3, r6
 8010114:	f7f0 fd10 	bl	8000b38 <__aeabi_dcmpgt>
 8010118:	2800      	cmp	r0, #0
 801011a:	f040 828b 	bne.w	8010634 <_dtoa_r+0x93c>
 801011e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010122:	462a      	mov	r2, r5
 8010124:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010128:	f7f0 fce8 	bl	8000afc <__aeabi_dcmplt>
 801012c:	2800      	cmp	r0, #0
 801012e:	f040 8128 	bne.w	8010382 <_dtoa_r+0x68a>
 8010132:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010136:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801013a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801013c:	2b00      	cmp	r3, #0
 801013e:	f2c0 815a 	blt.w	80103f6 <_dtoa_r+0x6fe>
 8010142:	2f0e      	cmp	r7, #14
 8010144:	f300 8157 	bgt.w	80103f6 <_dtoa_r+0x6fe>
 8010148:	4b5a      	ldr	r3, [pc, #360]	@ (80102b4 <_dtoa_r+0x5bc>)
 801014a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801014e:	ed93 7b00 	vldr	d7, [r3]
 8010152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010154:	2b00      	cmp	r3, #0
 8010156:	ed8d 7b00 	vstr	d7, [sp]
 801015a:	da03      	bge.n	8010164 <_dtoa_r+0x46c>
 801015c:	9b07      	ldr	r3, [sp, #28]
 801015e:	2b00      	cmp	r3, #0
 8010160:	f340 8101 	ble.w	8010366 <_dtoa_r+0x66e>
 8010164:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010168:	4656      	mov	r6, sl
 801016a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	f7f0 fb7b 	bl	800086c <__aeabi_ddiv>
 8010176:	f7f0 fcff 	bl	8000b78 <__aeabi_d2iz>
 801017a:	4680      	mov	r8, r0
 801017c:	f7f0 f9e2 	bl	8000544 <__aeabi_i2d>
 8010180:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010184:	f7f0 fa48 	bl	8000618 <__aeabi_dmul>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	4620      	mov	r0, r4
 801018e:	4629      	mov	r1, r5
 8010190:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010194:	f7f0 f888 	bl	80002a8 <__aeabi_dsub>
 8010198:	f806 4b01 	strb.w	r4, [r6], #1
 801019c:	9d07      	ldr	r5, [sp, #28]
 801019e:	eba6 040a 	sub.w	r4, r6, sl
 80101a2:	42a5      	cmp	r5, r4
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	f040 8117 	bne.w	80103da <_dtoa_r+0x6e2>
 80101ac:	f7f0 f87e 	bl	80002ac <__adddf3>
 80101b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101b4:	4604      	mov	r4, r0
 80101b6:	460d      	mov	r5, r1
 80101b8:	f7f0 fcbe 	bl	8000b38 <__aeabi_dcmpgt>
 80101bc:	2800      	cmp	r0, #0
 80101be:	f040 80f9 	bne.w	80103b4 <_dtoa_r+0x6bc>
 80101c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101c6:	4620      	mov	r0, r4
 80101c8:	4629      	mov	r1, r5
 80101ca:	f7f0 fc8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80101ce:	b118      	cbz	r0, 80101d8 <_dtoa_r+0x4e0>
 80101d0:	f018 0f01 	tst.w	r8, #1
 80101d4:	f040 80ee 	bne.w	80103b4 <_dtoa_r+0x6bc>
 80101d8:	4649      	mov	r1, r9
 80101da:	4658      	mov	r0, fp
 80101dc:	f000 fc90 	bl	8010b00 <_Bfree>
 80101e0:	2300      	movs	r3, #0
 80101e2:	7033      	strb	r3, [r6, #0]
 80101e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80101e6:	3701      	adds	r7, #1
 80101e8:	601f      	str	r7, [r3, #0]
 80101ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f000 831d 	beq.w	801082c <_dtoa_r+0xb34>
 80101f2:	601e      	str	r6, [r3, #0]
 80101f4:	e31a      	b.n	801082c <_dtoa_r+0xb34>
 80101f6:	07e2      	lsls	r2, r4, #31
 80101f8:	d505      	bpl.n	8010206 <_dtoa_r+0x50e>
 80101fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101fe:	f7f0 fa0b 	bl	8000618 <__aeabi_dmul>
 8010202:	3601      	adds	r6, #1
 8010204:	2301      	movs	r3, #1
 8010206:	1064      	asrs	r4, r4, #1
 8010208:	3508      	adds	r5, #8
 801020a:	e73f      	b.n	801008c <_dtoa_r+0x394>
 801020c:	2602      	movs	r6, #2
 801020e:	e742      	b.n	8010096 <_dtoa_r+0x39e>
 8010210:	9c07      	ldr	r4, [sp, #28]
 8010212:	9704      	str	r7, [sp, #16]
 8010214:	e761      	b.n	80100da <_dtoa_r+0x3e2>
 8010216:	4b27      	ldr	r3, [pc, #156]	@ (80102b4 <_dtoa_r+0x5bc>)
 8010218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801021a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801021e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010222:	4454      	add	r4, sl
 8010224:	2900      	cmp	r1, #0
 8010226:	d053      	beq.n	80102d0 <_dtoa_r+0x5d8>
 8010228:	4928      	ldr	r1, [pc, #160]	@ (80102cc <_dtoa_r+0x5d4>)
 801022a:	2000      	movs	r0, #0
 801022c:	f7f0 fb1e 	bl	800086c <__aeabi_ddiv>
 8010230:	4633      	mov	r3, r6
 8010232:	462a      	mov	r2, r5
 8010234:	f7f0 f838 	bl	80002a8 <__aeabi_dsub>
 8010238:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801023c:	4656      	mov	r6, sl
 801023e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010242:	f7f0 fc99 	bl	8000b78 <__aeabi_d2iz>
 8010246:	4605      	mov	r5, r0
 8010248:	f7f0 f97c 	bl	8000544 <__aeabi_i2d>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010254:	f7f0 f828 	bl	80002a8 <__aeabi_dsub>
 8010258:	3530      	adds	r5, #48	@ 0x30
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010262:	f806 5b01 	strb.w	r5, [r6], #1
 8010266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801026a:	f7f0 fc47 	bl	8000afc <__aeabi_dcmplt>
 801026e:	2800      	cmp	r0, #0
 8010270:	d171      	bne.n	8010356 <_dtoa_r+0x65e>
 8010272:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010276:	4911      	ldr	r1, [pc, #68]	@ (80102bc <_dtoa_r+0x5c4>)
 8010278:	2000      	movs	r0, #0
 801027a:	f7f0 f815 	bl	80002a8 <__aeabi_dsub>
 801027e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010282:	f7f0 fc3b 	bl	8000afc <__aeabi_dcmplt>
 8010286:	2800      	cmp	r0, #0
 8010288:	f040 8095 	bne.w	80103b6 <_dtoa_r+0x6be>
 801028c:	42a6      	cmp	r6, r4
 801028e:	f43f af50 	beq.w	8010132 <_dtoa_r+0x43a>
 8010292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010296:	4b0a      	ldr	r3, [pc, #40]	@ (80102c0 <_dtoa_r+0x5c8>)
 8010298:	2200      	movs	r2, #0
 801029a:	f7f0 f9bd 	bl	8000618 <__aeabi_dmul>
 801029e:	4b08      	ldr	r3, [pc, #32]	@ (80102c0 <_dtoa_r+0x5c8>)
 80102a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80102a4:	2200      	movs	r2, #0
 80102a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102aa:	f7f0 f9b5 	bl	8000618 <__aeabi_dmul>
 80102ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80102b2:	e7c4      	b.n	801023e <_dtoa_r+0x546>
 80102b4:	080139e0 	.word	0x080139e0
 80102b8:	080139b8 	.word	0x080139b8
 80102bc:	3ff00000 	.word	0x3ff00000
 80102c0:	40240000 	.word	0x40240000
 80102c4:	401c0000 	.word	0x401c0000
 80102c8:	40140000 	.word	0x40140000
 80102cc:	3fe00000 	.word	0x3fe00000
 80102d0:	4631      	mov	r1, r6
 80102d2:	4628      	mov	r0, r5
 80102d4:	f7f0 f9a0 	bl	8000618 <__aeabi_dmul>
 80102d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80102dc:	9415      	str	r4, [sp, #84]	@ 0x54
 80102de:	4656      	mov	r6, sl
 80102e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102e4:	f7f0 fc48 	bl	8000b78 <__aeabi_d2iz>
 80102e8:	4605      	mov	r5, r0
 80102ea:	f7f0 f92b 	bl	8000544 <__aeabi_i2d>
 80102ee:	4602      	mov	r2, r0
 80102f0:	460b      	mov	r3, r1
 80102f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80102f6:	f7ef ffd7 	bl	80002a8 <__aeabi_dsub>
 80102fa:	3530      	adds	r5, #48	@ 0x30
 80102fc:	f806 5b01 	strb.w	r5, [r6], #1
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	42a6      	cmp	r6, r4
 8010306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801030a:	f04f 0200 	mov.w	r2, #0
 801030e:	d124      	bne.n	801035a <_dtoa_r+0x662>
 8010310:	4bac      	ldr	r3, [pc, #688]	@ (80105c4 <_dtoa_r+0x8cc>)
 8010312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010316:	f7ef ffc9 	bl	80002ac <__adddf3>
 801031a:	4602      	mov	r2, r0
 801031c:	460b      	mov	r3, r1
 801031e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010322:	f7f0 fc09 	bl	8000b38 <__aeabi_dcmpgt>
 8010326:	2800      	cmp	r0, #0
 8010328:	d145      	bne.n	80103b6 <_dtoa_r+0x6be>
 801032a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801032e:	49a5      	ldr	r1, [pc, #660]	@ (80105c4 <_dtoa_r+0x8cc>)
 8010330:	2000      	movs	r0, #0
 8010332:	f7ef ffb9 	bl	80002a8 <__aeabi_dsub>
 8010336:	4602      	mov	r2, r0
 8010338:	460b      	mov	r3, r1
 801033a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801033e:	f7f0 fbdd 	bl	8000afc <__aeabi_dcmplt>
 8010342:	2800      	cmp	r0, #0
 8010344:	f43f aef5 	beq.w	8010132 <_dtoa_r+0x43a>
 8010348:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801034a:	1e73      	subs	r3, r6, #1
 801034c:	9315      	str	r3, [sp, #84]	@ 0x54
 801034e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010352:	2b30      	cmp	r3, #48	@ 0x30
 8010354:	d0f8      	beq.n	8010348 <_dtoa_r+0x650>
 8010356:	9f04      	ldr	r7, [sp, #16]
 8010358:	e73e      	b.n	80101d8 <_dtoa_r+0x4e0>
 801035a:	4b9b      	ldr	r3, [pc, #620]	@ (80105c8 <_dtoa_r+0x8d0>)
 801035c:	f7f0 f95c 	bl	8000618 <__aeabi_dmul>
 8010360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010364:	e7bc      	b.n	80102e0 <_dtoa_r+0x5e8>
 8010366:	d10c      	bne.n	8010382 <_dtoa_r+0x68a>
 8010368:	4b98      	ldr	r3, [pc, #608]	@ (80105cc <_dtoa_r+0x8d4>)
 801036a:	2200      	movs	r2, #0
 801036c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010370:	f7f0 f952 	bl	8000618 <__aeabi_dmul>
 8010374:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010378:	f7f0 fbd4 	bl	8000b24 <__aeabi_dcmpge>
 801037c:	2800      	cmp	r0, #0
 801037e:	f000 8157 	beq.w	8010630 <_dtoa_r+0x938>
 8010382:	2400      	movs	r4, #0
 8010384:	4625      	mov	r5, r4
 8010386:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010388:	43db      	mvns	r3, r3
 801038a:	9304      	str	r3, [sp, #16]
 801038c:	4656      	mov	r6, sl
 801038e:	2700      	movs	r7, #0
 8010390:	4621      	mov	r1, r4
 8010392:	4658      	mov	r0, fp
 8010394:	f000 fbb4 	bl	8010b00 <_Bfree>
 8010398:	2d00      	cmp	r5, #0
 801039a:	d0dc      	beq.n	8010356 <_dtoa_r+0x65e>
 801039c:	b12f      	cbz	r7, 80103aa <_dtoa_r+0x6b2>
 801039e:	42af      	cmp	r7, r5
 80103a0:	d003      	beq.n	80103aa <_dtoa_r+0x6b2>
 80103a2:	4639      	mov	r1, r7
 80103a4:	4658      	mov	r0, fp
 80103a6:	f000 fbab 	bl	8010b00 <_Bfree>
 80103aa:	4629      	mov	r1, r5
 80103ac:	4658      	mov	r0, fp
 80103ae:	f000 fba7 	bl	8010b00 <_Bfree>
 80103b2:	e7d0      	b.n	8010356 <_dtoa_r+0x65e>
 80103b4:	9704      	str	r7, [sp, #16]
 80103b6:	4633      	mov	r3, r6
 80103b8:	461e      	mov	r6, r3
 80103ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80103be:	2a39      	cmp	r2, #57	@ 0x39
 80103c0:	d107      	bne.n	80103d2 <_dtoa_r+0x6da>
 80103c2:	459a      	cmp	sl, r3
 80103c4:	d1f8      	bne.n	80103b8 <_dtoa_r+0x6c0>
 80103c6:	9a04      	ldr	r2, [sp, #16]
 80103c8:	3201      	adds	r2, #1
 80103ca:	9204      	str	r2, [sp, #16]
 80103cc:	2230      	movs	r2, #48	@ 0x30
 80103ce:	f88a 2000 	strb.w	r2, [sl]
 80103d2:	781a      	ldrb	r2, [r3, #0]
 80103d4:	3201      	adds	r2, #1
 80103d6:	701a      	strb	r2, [r3, #0]
 80103d8:	e7bd      	b.n	8010356 <_dtoa_r+0x65e>
 80103da:	4b7b      	ldr	r3, [pc, #492]	@ (80105c8 <_dtoa_r+0x8d0>)
 80103dc:	2200      	movs	r2, #0
 80103de:	f7f0 f91b 	bl	8000618 <__aeabi_dmul>
 80103e2:	2200      	movs	r2, #0
 80103e4:	2300      	movs	r3, #0
 80103e6:	4604      	mov	r4, r0
 80103e8:	460d      	mov	r5, r1
 80103ea:	f7f0 fb7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f43f aebb 	beq.w	801016a <_dtoa_r+0x472>
 80103f4:	e6f0      	b.n	80101d8 <_dtoa_r+0x4e0>
 80103f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103f8:	2a00      	cmp	r2, #0
 80103fa:	f000 80db 	beq.w	80105b4 <_dtoa_r+0x8bc>
 80103fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010400:	2a01      	cmp	r2, #1
 8010402:	f300 80bf 	bgt.w	8010584 <_dtoa_r+0x88c>
 8010406:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010408:	2a00      	cmp	r2, #0
 801040a:	f000 80b7 	beq.w	801057c <_dtoa_r+0x884>
 801040e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010412:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010414:	4646      	mov	r6, r8
 8010416:	9a08      	ldr	r2, [sp, #32]
 8010418:	2101      	movs	r1, #1
 801041a:	441a      	add	r2, r3
 801041c:	4658      	mov	r0, fp
 801041e:	4498      	add	r8, r3
 8010420:	9208      	str	r2, [sp, #32]
 8010422:	f000 fc21 	bl	8010c68 <__i2b>
 8010426:	4605      	mov	r5, r0
 8010428:	b15e      	cbz	r6, 8010442 <_dtoa_r+0x74a>
 801042a:	9b08      	ldr	r3, [sp, #32]
 801042c:	2b00      	cmp	r3, #0
 801042e:	dd08      	ble.n	8010442 <_dtoa_r+0x74a>
 8010430:	42b3      	cmp	r3, r6
 8010432:	9a08      	ldr	r2, [sp, #32]
 8010434:	bfa8      	it	ge
 8010436:	4633      	movge	r3, r6
 8010438:	eba8 0803 	sub.w	r8, r8, r3
 801043c:	1af6      	subs	r6, r6, r3
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	9308      	str	r3, [sp, #32]
 8010442:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010444:	b1f3      	cbz	r3, 8010484 <_dtoa_r+0x78c>
 8010446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010448:	2b00      	cmp	r3, #0
 801044a:	f000 80b7 	beq.w	80105bc <_dtoa_r+0x8c4>
 801044e:	b18c      	cbz	r4, 8010474 <_dtoa_r+0x77c>
 8010450:	4629      	mov	r1, r5
 8010452:	4622      	mov	r2, r4
 8010454:	4658      	mov	r0, fp
 8010456:	f000 fcc7 	bl	8010de8 <__pow5mult>
 801045a:	464a      	mov	r2, r9
 801045c:	4601      	mov	r1, r0
 801045e:	4605      	mov	r5, r0
 8010460:	4658      	mov	r0, fp
 8010462:	f000 fc17 	bl	8010c94 <__multiply>
 8010466:	4649      	mov	r1, r9
 8010468:	9004      	str	r0, [sp, #16]
 801046a:	4658      	mov	r0, fp
 801046c:	f000 fb48 	bl	8010b00 <_Bfree>
 8010470:	9b04      	ldr	r3, [sp, #16]
 8010472:	4699      	mov	r9, r3
 8010474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010476:	1b1a      	subs	r2, r3, r4
 8010478:	d004      	beq.n	8010484 <_dtoa_r+0x78c>
 801047a:	4649      	mov	r1, r9
 801047c:	4658      	mov	r0, fp
 801047e:	f000 fcb3 	bl	8010de8 <__pow5mult>
 8010482:	4681      	mov	r9, r0
 8010484:	2101      	movs	r1, #1
 8010486:	4658      	mov	r0, fp
 8010488:	f000 fbee 	bl	8010c68 <__i2b>
 801048c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801048e:	4604      	mov	r4, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	f000 81cf 	beq.w	8010834 <_dtoa_r+0xb3c>
 8010496:	461a      	mov	r2, r3
 8010498:	4601      	mov	r1, r0
 801049a:	4658      	mov	r0, fp
 801049c:	f000 fca4 	bl	8010de8 <__pow5mult>
 80104a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104a2:	2b01      	cmp	r3, #1
 80104a4:	4604      	mov	r4, r0
 80104a6:	f300 8095 	bgt.w	80105d4 <_dtoa_r+0x8dc>
 80104aa:	9b02      	ldr	r3, [sp, #8]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	f040 8087 	bne.w	80105c0 <_dtoa_r+0x8c8>
 80104b2:	9b03      	ldr	r3, [sp, #12]
 80104b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f040 8089 	bne.w	80105d0 <_dtoa_r+0x8d8>
 80104be:	9b03      	ldr	r3, [sp, #12]
 80104c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80104c4:	0d1b      	lsrs	r3, r3, #20
 80104c6:	051b      	lsls	r3, r3, #20
 80104c8:	b12b      	cbz	r3, 80104d6 <_dtoa_r+0x7de>
 80104ca:	9b08      	ldr	r3, [sp, #32]
 80104cc:	3301      	adds	r3, #1
 80104ce:	9308      	str	r3, [sp, #32]
 80104d0:	f108 0801 	add.w	r8, r8, #1
 80104d4:	2301      	movs	r3, #1
 80104d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80104d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f000 81b0 	beq.w	8010840 <_dtoa_r+0xb48>
 80104e0:	6923      	ldr	r3, [r4, #16]
 80104e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80104e6:	6918      	ldr	r0, [r3, #16]
 80104e8:	f000 fb72 	bl	8010bd0 <__hi0bits>
 80104ec:	f1c0 0020 	rsb	r0, r0, #32
 80104f0:	9b08      	ldr	r3, [sp, #32]
 80104f2:	4418      	add	r0, r3
 80104f4:	f010 001f 	ands.w	r0, r0, #31
 80104f8:	d077      	beq.n	80105ea <_dtoa_r+0x8f2>
 80104fa:	f1c0 0320 	rsb	r3, r0, #32
 80104fe:	2b04      	cmp	r3, #4
 8010500:	dd6b      	ble.n	80105da <_dtoa_r+0x8e2>
 8010502:	9b08      	ldr	r3, [sp, #32]
 8010504:	f1c0 001c 	rsb	r0, r0, #28
 8010508:	4403      	add	r3, r0
 801050a:	4480      	add	r8, r0
 801050c:	4406      	add	r6, r0
 801050e:	9308      	str	r3, [sp, #32]
 8010510:	f1b8 0f00 	cmp.w	r8, #0
 8010514:	dd05      	ble.n	8010522 <_dtoa_r+0x82a>
 8010516:	4649      	mov	r1, r9
 8010518:	4642      	mov	r2, r8
 801051a:	4658      	mov	r0, fp
 801051c:	f000 fcbe 	bl	8010e9c <__lshift>
 8010520:	4681      	mov	r9, r0
 8010522:	9b08      	ldr	r3, [sp, #32]
 8010524:	2b00      	cmp	r3, #0
 8010526:	dd05      	ble.n	8010534 <_dtoa_r+0x83c>
 8010528:	4621      	mov	r1, r4
 801052a:	461a      	mov	r2, r3
 801052c:	4658      	mov	r0, fp
 801052e:	f000 fcb5 	bl	8010e9c <__lshift>
 8010532:	4604      	mov	r4, r0
 8010534:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010536:	2b00      	cmp	r3, #0
 8010538:	d059      	beq.n	80105ee <_dtoa_r+0x8f6>
 801053a:	4621      	mov	r1, r4
 801053c:	4648      	mov	r0, r9
 801053e:	f000 fd19 	bl	8010f74 <__mcmp>
 8010542:	2800      	cmp	r0, #0
 8010544:	da53      	bge.n	80105ee <_dtoa_r+0x8f6>
 8010546:	1e7b      	subs	r3, r7, #1
 8010548:	9304      	str	r3, [sp, #16]
 801054a:	4649      	mov	r1, r9
 801054c:	2300      	movs	r3, #0
 801054e:	220a      	movs	r2, #10
 8010550:	4658      	mov	r0, fp
 8010552:	f000 faf7 	bl	8010b44 <__multadd>
 8010556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010558:	4681      	mov	r9, r0
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 8172 	beq.w	8010844 <_dtoa_r+0xb4c>
 8010560:	2300      	movs	r3, #0
 8010562:	4629      	mov	r1, r5
 8010564:	220a      	movs	r2, #10
 8010566:	4658      	mov	r0, fp
 8010568:	f000 faec 	bl	8010b44 <__multadd>
 801056c:	9b00      	ldr	r3, [sp, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	4605      	mov	r5, r0
 8010572:	dc67      	bgt.n	8010644 <_dtoa_r+0x94c>
 8010574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010576:	2b02      	cmp	r3, #2
 8010578:	dc41      	bgt.n	80105fe <_dtoa_r+0x906>
 801057a:	e063      	b.n	8010644 <_dtoa_r+0x94c>
 801057c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801057e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010582:	e746      	b.n	8010412 <_dtoa_r+0x71a>
 8010584:	9b07      	ldr	r3, [sp, #28]
 8010586:	1e5c      	subs	r4, r3, #1
 8010588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801058a:	42a3      	cmp	r3, r4
 801058c:	bfbf      	itttt	lt
 801058e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010590:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010592:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010594:	1ae3      	sublt	r3, r4, r3
 8010596:	bfb4      	ite	lt
 8010598:	18d2      	addlt	r2, r2, r3
 801059a:	1b1c      	subge	r4, r3, r4
 801059c:	9b07      	ldr	r3, [sp, #28]
 801059e:	bfbc      	itt	lt
 80105a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80105a2:	2400      	movlt	r4, #0
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	bfb5      	itete	lt
 80105a8:	eba8 0603 	sublt.w	r6, r8, r3
 80105ac:	9b07      	ldrge	r3, [sp, #28]
 80105ae:	2300      	movlt	r3, #0
 80105b0:	4646      	movge	r6, r8
 80105b2:	e730      	b.n	8010416 <_dtoa_r+0x71e>
 80105b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80105b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80105b8:	4646      	mov	r6, r8
 80105ba:	e735      	b.n	8010428 <_dtoa_r+0x730>
 80105bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80105be:	e75c      	b.n	801047a <_dtoa_r+0x782>
 80105c0:	2300      	movs	r3, #0
 80105c2:	e788      	b.n	80104d6 <_dtoa_r+0x7de>
 80105c4:	3fe00000 	.word	0x3fe00000
 80105c8:	40240000 	.word	0x40240000
 80105cc:	40140000 	.word	0x40140000
 80105d0:	9b02      	ldr	r3, [sp, #8]
 80105d2:	e780      	b.n	80104d6 <_dtoa_r+0x7de>
 80105d4:	2300      	movs	r3, #0
 80105d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80105d8:	e782      	b.n	80104e0 <_dtoa_r+0x7e8>
 80105da:	d099      	beq.n	8010510 <_dtoa_r+0x818>
 80105dc:	9a08      	ldr	r2, [sp, #32]
 80105de:	331c      	adds	r3, #28
 80105e0:	441a      	add	r2, r3
 80105e2:	4498      	add	r8, r3
 80105e4:	441e      	add	r6, r3
 80105e6:	9208      	str	r2, [sp, #32]
 80105e8:	e792      	b.n	8010510 <_dtoa_r+0x818>
 80105ea:	4603      	mov	r3, r0
 80105ec:	e7f6      	b.n	80105dc <_dtoa_r+0x8e4>
 80105ee:	9b07      	ldr	r3, [sp, #28]
 80105f0:	9704      	str	r7, [sp, #16]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	dc20      	bgt.n	8010638 <_dtoa_r+0x940>
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105fa:	2b02      	cmp	r3, #2
 80105fc:	dd1e      	ble.n	801063c <_dtoa_r+0x944>
 80105fe:	9b00      	ldr	r3, [sp, #0]
 8010600:	2b00      	cmp	r3, #0
 8010602:	f47f aec0 	bne.w	8010386 <_dtoa_r+0x68e>
 8010606:	4621      	mov	r1, r4
 8010608:	2205      	movs	r2, #5
 801060a:	4658      	mov	r0, fp
 801060c:	f000 fa9a 	bl	8010b44 <__multadd>
 8010610:	4601      	mov	r1, r0
 8010612:	4604      	mov	r4, r0
 8010614:	4648      	mov	r0, r9
 8010616:	f000 fcad 	bl	8010f74 <__mcmp>
 801061a:	2800      	cmp	r0, #0
 801061c:	f77f aeb3 	ble.w	8010386 <_dtoa_r+0x68e>
 8010620:	4656      	mov	r6, sl
 8010622:	2331      	movs	r3, #49	@ 0x31
 8010624:	f806 3b01 	strb.w	r3, [r6], #1
 8010628:	9b04      	ldr	r3, [sp, #16]
 801062a:	3301      	adds	r3, #1
 801062c:	9304      	str	r3, [sp, #16]
 801062e:	e6ae      	b.n	801038e <_dtoa_r+0x696>
 8010630:	9c07      	ldr	r4, [sp, #28]
 8010632:	9704      	str	r7, [sp, #16]
 8010634:	4625      	mov	r5, r4
 8010636:	e7f3      	b.n	8010620 <_dtoa_r+0x928>
 8010638:	9b07      	ldr	r3, [sp, #28]
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801063e:	2b00      	cmp	r3, #0
 8010640:	f000 8104 	beq.w	801084c <_dtoa_r+0xb54>
 8010644:	2e00      	cmp	r6, #0
 8010646:	dd05      	ble.n	8010654 <_dtoa_r+0x95c>
 8010648:	4629      	mov	r1, r5
 801064a:	4632      	mov	r2, r6
 801064c:	4658      	mov	r0, fp
 801064e:	f000 fc25 	bl	8010e9c <__lshift>
 8010652:	4605      	mov	r5, r0
 8010654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010656:	2b00      	cmp	r3, #0
 8010658:	d05a      	beq.n	8010710 <_dtoa_r+0xa18>
 801065a:	6869      	ldr	r1, [r5, #4]
 801065c:	4658      	mov	r0, fp
 801065e:	f000 fa0f 	bl	8010a80 <_Balloc>
 8010662:	4606      	mov	r6, r0
 8010664:	b928      	cbnz	r0, 8010672 <_dtoa_r+0x97a>
 8010666:	4b84      	ldr	r3, [pc, #528]	@ (8010878 <_dtoa_r+0xb80>)
 8010668:	4602      	mov	r2, r0
 801066a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801066e:	f7ff bb5a 	b.w	800fd26 <_dtoa_r+0x2e>
 8010672:	692a      	ldr	r2, [r5, #16]
 8010674:	3202      	adds	r2, #2
 8010676:	0092      	lsls	r2, r2, #2
 8010678:	f105 010c 	add.w	r1, r5, #12
 801067c:	300c      	adds	r0, #12
 801067e:	f7ff faa4 	bl	800fbca <memcpy>
 8010682:	2201      	movs	r2, #1
 8010684:	4631      	mov	r1, r6
 8010686:	4658      	mov	r0, fp
 8010688:	f000 fc08 	bl	8010e9c <__lshift>
 801068c:	f10a 0301 	add.w	r3, sl, #1
 8010690:	9307      	str	r3, [sp, #28]
 8010692:	9b00      	ldr	r3, [sp, #0]
 8010694:	4453      	add	r3, sl
 8010696:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010698:	9b02      	ldr	r3, [sp, #8]
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	462f      	mov	r7, r5
 80106a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80106a2:	4605      	mov	r5, r0
 80106a4:	9b07      	ldr	r3, [sp, #28]
 80106a6:	4621      	mov	r1, r4
 80106a8:	3b01      	subs	r3, #1
 80106aa:	4648      	mov	r0, r9
 80106ac:	9300      	str	r3, [sp, #0]
 80106ae:	f7ff fa9a 	bl	800fbe6 <quorem>
 80106b2:	4639      	mov	r1, r7
 80106b4:	9002      	str	r0, [sp, #8]
 80106b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80106ba:	4648      	mov	r0, r9
 80106bc:	f000 fc5a 	bl	8010f74 <__mcmp>
 80106c0:	462a      	mov	r2, r5
 80106c2:	9008      	str	r0, [sp, #32]
 80106c4:	4621      	mov	r1, r4
 80106c6:	4658      	mov	r0, fp
 80106c8:	f000 fc70 	bl	8010fac <__mdiff>
 80106cc:	68c2      	ldr	r2, [r0, #12]
 80106ce:	4606      	mov	r6, r0
 80106d0:	bb02      	cbnz	r2, 8010714 <_dtoa_r+0xa1c>
 80106d2:	4601      	mov	r1, r0
 80106d4:	4648      	mov	r0, r9
 80106d6:	f000 fc4d 	bl	8010f74 <__mcmp>
 80106da:	4602      	mov	r2, r0
 80106dc:	4631      	mov	r1, r6
 80106de:	4658      	mov	r0, fp
 80106e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80106e2:	f000 fa0d 	bl	8010b00 <_Bfree>
 80106e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106ea:	9e07      	ldr	r6, [sp, #28]
 80106ec:	ea43 0102 	orr.w	r1, r3, r2
 80106f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80106f2:	4319      	orrs	r1, r3
 80106f4:	d110      	bne.n	8010718 <_dtoa_r+0xa20>
 80106f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80106fa:	d029      	beq.n	8010750 <_dtoa_r+0xa58>
 80106fc:	9b08      	ldr	r3, [sp, #32]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	dd02      	ble.n	8010708 <_dtoa_r+0xa10>
 8010702:	9b02      	ldr	r3, [sp, #8]
 8010704:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010708:	9b00      	ldr	r3, [sp, #0]
 801070a:	f883 8000 	strb.w	r8, [r3]
 801070e:	e63f      	b.n	8010390 <_dtoa_r+0x698>
 8010710:	4628      	mov	r0, r5
 8010712:	e7bb      	b.n	801068c <_dtoa_r+0x994>
 8010714:	2201      	movs	r2, #1
 8010716:	e7e1      	b.n	80106dc <_dtoa_r+0x9e4>
 8010718:	9b08      	ldr	r3, [sp, #32]
 801071a:	2b00      	cmp	r3, #0
 801071c:	db04      	blt.n	8010728 <_dtoa_r+0xa30>
 801071e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010720:	430b      	orrs	r3, r1
 8010722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010724:	430b      	orrs	r3, r1
 8010726:	d120      	bne.n	801076a <_dtoa_r+0xa72>
 8010728:	2a00      	cmp	r2, #0
 801072a:	dded      	ble.n	8010708 <_dtoa_r+0xa10>
 801072c:	4649      	mov	r1, r9
 801072e:	2201      	movs	r2, #1
 8010730:	4658      	mov	r0, fp
 8010732:	f000 fbb3 	bl	8010e9c <__lshift>
 8010736:	4621      	mov	r1, r4
 8010738:	4681      	mov	r9, r0
 801073a:	f000 fc1b 	bl	8010f74 <__mcmp>
 801073e:	2800      	cmp	r0, #0
 8010740:	dc03      	bgt.n	801074a <_dtoa_r+0xa52>
 8010742:	d1e1      	bne.n	8010708 <_dtoa_r+0xa10>
 8010744:	f018 0f01 	tst.w	r8, #1
 8010748:	d0de      	beq.n	8010708 <_dtoa_r+0xa10>
 801074a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801074e:	d1d8      	bne.n	8010702 <_dtoa_r+0xa0a>
 8010750:	9a00      	ldr	r2, [sp, #0]
 8010752:	2339      	movs	r3, #57	@ 0x39
 8010754:	7013      	strb	r3, [r2, #0]
 8010756:	4633      	mov	r3, r6
 8010758:	461e      	mov	r6, r3
 801075a:	3b01      	subs	r3, #1
 801075c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010760:	2a39      	cmp	r2, #57	@ 0x39
 8010762:	d052      	beq.n	801080a <_dtoa_r+0xb12>
 8010764:	3201      	adds	r2, #1
 8010766:	701a      	strb	r2, [r3, #0]
 8010768:	e612      	b.n	8010390 <_dtoa_r+0x698>
 801076a:	2a00      	cmp	r2, #0
 801076c:	dd07      	ble.n	801077e <_dtoa_r+0xa86>
 801076e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010772:	d0ed      	beq.n	8010750 <_dtoa_r+0xa58>
 8010774:	9a00      	ldr	r2, [sp, #0]
 8010776:	f108 0301 	add.w	r3, r8, #1
 801077a:	7013      	strb	r3, [r2, #0]
 801077c:	e608      	b.n	8010390 <_dtoa_r+0x698>
 801077e:	9b07      	ldr	r3, [sp, #28]
 8010780:	9a07      	ldr	r2, [sp, #28]
 8010782:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010788:	4293      	cmp	r3, r2
 801078a:	d028      	beq.n	80107de <_dtoa_r+0xae6>
 801078c:	4649      	mov	r1, r9
 801078e:	2300      	movs	r3, #0
 8010790:	220a      	movs	r2, #10
 8010792:	4658      	mov	r0, fp
 8010794:	f000 f9d6 	bl	8010b44 <__multadd>
 8010798:	42af      	cmp	r7, r5
 801079a:	4681      	mov	r9, r0
 801079c:	f04f 0300 	mov.w	r3, #0
 80107a0:	f04f 020a 	mov.w	r2, #10
 80107a4:	4639      	mov	r1, r7
 80107a6:	4658      	mov	r0, fp
 80107a8:	d107      	bne.n	80107ba <_dtoa_r+0xac2>
 80107aa:	f000 f9cb 	bl	8010b44 <__multadd>
 80107ae:	4607      	mov	r7, r0
 80107b0:	4605      	mov	r5, r0
 80107b2:	9b07      	ldr	r3, [sp, #28]
 80107b4:	3301      	adds	r3, #1
 80107b6:	9307      	str	r3, [sp, #28]
 80107b8:	e774      	b.n	80106a4 <_dtoa_r+0x9ac>
 80107ba:	f000 f9c3 	bl	8010b44 <__multadd>
 80107be:	4629      	mov	r1, r5
 80107c0:	4607      	mov	r7, r0
 80107c2:	2300      	movs	r3, #0
 80107c4:	220a      	movs	r2, #10
 80107c6:	4658      	mov	r0, fp
 80107c8:	f000 f9bc 	bl	8010b44 <__multadd>
 80107cc:	4605      	mov	r5, r0
 80107ce:	e7f0      	b.n	80107b2 <_dtoa_r+0xaba>
 80107d0:	9b00      	ldr	r3, [sp, #0]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	bfcc      	ite	gt
 80107d6:	461e      	movgt	r6, r3
 80107d8:	2601      	movle	r6, #1
 80107da:	4456      	add	r6, sl
 80107dc:	2700      	movs	r7, #0
 80107de:	4649      	mov	r1, r9
 80107e0:	2201      	movs	r2, #1
 80107e2:	4658      	mov	r0, fp
 80107e4:	f000 fb5a 	bl	8010e9c <__lshift>
 80107e8:	4621      	mov	r1, r4
 80107ea:	4681      	mov	r9, r0
 80107ec:	f000 fbc2 	bl	8010f74 <__mcmp>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	dcb0      	bgt.n	8010756 <_dtoa_r+0xa5e>
 80107f4:	d102      	bne.n	80107fc <_dtoa_r+0xb04>
 80107f6:	f018 0f01 	tst.w	r8, #1
 80107fa:	d1ac      	bne.n	8010756 <_dtoa_r+0xa5e>
 80107fc:	4633      	mov	r3, r6
 80107fe:	461e      	mov	r6, r3
 8010800:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010804:	2a30      	cmp	r2, #48	@ 0x30
 8010806:	d0fa      	beq.n	80107fe <_dtoa_r+0xb06>
 8010808:	e5c2      	b.n	8010390 <_dtoa_r+0x698>
 801080a:	459a      	cmp	sl, r3
 801080c:	d1a4      	bne.n	8010758 <_dtoa_r+0xa60>
 801080e:	9b04      	ldr	r3, [sp, #16]
 8010810:	3301      	adds	r3, #1
 8010812:	9304      	str	r3, [sp, #16]
 8010814:	2331      	movs	r3, #49	@ 0x31
 8010816:	f88a 3000 	strb.w	r3, [sl]
 801081a:	e5b9      	b.n	8010390 <_dtoa_r+0x698>
 801081c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801081e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801087c <_dtoa_r+0xb84>
 8010822:	b11b      	cbz	r3, 801082c <_dtoa_r+0xb34>
 8010824:	f10a 0308 	add.w	r3, sl, #8
 8010828:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801082a:	6013      	str	r3, [r2, #0]
 801082c:	4650      	mov	r0, sl
 801082e:	b019      	add	sp, #100	@ 0x64
 8010830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010836:	2b01      	cmp	r3, #1
 8010838:	f77f ae37 	ble.w	80104aa <_dtoa_r+0x7b2>
 801083c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801083e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010840:	2001      	movs	r0, #1
 8010842:	e655      	b.n	80104f0 <_dtoa_r+0x7f8>
 8010844:	9b00      	ldr	r3, [sp, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	f77f aed6 	ble.w	80105f8 <_dtoa_r+0x900>
 801084c:	4656      	mov	r6, sl
 801084e:	4621      	mov	r1, r4
 8010850:	4648      	mov	r0, r9
 8010852:	f7ff f9c8 	bl	800fbe6 <quorem>
 8010856:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801085a:	f806 8b01 	strb.w	r8, [r6], #1
 801085e:	9b00      	ldr	r3, [sp, #0]
 8010860:	eba6 020a 	sub.w	r2, r6, sl
 8010864:	4293      	cmp	r3, r2
 8010866:	ddb3      	ble.n	80107d0 <_dtoa_r+0xad8>
 8010868:	4649      	mov	r1, r9
 801086a:	2300      	movs	r3, #0
 801086c:	220a      	movs	r2, #10
 801086e:	4658      	mov	r0, fp
 8010870:	f000 f968 	bl	8010b44 <__multadd>
 8010874:	4681      	mov	r9, r0
 8010876:	e7ea      	b.n	801084e <_dtoa_r+0xb56>
 8010878:	08013940 	.word	0x08013940
 801087c:	080138c4 	.word	0x080138c4

08010880 <_free_r>:
 8010880:	b538      	push	{r3, r4, r5, lr}
 8010882:	4605      	mov	r5, r0
 8010884:	2900      	cmp	r1, #0
 8010886:	d041      	beq.n	801090c <_free_r+0x8c>
 8010888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801088c:	1f0c      	subs	r4, r1, #4
 801088e:	2b00      	cmp	r3, #0
 8010890:	bfb8      	it	lt
 8010892:	18e4      	addlt	r4, r4, r3
 8010894:	f000 f8e8 	bl	8010a68 <__malloc_lock>
 8010898:	4a1d      	ldr	r2, [pc, #116]	@ (8010910 <_free_r+0x90>)
 801089a:	6813      	ldr	r3, [r2, #0]
 801089c:	b933      	cbnz	r3, 80108ac <_free_r+0x2c>
 801089e:	6063      	str	r3, [r4, #4]
 80108a0:	6014      	str	r4, [r2, #0]
 80108a2:	4628      	mov	r0, r5
 80108a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108a8:	f000 b8e4 	b.w	8010a74 <__malloc_unlock>
 80108ac:	42a3      	cmp	r3, r4
 80108ae:	d908      	bls.n	80108c2 <_free_r+0x42>
 80108b0:	6820      	ldr	r0, [r4, #0]
 80108b2:	1821      	adds	r1, r4, r0
 80108b4:	428b      	cmp	r3, r1
 80108b6:	bf01      	itttt	eq
 80108b8:	6819      	ldreq	r1, [r3, #0]
 80108ba:	685b      	ldreq	r3, [r3, #4]
 80108bc:	1809      	addeq	r1, r1, r0
 80108be:	6021      	streq	r1, [r4, #0]
 80108c0:	e7ed      	b.n	801089e <_free_r+0x1e>
 80108c2:	461a      	mov	r2, r3
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	b10b      	cbz	r3, 80108cc <_free_r+0x4c>
 80108c8:	42a3      	cmp	r3, r4
 80108ca:	d9fa      	bls.n	80108c2 <_free_r+0x42>
 80108cc:	6811      	ldr	r1, [r2, #0]
 80108ce:	1850      	adds	r0, r2, r1
 80108d0:	42a0      	cmp	r0, r4
 80108d2:	d10b      	bne.n	80108ec <_free_r+0x6c>
 80108d4:	6820      	ldr	r0, [r4, #0]
 80108d6:	4401      	add	r1, r0
 80108d8:	1850      	adds	r0, r2, r1
 80108da:	4283      	cmp	r3, r0
 80108dc:	6011      	str	r1, [r2, #0]
 80108de:	d1e0      	bne.n	80108a2 <_free_r+0x22>
 80108e0:	6818      	ldr	r0, [r3, #0]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	6053      	str	r3, [r2, #4]
 80108e6:	4408      	add	r0, r1
 80108e8:	6010      	str	r0, [r2, #0]
 80108ea:	e7da      	b.n	80108a2 <_free_r+0x22>
 80108ec:	d902      	bls.n	80108f4 <_free_r+0x74>
 80108ee:	230c      	movs	r3, #12
 80108f0:	602b      	str	r3, [r5, #0]
 80108f2:	e7d6      	b.n	80108a2 <_free_r+0x22>
 80108f4:	6820      	ldr	r0, [r4, #0]
 80108f6:	1821      	adds	r1, r4, r0
 80108f8:	428b      	cmp	r3, r1
 80108fa:	bf04      	itt	eq
 80108fc:	6819      	ldreq	r1, [r3, #0]
 80108fe:	685b      	ldreq	r3, [r3, #4]
 8010900:	6063      	str	r3, [r4, #4]
 8010902:	bf04      	itt	eq
 8010904:	1809      	addeq	r1, r1, r0
 8010906:	6021      	streq	r1, [r4, #0]
 8010908:	6054      	str	r4, [r2, #4]
 801090a:	e7ca      	b.n	80108a2 <_free_r+0x22>
 801090c:	bd38      	pop	{r3, r4, r5, pc}
 801090e:	bf00      	nop
 8010910:	20006cac 	.word	0x20006cac

08010914 <malloc>:
 8010914:	4b02      	ldr	r3, [pc, #8]	@ (8010920 <malloc+0xc>)
 8010916:	4601      	mov	r1, r0
 8010918:	6818      	ldr	r0, [r3, #0]
 801091a:	f000 b825 	b.w	8010968 <_malloc_r>
 801091e:	bf00      	nop
 8010920:	20000198 	.word	0x20000198

08010924 <sbrk_aligned>:
 8010924:	b570      	push	{r4, r5, r6, lr}
 8010926:	4e0f      	ldr	r6, [pc, #60]	@ (8010964 <sbrk_aligned+0x40>)
 8010928:	460c      	mov	r4, r1
 801092a:	6831      	ldr	r1, [r6, #0]
 801092c:	4605      	mov	r5, r0
 801092e:	b911      	cbnz	r1, 8010936 <sbrk_aligned+0x12>
 8010930:	f000 fe46 	bl	80115c0 <_sbrk_r>
 8010934:	6030      	str	r0, [r6, #0]
 8010936:	4621      	mov	r1, r4
 8010938:	4628      	mov	r0, r5
 801093a:	f000 fe41 	bl	80115c0 <_sbrk_r>
 801093e:	1c43      	adds	r3, r0, #1
 8010940:	d103      	bne.n	801094a <sbrk_aligned+0x26>
 8010942:	f04f 34ff 	mov.w	r4, #4294967295
 8010946:	4620      	mov	r0, r4
 8010948:	bd70      	pop	{r4, r5, r6, pc}
 801094a:	1cc4      	adds	r4, r0, #3
 801094c:	f024 0403 	bic.w	r4, r4, #3
 8010950:	42a0      	cmp	r0, r4
 8010952:	d0f8      	beq.n	8010946 <sbrk_aligned+0x22>
 8010954:	1a21      	subs	r1, r4, r0
 8010956:	4628      	mov	r0, r5
 8010958:	f000 fe32 	bl	80115c0 <_sbrk_r>
 801095c:	3001      	adds	r0, #1
 801095e:	d1f2      	bne.n	8010946 <sbrk_aligned+0x22>
 8010960:	e7ef      	b.n	8010942 <sbrk_aligned+0x1e>
 8010962:	bf00      	nop
 8010964:	20006ca8 	.word	0x20006ca8

08010968 <_malloc_r>:
 8010968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801096c:	1ccd      	adds	r5, r1, #3
 801096e:	f025 0503 	bic.w	r5, r5, #3
 8010972:	3508      	adds	r5, #8
 8010974:	2d0c      	cmp	r5, #12
 8010976:	bf38      	it	cc
 8010978:	250c      	movcc	r5, #12
 801097a:	2d00      	cmp	r5, #0
 801097c:	4606      	mov	r6, r0
 801097e:	db01      	blt.n	8010984 <_malloc_r+0x1c>
 8010980:	42a9      	cmp	r1, r5
 8010982:	d904      	bls.n	801098e <_malloc_r+0x26>
 8010984:	230c      	movs	r3, #12
 8010986:	6033      	str	r3, [r6, #0]
 8010988:	2000      	movs	r0, #0
 801098a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801098e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a64 <_malloc_r+0xfc>
 8010992:	f000 f869 	bl	8010a68 <__malloc_lock>
 8010996:	f8d8 3000 	ldr.w	r3, [r8]
 801099a:	461c      	mov	r4, r3
 801099c:	bb44      	cbnz	r4, 80109f0 <_malloc_r+0x88>
 801099e:	4629      	mov	r1, r5
 80109a0:	4630      	mov	r0, r6
 80109a2:	f7ff ffbf 	bl	8010924 <sbrk_aligned>
 80109a6:	1c43      	adds	r3, r0, #1
 80109a8:	4604      	mov	r4, r0
 80109aa:	d158      	bne.n	8010a5e <_malloc_r+0xf6>
 80109ac:	f8d8 4000 	ldr.w	r4, [r8]
 80109b0:	4627      	mov	r7, r4
 80109b2:	2f00      	cmp	r7, #0
 80109b4:	d143      	bne.n	8010a3e <_malloc_r+0xd6>
 80109b6:	2c00      	cmp	r4, #0
 80109b8:	d04b      	beq.n	8010a52 <_malloc_r+0xea>
 80109ba:	6823      	ldr	r3, [r4, #0]
 80109bc:	4639      	mov	r1, r7
 80109be:	4630      	mov	r0, r6
 80109c0:	eb04 0903 	add.w	r9, r4, r3
 80109c4:	f000 fdfc 	bl	80115c0 <_sbrk_r>
 80109c8:	4581      	cmp	r9, r0
 80109ca:	d142      	bne.n	8010a52 <_malloc_r+0xea>
 80109cc:	6821      	ldr	r1, [r4, #0]
 80109ce:	1a6d      	subs	r5, r5, r1
 80109d0:	4629      	mov	r1, r5
 80109d2:	4630      	mov	r0, r6
 80109d4:	f7ff ffa6 	bl	8010924 <sbrk_aligned>
 80109d8:	3001      	adds	r0, #1
 80109da:	d03a      	beq.n	8010a52 <_malloc_r+0xea>
 80109dc:	6823      	ldr	r3, [r4, #0]
 80109de:	442b      	add	r3, r5
 80109e0:	6023      	str	r3, [r4, #0]
 80109e2:	f8d8 3000 	ldr.w	r3, [r8]
 80109e6:	685a      	ldr	r2, [r3, #4]
 80109e8:	bb62      	cbnz	r2, 8010a44 <_malloc_r+0xdc>
 80109ea:	f8c8 7000 	str.w	r7, [r8]
 80109ee:	e00f      	b.n	8010a10 <_malloc_r+0xa8>
 80109f0:	6822      	ldr	r2, [r4, #0]
 80109f2:	1b52      	subs	r2, r2, r5
 80109f4:	d420      	bmi.n	8010a38 <_malloc_r+0xd0>
 80109f6:	2a0b      	cmp	r2, #11
 80109f8:	d917      	bls.n	8010a2a <_malloc_r+0xc2>
 80109fa:	1961      	adds	r1, r4, r5
 80109fc:	42a3      	cmp	r3, r4
 80109fe:	6025      	str	r5, [r4, #0]
 8010a00:	bf18      	it	ne
 8010a02:	6059      	strne	r1, [r3, #4]
 8010a04:	6863      	ldr	r3, [r4, #4]
 8010a06:	bf08      	it	eq
 8010a08:	f8c8 1000 	streq.w	r1, [r8]
 8010a0c:	5162      	str	r2, [r4, r5]
 8010a0e:	604b      	str	r3, [r1, #4]
 8010a10:	4630      	mov	r0, r6
 8010a12:	f000 f82f 	bl	8010a74 <__malloc_unlock>
 8010a16:	f104 000b 	add.w	r0, r4, #11
 8010a1a:	1d23      	adds	r3, r4, #4
 8010a1c:	f020 0007 	bic.w	r0, r0, #7
 8010a20:	1ac2      	subs	r2, r0, r3
 8010a22:	bf1c      	itt	ne
 8010a24:	1a1b      	subne	r3, r3, r0
 8010a26:	50a3      	strne	r3, [r4, r2]
 8010a28:	e7af      	b.n	801098a <_malloc_r+0x22>
 8010a2a:	6862      	ldr	r2, [r4, #4]
 8010a2c:	42a3      	cmp	r3, r4
 8010a2e:	bf0c      	ite	eq
 8010a30:	f8c8 2000 	streq.w	r2, [r8]
 8010a34:	605a      	strne	r2, [r3, #4]
 8010a36:	e7eb      	b.n	8010a10 <_malloc_r+0xa8>
 8010a38:	4623      	mov	r3, r4
 8010a3a:	6864      	ldr	r4, [r4, #4]
 8010a3c:	e7ae      	b.n	801099c <_malloc_r+0x34>
 8010a3e:	463c      	mov	r4, r7
 8010a40:	687f      	ldr	r7, [r7, #4]
 8010a42:	e7b6      	b.n	80109b2 <_malloc_r+0x4a>
 8010a44:	461a      	mov	r2, r3
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	42a3      	cmp	r3, r4
 8010a4a:	d1fb      	bne.n	8010a44 <_malloc_r+0xdc>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	6053      	str	r3, [r2, #4]
 8010a50:	e7de      	b.n	8010a10 <_malloc_r+0xa8>
 8010a52:	230c      	movs	r3, #12
 8010a54:	6033      	str	r3, [r6, #0]
 8010a56:	4630      	mov	r0, r6
 8010a58:	f000 f80c 	bl	8010a74 <__malloc_unlock>
 8010a5c:	e794      	b.n	8010988 <_malloc_r+0x20>
 8010a5e:	6005      	str	r5, [r0, #0]
 8010a60:	e7d6      	b.n	8010a10 <_malloc_r+0xa8>
 8010a62:	bf00      	nop
 8010a64:	20006cac 	.word	0x20006cac

08010a68 <__malloc_lock>:
 8010a68:	4801      	ldr	r0, [pc, #4]	@ (8010a70 <__malloc_lock+0x8>)
 8010a6a:	f7ff b8ac 	b.w	800fbc6 <__retarget_lock_acquire_recursive>
 8010a6e:	bf00      	nop
 8010a70:	20006ca4 	.word	0x20006ca4

08010a74 <__malloc_unlock>:
 8010a74:	4801      	ldr	r0, [pc, #4]	@ (8010a7c <__malloc_unlock+0x8>)
 8010a76:	f7ff b8a7 	b.w	800fbc8 <__retarget_lock_release_recursive>
 8010a7a:	bf00      	nop
 8010a7c:	20006ca4 	.word	0x20006ca4

08010a80 <_Balloc>:
 8010a80:	b570      	push	{r4, r5, r6, lr}
 8010a82:	69c6      	ldr	r6, [r0, #28]
 8010a84:	4604      	mov	r4, r0
 8010a86:	460d      	mov	r5, r1
 8010a88:	b976      	cbnz	r6, 8010aa8 <_Balloc+0x28>
 8010a8a:	2010      	movs	r0, #16
 8010a8c:	f7ff ff42 	bl	8010914 <malloc>
 8010a90:	4602      	mov	r2, r0
 8010a92:	61e0      	str	r0, [r4, #28]
 8010a94:	b920      	cbnz	r0, 8010aa0 <_Balloc+0x20>
 8010a96:	4b18      	ldr	r3, [pc, #96]	@ (8010af8 <_Balloc+0x78>)
 8010a98:	4818      	ldr	r0, [pc, #96]	@ (8010afc <_Balloc+0x7c>)
 8010a9a:	216b      	movs	r1, #107	@ 0x6b
 8010a9c:	f000 fda0 	bl	80115e0 <__assert_func>
 8010aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010aa4:	6006      	str	r6, [r0, #0]
 8010aa6:	60c6      	str	r6, [r0, #12]
 8010aa8:	69e6      	ldr	r6, [r4, #28]
 8010aaa:	68f3      	ldr	r3, [r6, #12]
 8010aac:	b183      	cbz	r3, 8010ad0 <_Balloc+0x50>
 8010aae:	69e3      	ldr	r3, [r4, #28]
 8010ab0:	68db      	ldr	r3, [r3, #12]
 8010ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010ab6:	b9b8      	cbnz	r0, 8010ae8 <_Balloc+0x68>
 8010ab8:	2101      	movs	r1, #1
 8010aba:	fa01 f605 	lsl.w	r6, r1, r5
 8010abe:	1d72      	adds	r2, r6, #5
 8010ac0:	0092      	lsls	r2, r2, #2
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f000 fdaa 	bl	801161c <_calloc_r>
 8010ac8:	b160      	cbz	r0, 8010ae4 <_Balloc+0x64>
 8010aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010ace:	e00e      	b.n	8010aee <_Balloc+0x6e>
 8010ad0:	2221      	movs	r2, #33	@ 0x21
 8010ad2:	2104      	movs	r1, #4
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f000 fda1 	bl	801161c <_calloc_r>
 8010ada:	69e3      	ldr	r3, [r4, #28]
 8010adc:	60f0      	str	r0, [r6, #12]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1e4      	bne.n	8010aae <_Balloc+0x2e>
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	bd70      	pop	{r4, r5, r6, pc}
 8010ae8:	6802      	ldr	r2, [r0, #0]
 8010aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010aee:	2300      	movs	r3, #0
 8010af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010af4:	e7f7      	b.n	8010ae6 <_Balloc+0x66>
 8010af6:	bf00      	nop
 8010af8:	080138d1 	.word	0x080138d1
 8010afc:	08013951 	.word	0x08013951

08010b00 <_Bfree>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	69c6      	ldr	r6, [r0, #28]
 8010b04:	4605      	mov	r5, r0
 8010b06:	460c      	mov	r4, r1
 8010b08:	b976      	cbnz	r6, 8010b28 <_Bfree+0x28>
 8010b0a:	2010      	movs	r0, #16
 8010b0c:	f7ff ff02 	bl	8010914 <malloc>
 8010b10:	4602      	mov	r2, r0
 8010b12:	61e8      	str	r0, [r5, #28]
 8010b14:	b920      	cbnz	r0, 8010b20 <_Bfree+0x20>
 8010b16:	4b09      	ldr	r3, [pc, #36]	@ (8010b3c <_Bfree+0x3c>)
 8010b18:	4809      	ldr	r0, [pc, #36]	@ (8010b40 <_Bfree+0x40>)
 8010b1a:	218f      	movs	r1, #143	@ 0x8f
 8010b1c:	f000 fd60 	bl	80115e0 <__assert_func>
 8010b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b24:	6006      	str	r6, [r0, #0]
 8010b26:	60c6      	str	r6, [r0, #12]
 8010b28:	b13c      	cbz	r4, 8010b3a <_Bfree+0x3a>
 8010b2a:	69eb      	ldr	r3, [r5, #28]
 8010b2c:	6862      	ldr	r2, [r4, #4]
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b34:	6021      	str	r1, [r4, #0]
 8010b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b3a:	bd70      	pop	{r4, r5, r6, pc}
 8010b3c:	080138d1 	.word	0x080138d1
 8010b40:	08013951 	.word	0x08013951

08010b44 <__multadd>:
 8010b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b48:	690d      	ldr	r5, [r1, #16]
 8010b4a:	4607      	mov	r7, r0
 8010b4c:	460c      	mov	r4, r1
 8010b4e:	461e      	mov	r6, r3
 8010b50:	f101 0c14 	add.w	ip, r1, #20
 8010b54:	2000      	movs	r0, #0
 8010b56:	f8dc 3000 	ldr.w	r3, [ip]
 8010b5a:	b299      	uxth	r1, r3
 8010b5c:	fb02 6101 	mla	r1, r2, r1, r6
 8010b60:	0c1e      	lsrs	r6, r3, #16
 8010b62:	0c0b      	lsrs	r3, r1, #16
 8010b64:	fb02 3306 	mla	r3, r2, r6, r3
 8010b68:	b289      	uxth	r1, r1
 8010b6a:	3001      	adds	r0, #1
 8010b6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b70:	4285      	cmp	r5, r0
 8010b72:	f84c 1b04 	str.w	r1, [ip], #4
 8010b76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b7a:	dcec      	bgt.n	8010b56 <__multadd+0x12>
 8010b7c:	b30e      	cbz	r6, 8010bc2 <__multadd+0x7e>
 8010b7e:	68a3      	ldr	r3, [r4, #8]
 8010b80:	42ab      	cmp	r3, r5
 8010b82:	dc19      	bgt.n	8010bb8 <__multadd+0x74>
 8010b84:	6861      	ldr	r1, [r4, #4]
 8010b86:	4638      	mov	r0, r7
 8010b88:	3101      	adds	r1, #1
 8010b8a:	f7ff ff79 	bl	8010a80 <_Balloc>
 8010b8e:	4680      	mov	r8, r0
 8010b90:	b928      	cbnz	r0, 8010b9e <__multadd+0x5a>
 8010b92:	4602      	mov	r2, r0
 8010b94:	4b0c      	ldr	r3, [pc, #48]	@ (8010bc8 <__multadd+0x84>)
 8010b96:	480d      	ldr	r0, [pc, #52]	@ (8010bcc <__multadd+0x88>)
 8010b98:	21ba      	movs	r1, #186	@ 0xba
 8010b9a:	f000 fd21 	bl	80115e0 <__assert_func>
 8010b9e:	6922      	ldr	r2, [r4, #16]
 8010ba0:	3202      	adds	r2, #2
 8010ba2:	f104 010c 	add.w	r1, r4, #12
 8010ba6:	0092      	lsls	r2, r2, #2
 8010ba8:	300c      	adds	r0, #12
 8010baa:	f7ff f80e 	bl	800fbca <memcpy>
 8010bae:	4621      	mov	r1, r4
 8010bb0:	4638      	mov	r0, r7
 8010bb2:	f7ff ffa5 	bl	8010b00 <_Bfree>
 8010bb6:	4644      	mov	r4, r8
 8010bb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010bbc:	3501      	adds	r5, #1
 8010bbe:	615e      	str	r6, [r3, #20]
 8010bc0:	6125      	str	r5, [r4, #16]
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bc8:	08013940 	.word	0x08013940
 8010bcc:	08013951 	.word	0x08013951

08010bd0 <__hi0bits>:
 8010bd0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	bf36      	itet	cc
 8010bd8:	0403      	lslcc	r3, r0, #16
 8010bda:	2000      	movcs	r0, #0
 8010bdc:	2010      	movcc	r0, #16
 8010bde:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010be2:	bf3c      	itt	cc
 8010be4:	021b      	lslcc	r3, r3, #8
 8010be6:	3008      	addcc	r0, #8
 8010be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010bec:	bf3c      	itt	cc
 8010bee:	011b      	lslcc	r3, r3, #4
 8010bf0:	3004      	addcc	r0, #4
 8010bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010bf6:	bf3c      	itt	cc
 8010bf8:	009b      	lslcc	r3, r3, #2
 8010bfa:	3002      	addcc	r0, #2
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	db05      	blt.n	8010c0c <__hi0bits+0x3c>
 8010c00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010c04:	f100 0001 	add.w	r0, r0, #1
 8010c08:	bf08      	it	eq
 8010c0a:	2020      	moveq	r0, #32
 8010c0c:	4770      	bx	lr

08010c0e <__lo0bits>:
 8010c0e:	6803      	ldr	r3, [r0, #0]
 8010c10:	4602      	mov	r2, r0
 8010c12:	f013 0007 	ands.w	r0, r3, #7
 8010c16:	d00b      	beq.n	8010c30 <__lo0bits+0x22>
 8010c18:	07d9      	lsls	r1, r3, #31
 8010c1a:	d421      	bmi.n	8010c60 <__lo0bits+0x52>
 8010c1c:	0798      	lsls	r0, r3, #30
 8010c1e:	bf49      	itett	mi
 8010c20:	085b      	lsrmi	r3, r3, #1
 8010c22:	089b      	lsrpl	r3, r3, #2
 8010c24:	2001      	movmi	r0, #1
 8010c26:	6013      	strmi	r3, [r2, #0]
 8010c28:	bf5c      	itt	pl
 8010c2a:	6013      	strpl	r3, [r2, #0]
 8010c2c:	2002      	movpl	r0, #2
 8010c2e:	4770      	bx	lr
 8010c30:	b299      	uxth	r1, r3
 8010c32:	b909      	cbnz	r1, 8010c38 <__lo0bits+0x2a>
 8010c34:	0c1b      	lsrs	r3, r3, #16
 8010c36:	2010      	movs	r0, #16
 8010c38:	b2d9      	uxtb	r1, r3
 8010c3a:	b909      	cbnz	r1, 8010c40 <__lo0bits+0x32>
 8010c3c:	3008      	adds	r0, #8
 8010c3e:	0a1b      	lsrs	r3, r3, #8
 8010c40:	0719      	lsls	r1, r3, #28
 8010c42:	bf04      	itt	eq
 8010c44:	091b      	lsreq	r3, r3, #4
 8010c46:	3004      	addeq	r0, #4
 8010c48:	0799      	lsls	r1, r3, #30
 8010c4a:	bf04      	itt	eq
 8010c4c:	089b      	lsreq	r3, r3, #2
 8010c4e:	3002      	addeq	r0, #2
 8010c50:	07d9      	lsls	r1, r3, #31
 8010c52:	d403      	bmi.n	8010c5c <__lo0bits+0x4e>
 8010c54:	085b      	lsrs	r3, r3, #1
 8010c56:	f100 0001 	add.w	r0, r0, #1
 8010c5a:	d003      	beq.n	8010c64 <__lo0bits+0x56>
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	4770      	bx	lr
 8010c60:	2000      	movs	r0, #0
 8010c62:	4770      	bx	lr
 8010c64:	2020      	movs	r0, #32
 8010c66:	4770      	bx	lr

08010c68 <__i2b>:
 8010c68:	b510      	push	{r4, lr}
 8010c6a:	460c      	mov	r4, r1
 8010c6c:	2101      	movs	r1, #1
 8010c6e:	f7ff ff07 	bl	8010a80 <_Balloc>
 8010c72:	4602      	mov	r2, r0
 8010c74:	b928      	cbnz	r0, 8010c82 <__i2b+0x1a>
 8010c76:	4b05      	ldr	r3, [pc, #20]	@ (8010c8c <__i2b+0x24>)
 8010c78:	4805      	ldr	r0, [pc, #20]	@ (8010c90 <__i2b+0x28>)
 8010c7a:	f240 1145 	movw	r1, #325	@ 0x145
 8010c7e:	f000 fcaf 	bl	80115e0 <__assert_func>
 8010c82:	2301      	movs	r3, #1
 8010c84:	6144      	str	r4, [r0, #20]
 8010c86:	6103      	str	r3, [r0, #16]
 8010c88:	bd10      	pop	{r4, pc}
 8010c8a:	bf00      	nop
 8010c8c:	08013940 	.word	0x08013940
 8010c90:	08013951 	.word	0x08013951

08010c94 <__multiply>:
 8010c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c98:	4614      	mov	r4, r2
 8010c9a:	690a      	ldr	r2, [r1, #16]
 8010c9c:	6923      	ldr	r3, [r4, #16]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	bfa8      	it	ge
 8010ca2:	4623      	movge	r3, r4
 8010ca4:	460f      	mov	r7, r1
 8010ca6:	bfa4      	itt	ge
 8010ca8:	460c      	movge	r4, r1
 8010caa:	461f      	movge	r7, r3
 8010cac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010cb0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010cb4:	68a3      	ldr	r3, [r4, #8]
 8010cb6:	6861      	ldr	r1, [r4, #4]
 8010cb8:	eb0a 0609 	add.w	r6, sl, r9
 8010cbc:	42b3      	cmp	r3, r6
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	bfb8      	it	lt
 8010cc2:	3101      	addlt	r1, #1
 8010cc4:	f7ff fedc 	bl	8010a80 <_Balloc>
 8010cc8:	b930      	cbnz	r0, 8010cd8 <__multiply+0x44>
 8010cca:	4602      	mov	r2, r0
 8010ccc:	4b44      	ldr	r3, [pc, #272]	@ (8010de0 <__multiply+0x14c>)
 8010cce:	4845      	ldr	r0, [pc, #276]	@ (8010de4 <__multiply+0x150>)
 8010cd0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010cd4:	f000 fc84 	bl	80115e0 <__assert_func>
 8010cd8:	f100 0514 	add.w	r5, r0, #20
 8010cdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010ce0:	462b      	mov	r3, r5
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	4543      	cmp	r3, r8
 8010ce6:	d321      	bcc.n	8010d2c <__multiply+0x98>
 8010ce8:	f107 0114 	add.w	r1, r7, #20
 8010cec:	f104 0214 	add.w	r2, r4, #20
 8010cf0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010cf4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010cf8:	9302      	str	r3, [sp, #8]
 8010cfa:	1b13      	subs	r3, r2, r4
 8010cfc:	3b15      	subs	r3, #21
 8010cfe:	f023 0303 	bic.w	r3, r3, #3
 8010d02:	3304      	adds	r3, #4
 8010d04:	f104 0715 	add.w	r7, r4, #21
 8010d08:	42ba      	cmp	r2, r7
 8010d0a:	bf38      	it	cc
 8010d0c:	2304      	movcc	r3, #4
 8010d0e:	9301      	str	r3, [sp, #4]
 8010d10:	9b02      	ldr	r3, [sp, #8]
 8010d12:	9103      	str	r1, [sp, #12]
 8010d14:	428b      	cmp	r3, r1
 8010d16:	d80c      	bhi.n	8010d32 <__multiply+0x9e>
 8010d18:	2e00      	cmp	r6, #0
 8010d1a:	dd03      	ble.n	8010d24 <__multiply+0x90>
 8010d1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d05b      	beq.n	8010ddc <__multiply+0x148>
 8010d24:	6106      	str	r6, [r0, #16]
 8010d26:	b005      	add	sp, #20
 8010d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d2c:	f843 2b04 	str.w	r2, [r3], #4
 8010d30:	e7d8      	b.n	8010ce4 <__multiply+0x50>
 8010d32:	f8b1 a000 	ldrh.w	sl, [r1]
 8010d36:	f1ba 0f00 	cmp.w	sl, #0
 8010d3a:	d024      	beq.n	8010d86 <__multiply+0xf2>
 8010d3c:	f104 0e14 	add.w	lr, r4, #20
 8010d40:	46a9      	mov	r9, r5
 8010d42:	f04f 0c00 	mov.w	ip, #0
 8010d46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d4a:	f8d9 3000 	ldr.w	r3, [r9]
 8010d4e:	fa1f fb87 	uxth.w	fp, r7
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	fb0a 330b 	mla	r3, sl, fp, r3
 8010d58:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8010d5c:	f8d9 7000 	ldr.w	r7, [r9]
 8010d60:	4463      	add	r3, ip
 8010d62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010d66:	fb0a c70b 	mla	r7, sl, fp, ip
 8010d6a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010d74:	4572      	cmp	r2, lr
 8010d76:	f849 3b04 	str.w	r3, [r9], #4
 8010d7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8010d7e:	d8e2      	bhi.n	8010d46 <__multiply+0xb2>
 8010d80:	9b01      	ldr	r3, [sp, #4]
 8010d82:	f845 c003 	str.w	ip, [r5, r3]
 8010d86:	9b03      	ldr	r3, [sp, #12]
 8010d88:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010d8c:	3104      	adds	r1, #4
 8010d8e:	f1b9 0f00 	cmp.w	r9, #0
 8010d92:	d021      	beq.n	8010dd8 <__multiply+0x144>
 8010d94:	682b      	ldr	r3, [r5, #0]
 8010d96:	f104 0c14 	add.w	ip, r4, #20
 8010d9a:	46ae      	mov	lr, r5
 8010d9c:	f04f 0a00 	mov.w	sl, #0
 8010da0:	f8bc b000 	ldrh.w	fp, [ip]
 8010da4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010da8:	fb09 770b 	mla	r7, r9, fp, r7
 8010dac:	4457      	add	r7, sl
 8010dae:	b29b      	uxth	r3, r3
 8010db0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010db4:	f84e 3b04 	str.w	r3, [lr], #4
 8010db8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010dbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010dc0:	f8be 3000 	ldrh.w	r3, [lr]
 8010dc4:	fb09 330a 	mla	r3, r9, sl, r3
 8010dc8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010dcc:	4562      	cmp	r2, ip
 8010dce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010dd2:	d8e5      	bhi.n	8010da0 <__multiply+0x10c>
 8010dd4:	9f01      	ldr	r7, [sp, #4]
 8010dd6:	51eb      	str	r3, [r5, r7]
 8010dd8:	3504      	adds	r5, #4
 8010dda:	e799      	b.n	8010d10 <__multiply+0x7c>
 8010ddc:	3e01      	subs	r6, #1
 8010dde:	e79b      	b.n	8010d18 <__multiply+0x84>
 8010de0:	08013940 	.word	0x08013940
 8010de4:	08013951 	.word	0x08013951

08010de8 <__pow5mult>:
 8010de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010dec:	4615      	mov	r5, r2
 8010dee:	f012 0203 	ands.w	r2, r2, #3
 8010df2:	4607      	mov	r7, r0
 8010df4:	460e      	mov	r6, r1
 8010df6:	d007      	beq.n	8010e08 <__pow5mult+0x20>
 8010df8:	4c25      	ldr	r4, [pc, #148]	@ (8010e90 <__pow5mult+0xa8>)
 8010dfa:	3a01      	subs	r2, #1
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010e02:	f7ff fe9f 	bl	8010b44 <__multadd>
 8010e06:	4606      	mov	r6, r0
 8010e08:	10ad      	asrs	r5, r5, #2
 8010e0a:	d03d      	beq.n	8010e88 <__pow5mult+0xa0>
 8010e0c:	69fc      	ldr	r4, [r7, #28]
 8010e0e:	b97c      	cbnz	r4, 8010e30 <__pow5mult+0x48>
 8010e10:	2010      	movs	r0, #16
 8010e12:	f7ff fd7f 	bl	8010914 <malloc>
 8010e16:	4602      	mov	r2, r0
 8010e18:	61f8      	str	r0, [r7, #28]
 8010e1a:	b928      	cbnz	r0, 8010e28 <__pow5mult+0x40>
 8010e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8010e94 <__pow5mult+0xac>)
 8010e1e:	481e      	ldr	r0, [pc, #120]	@ (8010e98 <__pow5mult+0xb0>)
 8010e20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010e24:	f000 fbdc 	bl	80115e0 <__assert_func>
 8010e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010e2c:	6004      	str	r4, [r0, #0]
 8010e2e:	60c4      	str	r4, [r0, #12]
 8010e30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010e38:	b94c      	cbnz	r4, 8010e4e <__pow5mult+0x66>
 8010e3a:	f240 2171 	movw	r1, #625	@ 0x271
 8010e3e:	4638      	mov	r0, r7
 8010e40:	f7ff ff12 	bl	8010c68 <__i2b>
 8010e44:	2300      	movs	r3, #0
 8010e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	6003      	str	r3, [r0, #0]
 8010e4e:	f04f 0900 	mov.w	r9, #0
 8010e52:	07eb      	lsls	r3, r5, #31
 8010e54:	d50a      	bpl.n	8010e6c <__pow5mult+0x84>
 8010e56:	4631      	mov	r1, r6
 8010e58:	4622      	mov	r2, r4
 8010e5a:	4638      	mov	r0, r7
 8010e5c:	f7ff ff1a 	bl	8010c94 <__multiply>
 8010e60:	4631      	mov	r1, r6
 8010e62:	4680      	mov	r8, r0
 8010e64:	4638      	mov	r0, r7
 8010e66:	f7ff fe4b 	bl	8010b00 <_Bfree>
 8010e6a:	4646      	mov	r6, r8
 8010e6c:	106d      	asrs	r5, r5, #1
 8010e6e:	d00b      	beq.n	8010e88 <__pow5mult+0xa0>
 8010e70:	6820      	ldr	r0, [r4, #0]
 8010e72:	b938      	cbnz	r0, 8010e84 <__pow5mult+0x9c>
 8010e74:	4622      	mov	r2, r4
 8010e76:	4621      	mov	r1, r4
 8010e78:	4638      	mov	r0, r7
 8010e7a:	f7ff ff0b 	bl	8010c94 <__multiply>
 8010e7e:	6020      	str	r0, [r4, #0]
 8010e80:	f8c0 9000 	str.w	r9, [r0]
 8010e84:	4604      	mov	r4, r0
 8010e86:	e7e4      	b.n	8010e52 <__pow5mult+0x6a>
 8010e88:	4630      	mov	r0, r6
 8010e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e8e:	bf00      	nop
 8010e90:	080139ac 	.word	0x080139ac
 8010e94:	080138d1 	.word	0x080138d1
 8010e98:	08013951 	.word	0x08013951

08010e9c <__lshift>:
 8010e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea0:	460c      	mov	r4, r1
 8010ea2:	6849      	ldr	r1, [r1, #4]
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010eaa:	68a3      	ldr	r3, [r4, #8]
 8010eac:	4607      	mov	r7, r0
 8010eae:	4691      	mov	r9, r2
 8010eb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010eb4:	f108 0601 	add.w	r6, r8, #1
 8010eb8:	42b3      	cmp	r3, r6
 8010eba:	db0b      	blt.n	8010ed4 <__lshift+0x38>
 8010ebc:	4638      	mov	r0, r7
 8010ebe:	f7ff fddf 	bl	8010a80 <_Balloc>
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	b948      	cbnz	r0, 8010eda <__lshift+0x3e>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	4b28      	ldr	r3, [pc, #160]	@ (8010f6c <__lshift+0xd0>)
 8010eca:	4829      	ldr	r0, [pc, #164]	@ (8010f70 <__lshift+0xd4>)
 8010ecc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010ed0:	f000 fb86 	bl	80115e0 <__assert_func>
 8010ed4:	3101      	adds	r1, #1
 8010ed6:	005b      	lsls	r3, r3, #1
 8010ed8:	e7ee      	b.n	8010eb8 <__lshift+0x1c>
 8010eda:	2300      	movs	r3, #0
 8010edc:	f100 0114 	add.w	r1, r0, #20
 8010ee0:	f100 0210 	add.w	r2, r0, #16
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	4553      	cmp	r3, sl
 8010ee8:	db33      	blt.n	8010f52 <__lshift+0xb6>
 8010eea:	6920      	ldr	r0, [r4, #16]
 8010eec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ef0:	f104 0314 	add.w	r3, r4, #20
 8010ef4:	f019 091f 	ands.w	r9, r9, #31
 8010ef8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010efc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010f00:	d02b      	beq.n	8010f5a <__lshift+0xbe>
 8010f02:	f1c9 0e20 	rsb	lr, r9, #32
 8010f06:	468a      	mov	sl, r1
 8010f08:	2200      	movs	r2, #0
 8010f0a:	6818      	ldr	r0, [r3, #0]
 8010f0c:	fa00 f009 	lsl.w	r0, r0, r9
 8010f10:	4310      	orrs	r0, r2
 8010f12:	f84a 0b04 	str.w	r0, [sl], #4
 8010f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f1a:	459c      	cmp	ip, r3
 8010f1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010f20:	d8f3      	bhi.n	8010f0a <__lshift+0x6e>
 8010f22:	ebac 0304 	sub.w	r3, ip, r4
 8010f26:	3b15      	subs	r3, #21
 8010f28:	f023 0303 	bic.w	r3, r3, #3
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	f104 0015 	add.w	r0, r4, #21
 8010f32:	4584      	cmp	ip, r0
 8010f34:	bf38      	it	cc
 8010f36:	2304      	movcc	r3, #4
 8010f38:	50ca      	str	r2, [r1, r3]
 8010f3a:	b10a      	cbz	r2, 8010f40 <__lshift+0xa4>
 8010f3c:	f108 0602 	add.w	r6, r8, #2
 8010f40:	3e01      	subs	r6, #1
 8010f42:	4638      	mov	r0, r7
 8010f44:	612e      	str	r6, [r5, #16]
 8010f46:	4621      	mov	r1, r4
 8010f48:	f7ff fdda 	bl	8010b00 <_Bfree>
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f52:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f56:	3301      	adds	r3, #1
 8010f58:	e7c5      	b.n	8010ee6 <__lshift+0x4a>
 8010f5a:	3904      	subs	r1, #4
 8010f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f60:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f64:	459c      	cmp	ip, r3
 8010f66:	d8f9      	bhi.n	8010f5c <__lshift+0xc0>
 8010f68:	e7ea      	b.n	8010f40 <__lshift+0xa4>
 8010f6a:	bf00      	nop
 8010f6c:	08013940 	.word	0x08013940
 8010f70:	08013951 	.word	0x08013951

08010f74 <__mcmp>:
 8010f74:	690a      	ldr	r2, [r1, #16]
 8010f76:	4603      	mov	r3, r0
 8010f78:	6900      	ldr	r0, [r0, #16]
 8010f7a:	1a80      	subs	r0, r0, r2
 8010f7c:	b530      	push	{r4, r5, lr}
 8010f7e:	d10e      	bne.n	8010f9e <__mcmp+0x2a>
 8010f80:	3314      	adds	r3, #20
 8010f82:	3114      	adds	r1, #20
 8010f84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010f88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010f8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010f90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010f94:	4295      	cmp	r5, r2
 8010f96:	d003      	beq.n	8010fa0 <__mcmp+0x2c>
 8010f98:	d205      	bcs.n	8010fa6 <__mcmp+0x32>
 8010f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9e:	bd30      	pop	{r4, r5, pc}
 8010fa0:	42a3      	cmp	r3, r4
 8010fa2:	d3f3      	bcc.n	8010f8c <__mcmp+0x18>
 8010fa4:	e7fb      	b.n	8010f9e <__mcmp+0x2a>
 8010fa6:	2001      	movs	r0, #1
 8010fa8:	e7f9      	b.n	8010f9e <__mcmp+0x2a>
	...

08010fac <__mdiff>:
 8010fac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb0:	4689      	mov	r9, r1
 8010fb2:	4606      	mov	r6, r0
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	4648      	mov	r0, r9
 8010fb8:	4614      	mov	r4, r2
 8010fba:	f7ff ffdb 	bl	8010f74 <__mcmp>
 8010fbe:	1e05      	subs	r5, r0, #0
 8010fc0:	d112      	bne.n	8010fe8 <__mdiff+0x3c>
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	4630      	mov	r0, r6
 8010fc6:	f7ff fd5b 	bl	8010a80 <_Balloc>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	b928      	cbnz	r0, 8010fda <__mdiff+0x2e>
 8010fce:	4b3f      	ldr	r3, [pc, #252]	@ (80110cc <__mdiff+0x120>)
 8010fd0:	f240 2137 	movw	r1, #567	@ 0x237
 8010fd4:	483e      	ldr	r0, [pc, #248]	@ (80110d0 <__mdiff+0x124>)
 8010fd6:	f000 fb03 	bl	80115e0 <__assert_func>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010fe0:	4610      	mov	r0, r2
 8010fe2:	b003      	add	sp, #12
 8010fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fe8:	bfbc      	itt	lt
 8010fea:	464b      	movlt	r3, r9
 8010fec:	46a1      	movlt	r9, r4
 8010fee:	4630      	mov	r0, r6
 8010ff0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010ff4:	bfba      	itte	lt
 8010ff6:	461c      	movlt	r4, r3
 8010ff8:	2501      	movlt	r5, #1
 8010ffa:	2500      	movge	r5, #0
 8010ffc:	f7ff fd40 	bl	8010a80 <_Balloc>
 8011000:	4602      	mov	r2, r0
 8011002:	b918      	cbnz	r0, 801100c <__mdiff+0x60>
 8011004:	4b31      	ldr	r3, [pc, #196]	@ (80110cc <__mdiff+0x120>)
 8011006:	f240 2145 	movw	r1, #581	@ 0x245
 801100a:	e7e3      	b.n	8010fd4 <__mdiff+0x28>
 801100c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011010:	6926      	ldr	r6, [r4, #16]
 8011012:	60c5      	str	r5, [r0, #12]
 8011014:	f109 0310 	add.w	r3, r9, #16
 8011018:	f109 0514 	add.w	r5, r9, #20
 801101c:	f104 0e14 	add.w	lr, r4, #20
 8011020:	f100 0b14 	add.w	fp, r0, #20
 8011024:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011028:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801102c:	9301      	str	r3, [sp, #4]
 801102e:	46d9      	mov	r9, fp
 8011030:	f04f 0c00 	mov.w	ip, #0
 8011034:	9b01      	ldr	r3, [sp, #4]
 8011036:	f85e 0b04 	ldr.w	r0, [lr], #4
 801103a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801103e:	9301      	str	r3, [sp, #4]
 8011040:	fa1f f38a 	uxth.w	r3, sl
 8011044:	4619      	mov	r1, r3
 8011046:	b283      	uxth	r3, r0
 8011048:	1acb      	subs	r3, r1, r3
 801104a:	0c00      	lsrs	r0, r0, #16
 801104c:	4463      	add	r3, ip
 801104e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011052:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011056:	b29b      	uxth	r3, r3
 8011058:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801105c:	4576      	cmp	r6, lr
 801105e:	f849 3b04 	str.w	r3, [r9], #4
 8011062:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011066:	d8e5      	bhi.n	8011034 <__mdiff+0x88>
 8011068:	1b33      	subs	r3, r6, r4
 801106a:	3b15      	subs	r3, #21
 801106c:	f023 0303 	bic.w	r3, r3, #3
 8011070:	3415      	adds	r4, #21
 8011072:	3304      	adds	r3, #4
 8011074:	42a6      	cmp	r6, r4
 8011076:	bf38      	it	cc
 8011078:	2304      	movcc	r3, #4
 801107a:	441d      	add	r5, r3
 801107c:	445b      	add	r3, fp
 801107e:	461e      	mov	r6, r3
 8011080:	462c      	mov	r4, r5
 8011082:	4544      	cmp	r4, r8
 8011084:	d30e      	bcc.n	80110a4 <__mdiff+0xf8>
 8011086:	f108 0103 	add.w	r1, r8, #3
 801108a:	1b49      	subs	r1, r1, r5
 801108c:	f021 0103 	bic.w	r1, r1, #3
 8011090:	3d03      	subs	r5, #3
 8011092:	45a8      	cmp	r8, r5
 8011094:	bf38      	it	cc
 8011096:	2100      	movcc	r1, #0
 8011098:	440b      	add	r3, r1
 801109a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801109e:	b191      	cbz	r1, 80110c6 <__mdiff+0x11a>
 80110a0:	6117      	str	r7, [r2, #16]
 80110a2:	e79d      	b.n	8010fe0 <__mdiff+0x34>
 80110a4:	f854 1b04 	ldr.w	r1, [r4], #4
 80110a8:	46e6      	mov	lr, ip
 80110aa:	0c08      	lsrs	r0, r1, #16
 80110ac:	fa1c fc81 	uxtah	ip, ip, r1
 80110b0:	4471      	add	r1, lr
 80110b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80110b6:	b289      	uxth	r1, r1
 80110b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80110bc:	f846 1b04 	str.w	r1, [r6], #4
 80110c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80110c4:	e7dd      	b.n	8011082 <__mdiff+0xd6>
 80110c6:	3f01      	subs	r7, #1
 80110c8:	e7e7      	b.n	801109a <__mdiff+0xee>
 80110ca:	bf00      	nop
 80110cc:	08013940 	.word	0x08013940
 80110d0:	08013951 	.word	0x08013951

080110d4 <__d2b>:
 80110d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80110d8:	460f      	mov	r7, r1
 80110da:	2101      	movs	r1, #1
 80110dc:	ec59 8b10 	vmov	r8, r9, d0
 80110e0:	4616      	mov	r6, r2
 80110e2:	f7ff fccd 	bl	8010a80 <_Balloc>
 80110e6:	4604      	mov	r4, r0
 80110e8:	b930      	cbnz	r0, 80110f8 <__d2b+0x24>
 80110ea:	4602      	mov	r2, r0
 80110ec:	4b23      	ldr	r3, [pc, #140]	@ (801117c <__d2b+0xa8>)
 80110ee:	4824      	ldr	r0, [pc, #144]	@ (8011180 <__d2b+0xac>)
 80110f0:	f240 310f 	movw	r1, #783	@ 0x30f
 80110f4:	f000 fa74 	bl	80115e0 <__assert_func>
 80110f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80110fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011100:	b10d      	cbz	r5, 8011106 <__d2b+0x32>
 8011102:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011106:	9301      	str	r3, [sp, #4]
 8011108:	f1b8 0300 	subs.w	r3, r8, #0
 801110c:	d023      	beq.n	8011156 <__d2b+0x82>
 801110e:	4668      	mov	r0, sp
 8011110:	9300      	str	r3, [sp, #0]
 8011112:	f7ff fd7c 	bl	8010c0e <__lo0bits>
 8011116:	e9dd 1200 	ldrd	r1, r2, [sp]
 801111a:	b1d0      	cbz	r0, 8011152 <__d2b+0x7e>
 801111c:	f1c0 0320 	rsb	r3, r0, #32
 8011120:	fa02 f303 	lsl.w	r3, r2, r3
 8011124:	430b      	orrs	r3, r1
 8011126:	40c2      	lsrs	r2, r0
 8011128:	6163      	str	r3, [r4, #20]
 801112a:	9201      	str	r2, [sp, #4]
 801112c:	9b01      	ldr	r3, [sp, #4]
 801112e:	61a3      	str	r3, [r4, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	bf0c      	ite	eq
 8011134:	2201      	moveq	r2, #1
 8011136:	2202      	movne	r2, #2
 8011138:	6122      	str	r2, [r4, #16]
 801113a:	b1a5      	cbz	r5, 8011166 <__d2b+0x92>
 801113c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011140:	4405      	add	r5, r0
 8011142:	603d      	str	r5, [r7, #0]
 8011144:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011148:	6030      	str	r0, [r6, #0]
 801114a:	4620      	mov	r0, r4
 801114c:	b003      	add	sp, #12
 801114e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011152:	6161      	str	r1, [r4, #20]
 8011154:	e7ea      	b.n	801112c <__d2b+0x58>
 8011156:	a801      	add	r0, sp, #4
 8011158:	f7ff fd59 	bl	8010c0e <__lo0bits>
 801115c:	9b01      	ldr	r3, [sp, #4]
 801115e:	6163      	str	r3, [r4, #20]
 8011160:	3020      	adds	r0, #32
 8011162:	2201      	movs	r2, #1
 8011164:	e7e8      	b.n	8011138 <__d2b+0x64>
 8011166:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801116a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801116e:	6038      	str	r0, [r7, #0]
 8011170:	6918      	ldr	r0, [r3, #16]
 8011172:	f7ff fd2d 	bl	8010bd0 <__hi0bits>
 8011176:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801117a:	e7e5      	b.n	8011148 <__d2b+0x74>
 801117c:	08013940 	.word	0x08013940
 8011180:	08013951 	.word	0x08013951

08011184 <__ssputs_r>:
 8011184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011188:	688e      	ldr	r6, [r1, #8]
 801118a:	461f      	mov	r7, r3
 801118c:	42be      	cmp	r6, r7
 801118e:	680b      	ldr	r3, [r1, #0]
 8011190:	4682      	mov	sl, r0
 8011192:	460c      	mov	r4, r1
 8011194:	4690      	mov	r8, r2
 8011196:	d82d      	bhi.n	80111f4 <__ssputs_r+0x70>
 8011198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801119c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80111a0:	d026      	beq.n	80111f0 <__ssputs_r+0x6c>
 80111a2:	6965      	ldr	r5, [r4, #20]
 80111a4:	6909      	ldr	r1, [r1, #16]
 80111a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80111aa:	eba3 0901 	sub.w	r9, r3, r1
 80111ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80111b2:	1c7b      	adds	r3, r7, #1
 80111b4:	444b      	add	r3, r9
 80111b6:	106d      	asrs	r5, r5, #1
 80111b8:	429d      	cmp	r5, r3
 80111ba:	bf38      	it	cc
 80111bc:	461d      	movcc	r5, r3
 80111be:	0553      	lsls	r3, r2, #21
 80111c0:	d527      	bpl.n	8011212 <__ssputs_r+0x8e>
 80111c2:	4629      	mov	r1, r5
 80111c4:	f7ff fbd0 	bl	8010968 <_malloc_r>
 80111c8:	4606      	mov	r6, r0
 80111ca:	b360      	cbz	r0, 8011226 <__ssputs_r+0xa2>
 80111cc:	6921      	ldr	r1, [r4, #16]
 80111ce:	464a      	mov	r2, r9
 80111d0:	f7fe fcfb 	bl	800fbca <memcpy>
 80111d4:	89a3      	ldrh	r3, [r4, #12]
 80111d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80111da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111de:	81a3      	strh	r3, [r4, #12]
 80111e0:	6126      	str	r6, [r4, #16]
 80111e2:	6165      	str	r5, [r4, #20]
 80111e4:	444e      	add	r6, r9
 80111e6:	eba5 0509 	sub.w	r5, r5, r9
 80111ea:	6026      	str	r6, [r4, #0]
 80111ec:	60a5      	str	r5, [r4, #8]
 80111ee:	463e      	mov	r6, r7
 80111f0:	42be      	cmp	r6, r7
 80111f2:	d900      	bls.n	80111f6 <__ssputs_r+0x72>
 80111f4:	463e      	mov	r6, r7
 80111f6:	6820      	ldr	r0, [r4, #0]
 80111f8:	4632      	mov	r2, r6
 80111fa:	4641      	mov	r1, r8
 80111fc:	f000 f9c6 	bl	801158c <memmove>
 8011200:	68a3      	ldr	r3, [r4, #8]
 8011202:	1b9b      	subs	r3, r3, r6
 8011204:	60a3      	str	r3, [r4, #8]
 8011206:	6823      	ldr	r3, [r4, #0]
 8011208:	4433      	add	r3, r6
 801120a:	6023      	str	r3, [r4, #0]
 801120c:	2000      	movs	r0, #0
 801120e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011212:	462a      	mov	r2, r5
 8011214:	f000 fa28 	bl	8011668 <_realloc_r>
 8011218:	4606      	mov	r6, r0
 801121a:	2800      	cmp	r0, #0
 801121c:	d1e0      	bne.n	80111e0 <__ssputs_r+0x5c>
 801121e:	6921      	ldr	r1, [r4, #16]
 8011220:	4650      	mov	r0, sl
 8011222:	f7ff fb2d 	bl	8010880 <_free_r>
 8011226:	230c      	movs	r3, #12
 8011228:	f8ca 3000 	str.w	r3, [sl]
 801122c:	89a3      	ldrh	r3, [r4, #12]
 801122e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011232:	81a3      	strh	r3, [r4, #12]
 8011234:	f04f 30ff 	mov.w	r0, #4294967295
 8011238:	e7e9      	b.n	801120e <__ssputs_r+0x8a>
	...

0801123c <_svfiprintf_r>:
 801123c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011240:	4698      	mov	r8, r3
 8011242:	898b      	ldrh	r3, [r1, #12]
 8011244:	061b      	lsls	r3, r3, #24
 8011246:	b09d      	sub	sp, #116	@ 0x74
 8011248:	4607      	mov	r7, r0
 801124a:	460d      	mov	r5, r1
 801124c:	4614      	mov	r4, r2
 801124e:	d510      	bpl.n	8011272 <_svfiprintf_r+0x36>
 8011250:	690b      	ldr	r3, [r1, #16]
 8011252:	b973      	cbnz	r3, 8011272 <_svfiprintf_r+0x36>
 8011254:	2140      	movs	r1, #64	@ 0x40
 8011256:	f7ff fb87 	bl	8010968 <_malloc_r>
 801125a:	6028      	str	r0, [r5, #0]
 801125c:	6128      	str	r0, [r5, #16]
 801125e:	b930      	cbnz	r0, 801126e <_svfiprintf_r+0x32>
 8011260:	230c      	movs	r3, #12
 8011262:	603b      	str	r3, [r7, #0]
 8011264:	f04f 30ff 	mov.w	r0, #4294967295
 8011268:	b01d      	add	sp, #116	@ 0x74
 801126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126e:	2340      	movs	r3, #64	@ 0x40
 8011270:	616b      	str	r3, [r5, #20]
 8011272:	2300      	movs	r3, #0
 8011274:	9309      	str	r3, [sp, #36]	@ 0x24
 8011276:	2320      	movs	r3, #32
 8011278:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801127c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011280:	2330      	movs	r3, #48	@ 0x30
 8011282:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011420 <_svfiprintf_r+0x1e4>
 8011286:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801128a:	f04f 0901 	mov.w	r9, #1
 801128e:	4623      	mov	r3, r4
 8011290:	469a      	mov	sl, r3
 8011292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011296:	b10a      	cbz	r2, 801129c <_svfiprintf_r+0x60>
 8011298:	2a25      	cmp	r2, #37	@ 0x25
 801129a:	d1f9      	bne.n	8011290 <_svfiprintf_r+0x54>
 801129c:	ebba 0b04 	subs.w	fp, sl, r4
 80112a0:	d00b      	beq.n	80112ba <_svfiprintf_r+0x7e>
 80112a2:	465b      	mov	r3, fp
 80112a4:	4622      	mov	r2, r4
 80112a6:	4629      	mov	r1, r5
 80112a8:	4638      	mov	r0, r7
 80112aa:	f7ff ff6b 	bl	8011184 <__ssputs_r>
 80112ae:	3001      	adds	r0, #1
 80112b0:	f000 80a7 	beq.w	8011402 <_svfiprintf_r+0x1c6>
 80112b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112b6:	445a      	add	r2, fp
 80112b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80112ba:	f89a 3000 	ldrb.w	r3, [sl]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f000 809f 	beq.w	8011402 <_svfiprintf_r+0x1c6>
 80112c4:	2300      	movs	r3, #0
 80112c6:	f04f 32ff 	mov.w	r2, #4294967295
 80112ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112ce:	f10a 0a01 	add.w	sl, sl, #1
 80112d2:	9304      	str	r3, [sp, #16]
 80112d4:	9307      	str	r3, [sp, #28]
 80112d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80112da:	931a      	str	r3, [sp, #104]	@ 0x68
 80112dc:	4654      	mov	r4, sl
 80112de:	2205      	movs	r2, #5
 80112e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112e4:	484e      	ldr	r0, [pc, #312]	@ (8011420 <_svfiprintf_r+0x1e4>)
 80112e6:	f7ee ff83 	bl	80001f0 <memchr>
 80112ea:	9a04      	ldr	r2, [sp, #16]
 80112ec:	b9d8      	cbnz	r0, 8011326 <_svfiprintf_r+0xea>
 80112ee:	06d0      	lsls	r0, r2, #27
 80112f0:	bf44      	itt	mi
 80112f2:	2320      	movmi	r3, #32
 80112f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80112f8:	0711      	lsls	r1, r2, #28
 80112fa:	bf44      	itt	mi
 80112fc:	232b      	movmi	r3, #43	@ 0x2b
 80112fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011302:	f89a 3000 	ldrb.w	r3, [sl]
 8011306:	2b2a      	cmp	r3, #42	@ 0x2a
 8011308:	d015      	beq.n	8011336 <_svfiprintf_r+0xfa>
 801130a:	9a07      	ldr	r2, [sp, #28]
 801130c:	4654      	mov	r4, sl
 801130e:	2000      	movs	r0, #0
 8011310:	f04f 0c0a 	mov.w	ip, #10
 8011314:	4621      	mov	r1, r4
 8011316:	f811 3b01 	ldrb.w	r3, [r1], #1
 801131a:	3b30      	subs	r3, #48	@ 0x30
 801131c:	2b09      	cmp	r3, #9
 801131e:	d94b      	bls.n	80113b8 <_svfiprintf_r+0x17c>
 8011320:	b1b0      	cbz	r0, 8011350 <_svfiprintf_r+0x114>
 8011322:	9207      	str	r2, [sp, #28]
 8011324:	e014      	b.n	8011350 <_svfiprintf_r+0x114>
 8011326:	eba0 0308 	sub.w	r3, r0, r8
 801132a:	fa09 f303 	lsl.w	r3, r9, r3
 801132e:	4313      	orrs	r3, r2
 8011330:	9304      	str	r3, [sp, #16]
 8011332:	46a2      	mov	sl, r4
 8011334:	e7d2      	b.n	80112dc <_svfiprintf_r+0xa0>
 8011336:	9b03      	ldr	r3, [sp, #12]
 8011338:	1d19      	adds	r1, r3, #4
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	9103      	str	r1, [sp, #12]
 801133e:	2b00      	cmp	r3, #0
 8011340:	bfbb      	ittet	lt
 8011342:	425b      	neglt	r3, r3
 8011344:	f042 0202 	orrlt.w	r2, r2, #2
 8011348:	9307      	strge	r3, [sp, #28]
 801134a:	9307      	strlt	r3, [sp, #28]
 801134c:	bfb8      	it	lt
 801134e:	9204      	strlt	r2, [sp, #16]
 8011350:	7823      	ldrb	r3, [r4, #0]
 8011352:	2b2e      	cmp	r3, #46	@ 0x2e
 8011354:	d10a      	bne.n	801136c <_svfiprintf_r+0x130>
 8011356:	7863      	ldrb	r3, [r4, #1]
 8011358:	2b2a      	cmp	r3, #42	@ 0x2a
 801135a:	d132      	bne.n	80113c2 <_svfiprintf_r+0x186>
 801135c:	9b03      	ldr	r3, [sp, #12]
 801135e:	1d1a      	adds	r2, r3, #4
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	9203      	str	r2, [sp, #12]
 8011364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011368:	3402      	adds	r4, #2
 801136a:	9305      	str	r3, [sp, #20]
 801136c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011430 <_svfiprintf_r+0x1f4>
 8011370:	7821      	ldrb	r1, [r4, #0]
 8011372:	2203      	movs	r2, #3
 8011374:	4650      	mov	r0, sl
 8011376:	f7ee ff3b 	bl	80001f0 <memchr>
 801137a:	b138      	cbz	r0, 801138c <_svfiprintf_r+0x150>
 801137c:	9b04      	ldr	r3, [sp, #16]
 801137e:	eba0 000a 	sub.w	r0, r0, sl
 8011382:	2240      	movs	r2, #64	@ 0x40
 8011384:	4082      	lsls	r2, r0
 8011386:	4313      	orrs	r3, r2
 8011388:	3401      	adds	r4, #1
 801138a:	9304      	str	r3, [sp, #16]
 801138c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011390:	4824      	ldr	r0, [pc, #144]	@ (8011424 <_svfiprintf_r+0x1e8>)
 8011392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011396:	2206      	movs	r2, #6
 8011398:	f7ee ff2a 	bl	80001f0 <memchr>
 801139c:	2800      	cmp	r0, #0
 801139e:	d036      	beq.n	801140e <_svfiprintf_r+0x1d2>
 80113a0:	4b21      	ldr	r3, [pc, #132]	@ (8011428 <_svfiprintf_r+0x1ec>)
 80113a2:	bb1b      	cbnz	r3, 80113ec <_svfiprintf_r+0x1b0>
 80113a4:	9b03      	ldr	r3, [sp, #12]
 80113a6:	3307      	adds	r3, #7
 80113a8:	f023 0307 	bic.w	r3, r3, #7
 80113ac:	3308      	adds	r3, #8
 80113ae:	9303      	str	r3, [sp, #12]
 80113b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113b2:	4433      	add	r3, r6
 80113b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113b6:	e76a      	b.n	801128e <_svfiprintf_r+0x52>
 80113b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80113bc:	460c      	mov	r4, r1
 80113be:	2001      	movs	r0, #1
 80113c0:	e7a8      	b.n	8011314 <_svfiprintf_r+0xd8>
 80113c2:	2300      	movs	r3, #0
 80113c4:	3401      	adds	r4, #1
 80113c6:	9305      	str	r3, [sp, #20]
 80113c8:	4619      	mov	r1, r3
 80113ca:	f04f 0c0a 	mov.w	ip, #10
 80113ce:	4620      	mov	r0, r4
 80113d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113d4:	3a30      	subs	r2, #48	@ 0x30
 80113d6:	2a09      	cmp	r2, #9
 80113d8:	d903      	bls.n	80113e2 <_svfiprintf_r+0x1a6>
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d0c6      	beq.n	801136c <_svfiprintf_r+0x130>
 80113de:	9105      	str	r1, [sp, #20]
 80113e0:	e7c4      	b.n	801136c <_svfiprintf_r+0x130>
 80113e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80113e6:	4604      	mov	r4, r0
 80113e8:	2301      	movs	r3, #1
 80113ea:	e7f0      	b.n	80113ce <_svfiprintf_r+0x192>
 80113ec:	ab03      	add	r3, sp, #12
 80113ee:	9300      	str	r3, [sp, #0]
 80113f0:	462a      	mov	r2, r5
 80113f2:	4b0e      	ldr	r3, [pc, #56]	@ (801142c <_svfiprintf_r+0x1f0>)
 80113f4:	a904      	add	r1, sp, #16
 80113f6:	4638      	mov	r0, r7
 80113f8:	f7fd fe8a 	bl	800f110 <_printf_float>
 80113fc:	1c42      	adds	r2, r0, #1
 80113fe:	4606      	mov	r6, r0
 8011400:	d1d6      	bne.n	80113b0 <_svfiprintf_r+0x174>
 8011402:	89ab      	ldrh	r3, [r5, #12]
 8011404:	065b      	lsls	r3, r3, #25
 8011406:	f53f af2d 	bmi.w	8011264 <_svfiprintf_r+0x28>
 801140a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801140c:	e72c      	b.n	8011268 <_svfiprintf_r+0x2c>
 801140e:	ab03      	add	r3, sp, #12
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	462a      	mov	r2, r5
 8011414:	4b05      	ldr	r3, [pc, #20]	@ (801142c <_svfiprintf_r+0x1f0>)
 8011416:	a904      	add	r1, sp, #16
 8011418:	4638      	mov	r0, r7
 801141a:	f7fe f911 	bl	800f640 <_printf_i>
 801141e:	e7ed      	b.n	80113fc <_svfiprintf_r+0x1c0>
 8011420:	08013aa8 	.word	0x08013aa8
 8011424:	08013ab2 	.word	0x08013ab2
 8011428:	0800f111 	.word	0x0800f111
 801142c:	08011185 	.word	0x08011185
 8011430:	08013aae 	.word	0x08013aae

08011434 <__sflush_r>:
 8011434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801143c:	0716      	lsls	r6, r2, #28
 801143e:	4605      	mov	r5, r0
 8011440:	460c      	mov	r4, r1
 8011442:	d454      	bmi.n	80114ee <__sflush_r+0xba>
 8011444:	684b      	ldr	r3, [r1, #4]
 8011446:	2b00      	cmp	r3, #0
 8011448:	dc02      	bgt.n	8011450 <__sflush_r+0x1c>
 801144a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801144c:	2b00      	cmp	r3, #0
 801144e:	dd48      	ble.n	80114e2 <__sflush_r+0xae>
 8011450:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011452:	2e00      	cmp	r6, #0
 8011454:	d045      	beq.n	80114e2 <__sflush_r+0xae>
 8011456:	2300      	movs	r3, #0
 8011458:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801145c:	682f      	ldr	r7, [r5, #0]
 801145e:	6a21      	ldr	r1, [r4, #32]
 8011460:	602b      	str	r3, [r5, #0]
 8011462:	d030      	beq.n	80114c6 <__sflush_r+0x92>
 8011464:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	0759      	lsls	r1, r3, #29
 801146a:	d505      	bpl.n	8011478 <__sflush_r+0x44>
 801146c:	6863      	ldr	r3, [r4, #4]
 801146e:	1ad2      	subs	r2, r2, r3
 8011470:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011472:	b10b      	cbz	r3, 8011478 <__sflush_r+0x44>
 8011474:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011476:	1ad2      	subs	r2, r2, r3
 8011478:	2300      	movs	r3, #0
 801147a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801147c:	6a21      	ldr	r1, [r4, #32]
 801147e:	4628      	mov	r0, r5
 8011480:	47b0      	blx	r6
 8011482:	1c43      	adds	r3, r0, #1
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	d106      	bne.n	8011496 <__sflush_r+0x62>
 8011488:	6829      	ldr	r1, [r5, #0]
 801148a:	291d      	cmp	r1, #29
 801148c:	d82b      	bhi.n	80114e6 <__sflush_r+0xb2>
 801148e:	4a2a      	ldr	r2, [pc, #168]	@ (8011538 <__sflush_r+0x104>)
 8011490:	410a      	asrs	r2, r1
 8011492:	07d6      	lsls	r6, r2, #31
 8011494:	d427      	bmi.n	80114e6 <__sflush_r+0xb2>
 8011496:	2200      	movs	r2, #0
 8011498:	6062      	str	r2, [r4, #4]
 801149a:	04d9      	lsls	r1, r3, #19
 801149c:	6922      	ldr	r2, [r4, #16]
 801149e:	6022      	str	r2, [r4, #0]
 80114a0:	d504      	bpl.n	80114ac <__sflush_r+0x78>
 80114a2:	1c42      	adds	r2, r0, #1
 80114a4:	d101      	bne.n	80114aa <__sflush_r+0x76>
 80114a6:	682b      	ldr	r3, [r5, #0]
 80114a8:	b903      	cbnz	r3, 80114ac <__sflush_r+0x78>
 80114aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80114ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80114ae:	602f      	str	r7, [r5, #0]
 80114b0:	b1b9      	cbz	r1, 80114e2 <__sflush_r+0xae>
 80114b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114b6:	4299      	cmp	r1, r3
 80114b8:	d002      	beq.n	80114c0 <__sflush_r+0x8c>
 80114ba:	4628      	mov	r0, r5
 80114bc:	f7ff f9e0 	bl	8010880 <_free_r>
 80114c0:	2300      	movs	r3, #0
 80114c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80114c4:	e00d      	b.n	80114e2 <__sflush_r+0xae>
 80114c6:	2301      	movs	r3, #1
 80114c8:	4628      	mov	r0, r5
 80114ca:	47b0      	blx	r6
 80114cc:	4602      	mov	r2, r0
 80114ce:	1c50      	adds	r0, r2, #1
 80114d0:	d1c9      	bne.n	8011466 <__sflush_r+0x32>
 80114d2:	682b      	ldr	r3, [r5, #0]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d0c6      	beq.n	8011466 <__sflush_r+0x32>
 80114d8:	2b1d      	cmp	r3, #29
 80114da:	d001      	beq.n	80114e0 <__sflush_r+0xac>
 80114dc:	2b16      	cmp	r3, #22
 80114de:	d11e      	bne.n	801151e <__sflush_r+0xea>
 80114e0:	602f      	str	r7, [r5, #0]
 80114e2:	2000      	movs	r0, #0
 80114e4:	e022      	b.n	801152c <__sflush_r+0xf8>
 80114e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114ea:	b21b      	sxth	r3, r3
 80114ec:	e01b      	b.n	8011526 <__sflush_r+0xf2>
 80114ee:	690f      	ldr	r7, [r1, #16]
 80114f0:	2f00      	cmp	r7, #0
 80114f2:	d0f6      	beq.n	80114e2 <__sflush_r+0xae>
 80114f4:	0793      	lsls	r3, r2, #30
 80114f6:	680e      	ldr	r6, [r1, #0]
 80114f8:	bf08      	it	eq
 80114fa:	694b      	ldreq	r3, [r1, #20]
 80114fc:	600f      	str	r7, [r1, #0]
 80114fe:	bf18      	it	ne
 8011500:	2300      	movne	r3, #0
 8011502:	eba6 0807 	sub.w	r8, r6, r7
 8011506:	608b      	str	r3, [r1, #8]
 8011508:	f1b8 0f00 	cmp.w	r8, #0
 801150c:	dde9      	ble.n	80114e2 <__sflush_r+0xae>
 801150e:	6a21      	ldr	r1, [r4, #32]
 8011510:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011512:	4643      	mov	r3, r8
 8011514:	463a      	mov	r2, r7
 8011516:	4628      	mov	r0, r5
 8011518:	47b0      	blx	r6
 801151a:	2800      	cmp	r0, #0
 801151c:	dc08      	bgt.n	8011530 <__sflush_r+0xfc>
 801151e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011526:	81a3      	strh	r3, [r4, #12]
 8011528:	f04f 30ff 	mov.w	r0, #4294967295
 801152c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011530:	4407      	add	r7, r0
 8011532:	eba8 0800 	sub.w	r8, r8, r0
 8011536:	e7e7      	b.n	8011508 <__sflush_r+0xd4>
 8011538:	dfbffffe 	.word	0xdfbffffe

0801153c <_fflush_r>:
 801153c:	b538      	push	{r3, r4, r5, lr}
 801153e:	690b      	ldr	r3, [r1, #16]
 8011540:	4605      	mov	r5, r0
 8011542:	460c      	mov	r4, r1
 8011544:	b913      	cbnz	r3, 801154c <_fflush_r+0x10>
 8011546:	2500      	movs	r5, #0
 8011548:	4628      	mov	r0, r5
 801154a:	bd38      	pop	{r3, r4, r5, pc}
 801154c:	b118      	cbz	r0, 8011556 <_fflush_r+0x1a>
 801154e:	6a03      	ldr	r3, [r0, #32]
 8011550:	b90b      	cbnz	r3, 8011556 <_fflush_r+0x1a>
 8011552:	f7fe fa21 	bl	800f998 <__sinit>
 8011556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d0f3      	beq.n	8011546 <_fflush_r+0xa>
 801155e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011560:	07d0      	lsls	r0, r2, #31
 8011562:	d404      	bmi.n	801156e <_fflush_r+0x32>
 8011564:	0599      	lsls	r1, r3, #22
 8011566:	d402      	bmi.n	801156e <_fflush_r+0x32>
 8011568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801156a:	f7fe fb2c 	bl	800fbc6 <__retarget_lock_acquire_recursive>
 801156e:	4628      	mov	r0, r5
 8011570:	4621      	mov	r1, r4
 8011572:	f7ff ff5f 	bl	8011434 <__sflush_r>
 8011576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011578:	07da      	lsls	r2, r3, #31
 801157a:	4605      	mov	r5, r0
 801157c:	d4e4      	bmi.n	8011548 <_fflush_r+0xc>
 801157e:	89a3      	ldrh	r3, [r4, #12]
 8011580:	059b      	lsls	r3, r3, #22
 8011582:	d4e1      	bmi.n	8011548 <_fflush_r+0xc>
 8011584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011586:	f7fe fb1f 	bl	800fbc8 <__retarget_lock_release_recursive>
 801158a:	e7dd      	b.n	8011548 <_fflush_r+0xc>

0801158c <memmove>:
 801158c:	4288      	cmp	r0, r1
 801158e:	b510      	push	{r4, lr}
 8011590:	eb01 0402 	add.w	r4, r1, r2
 8011594:	d902      	bls.n	801159c <memmove+0x10>
 8011596:	4284      	cmp	r4, r0
 8011598:	4623      	mov	r3, r4
 801159a:	d807      	bhi.n	80115ac <memmove+0x20>
 801159c:	1e43      	subs	r3, r0, #1
 801159e:	42a1      	cmp	r1, r4
 80115a0:	d008      	beq.n	80115b4 <memmove+0x28>
 80115a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80115a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80115aa:	e7f8      	b.n	801159e <memmove+0x12>
 80115ac:	4402      	add	r2, r0
 80115ae:	4601      	mov	r1, r0
 80115b0:	428a      	cmp	r2, r1
 80115b2:	d100      	bne.n	80115b6 <memmove+0x2a>
 80115b4:	bd10      	pop	{r4, pc}
 80115b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80115ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80115be:	e7f7      	b.n	80115b0 <memmove+0x24>

080115c0 <_sbrk_r>:
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	4d06      	ldr	r5, [pc, #24]	@ (80115dc <_sbrk_r+0x1c>)
 80115c4:	2300      	movs	r3, #0
 80115c6:	4604      	mov	r4, r0
 80115c8:	4608      	mov	r0, r1
 80115ca:	602b      	str	r3, [r5, #0]
 80115cc:	f7f0 f994 	bl	80018f8 <_sbrk>
 80115d0:	1c43      	adds	r3, r0, #1
 80115d2:	d102      	bne.n	80115da <_sbrk_r+0x1a>
 80115d4:	682b      	ldr	r3, [r5, #0]
 80115d6:	b103      	cbz	r3, 80115da <_sbrk_r+0x1a>
 80115d8:	6023      	str	r3, [r4, #0]
 80115da:	bd38      	pop	{r3, r4, r5, pc}
 80115dc:	20006ca0 	.word	0x20006ca0

080115e0 <__assert_func>:
 80115e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115e2:	4614      	mov	r4, r2
 80115e4:	461a      	mov	r2, r3
 80115e6:	4b09      	ldr	r3, [pc, #36]	@ (801160c <__assert_func+0x2c>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4605      	mov	r5, r0
 80115ec:	68d8      	ldr	r0, [r3, #12]
 80115ee:	b954      	cbnz	r4, 8011606 <__assert_func+0x26>
 80115f0:	4b07      	ldr	r3, [pc, #28]	@ (8011610 <__assert_func+0x30>)
 80115f2:	461c      	mov	r4, r3
 80115f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80115f8:	9100      	str	r1, [sp, #0]
 80115fa:	462b      	mov	r3, r5
 80115fc:	4905      	ldr	r1, [pc, #20]	@ (8011614 <__assert_func+0x34>)
 80115fe:	f000 f86f 	bl	80116e0 <fiprintf>
 8011602:	f000 f87f 	bl	8011704 <abort>
 8011606:	4b04      	ldr	r3, [pc, #16]	@ (8011618 <__assert_func+0x38>)
 8011608:	e7f4      	b.n	80115f4 <__assert_func+0x14>
 801160a:	bf00      	nop
 801160c:	20000198 	.word	0x20000198
 8011610:	08013afe 	.word	0x08013afe
 8011614:	08013ad0 	.word	0x08013ad0
 8011618:	08013ac3 	.word	0x08013ac3

0801161c <_calloc_r>:
 801161c:	b570      	push	{r4, r5, r6, lr}
 801161e:	fba1 5402 	umull	r5, r4, r1, r2
 8011622:	b93c      	cbnz	r4, 8011634 <_calloc_r+0x18>
 8011624:	4629      	mov	r1, r5
 8011626:	f7ff f99f 	bl	8010968 <_malloc_r>
 801162a:	4606      	mov	r6, r0
 801162c:	b928      	cbnz	r0, 801163a <_calloc_r+0x1e>
 801162e:	2600      	movs	r6, #0
 8011630:	4630      	mov	r0, r6
 8011632:	bd70      	pop	{r4, r5, r6, pc}
 8011634:	220c      	movs	r2, #12
 8011636:	6002      	str	r2, [r0, #0]
 8011638:	e7f9      	b.n	801162e <_calloc_r+0x12>
 801163a:	462a      	mov	r2, r5
 801163c:	4621      	mov	r1, r4
 801163e:	f7fe fa44 	bl	800faca <memset>
 8011642:	e7f5      	b.n	8011630 <_calloc_r+0x14>

08011644 <__ascii_mbtowc>:
 8011644:	b082      	sub	sp, #8
 8011646:	b901      	cbnz	r1, 801164a <__ascii_mbtowc+0x6>
 8011648:	a901      	add	r1, sp, #4
 801164a:	b142      	cbz	r2, 801165e <__ascii_mbtowc+0x1a>
 801164c:	b14b      	cbz	r3, 8011662 <__ascii_mbtowc+0x1e>
 801164e:	7813      	ldrb	r3, [r2, #0]
 8011650:	600b      	str	r3, [r1, #0]
 8011652:	7812      	ldrb	r2, [r2, #0]
 8011654:	1e10      	subs	r0, r2, #0
 8011656:	bf18      	it	ne
 8011658:	2001      	movne	r0, #1
 801165a:	b002      	add	sp, #8
 801165c:	4770      	bx	lr
 801165e:	4610      	mov	r0, r2
 8011660:	e7fb      	b.n	801165a <__ascii_mbtowc+0x16>
 8011662:	f06f 0001 	mvn.w	r0, #1
 8011666:	e7f8      	b.n	801165a <__ascii_mbtowc+0x16>

08011668 <_realloc_r>:
 8011668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801166c:	4680      	mov	r8, r0
 801166e:	4615      	mov	r5, r2
 8011670:	460c      	mov	r4, r1
 8011672:	b921      	cbnz	r1, 801167e <_realloc_r+0x16>
 8011674:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011678:	4611      	mov	r1, r2
 801167a:	f7ff b975 	b.w	8010968 <_malloc_r>
 801167e:	b92a      	cbnz	r2, 801168c <_realloc_r+0x24>
 8011680:	f7ff f8fe 	bl	8010880 <_free_r>
 8011684:	2400      	movs	r4, #0
 8011686:	4620      	mov	r0, r4
 8011688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801168c:	f000 f841 	bl	8011712 <_malloc_usable_size_r>
 8011690:	4285      	cmp	r5, r0
 8011692:	4606      	mov	r6, r0
 8011694:	d802      	bhi.n	801169c <_realloc_r+0x34>
 8011696:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801169a:	d8f4      	bhi.n	8011686 <_realloc_r+0x1e>
 801169c:	4629      	mov	r1, r5
 801169e:	4640      	mov	r0, r8
 80116a0:	f7ff f962 	bl	8010968 <_malloc_r>
 80116a4:	4607      	mov	r7, r0
 80116a6:	2800      	cmp	r0, #0
 80116a8:	d0ec      	beq.n	8011684 <_realloc_r+0x1c>
 80116aa:	42b5      	cmp	r5, r6
 80116ac:	462a      	mov	r2, r5
 80116ae:	4621      	mov	r1, r4
 80116b0:	bf28      	it	cs
 80116b2:	4632      	movcs	r2, r6
 80116b4:	f7fe fa89 	bl	800fbca <memcpy>
 80116b8:	4621      	mov	r1, r4
 80116ba:	4640      	mov	r0, r8
 80116bc:	f7ff f8e0 	bl	8010880 <_free_r>
 80116c0:	463c      	mov	r4, r7
 80116c2:	e7e0      	b.n	8011686 <_realloc_r+0x1e>

080116c4 <__ascii_wctomb>:
 80116c4:	4603      	mov	r3, r0
 80116c6:	4608      	mov	r0, r1
 80116c8:	b141      	cbz	r1, 80116dc <__ascii_wctomb+0x18>
 80116ca:	2aff      	cmp	r2, #255	@ 0xff
 80116cc:	d904      	bls.n	80116d8 <__ascii_wctomb+0x14>
 80116ce:	228a      	movs	r2, #138	@ 0x8a
 80116d0:	601a      	str	r2, [r3, #0]
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295
 80116d6:	4770      	bx	lr
 80116d8:	700a      	strb	r2, [r1, #0]
 80116da:	2001      	movs	r0, #1
 80116dc:	4770      	bx	lr
	...

080116e0 <fiprintf>:
 80116e0:	b40e      	push	{r1, r2, r3}
 80116e2:	b503      	push	{r0, r1, lr}
 80116e4:	4601      	mov	r1, r0
 80116e6:	ab03      	add	r3, sp, #12
 80116e8:	4805      	ldr	r0, [pc, #20]	@ (8011700 <fiprintf+0x20>)
 80116ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80116ee:	6800      	ldr	r0, [r0, #0]
 80116f0:	9301      	str	r3, [sp, #4]
 80116f2:	f000 f83f 	bl	8011774 <_vfiprintf_r>
 80116f6:	b002      	add	sp, #8
 80116f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80116fc:	b003      	add	sp, #12
 80116fe:	4770      	bx	lr
 8011700:	20000198 	.word	0x20000198

08011704 <abort>:
 8011704:	b508      	push	{r3, lr}
 8011706:	2006      	movs	r0, #6
 8011708:	f000 fa08 	bl	8011b1c <raise>
 801170c:	2001      	movs	r0, #1
 801170e:	f7f0 f87b 	bl	8001808 <_exit>

08011712 <_malloc_usable_size_r>:
 8011712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011716:	1f18      	subs	r0, r3, #4
 8011718:	2b00      	cmp	r3, #0
 801171a:	bfbc      	itt	lt
 801171c:	580b      	ldrlt	r3, [r1, r0]
 801171e:	18c0      	addlt	r0, r0, r3
 8011720:	4770      	bx	lr

08011722 <__sfputc_r>:
 8011722:	6893      	ldr	r3, [r2, #8]
 8011724:	3b01      	subs	r3, #1
 8011726:	2b00      	cmp	r3, #0
 8011728:	b410      	push	{r4}
 801172a:	6093      	str	r3, [r2, #8]
 801172c:	da08      	bge.n	8011740 <__sfputc_r+0x1e>
 801172e:	6994      	ldr	r4, [r2, #24]
 8011730:	42a3      	cmp	r3, r4
 8011732:	db01      	blt.n	8011738 <__sfputc_r+0x16>
 8011734:	290a      	cmp	r1, #10
 8011736:	d103      	bne.n	8011740 <__sfputc_r+0x1e>
 8011738:	f85d 4b04 	ldr.w	r4, [sp], #4
 801173c:	f000 b932 	b.w	80119a4 <__swbuf_r>
 8011740:	6813      	ldr	r3, [r2, #0]
 8011742:	1c58      	adds	r0, r3, #1
 8011744:	6010      	str	r0, [r2, #0]
 8011746:	7019      	strb	r1, [r3, #0]
 8011748:	4608      	mov	r0, r1
 801174a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801174e:	4770      	bx	lr

08011750 <__sfputs_r>:
 8011750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011752:	4606      	mov	r6, r0
 8011754:	460f      	mov	r7, r1
 8011756:	4614      	mov	r4, r2
 8011758:	18d5      	adds	r5, r2, r3
 801175a:	42ac      	cmp	r4, r5
 801175c:	d101      	bne.n	8011762 <__sfputs_r+0x12>
 801175e:	2000      	movs	r0, #0
 8011760:	e007      	b.n	8011772 <__sfputs_r+0x22>
 8011762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011766:	463a      	mov	r2, r7
 8011768:	4630      	mov	r0, r6
 801176a:	f7ff ffda 	bl	8011722 <__sfputc_r>
 801176e:	1c43      	adds	r3, r0, #1
 8011770:	d1f3      	bne.n	801175a <__sfputs_r+0xa>
 8011772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011774 <_vfiprintf_r>:
 8011774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011778:	460d      	mov	r5, r1
 801177a:	b09d      	sub	sp, #116	@ 0x74
 801177c:	4614      	mov	r4, r2
 801177e:	4698      	mov	r8, r3
 8011780:	4606      	mov	r6, r0
 8011782:	b118      	cbz	r0, 801178c <_vfiprintf_r+0x18>
 8011784:	6a03      	ldr	r3, [r0, #32]
 8011786:	b90b      	cbnz	r3, 801178c <_vfiprintf_r+0x18>
 8011788:	f7fe f906 	bl	800f998 <__sinit>
 801178c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801178e:	07d9      	lsls	r1, r3, #31
 8011790:	d405      	bmi.n	801179e <_vfiprintf_r+0x2a>
 8011792:	89ab      	ldrh	r3, [r5, #12]
 8011794:	059a      	lsls	r2, r3, #22
 8011796:	d402      	bmi.n	801179e <_vfiprintf_r+0x2a>
 8011798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801179a:	f7fe fa14 	bl	800fbc6 <__retarget_lock_acquire_recursive>
 801179e:	89ab      	ldrh	r3, [r5, #12]
 80117a0:	071b      	lsls	r3, r3, #28
 80117a2:	d501      	bpl.n	80117a8 <_vfiprintf_r+0x34>
 80117a4:	692b      	ldr	r3, [r5, #16]
 80117a6:	b99b      	cbnz	r3, 80117d0 <_vfiprintf_r+0x5c>
 80117a8:	4629      	mov	r1, r5
 80117aa:	4630      	mov	r0, r6
 80117ac:	f000 f938 	bl	8011a20 <__swsetup_r>
 80117b0:	b170      	cbz	r0, 80117d0 <_vfiprintf_r+0x5c>
 80117b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117b4:	07dc      	lsls	r4, r3, #31
 80117b6:	d504      	bpl.n	80117c2 <_vfiprintf_r+0x4e>
 80117b8:	f04f 30ff 	mov.w	r0, #4294967295
 80117bc:	b01d      	add	sp, #116	@ 0x74
 80117be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c2:	89ab      	ldrh	r3, [r5, #12]
 80117c4:	0598      	lsls	r0, r3, #22
 80117c6:	d4f7      	bmi.n	80117b8 <_vfiprintf_r+0x44>
 80117c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117ca:	f7fe f9fd 	bl	800fbc8 <__retarget_lock_release_recursive>
 80117ce:	e7f3      	b.n	80117b8 <_vfiprintf_r+0x44>
 80117d0:	2300      	movs	r3, #0
 80117d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80117d4:	2320      	movs	r3, #32
 80117d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80117da:	f8cd 800c 	str.w	r8, [sp, #12]
 80117de:	2330      	movs	r3, #48	@ 0x30
 80117e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011990 <_vfiprintf_r+0x21c>
 80117e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80117e8:	f04f 0901 	mov.w	r9, #1
 80117ec:	4623      	mov	r3, r4
 80117ee:	469a      	mov	sl, r3
 80117f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117f4:	b10a      	cbz	r2, 80117fa <_vfiprintf_r+0x86>
 80117f6:	2a25      	cmp	r2, #37	@ 0x25
 80117f8:	d1f9      	bne.n	80117ee <_vfiprintf_r+0x7a>
 80117fa:	ebba 0b04 	subs.w	fp, sl, r4
 80117fe:	d00b      	beq.n	8011818 <_vfiprintf_r+0xa4>
 8011800:	465b      	mov	r3, fp
 8011802:	4622      	mov	r2, r4
 8011804:	4629      	mov	r1, r5
 8011806:	4630      	mov	r0, r6
 8011808:	f7ff ffa2 	bl	8011750 <__sfputs_r>
 801180c:	3001      	adds	r0, #1
 801180e:	f000 80a7 	beq.w	8011960 <_vfiprintf_r+0x1ec>
 8011812:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011814:	445a      	add	r2, fp
 8011816:	9209      	str	r2, [sp, #36]	@ 0x24
 8011818:	f89a 3000 	ldrb.w	r3, [sl]
 801181c:	2b00      	cmp	r3, #0
 801181e:	f000 809f 	beq.w	8011960 <_vfiprintf_r+0x1ec>
 8011822:	2300      	movs	r3, #0
 8011824:	f04f 32ff 	mov.w	r2, #4294967295
 8011828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801182c:	f10a 0a01 	add.w	sl, sl, #1
 8011830:	9304      	str	r3, [sp, #16]
 8011832:	9307      	str	r3, [sp, #28]
 8011834:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011838:	931a      	str	r3, [sp, #104]	@ 0x68
 801183a:	4654      	mov	r4, sl
 801183c:	2205      	movs	r2, #5
 801183e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011842:	4853      	ldr	r0, [pc, #332]	@ (8011990 <_vfiprintf_r+0x21c>)
 8011844:	f7ee fcd4 	bl	80001f0 <memchr>
 8011848:	9a04      	ldr	r2, [sp, #16]
 801184a:	b9d8      	cbnz	r0, 8011884 <_vfiprintf_r+0x110>
 801184c:	06d1      	lsls	r1, r2, #27
 801184e:	bf44      	itt	mi
 8011850:	2320      	movmi	r3, #32
 8011852:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011856:	0713      	lsls	r3, r2, #28
 8011858:	bf44      	itt	mi
 801185a:	232b      	movmi	r3, #43	@ 0x2b
 801185c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011860:	f89a 3000 	ldrb.w	r3, [sl]
 8011864:	2b2a      	cmp	r3, #42	@ 0x2a
 8011866:	d015      	beq.n	8011894 <_vfiprintf_r+0x120>
 8011868:	9a07      	ldr	r2, [sp, #28]
 801186a:	4654      	mov	r4, sl
 801186c:	2000      	movs	r0, #0
 801186e:	f04f 0c0a 	mov.w	ip, #10
 8011872:	4621      	mov	r1, r4
 8011874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011878:	3b30      	subs	r3, #48	@ 0x30
 801187a:	2b09      	cmp	r3, #9
 801187c:	d94b      	bls.n	8011916 <_vfiprintf_r+0x1a2>
 801187e:	b1b0      	cbz	r0, 80118ae <_vfiprintf_r+0x13a>
 8011880:	9207      	str	r2, [sp, #28]
 8011882:	e014      	b.n	80118ae <_vfiprintf_r+0x13a>
 8011884:	eba0 0308 	sub.w	r3, r0, r8
 8011888:	fa09 f303 	lsl.w	r3, r9, r3
 801188c:	4313      	orrs	r3, r2
 801188e:	9304      	str	r3, [sp, #16]
 8011890:	46a2      	mov	sl, r4
 8011892:	e7d2      	b.n	801183a <_vfiprintf_r+0xc6>
 8011894:	9b03      	ldr	r3, [sp, #12]
 8011896:	1d19      	adds	r1, r3, #4
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	9103      	str	r1, [sp, #12]
 801189c:	2b00      	cmp	r3, #0
 801189e:	bfbb      	ittet	lt
 80118a0:	425b      	neglt	r3, r3
 80118a2:	f042 0202 	orrlt.w	r2, r2, #2
 80118a6:	9307      	strge	r3, [sp, #28]
 80118a8:	9307      	strlt	r3, [sp, #28]
 80118aa:	bfb8      	it	lt
 80118ac:	9204      	strlt	r2, [sp, #16]
 80118ae:	7823      	ldrb	r3, [r4, #0]
 80118b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80118b2:	d10a      	bne.n	80118ca <_vfiprintf_r+0x156>
 80118b4:	7863      	ldrb	r3, [r4, #1]
 80118b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80118b8:	d132      	bne.n	8011920 <_vfiprintf_r+0x1ac>
 80118ba:	9b03      	ldr	r3, [sp, #12]
 80118bc:	1d1a      	adds	r2, r3, #4
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	9203      	str	r2, [sp, #12]
 80118c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80118c6:	3402      	adds	r4, #2
 80118c8:	9305      	str	r3, [sp, #20]
 80118ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80119a0 <_vfiprintf_r+0x22c>
 80118ce:	7821      	ldrb	r1, [r4, #0]
 80118d0:	2203      	movs	r2, #3
 80118d2:	4650      	mov	r0, sl
 80118d4:	f7ee fc8c 	bl	80001f0 <memchr>
 80118d8:	b138      	cbz	r0, 80118ea <_vfiprintf_r+0x176>
 80118da:	9b04      	ldr	r3, [sp, #16]
 80118dc:	eba0 000a 	sub.w	r0, r0, sl
 80118e0:	2240      	movs	r2, #64	@ 0x40
 80118e2:	4082      	lsls	r2, r0
 80118e4:	4313      	orrs	r3, r2
 80118e6:	3401      	adds	r4, #1
 80118e8:	9304      	str	r3, [sp, #16]
 80118ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118ee:	4829      	ldr	r0, [pc, #164]	@ (8011994 <_vfiprintf_r+0x220>)
 80118f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80118f4:	2206      	movs	r2, #6
 80118f6:	f7ee fc7b 	bl	80001f0 <memchr>
 80118fa:	2800      	cmp	r0, #0
 80118fc:	d03f      	beq.n	801197e <_vfiprintf_r+0x20a>
 80118fe:	4b26      	ldr	r3, [pc, #152]	@ (8011998 <_vfiprintf_r+0x224>)
 8011900:	bb1b      	cbnz	r3, 801194a <_vfiprintf_r+0x1d6>
 8011902:	9b03      	ldr	r3, [sp, #12]
 8011904:	3307      	adds	r3, #7
 8011906:	f023 0307 	bic.w	r3, r3, #7
 801190a:	3308      	adds	r3, #8
 801190c:	9303      	str	r3, [sp, #12]
 801190e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011910:	443b      	add	r3, r7
 8011912:	9309      	str	r3, [sp, #36]	@ 0x24
 8011914:	e76a      	b.n	80117ec <_vfiprintf_r+0x78>
 8011916:	fb0c 3202 	mla	r2, ip, r2, r3
 801191a:	460c      	mov	r4, r1
 801191c:	2001      	movs	r0, #1
 801191e:	e7a8      	b.n	8011872 <_vfiprintf_r+0xfe>
 8011920:	2300      	movs	r3, #0
 8011922:	3401      	adds	r4, #1
 8011924:	9305      	str	r3, [sp, #20]
 8011926:	4619      	mov	r1, r3
 8011928:	f04f 0c0a 	mov.w	ip, #10
 801192c:	4620      	mov	r0, r4
 801192e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011932:	3a30      	subs	r2, #48	@ 0x30
 8011934:	2a09      	cmp	r2, #9
 8011936:	d903      	bls.n	8011940 <_vfiprintf_r+0x1cc>
 8011938:	2b00      	cmp	r3, #0
 801193a:	d0c6      	beq.n	80118ca <_vfiprintf_r+0x156>
 801193c:	9105      	str	r1, [sp, #20]
 801193e:	e7c4      	b.n	80118ca <_vfiprintf_r+0x156>
 8011940:	fb0c 2101 	mla	r1, ip, r1, r2
 8011944:	4604      	mov	r4, r0
 8011946:	2301      	movs	r3, #1
 8011948:	e7f0      	b.n	801192c <_vfiprintf_r+0x1b8>
 801194a:	ab03      	add	r3, sp, #12
 801194c:	9300      	str	r3, [sp, #0]
 801194e:	462a      	mov	r2, r5
 8011950:	4b12      	ldr	r3, [pc, #72]	@ (801199c <_vfiprintf_r+0x228>)
 8011952:	a904      	add	r1, sp, #16
 8011954:	4630      	mov	r0, r6
 8011956:	f7fd fbdb 	bl	800f110 <_printf_float>
 801195a:	4607      	mov	r7, r0
 801195c:	1c78      	adds	r0, r7, #1
 801195e:	d1d6      	bne.n	801190e <_vfiprintf_r+0x19a>
 8011960:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011962:	07d9      	lsls	r1, r3, #31
 8011964:	d405      	bmi.n	8011972 <_vfiprintf_r+0x1fe>
 8011966:	89ab      	ldrh	r3, [r5, #12]
 8011968:	059a      	lsls	r2, r3, #22
 801196a:	d402      	bmi.n	8011972 <_vfiprintf_r+0x1fe>
 801196c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801196e:	f7fe f92b 	bl	800fbc8 <__retarget_lock_release_recursive>
 8011972:	89ab      	ldrh	r3, [r5, #12]
 8011974:	065b      	lsls	r3, r3, #25
 8011976:	f53f af1f 	bmi.w	80117b8 <_vfiprintf_r+0x44>
 801197a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801197c:	e71e      	b.n	80117bc <_vfiprintf_r+0x48>
 801197e:	ab03      	add	r3, sp, #12
 8011980:	9300      	str	r3, [sp, #0]
 8011982:	462a      	mov	r2, r5
 8011984:	4b05      	ldr	r3, [pc, #20]	@ (801199c <_vfiprintf_r+0x228>)
 8011986:	a904      	add	r1, sp, #16
 8011988:	4630      	mov	r0, r6
 801198a:	f7fd fe59 	bl	800f640 <_printf_i>
 801198e:	e7e4      	b.n	801195a <_vfiprintf_r+0x1e6>
 8011990:	08013aa8 	.word	0x08013aa8
 8011994:	08013ab2 	.word	0x08013ab2
 8011998:	0800f111 	.word	0x0800f111
 801199c:	08011751 	.word	0x08011751
 80119a0:	08013aae 	.word	0x08013aae

080119a4 <__swbuf_r>:
 80119a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119a6:	460e      	mov	r6, r1
 80119a8:	4614      	mov	r4, r2
 80119aa:	4605      	mov	r5, r0
 80119ac:	b118      	cbz	r0, 80119b6 <__swbuf_r+0x12>
 80119ae:	6a03      	ldr	r3, [r0, #32]
 80119b0:	b90b      	cbnz	r3, 80119b6 <__swbuf_r+0x12>
 80119b2:	f7fd fff1 	bl	800f998 <__sinit>
 80119b6:	69a3      	ldr	r3, [r4, #24]
 80119b8:	60a3      	str	r3, [r4, #8]
 80119ba:	89a3      	ldrh	r3, [r4, #12]
 80119bc:	071a      	lsls	r2, r3, #28
 80119be:	d501      	bpl.n	80119c4 <__swbuf_r+0x20>
 80119c0:	6923      	ldr	r3, [r4, #16]
 80119c2:	b943      	cbnz	r3, 80119d6 <__swbuf_r+0x32>
 80119c4:	4621      	mov	r1, r4
 80119c6:	4628      	mov	r0, r5
 80119c8:	f000 f82a 	bl	8011a20 <__swsetup_r>
 80119cc:	b118      	cbz	r0, 80119d6 <__swbuf_r+0x32>
 80119ce:	f04f 37ff 	mov.w	r7, #4294967295
 80119d2:	4638      	mov	r0, r7
 80119d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119d6:	6823      	ldr	r3, [r4, #0]
 80119d8:	6922      	ldr	r2, [r4, #16]
 80119da:	1a98      	subs	r0, r3, r2
 80119dc:	6963      	ldr	r3, [r4, #20]
 80119de:	b2f6      	uxtb	r6, r6
 80119e0:	4283      	cmp	r3, r0
 80119e2:	4637      	mov	r7, r6
 80119e4:	dc05      	bgt.n	80119f2 <__swbuf_r+0x4e>
 80119e6:	4621      	mov	r1, r4
 80119e8:	4628      	mov	r0, r5
 80119ea:	f7ff fda7 	bl	801153c <_fflush_r>
 80119ee:	2800      	cmp	r0, #0
 80119f0:	d1ed      	bne.n	80119ce <__swbuf_r+0x2a>
 80119f2:	68a3      	ldr	r3, [r4, #8]
 80119f4:	3b01      	subs	r3, #1
 80119f6:	60a3      	str	r3, [r4, #8]
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	6022      	str	r2, [r4, #0]
 80119fe:	701e      	strb	r6, [r3, #0]
 8011a00:	6962      	ldr	r2, [r4, #20]
 8011a02:	1c43      	adds	r3, r0, #1
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d004      	beq.n	8011a12 <__swbuf_r+0x6e>
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	07db      	lsls	r3, r3, #31
 8011a0c:	d5e1      	bpl.n	80119d2 <__swbuf_r+0x2e>
 8011a0e:	2e0a      	cmp	r6, #10
 8011a10:	d1df      	bne.n	80119d2 <__swbuf_r+0x2e>
 8011a12:	4621      	mov	r1, r4
 8011a14:	4628      	mov	r0, r5
 8011a16:	f7ff fd91 	bl	801153c <_fflush_r>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d0d9      	beq.n	80119d2 <__swbuf_r+0x2e>
 8011a1e:	e7d6      	b.n	80119ce <__swbuf_r+0x2a>

08011a20 <__swsetup_r>:
 8011a20:	b538      	push	{r3, r4, r5, lr}
 8011a22:	4b29      	ldr	r3, [pc, #164]	@ (8011ac8 <__swsetup_r+0xa8>)
 8011a24:	4605      	mov	r5, r0
 8011a26:	6818      	ldr	r0, [r3, #0]
 8011a28:	460c      	mov	r4, r1
 8011a2a:	b118      	cbz	r0, 8011a34 <__swsetup_r+0x14>
 8011a2c:	6a03      	ldr	r3, [r0, #32]
 8011a2e:	b90b      	cbnz	r3, 8011a34 <__swsetup_r+0x14>
 8011a30:	f7fd ffb2 	bl	800f998 <__sinit>
 8011a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a38:	0719      	lsls	r1, r3, #28
 8011a3a:	d422      	bmi.n	8011a82 <__swsetup_r+0x62>
 8011a3c:	06da      	lsls	r2, r3, #27
 8011a3e:	d407      	bmi.n	8011a50 <__swsetup_r+0x30>
 8011a40:	2209      	movs	r2, #9
 8011a42:	602a      	str	r2, [r5, #0]
 8011a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a48:	81a3      	strh	r3, [r4, #12]
 8011a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a4e:	e033      	b.n	8011ab8 <__swsetup_r+0x98>
 8011a50:	0758      	lsls	r0, r3, #29
 8011a52:	d512      	bpl.n	8011a7a <__swsetup_r+0x5a>
 8011a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011a56:	b141      	cbz	r1, 8011a6a <__swsetup_r+0x4a>
 8011a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011a5c:	4299      	cmp	r1, r3
 8011a5e:	d002      	beq.n	8011a66 <__swsetup_r+0x46>
 8011a60:	4628      	mov	r0, r5
 8011a62:	f7fe ff0d 	bl	8010880 <_free_r>
 8011a66:	2300      	movs	r3, #0
 8011a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8011a6a:	89a3      	ldrh	r3, [r4, #12]
 8011a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011a70:	81a3      	strh	r3, [r4, #12]
 8011a72:	2300      	movs	r3, #0
 8011a74:	6063      	str	r3, [r4, #4]
 8011a76:	6923      	ldr	r3, [r4, #16]
 8011a78:	6023      	str	r3, [r4, #0]
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	f043 0308 	orr.w	r3, r3, #8
 8011a80:	81a3      	strh	r3, [r4, #12]
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	b94b      	cbnz	r3, 8011a9a <__swsetup_r+0x7a>
 8011a86:	89a3      	ldrh	r3, [r4, #12]
 8011a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a90:	d003      	beq.n	8011a9a <__swsetup_r+0x7a>
 8011a92:	4621      	mov	r1, r4
 8011a94:	4628      	mov	r0, r5
 8011a96:	f000 f883 	bl	8011ba0 <__smakebuf_r>
 8011a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a9e:	f013 0201 	ands.w	r2, r3, #1
 8011aa2:	d00a      	beq.n	8011aba <__swsetup_r+0x9a>
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	60a2      	str	r2, [r4, #8]
 8011aa8:	6962      	ldr	r2, [r4, #20]
 8011aaa:	4252      	negs	r2, r2
 8011aac:	61a2      	str	r2, [r4, #24]
 8011aae:	6922      	ldr	r2, [r4, #16]
 8011ab0:	b942      	cbnz	r2, 8011ac4 <__swsetup_r+0xa4>
 8011ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011ab6:	d1c5      	bne.n	8011a44 <__swsetup_r+0x24>
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	0799      	lsls	r1, r3, #30
 8011abc:	bf58      	it	pl
 8011abe:	6962      	ldrpl	r2, [r4, #20]
 8011ac0:	60a2      	str	r2, [r4, #8]
 8011ac2:	e7f4      	b.n	8011aae <__swsetup_r+0x8e>
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	e7f7      	b.n	8011ab8 <__swsetup_r+0x98>
 8011ac8:	20000198 	.word	0x20000198

08011acc <_raise_r>:
 8011acc:	291f      	cmp	r1, #31
 8011ace:	b538      	push	{r3, r4, r5, lr}
 8011ad0:	4605      	mov	r5, r0
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	d904      	bls.n	8011ae0 <_raise_r+0x14>
 8011ad6:	2316      	movs	r3, #22
 8011ad8:	6003      	str	r3, [r0, #0]
 8011ada:	f04f 30ff 	mov.w	r0, #4294967295
 8011ade:	bd38      	pop	{r3, r4, r5, pc}
 8011ae0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ae2:	b112      	cbz	r2, 8011aea <_raise_r+0x1e>
 8011ae4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011ae8:	b94b      	cbnz	r3, 8011afe <_raise_r+0x32>
 8011aea:	4628      	mov	r0, r5
 8011aec:	f000 f830 	bl	8011b50 <_getpid_r>
 8011af0:	4622      	mov	r2, r4
 8011af2:	4601      	mov	r1, r0
 8011af4:	4628      	mov	r0, r5
 8011af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011afa:	f000 b817 	b.w	8011b2c <_kill_r>
 8011afe:	2b01      	cmp	r3, #1
 8011b00:	d00a      	beq.n	8011b18 <_raise_r+0x4c>
 8011b02:	1c59      	adds	r1, r3, #1
 8011b04:	d103      	bne.n	8011b0e <_raise_r+0x42>
 8011b06:	2316      	movs	r3, #22
 8011b08:	6003      	str	r3, [r0, #0]
 8011b0a:	2001      	movs	r0, #1
 8011b0c:	e7e7      	b.n	8011ade <_raise_r+0x12>
 8011b0e:	2100      	movs	r1, #0
 8011b10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011b14:	4620      	mov	r0, r4
 8011b16:	4798      	blx	r3
 8011b18:	2000      	movs	r0, #0
 8011b1a:	e7e0      	b.n	8011ade <_raise_r+0x12>

08011b1c <raise>:
 8011b1c:	4b02      	ldr	r3, [pc, #8]	@ (8011b28 <raise+0xc>)
 8011b1e:	4601      	mov	r1, r0
 8011b20:	6818      	ldr	r0, [r3, #0]
 8011b22:	f7ff bfd3 	b.w	8011acc <_raise_r>
 8011b26:	bf00      	nop
 8011b28:	20000198 	.word	0x20000198

08011b2c <_kill_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4d07      	ldr	r5, [pc, #28]	@ (8011b4c <_kill_r+0x20>)
 8011b30:	2300      	movs	r3, #0
 8011b32:	4604      	mov	r4, r0
 8011b34:	4608      	mov	r0, r1
 8011b36:	4611      	mov	r1, r2
 8011b38:	602b      	str	r3, [r5, #0]
 8011b3a:	f7ef fe55 	bl	80017e8 <_kill>
 8011b3e:	1c43      	adds	r3, r0, #1
 8011b40:	d102      	bne.n	8011b48 <_kill_r+0x1c>
 8011b42:	682b      	ldr	r3, [r5, #0]
 8011b44:	b103      	cbz	r3, 8011b48 <_kill_r+0x1c>
 8011b46:	6023      	str	r3, [r4, #0]
 8011b48:	bd38      	pop	{r3, r4, r5, pc}
 8011b4a:	bf00      	nop
 8011b4c:	20006ca0 	.word	0x20006ca0

08011b50 <_getpid_r>:
 8011b50:	f7ef be42 	b.w	80017d8 <_getpid>

08011b54 <__swhatbuf_r>:
 8011b54:	b570      	push	{r4, r5, r6, lr}
 8011b56:	460c      	mov	r4, r1
 8011b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b5c:	2900      	cmp	r1, #0
 8011b5e:	b096      	sub	sp, #88	@ 0x58
 8011b60:	4615      	mov	r5, r2
 8011b62:	461e      	mov	r6, r3
 8011b64:	da0d      	bge.n	8011b82 <__swhatbuf_r+0x2e>
 8011b66:	89a3      	ldrh	r3, [r4, #12]
 8011b68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011b6c:	f04f 0100 	mov.w	r1, #0
 8011b70:	bf14      	ite	ne
 8011b72:	2340      	movne	r3, #64	@ 0x40
 8011b74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011b78:	2000      	movs	r0, #0
 8011b7a:	6031      	str	r1, [r6, #0]
 8011b7c:	602b      	str	r3, [r5, #0]
 8011b7e:	b016      	add	sp, #88	@ 0x58
 8011b80:	bd70      	pop	{r4, r5, r6, pc}
 8011b82:	466a      	mov	r2, sp
 8011b84:	f000 f848 	bl	8011c18 <_fstat_r>
 8011b88:	2800      	cmp	r0, #0
 8011b8a:	dbec      	blt.n	8011b66 <__swhatbuf_r+0x12>
 8011b8c:	9901      	ldr	r1, [sp, #4]
 8011b8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011b92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011b96:	4259      	negs	r1, r3
 8011b98:	4159      	adcs	r1, r3
 8011b9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011b9e:	e7eb      	b.n	8011b78 <__swhatbuf_r+0x24>

08011ba0 <__smakebuf_r>:
 8011ba0:	898b      	ldrh	r3, [r1, #12]
 8011ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ba4:	079d      	lsls	r5, r3, #30
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	460c      	mov	r4, r1
 8011baa:	d507      	bpl.n	8011bbc <__smakebuf_r+0x1c>
 8011bac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	6123      	str	r3, [r4, #16]
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	6163      	str	r3, [r4, #20]
 8011bb8:	b003      	add	sp, #12
 8011bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bbc:	ab01      	add	r3, sp, #4
 8011bbe:	466a      	mov	r2, sp
 8011bc0:	f7ff ffc8 	bl	8011b54 <__swhatbuf_r>
 8011bc4:	9f00      	ldr	r7, [sp, #0]
 8011bc6:	4605      	mov	r5, r0
 8011bc8:	4639      	mov	r1, r7
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f7fe fecc 	bl	8010968 <_malloc_r>
 8011bd0:	b948      	cbnz	r0, 8011be6 <__smakebuf_r+0x46>
 8011bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bd6:	059a      	lsls	r2, r3, #22
 8011bd8:	d4ee      	bmi.n	8011bb8 <__smakebuf_r+0x18>
 8011bda:	f023 0303 	bic.w	r3, r3, #3
 8011bde:	f043 0302 	orr.w	r3, r3, #2
 8011be2:	81a3      	strh	r3, [r4, #12]
 8011be4:	e7e2      	b.n	8011bac <__smakebuf_r+0xc>
 8011be6:	89a3      	ldrh	r3, [r4, #12]
 8011be8:	6020      	str	r0, [r4, #0]
 8011bea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bee:	81a3      	strh	r3, [r4, #12]
 8011bf0:	9b01      	ldr	r3, [sp, #4]
 8011bf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011bf6:	b15b      	cbz	r3, 8011c10 <__smakebuf_r+0x70>
 8011bf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bfc:	4630      	mov	r0, r6
 8011bfe:	f000 f81d 	bl	8011c3c <_isatty_r>
 8011c02:	b128      	cbz	r0, 8011c10 <__smakebuf_r+0x70>
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	f023 0303 	bic.w	r3, r3, #3
 8011c0a:	f043 0301 	orr.w	r3, r3, #1
 8011c0e:	81a3      	strh	r3, [r4, #12]
 8011c10:	89a3      	ldrh	r3, [r4, #12]
 8011c12:	431d      	orrs	r5, r3
 8011c14:	81a5      	strh	r5, [r4, #12]
 8011c16:	e7cf      	b.n	8011bb8 <__smakebuf_r+0x18>

08011c18 <_fstat_r>:
 8011c18:	b538      	push	{r3, r4, r5, lr}
 8011c1a:	4d07      	ldr	r5, [pc, #28]	@ (8011c38 <_fstat_r+0x20>)
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	4604      	mov	r4, r0
 8011c20:	4608      	mov	r0, r1
 8011c22:	4611      	mov	r1, r2
 8011c24:	602b      	str	r3, [r5, #0]
 8011c26:	f7ef fe3f 	bl	80018a8 <_fstat>
 8011c2a:	1c43      	adds	r3, r0, #1
 8011c2c:	d102      	bne.n	8011c34 <_fstat_r+0x1c>
 8011c2e:	682b      	ldr	r3, [r5, #0]
 8011c30:	b103      	cbz	r3, 8011c34 <_fstat_r+0x1c>
 8011c32:	6023      	str	r3, [r4, #0]
 8011c34:	bd38      	pop	{r3, r4, r5, pc}
 8011c36:	bf00      	nop
 8011c38:	20006ca0 	.word	0x20006ca0

08011c3c <_isatty_r>:
 8011c3c:	b538      	push	{r3, r4, r5, lr}
 8011c3e:	4d06      	ldr	r5, [pc, #24]	@ (8011c58 <_isatty_r+0x1c>)
 8011c40:	2300      	movs	r3, #0
 8011c42:	4604      	mov	r4, r0
 8011c44:	4608      	mov	r0, r1
 8011c46:	602b      	str	r3, [r5, #0]
 8011c48:	f7ef fe3e 	bl	80018c8 <_isatty>
 8011c4c:	1c43      	adds	r3, r0, #1
 8011c4e:	d102      	bne.n	8011c56 <_isatty_r+0x1a>
 8011c50:	682b      	ldr	r3, [r5, #0]
 8011c52:	b103      	cbz	r3, 8011c56 <_isatty_r+0x1a>
 8011c54:	6023      	str	r3, [r4, #0]
 8011c56:	bd38      	pop	{r3, r4, r5, pc}
 8011c58:	20006ca0 	.word	0x20006ca0

08011c5c <_init>:
 8011c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c5e:	bf00      	nop
 8011c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c62:	bc08      	pop	{r3}
 8011c64:	469e      	mov	lr, r3
 8011c66:	4770      	bx	lr

08011c68 <_fini>:
 8011c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6a:	bf00      	nop
 8011c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c6e:	bc08      	pop	{r3}
 8011c70:	469e      	mov	lr, r3
 8011c72:	4770      	bx	lr
